<?xml version="1.0" encoding="utf-8"?>
<HTTPSnapshot xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="6">
  <HTTPTask id="200" hostname="13.233.120.29:4200" path="http://13.233.120.29:4200/main.js" url="http://13.233.120.29:4200/main.js" ip="13.233.120.29" port="80" connectionId="21" origin="Primary" frame="1" startDateTime="2020-10-01T13:27:08.295+05:30" startTime="620488187" endTime="620488187">
    <HTTPRequest method="GET">
      <HTTPHeaders>
        <HTTPHeaderEntity name="Host" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MTMuMjMzLjEyMC4yOTo0MjAw</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Origin" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aHR0cDovLzEzLjIzMy4xMjAuMjk6NDIwMA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="User-Agent" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDYuMDsgTmV4dXMgNSBCdWlsZC9NUkE1OE4pIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuMTIxIE1vYmlsZSBTYWZhcmkvNTM3LjM2</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Ki8q</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Referer" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aHR0cDovLzEzLjIzMy4xMjAuMjk6NDIwMC8=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Encoding" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Language" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="If-None-Match" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Vy8iMmEzNWNhLVFvSUVsVUFYdWVpVUYxTjBvazhINkEwOTZudyI=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>R0VUIGh0dHA6Ly8xMy4yMzMuMTIwLjI5OjQyMDAvbWFpbi5qcyBIVFRQLzEuMQ0KSG9zdDogMTMuMjMzLjEyMC4yOTo0MjAwDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQpPcmlnaW46IGh0dHA6Ly8xMy4yMzMuMTIwLjI5OjQyMDANClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA2LjA7IE5leHVzIDUgQnVpbGQvTVJBNThOKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjEyMSBNb2JpbGUgU2FmYXJpLzUzNy4zNg0KQWNjZXB0OiAqLyoNClJlZmVyZXI6IGh0dHA6Ly8xMy4yMzMuMTIwLjI5OjQyMDAvDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjkNCklmLU5vbmUtTWF0Y2g6IFcvIjJhMzVjYS1Rb0lFbFVBWHVlaVVGMU4wb2s4SDZBMDk2bnciDQoNCg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
    </HTTPRequest>
    <HTTPResponse>
      <contentLenght>2766282</contentLenght>
      <HTTPHeaders>
        <HTTPHeaderEntity name="X-Powered-By" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>RXhwcmVzcw==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Access-Control-Allow-Origin" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Kg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Ranges" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Ynl0ZXM=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Date" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>VGh1LCAwMSBPY3QgMjAyMCAwNzo1Mjo1OSBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Type" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdDsgY2hhcnNldD1VVEYtOA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Length" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Mjc2NjI4Mg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="ETag" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Vy8iMmEzNWNhLVFvSUVsVUFYdWVpVUYxTjBvazhINkEwOTZudyI=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SFRUUC8xLjEgMjAwIE9LDQpYLVBvd2VyZWQtQnk6IEV4cHJlc3MNCkFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbjogKg0KQWNjZXB0LVJhbmdlczogYnl0ZXMNCkRhdGU6IFRodSwgMDEgT2N0IDIwMjAgMDc6NTI6NTkgR01UDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQ7IGNoYXJzZXQ9VVRGLTgNCkNvbnRlbnQtTGVuZ3RoOiAyNzY2MjgyDQpFVGFnOiBXLyIyYTM1Y2EtUW9JRWxVQVh1ZWlVRjFOMG9rOEg2QTA5Nm53Ig0KDQo=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["main"],{

/***/ "./$$_lazy_route_resource lazy recursive":
/*!******************************************************!*\
  !*** ./$$_lazy_route_resource lazy namespace object ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"src/app/moduels/auth/auth.module": "./src/app/moduels/auth/auth.module.ts"
};

function webpackAsyncContext(req) {
	return Promise.resolve().then(function() {
		if(!__webpack_require__.o(map, req)) {
			var e = new Error("Cannot find module '" + req + "'");
			e.code = 'MODULE_NOT_FOUND';
			throw e;
		}

		var id = map[req];
		return __webpack_require__(id);
	});
}
webpackAsyncContext.keys = function webpackAsyncContextKeys() {
	return Object.keys(map);
};
webpackAsyncContext.id = "./$$_lazy_route_resource lazy recursive";
module.exports = webpackAsyncContext;

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/User/createorder-user/createorder-user.component.html":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/User/createorder-user/createorder-user.component.html ***!
  \*************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n<!-- Product & Warehouse Selection  -->\n<div class=\"container\" *ngIf=\"iteration == 'productWarehouseSelection'\">\n    <!-- Card -->\n    <div class=\"card card-cascade\">\n        <!-- Card image -->\n        <div class=\"view view-cascade gradient-card-header blue-gradient\">\n            <!-- Title -->\n            <h3 style=\"color: white;\"> Create Order - Warehouse Selection</h3>\n        </div>\n        <!-- Card content -->\n        <div class=\"card-body card-body-cascade text-center\">\n            <form name=\"form\" (ngSubmit)=\"f.form.valid && next()\" #f=\"ngForm\">\n                <div class=\"row\">\n                    <div class=\"col-md-6\">\n                        <div class=\"form-group\">\n                            <select class=\"form-control\" name=\"masterProducts\"\n                                [(ngModel)]=\"orderManagement1.masterProducts\" (ngModelChange)=\"onChangeProduct()\"\n                                #masterProducts=\"ngModel\"\n                                [ngClass]=\"{ 'is-invalid': f.submitted && masterProducts.invalid }\" required>\n                                <option [ngValue]=\"p\">Select Product</option>\n                                <option *ngFor=\"let masterProducts of masterProductsList\" [ngValue]=\"masterProducts\">\n                                    {{masterProducts.productName}}</option>\n                            </select>\n                            <div *ngIf=\"f.submitted && masterProducts.invalid\" class=\"invalid-feedback\">\n                                <div *ngIf=\"masterProducts.errors.required\">Please Select Product</div>\n                            </div>\n                        </div>\n                        <div class=\"form-group\">\n                            <select class=\"form-control\" name=\"orderManagement1.stateName\"\n                                [(ngModel)]=\"orderManagement1.stateName\" (ngModelChange)=\"onChangeFilter()\"\n                                #stateName=\"ngModel\" [ngClass]=\"{ 'is-invalid': f.submitted && stateName.invalid }\"\n                                required>\n                                <option [ngValue]=\"s\">Select State</option>\n                                <option *ngFor=\"let s of selectedStates\" [ngValue]=\"s\">\n                                    {{s}}</option>\n                            </select>\n                            <div *ngIf=\"f.submitted && stateName.invalid\" class=\"invalid-feedback\">\n                                <div *ngIf=\"stateName.errors.required\">Please Select State</div>\n                            </div>\n                        </div>\n                        <div class=\"form-group\">\n                            <select class=\"form-control\" class=\"form-control\" name=\"orderManagement1.warehouse\"\n                                [(ngModel)]=\"orderManagement1.warehouse\" (ngModelChange)=\"onChangeWarehouse()\"\n                                #warehouse=\"ngModel\" [ngClass]=\"{ 'is-invalid': f.submitted && warehouse.invalid }\"\n                                required>\n                                <option [ngValue]=\"w\">Select Warehouse</option>\n                                <option *ngFor=\"let w of warehouseList\" [ngValue]=\"w\">{{w.warehouseName}}</option>\n                            </select>\n                            <div *ngIf=\"f.submitted && warehouse.invalid\" class=\"invalid-feedback\">\n                                <div *ngIf=\"warehouse.errors.required\">Please Select Warehouse</div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"col-md-6\">\n                        <div class=\"form-group\">\n                            <select class=\"form-control\" name=\"orderManagement1.region\"\n                                [(ngModel)]=\"orderManagement1.region\" (ngModelChange)=\"onChangeFilter()\"\n                                #region=\"ngModel\" [ngClass]=\"{ 'is-invalid': f.submitted && region.invalid }\" required>\n                                <option [ngValue]=\"r\">Select Region</option>\n                                <option *ngFor=\"let r of selectedRegion\" [ngValue]=\"r\">\n                                    {{r}}</option>\n                            </select>\n                            <div *ngIf=\"f.submitted && region.invalid\" class=\"invalid-feedback\">\n                                <div *ngIf=\"region.errors.required\">Please Select Region</div>\n                            </div>\n                        </div>\n                        <div class=\"form-group\">\n                            <select class=\"form-control\" name=\"orderManagement1.cityName\"\n                                [(ngModel)]=\"orderManagement1.cityName\" (ngModelChange)=\"onChangeFilter()\"\n                                #cityName=\"ngModel\" [ngClass]=\"{ 'is-invalid': f.submitted && cityName.invalid }\"\n                                required>\n                                <option [ngValue]=\"c\">Select City</option>\n                                <option *ngFor=\"let c of selectedCity\" [ngValue]=\"c\">\n                                    {{c}}</option>\n                            </select>\n                            <div *ngIf=\"f.submitted && cityName.invalid\" class=\"invalid-feedback\">\n                                <div *ngIf=\"cityName.errors.required\">Please Select City</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-md-4\"></div>\n                    <div class=\"col-md-4\">\n                    </div>\n                    <div class=\"col-md-4\">\n                        <button type=\"button\" class=\"btn btn-default btn-lg back\"\n                            [routerLink]=\"['/dashboard']\">BACK</button>\n                        <button type=\"submit\" class=\"btn btn-success btn-lg social-btn\">PROCEED</button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n    <!-- Card -->\n</div>\n\n\n<div class=\"container importct\" *ngIf=\"iteration=='startPage'\">\n    <div class=\"row\">\n        <div class=\"col-sm-4\">\n        </div>\n        <div class=\"col-sm-4\">\n            <div class=\"card\" id=\"import\" *ngIf=\"!hideeq\">\n                <div class=\"card-header view view-cascade gradient-card-header blue-gradient imp\">\n                    Warehouse Selection Details\n                </div><br>\n                <div class=\"row\">\n                    <div class=\"col-sm-6\" id=\"importequipment\"> Equipment </div>\n                    <div class=\"col-sm-6\" id=\"importname\">\n                        <select class=\"form-control equp\" name=\"orderManagement.equipment\"\n                            [(ngModel)]=\"orderManagement.equipmentId\" (ngModelChange)=\"onChangeEquipment()\">\n                            <option [ngValue]=\"e\">Select Equipment</option>\n                            <option *ngFor=\"let e of equipmentList\" [ngValue]=\"e.equipmentId\">{{e.equipmentName}}\n                            </option>\n                        </select>\n                    </div>\n                </div>\n                <hr />\n                <div class=\"row\">\n                    <div class=\"col-sm-6\"> Product </div>\n                    <div class=\"col-sm-6\" id=\"importname\">\n                        {{orderManagement.productName}}\n                    </div>\n                </div>\n                <hr />\n                <div class=\"row\">\n                    <div class=\"col-sm-6\">State</div>\n                    <div class=\"col-sm-6\" id=\"importname\">\n                        {{orderManagement.stateName}}\n                    </div>\n                </div>\n                <hr />\n                <div class=\"row\">\n                    <div class=\"col-sm-6\">City</div>\n                    <div class=\"col-sm-6\" id=\"importname\">\n                        {{orderManagement.cityName}}\n                    </div>\n                </div>\n                <hr />\n                <div class=\"row\">\n                    <div class=\"col-sm-6\">Warehouse</div>\n                    <div class=\"col-sm-6\" id=\"importname\">\n                        {{orderManagement.warehouseName}}\n                    </div>\n                </div>\n                <hr />\n                <div class=\"row\">\n                    <div class=\"col-sm-6\" id=\"importequipment\">Action</div>\n                    <div class=\"col-sm-6\" id=\"importname\">\n                        <button type=\"button\" class=\"btn  btn-deep-orange\"\n                            (click)=\"onEditProductWarehouseSelection()\">Edit</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <form name=\"form\" (ngSubmit)=\"f.form.valid && onTopUp()\" #f=\"ngForm\">\n        <div class=\"row\" *ngIf=\"orderManagement.equipmentId !=0 && avg != null\">\n\n            <div class=\"col-sm-4\" id=\"wallet-1\">\n                <div class=\"card\" id=\"import\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient imp\">\n                        Warehouse Selection Details\n                    </div><br>\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\" id=\"importequipment\"> Equipment </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            <select class=\"form-control equp\" name=\"orderManagement.equipment\"\n                                [(ngModel)]=\"orderManagement.equipmentId\" (ngModelChange)=\"onChangeEquipment()\">\n                                <option [ngValue]=\"e\">Select Equipment</option>\n                                <option *ngFor=\"let e of equipmentList\" [ngValue]=\"e.equipmentId\">{{e.equipmentName}}\n                                </option>\n                            </select>\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\"> Product </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{orderManagement.productName}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">State</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{orderManagement.stateName}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">City</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{orderManagement.cityName}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Warehouse</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{orderManagement.warehouseName}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\" id=\"importequipment\">Action</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            <button type=\"button\" class=\"btn  btn-deep-orange\"\n                                (click)=\"onEditProductWarehouseSelection()\">Edit</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-sm-8\" id=\"importcol\">\n                <div class=\"card first\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient\">\n                        Create Order - Order Details\n                    </div>\n                    <div class=\"row\" id=\"import\">\n                        <div class=\"col-sm-12\" *ngIf=\"orderManagement.equipmentId !=0 && avg != null\">\n                            <h4 class=\"importtr\">Time Frame</h4>\n                        </div>\n\n                        <div class=\"col-sm-3\" *ngIf=\"orderManagement.equipmentId !=0 && avg != null\">\n                            <button type=\"button\" class=\"btn btn-outline-primary waves-effect btn-block\">1\n                                Month</button>\n                        </div>\n                        <div class=\"col-sm-3\" *ngIf=\"orderManagement.equipmentId !=0 && avg != null\">\n                            <button type=\"button\" class=\"btn btn-outline-primary waves-effect btn-block\">3\n                                Month</button>\n                        </div>\n                        <div class=\"col-sm-3\" *ngIf=\"orderManagement.equipmentId !=0 && avg != null\">\n                            <button type=\"button\" class=\"btn btn-outline-primary waves-effect btn-block\">6\n                                Month</button>\n                        </div>\n                        <div class=\"col-sm-3\" *ngIf=\"orderManagement.equipmentId !=0 && avg != null\">\n                            <button type=\"button\" class=\"btn btn-outline-primary waves-effect btn-block\">12\n                                Month</button>\n                        </div>\n\n\n                        <div class=\"col-sm-12\" *ngIf=\"orderManagement.equipmentId !=0 && avg != null\">\n                            <h4 class=\"importtr1\">Avg Consumption</h4>\n                        </div>\n                        <div class=\"col-sm-3\" *ngIf=\"orderManagement.equipmentId !=0 && avg != null\">\n                            <button type=\"button\" class=\"btn btn-outline-primary waves-effect btn-block\">\n                                {{avg.oneMonthAvgUnits}}\n                                {{orderManagement.unit}}\n                            </button>\n\n                        </div>\n                        <div class=\"col-sm-3\" *ngIf=\"orderManagement.equipmentId !=0 && avg != null\">\n                            <button type=\"button\" class=\"btn btn-outline-primary waves-effect btn-block\">\n                                {{avg.threeMonthAvgUnits}} {{orderManagement.unit}}\n                            </button>\n                        </div>\n                        <div class=\"col-sm-3\" *ngIf=\"orderManagement.equipmentId !=0 && avg != null\">\n                            <button type=\"button\" class=\"btn btn-outline-primary waves-effect btn-block\">\n                                {{avg.sixMonthAvgUnits}} {{orderManagement.unit}}\n                            </button>\n                        </div>\n                        <div class=\"col-sm-3\" *ngIf=\"orderManagement.equipmentId !=0 && avg != null\">\n                            <button type=\"button\" class=\"btn btn-outline-primary waves-effect btn-block\">\n                                {{avg.twelveMonthAvgUnits}} {{orderManagement.unit}}\n                            </button>\n                        </div>\n                        <div *ngIf=\"orderManagement.equipmentId !=0 && avg != null\" id=\"importbll\">\n                            <div class=\"col-sm-12\">\n                                <h4 class=\"importor\">\n                                    {{month}} {{year}} Preorder Quantity\n                                    &nbsp;&nbsp;<b style=\"color: red;\">{{totalPreOrderQuantity}}\n                                        {{orderManagement.unit}}</b>\n                                </h4>\n                            </div>\n\n                        </div>\n                        <div class=\"col-sm-12\" *ngIf=\"orderManagement.equipmentId !=0 && avg != null\">\n                            <div class=\"row\">\n                                <div class=\"col-sm-6\">Balance In App</div>\n                                <div class=\"col-sm-6\" id=\"importname\">\n                                    {{orderManagement.walletDetails.walletBalance |currency: orderManagement.walletDetails.walletCurrency}}\n                                </div>\n                            </div>\n                            <hr />\n                            <div class=\"row\">\n                                <div class=\"col-sm-6\">Locked Margin</div>\n                                <div class=\"col-sm-6\" id=\"importname\">\n                                    {{orderManagement.walletDetails.marginInUse |currency: orderManagement.walletDetails.walletCurrency}}\n                                </div>\n                            </div>\n                            <hr />\n                            <div class=\"row\">\n                                <div class=\"col-sm-6\">Available Balance In App</div>\n                                <div class=\"col-sm-6\" id=\"importname\">\n                                    {{orderManagement.walletDetails.availableBalance |currency: orderManagement.walletDetails.walletCurrency}}\n                                </div>\n                            </div>\n                            <hr />\n                        </div>\n\n                        <div class=\"col-sm-12\">\n                            <br>\n                            <div class=\"button-section\">\n                                <button class=\"btn btn-default btn-lg createbtn2\"\n                                    [routerLink]=\"['/orderuser']\">Back</button>\n                                <button class=\"btn btn-pink btn-lg createbtn1\" (click)=\"preOrderDetails()\">View\n                                    Preorders</button>\n                                <button class=\"btn btn-success btn-lg createbtn\" (click)=\"onProceed()\">Proceed</button>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n\n        </div>\n    </form>\n</div>\n<!--  -->\n\n<!-- Order Menu -->\n<div class=\"container importct\" *ngIf=\"iteration=='onProceed'\">\n    <form name=\"form\" class=\"create\" (ngSubmit)=\"f.form.valid && onProceedToPayment()\" #f=\"ngForm\">\n        <div class=\"row\">\n            <div class=\"col-sm-4\" id=\"wallet-1\">\n                <div class=\"card\" id=\"import\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient imp\">\n                        Market Price\n                    </div><br>\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\" id=\"vendorname\"> Vendor Name </div>\n                        <div class=\"col-sm-6\" id=\"importname1\">\n                            {{orderManagement.externalVendorList[0].vendorName}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\" id=\"vendorname\">Price </div>\n                        <div class=\"col-sm-6\" id=\"importname1\">\n                            {{orderManagement.externalVendorList[0].priceValue |currency : orderManagement.externalVendorList[0].priceCurrency}}\n                            / {{orderManagement.unit}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\" id=\"vendorname\"> Vendor Name </div>\n                        <div class=\"col-sm-6\" id=\"importname1\">\n                            {{orderManagement.externalVendorList[1].vendorName}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\" id=\"vendorname\">Price </div>\n                        <div class=\"col-sm-6\" id=\"importname1\">\n                            {{orderManagement.externalVendorList[1].priceValue |currency: orderManagement.externalVendorList[1].priceCurrency}}\n                            / {{orderManagement.unit}}\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"col-sm-8\" id=\"importcol\">\n                <div class=\"card first\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient\">\n                        Order - Create Order\n                    </div>\n                    <br>\n                    <div class=\"row\">\n                        <div class=\"col-sm-3\" id=\"orderqt\">Order Quantity</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            <div class=\"input-group mb-3\">\n                                <div class=\"input-group-prepend\">\n                                    <div class=\"input-group-text\"><i class=\"fa {{curr}}\" style=\"font-size:20px\"></i>\n                                    </div>\n                                </div>\n                                <input type=\"number\" class=\"form-control input-vendor\" name=\"quantity\" min=\"1\"\n                                    oninput=\"validity.valid||(value='');\" placeholder=\"Order Quantity\" value=\"\"\n                                    [(ngModel)]=\"orderManagement.quantity\" pattern=\"^[1-9]\\d*$\" autofocus\n                                    (input)=\"onChange()\" #quantity=\"ngModel\" min=\"1\"\n                                    oninput=\"validity.valid||(value='');\"\n                                    [ngClass]=\"{ 'is-invalid': f.submitted && quantity.invalid }\" required>\n                                <div class=\"input-group-append\">\n                                    <span class=\"input-group-text\"\n                                        id=\"basic-addon2\"><b>{{orderManagement.unit}}</b></span>\n                                </div>\n                                <div *ngIf=\"f.submitted && quantity.invalid\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"quantity.errors.required\">Please Enter Order Quantity</div>\n                                    <div *ngIf=\"quantity.errors.pattern\">Please Enter Order Quantity More Than Zero\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\">\n                            <h4 style=\"font-weight: bold;color:blue\">Preorder</h4>\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\" id=\"single\">\n                        <div class=\"col-sm-12\">\n                            <div class=\"importcard\">\n                                <!-- If Single pre-order -->\n                                <div\n                                    *ngIf=\"orderManagement.preOrderNewDtoList!=null && orderManagement.preOrderNewDtoList.length==1 \">\n                                    <div class=\"row\">\n                                        <div class=\"col-sm-6\" id=\"singlepre\">Quantity</div>\n                                        <div class=\"col-sm-6\" id=\"importname\">\n                                            {{orderManagement.preOrderNewDtoList[0].remainingPreOrderQuantity}}\n                                            {{orderManagement.unit}} </div>\n                                    </div>\n                                    <hr />\n                                    <div class=\"row\">\n                                        <div class=\"col-sm-6\" id=\"singlepre\">Price</div>\n                                        <div class=\"col-sm-6\" id=\"importname\">\n                                            {{orderManagement.preOrderNewDtoList[0].preOrderPrice |currency : orderManagement.walletDetails.walletCurrency}}\n                                            / {{orderManagement.unit}}\n                                        </div>\n                                    </div>\n                                    <hr />\n                                    <div class=\"row\">\n                                        <div class=\"col-sm-6\" id=\"singlepre\">Total Value</div>\n                                        <div class=\"col-sm-6\" id=\"importname\">\n                                            {{orderManagement.preOrderNewDtoList[0].preOrderPrice*orderManagement.preOrderNewDtoList[0].remainingPreOrderQuantity |currency : orderManagement.walletDetails.walletCurrency}}\n                                        </div>\n                                    </div>\n                                    <hr>\n                                    <div class=\"row\">\n                                        <div class=\"col-sm-6\" id=\"singlepre\">Locked Margin Amount</div>\n                                        <div class=\"col-sm-6\" id=\"importname\">\n                                            {{orderManagement.preOrderNewDtoList[0].margin * orderManagement.preOrderNewDtoList[0].remainingPreOrderQuantity |currency : orderManagement.walletDetails.walletCurrency}}\n                                        </div>\n                                    </div>\n                                    <hr>\n                                    <div class=\"row\">\n                                        <div class=\"col-sm-6\" id=\"singlepre\">Remaining Amount </div>\n                                        <div class=\"col-sm-6\" id=\"importname\">\n                                            {{ orderManagement.preOrderNewDtoList[0].preOrderPrice*orderManagement.preOrderNewDtoList[0].remainingPreOrderQuantity - orderManagement.preOrderNewDtoList[0].margin * orderManagement.preOrderNewDtoList[0].remainingPreOrderQuantity |currency : orderManagement.walletDetails.walletCurrency}}\n                                        </div>\n                                    </div>\n                                    <hr>\n                                </div>\n                                <!-- end single Preorder -->\n\n                                <!-- If Multiple PreOrder -->\n                                <div class=\"col-sm-12\"\n                                    *ngIf=\"orderManagement.preOrderNewDtoList!=null && orderManagement.preOrderNewDtoList.length>1\">\n                                    <div class=\"row\">\n                                        <div class=\"col-sm-6\" id=\"singlepre\">Quantity </div>\n                                        <div class=\"col-sm-6\" id=\"importname\">\n                                            {{totalPreOrderQuantity}}\n                                            / {{orderManagement.unit}}\n                                        </div>\n                                    </div>\n                                    <hr>\n                                    <div class=\"row\">\n                                        <div class=\"col-sm-6\" id=\"singlepre\">Price </div>\n                                        <div class=\"col-sm-6\" id=\"importname\">\n                                            {{orderManagement.preOrderNewDtoList[0].avgPrice |currency : orderManagement.walletDetails.walletCurrency}}\n                                            / {{orderManagement.unit}}\n                                        </div>\n                                    </div>\n                                    <hr>\n                                    <div class=\"row\">\n                                        <div class=\"col-sm-6\" id=\"singlepre\">Total Value </div>\n                                        <div class=\"col-sm-6\" id=\"importname\">\n                                            {{totalPreOrderQuantity*orderManagement.preOrderNewDtoList[0].avgPrice |currency : orderManagement.walletDetails.walletCurrency}}\n\n                                        </div>\n                                    </div>\n                                    <hr>\n                                    <div class=\"row\">\n                                        <div class=\"col-sm-6\" id=\"singlepre\">Locked Margin </div>\n                                        <div class=\"col-sm-6\" id=\"importname\">\n                                            {{totalLockedMargin |currency : orderManagement.walletDetails.walletCurrency}}\n                                        </div>\n                                    </div>\n                                    <hr>\n                                    <div class=\"row\">\n                                        <div class=\"col-sm-6\" id=\"singlepre\">Remaining Amount </div>\n                                        <div class=\"col-sm-6\" id=\"importname\">\n                                            {{totalPreOrderQuantity*orderManagement.preOrderNewDtoList[0].avgPrice - totalLockedMargin |currency : orderManagement.walletDetails.walletCurrency}}\n                                        </div>\n                                    </div>\n                                    <hr />\n                                    <div class=\"row\">\n                                        <div class=\"col-sm-12\">\n                                            <div class=\"button-section\">\n                                                <button class=\"btn btn-warning view\" (click)=\"preOrderDetails()\">View\n                                                    All\n                                                    Preorders</button>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <!-- multiple ends -->\n\n                                <!-- If no PreOrder exist -->\n                                <div class=\"row\" *ngIf=\"orderManagement.preOrderNewDtoList==null\">\n                                    <div class=\"col-sm-12\" id=\"nopre\">\n                                        No Preorder Exist for this Month\n                                    </div>\n                                </div>\n                                <hr>\n                                <!-- ends no pre-order -->\n\n                                <!-- only order-->\n                                <div class=\"col-sm-12\" *ngIf=\"orderManagement.preOrderNewDtoList==null\">\n                                    <h4 style=\"font-weight: bold;color:blue\">Order</h4>\n                                    <hr />\n                                    <div class=\"row\">\n                                        <div class=\"col-sm-6\" id=\"singlepre\">Order Quantity </div>\n                                        <div class=\"col-sm-6\" id=\"importname\">\n                                            {{orderManagement.orderQuantity}}\n                                            {{orderManagement.unit}}\n                                        </div>\n                                    </div>\n                                    <hr>\n                                    <div class=\"row\">\n                                        <div class=\"col-sm-6\" id=\"singlepre\">Price Per\n                                            {{orderManagement.unit}} </div>\n                                        <div class=\"col-sm-6\" id=\"importname\">\n                                            {{orderManagement.orderPrice |currency : orderManagement.walletDetails.walletCurrency}}\n                                        </div>\n                                    </div>\n                                    <hr>\n                                    <div class=\"row\">\n                                        <div class=\"col-sm-6\" id=\"singlepre\">Total Value </div>\n                                        <div class=\"col-sm-6\" id=\"importname\">\n                                            {{orderManagement.orderQuantity * orderManagement.orderPrice |currency : orderManagement.walletDetails.walletCurrency}}\n                                        </div>\n                                    </div>\n                                    <hr>\n                                </div>\n\n                                <!-- Order With Pre Order -->\n                                <div id=\"importorder\"\n                                    *ngIf=\"orderManagement.preOrderNewDtoList!=null && orderManagement.quantity > totalPreOrderQuantity\">\n                                    <hr />\n                                    <div class=\"row\">\n                                        <div class=\"col-sm-12\">\n                                            <h4 style=\"font-weight: bold;color:blue\">Order</h4>\n                                        </div>\n                                    </div>\n                                    <hr />\n                                    <div class=\"row\">\n                                        <div class=\"col-sm-6\" id=\"singlepre\">Remaining Quantity</div>\n                                        <div class=\"col-sm-6\" id=\"importname\">\n                                            {{orderManagement.orderQuantity}}\n                                            {{orderManagement.unit}}\n                                        </div>\n                                    </div>\n                                    <hr />\n                                    <div class=\"row\">\n                                        <div class=\"col-sm-6\" id=\"singlepre\">Price</div>\n                                        <div class=\"col-sm-6\" id=\"importname\">\n                                            {{orderManagement.orderPrice |currency : orderManagement.walletDetails.walletCurrency}}\n                                            / {{orderManagement.unit}}\n                                        </div>\n                                    </div>\n                                    <hr />\n                                    <div class=\"row\">\n                                        <div class=\"col-sm-6\" id=\"singlepre\">Total Value </div>\n                                        <div class=\"col-sm-6\" id=\"importname\">\n                                            {{orderManagement.orderQuantity * orderManagement.orderPrice |currency : orderManagement.walletDetails.walletCurrency}}\n                                        </div>\n                                    </div>\n                                </div>\n                                <br>\n                                <div class=\"col-sm-12\">\n                                    <div class=\"row\">\n                                        <div class=\"col-sm-6\" id=\"singlepre\">Total Order Value</div>\n                                        <div class=\"col-sm-6\" id=\"importname\">\n                                            {{orderManagement.totalAll | currency : orderManagement.walletDetails.walletCurrency}}\n                                        </div>\n                                    </div>\n                                </div>\n                                <hr />\n                                <div class=\"col-sm-12\">\n                                    <div class=\"row\">\n                                        <div class=\"col-sm-6\" id=\"singlepre\">Savings</div>\n                                        <div class=\"col-sm-6\" id=\"importname\">\n                                            {{orderManagement.savingsValue | number : '1.2-2'}}\n                                            %\n                                        </div>\n                                    </div>\n                                </div>\n                                <hr />\n                                <div class=\"row\">\n\n                                    <div class=\"col-sm-12\">\n                                        <p style=\"color: red;text-align: center;\n                                        font-weight: bold;\n                                        font-size: 20px;\"> * Total Order value is calculated\n                                            based on\n                                            {{orderManagement.configType}}\n                                        </p>\n                                    </div>\n                                </div>\n                                <hr />\n                            </div>\n                        </div>\n                    </div>\n                    <br>\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\">\n                            <div class=\"button-section\">\n                                <button type=\"button\" class=\"btn btn-default btn-lg\"\n                                    (click)=\"onclickBack()\">Back</button>\n                                <button type=\"button\" class=\"btn btn-primary btn-lg\" [routerLink]=\"['/orderuser']\"> Main\n                                    Menu</button>\n                                <button type=\"submit\" *ngIf=\"insuficientBalYn==false\"\n                                    class=\"btn btn-success btn-lg\">Proceed To\n                                    Payment</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n\n        </div>\n        <br>\n        <div class=\"row\" id=\"importupside\">\n            <div class=\"col-sm-4\" id=\"wallet-1\">\n\n            </div>\n        </div>\n    </form>\n</div>\n\n<!--  -->\n\n<!-- final page -->\n<div class=\"container importct\" *ngIf=\"iteration=='finalPage'\">\n    <form name=\"form\">\n        <div class=\"row\">\n            <div class=\"col-sm-4\" id=\"wallet-1\">\n\n                <div class=\"card\" id=\"import\" *ngIf='showDetails'>\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient imp\">\n                        Use Credit Details\n                    </div><br>\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\"> Credit Required to complete </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{orderManagement.creditLimitManagement.useCredit |currency : orderManagement.creditLimitManagement.currency }}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\"> Credit Amount Payable in {{orderManagement.creditLimitManagement.days}}\n                            Day</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{orderManagement.creditLimitManagement.payableAmount |currency : orderManagement.creditLimitManagement.currency }}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\">\n                            <p class=\"extra\" style=\"color:red;text-align: center;\">\n                                * Including Processing Charges\n                            </p>\n                        </div>\n                    </div>\n                    <hr>\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\">\n                            <h3> You Need To Pay :\n                                {{orderManagement.topupAmount | currency : orderManagement.walletDetails.walletCurrency}}\n                            </h3>\n                        </div>\n\n                    </div>\n                    <hr />\n                </div>\n            </div>\n            <div class=\"col-sm-7\" id=\"wallet-1\">\n                <div class=\"card-header view view-cascade gradient-card-header blue-gradient\">\n                    Create Order - Payment Summary\n                </div>\n                <div class=\"card\" id=\"import\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\">\n                            <div class=\"importcard\">\n                                <div class=\"row\">\n                                    <div class=\"col-sm-6\"> Wallet Balance </div>\n                                    <div class=\"col-sm-6\" id=\"importname\">\n                                        {{orderManagement.walletDetails.walletBalance |currency: orderManagement.walletDetails.walletCurrency}}\n                                    </div>\n                                </div>\n                                <hr />\n                                <div class=\"row\">\n                                    <div class=\"col-sm-6\">Total Margin Used For All Preorder </div>\n                                    <div class=\"col-sm-6\" id=\"importname\">\n                                        {{orderManagement.walletDetails.marginInUse |currency: orderManagement.walletDetails.walletCurrency}}\n                                    </div>\n                                </div>\n                                <hr />\n                                <div class=\"row\">\n                                    <div class=\"col-sm-6\">Available Balance In App </div>\n                                    <div class=\"col-sm-6\" id=\"importname\">\n                                        {{orderManagement.walletDetails.availableBalance |currency: orderManagement.walletDetails.walletCurrency}}\n                                    </div>\n                                </div>\n                                <hr />\n                                <div class=\"row\" *ngIf=\"orderManagement.creditLimitManagement!=null\">\n                                    <div class=\"col-sm-6\">Remaining Credit </div>\n                                    <div class=\"col-sm-6\" id=\"importname\">\n                                        {{orderManagement.creditLimitManagement.availableCredits |currency : orderManagement.creditLimitManagement.currency }}\n                                    </div>\n                                </div>\n                                <hr *ngIf=\"orderManagement.creditLimitManagement!=null\" />\n                                <div class=\"row\">\n                                    <div class=\"col-sm-6\">Total Order Value </div>\n                                    <div class=\"col-sm-6\" id=\"importname\">\n                                        {{orderManagement.totalAll |currency: orderManagement.walletDetails.walletCurrency}}\n                                    </div>\n                                </div>\n                                <hr />\n\n                                <div class=\"row\" *ngIf=\"orderManagement.preOrderNewDtoList!=null\">\n                                    <div class=\"col-sm-6\">Margin Used For Current Preorder </div>\n                                    <div class=\"col-sm-6\" id=\"importname\">\n                                        {{orderManagement.totalLockedMargin |currency: orderManagement.walletDetails.walletCurrency}}\n                                    </div>\n                                </div>\n                                <hr *ngIf=\"orderManagement.preOrderNewDtoList!=null\" />\n\n                                <div class=\"row\">\n                                    <div class=\"col-sm-6\">Balance Payment to be done</div>\n                                    <div class=\"col-sm-6\" id=\"importname\">\n                                        {{orderManagement.totalAll - orderManagement.totalLockedMargin |currency: orderManagement.walletDetails.walletCurrency}}\n                                    </div>\n                                </div>\n                                <hr />\n\n\n                                <div class=\"row\" *ngIf=\"orderManagement.requiredAmount!=0\">\n                                    <div class=\"col-sm-6\">Minimum Topup to complete </div>\n                                    <div class=\"col-sm-6\" id=\"importname\">\n                                        {{orderManagement.topupAmount |currency: orderManagement.walletDetails.walletCurrency}}\n                                    </div>\n                                </div>\n                                <hr *ngIf=\"orderManagement.requiredAmount!=0\" />\n                                <div class=\"row\">\n\n                                    <div class=\"col-sm-12\"\n                                        *ngIf=\"orderManagement.creditLimitManagement!=null && orderManagement.totalAll>orderManagement.walletDetails.availableBalance\">\n                                        <div class=\"button-section\">\n                                            <button class=\"btn btn btn-pink remove\" (click)=\"useCredits()\"\n                                                data-toggle=\"modal\" data-target=\"#exampleModalCenter\">\n                                                {{showDetails? 'Remove' : 'Use'}} Credits</button>\n                                        </div>\n                                    </div>\n                                </div>\n                                <hr\n                                    *ngIf=\"orderManagement.creditLimitManagement!=null && orderManagement.totalAll>orderManagement.walletDetails.availableBalance\" />\n\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-sm-4\"></div>\n                        <div class=\"col-sm-8\">\n                            <div class=\"button-section\">\n                                <div *ngIf=\"orderManagement.creditYN==true\">\n                                    <button class=\"btn btn-default btn-lg\" (click)=\"onBack()\">BACK</button>\n                                    <button *ngIf=\"orderManagement.payableAmount!=0\" class=\"btn btn-success btn-lg\"\n                                        (click)=\"saveOrder()\">TOPUP\n                                        AND ORDER</button>\n                                    <button *ngIf=\"orderManagement.payableAmount==0\" class=\"btn btn-success btn-lg\"\n                                        (click)=\"saveOrder()\">ORDER</button>\n                                </div>\n                                <div *ngIf=\"orderManagement.creditYN==false||orderManagement.creditYN==null\">\n                                    <button class=\"btn btn-default btn-lg\" (click)=\"onBack()\">BACK</button>\n                                    <button\n                                        *ngIf=\"orderManagement.totalAll>orderManagement.walletDetails.availableBalance || user.userType=='CORPORATE_SUPERVISOR' && user.userType==null \"\n                                        class=\"btn btn-success btn-lg\" (click)=\"saveOrder()\">TOPUP AND ORDER</button>\n                                    <button\n                                        *ngIf=\"orderManagement.walletDetails.availableBalance>=orderManagement.totalAll\"\n                                        class=\"btn btn-success btn-lg\" (click)=\"saveOrder()\">ORDER</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>\n<!--  -->\n\n\n\n<!-- Pre Orders List-->\n<div class=\"container-fluid\" *ngIf=\"iteration == 'preOrderDetails'\">\n    <section class=\"mb-5\">\n        <!--Card-->\n        <div class=\"card card-cascade narrower\">\n            <div\n                class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n                <div>\n                </div>\n                <h4 href=\"\" class=\"white-text mx-3\">Preorder List</h4>\n                <div>\n                </div>\n            </div>\n            <div class=\"card-body\">\n                <div class=\"table table-striped table-bordered table-responsive\">\n                    <table class=\"table text-nowrap\">\n                        <thead>\n                            <tr>\n                                <th>Preorder ID</th>\n                                <th>Product Name</th>\n                                <th>Quantity </th>\n                                <th>Available Quantity </th>\n                                <th>Price</th>\n                                <th>Total Value</th>\n                                <th>Margin Locked</th>\n\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let p of orderManagement.preOrderNewDtoList | \n                            paginate: { id: 'listing_pagination',\n                            itemsPerPage: 4,\n                            currentPage: page,\n                            totalItems: totalRec }\">\n                                <td>{{p.preOrderId}}</td>\n                                <td>{{p.productName}}</td>\n                                <td>{{p.preOrderQuantity}} {{orderManagement.unit}}</td>\n                                <td>{{p.remainingPreOrderQuantity }} {{orderManagement.unit}}</td>\n                                <td> {{p.preOrderPrice | currency : orderManagement.walletDetails.walletCurrency}}</td>\n                                <td>{{p.preOrderPrice * p.remainingPreOrderQuantity | currency : orderManagement.walletDetails.walletCurrency }}\n                                </td>\n                                <td> {{p.margin * p.remainingPreOrderQuantity | currency : orderManagement.walletDetails.walletCurrency}}\n                                </td>\n\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div class=\"d-flex justify-content-between\">\n                    <!--Pagination -->\n                    <nav class=\"mt-4\">\n                        <pagination-controls id=\"listing_pagination\" maxSize=\"4\" directionLinks=\"true\"\n                            (pageChange)=\"page = $event\">\n                        </pagination-controls>\n                    </nav>\n                </div>\n                <div class=\"button-section\">\n                    <button class=\"btn btn-default btn-lg\" (click)=\"onBackToOrder()\">Back</button>\n                </div>\n            </div>\n        </div>\n    </section>\n</div>\n\n<div class=\"container importct\" *ngIf=\"iteration =='orderSuccessPage'\">\n    <form name=\"form\">\n        <div class=\"row\">\n            <div class=\"col-sm-3\"></div>\n            <div class=\"col-sm-6\" id=\"wallet-1\">\n                <div class=\"card-header view view-cascade gradient-card-header blue-gradient\">\n                    Create Order - Order Summary\n                </div>\n                <div class=\"card\" id=\"import\">\n                    <h4 style=\"color:red\" *ngIf=\"orderManagement.paymentStatus=='PENDING'\">Pending For Payment Update\n                    </h4>\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\">\n                            <div class=\"importcard\">\n                                <hr />\n                                <div class=\"row\">\n                                    <div class=\"col-sm-6\"> Order Id </div>\n                                    <div class=\"col-sm-6\" id=\"importname\">\n                                        {{orderManagement.orderRefNumber}}\n                                    </div>\n                                </div>\n                                <hr />\n                                <div class=\"row\">\n                                    <div class=\"col-sm-6\">Product </div>\n                                    <div class=\"col-sm-6\" id=\"importname\">\n                                        {{orderManagement.masterProducts.productName}}\n                                    </div>\n                                </div>\n                                <hr />\n                                <div class=\"row\">\n                                    <div class=\"col-sm-6\">Equipment </div>\n                                    <div class=\"col-sm-6\" id=\"importname\">\n                                        {{orderManagement.equipment.equipmentName}}\n                                    </div>\n                                </div>\n                                <hr>\n                                <div class=\"row\">\n                                    <div class=\"col-sm-6\">Quantity </div>\n                                    <div class=\"col-sm-6\" id=\"importname\">\n                                        {{orderManagement.totalQuantity}}\n                                        {{orderManagement.masterUnitPrice.itemUnit}}\n                                    </div>\n                                </div>\n                                <hr />\n                                <div class=\"row\">\n                                    <div class=\"col-sm-6\"> Avg. Price </div>\n                                    <div class=\"col-sm-6\" id=\"importname\">\n                                        {{orderManagement.totalAmount/orderManagement.totalQuantity | currency : orderManagement.walletDetails.walletCurrency}}\n                                        /\n                                        {{orderManagement.masterUnitPrice.itemUnit}}\n                                    </div>\n                                </div>\n                                <hr />\n                                <div class=\"row\">\n                                    <div class=\"col-sm-6\">Total Value</div>\n                                    <div class=\"col-sm-6\" id=\"importname\">\n                                        {{orderManagement.totalAmount |currency : orderManagement.walletDetails.walletCurrency}}\n                                    </div>\n                                </div>\n                                <hr />\n                                <div class=\"row\"\n                                    *ngIf=\"orderManagement.creditLimitManagement!=null && orderManagement.creditLimitManagement.deductFromCredit!=0\">\n                                    <div class=\"col-sm-6\">Credits Used</div>\n                                    <div class=\"col-sm-6\" id=\"importname\">\n                                        {{orderManagement.creditLimitManagement.useCredit |currency : orderManagement.creditLimitManagement.currency}}\n                                    </div>\n                                </div>\n                                <hr\n                                    *ngIf=\"orderManagement.creditLimitManagement!=null && orderManagement.creditLimitManagement.deductFromCredit!=0\" />\n                                <div class=\"row\"\n                                    *ngIf=\"orderManagement.creditLimitManagement!=null && orderManagement.creditLimitManagement.deductFromCredit!=0\">\n                                    <div class=\"col-sm-6\"> Amount Payable In\n                                        {{orderManagement.creditLimitManagement.days}} days</div>\n                                    <div class=\"col-sm-6\" id=\"importname\">\n                                        {{orderManagement.creditLimitManagement.useCredit |currency : orderManagement.creditLimitManagement.currency}}\n                                    </div>\n                                    <div class=\"col-sm-6\" id=\"importname\">\n                                        {{orderManagement.creditLimitManagement.payableAmount |currency : orderManagement.creditLimitManagement.currency}}\n                                    </div>\n                                </div>\n                                <hr\n                                    *ngIf=\"orderManagement.creditLimitManagement!=null && orderManagement.creditLimitManagement.deductFromCredit!=0\" />\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\">\n                            <div class=\"button-section\">\n                                <button class=\"btn btn-primary btn-lg\" [routerLink]=\"['/dashboard']\">Dashboard</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>\n<!--  -->\n\n\n\n\n\n\n<div class=\"container proceedpay\" *ngIf=\"pageIterator == 3\">\n    <div class=\"heading\">\n        <h3 style=\"text-align: center;\">Payment</h3>\n    </div>\n    <br>\n    <div class=\"row\">\n        <div class=\"col-lg-6\">\n            <a\n                class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-primary\">\n                Balance In App :\n                <span>Rs. 1500</span>\n            </a>\n            <a\n                class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-primary\">\n                Margin In Use :\n                <span>150</span>\n            </a>\n        </div>\n        <div class=\"col-lg-6\">\n            <a\n                class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-danger\">\n                Available For Margin :\n                <span>140</span>\n            </a>\n            <a\n                class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-danger\">\n                Reamining Credit :\n                <span>700</span>\n            </a>\n        </div>\n    </div><br><br>\n\n\n    <div class=\"card payment\">\n        <div class=\"card-body\">\n            <div class=\"row\">\n\n                <div class=\"col-lg-4\">\n                </div>\n                <div class=\"col-lg-4\">\n                    <div class=\"form-group row\">\n                        <div class=\"form-group row\">\n                            <div class=\"col-md-8\">\n                                <input type=\"text\" class=\"form-control\">\n                            </div>\n                            <div class=\"col-md-4\">\n                                <span><button class=\"btn btn-primary\">Apply</button></span>\n                            </div>\n                        </div>\n                        <label class=\"col-lg-7\">Total Order Value :</label>\n                        <div class=\"col-md-5\">\n                            <h4>Rs. 820.00</h4>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <label class=\"col-lg-7\">Pmt. Admin Charges :</label>\n                        <div class=\"col-md-5\">\n                            <h4>Rs. 820.00</h4>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <label class=\"col-lg-7\">Margin In Use :</label>\n                        <div class=\"col-md-5\">\n                            <h4>Rs. 820.00</h4>\n                        </div>\n                    </div>\n                    <hr>\n                    <div class=\"form-group row\">\n                        <label class=\"col-lg-8\">Payment To Be Done :</label>\n                        <div class=\"col-md-4\">\n                            <input type=\"text\" class=\"form-control\">\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <label class=\"col-lg-8\">Credit Require To Complete this Order :</label>\n                        <div class=\"col-md-4\">\n                            <h4>Rs. 800</h4>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <label class=\"col-lg-8\">Amount Payble In 7 Days :</label>\n                        <div class=\"col-md-4\">\n                            <h4>Rs. 800</h4>\n                        </div>\n                    </div>\n                    <div class=\"card-buttons\">\n                        <button class=\"btn btn-success\" (click)=\"onOrder()\">Order</button>&nbsp;\n                        <button class=\"btn btn-default\" (click)=\"onBack()\">Back</button>\n\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    </div>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/User/currentwalletbalance/currentwalletbalance.component.html":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/User/currentwalletbalance/currentwalletbalance.component.html ***!
  \*********************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n<br>\n<div class=\"container\" *ngIf=\"iteration == 'initial'\">\n    <h3 style=\"text-align: center;\">Current Wallet Balance</h3><br>\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <div class=\"row\">\n                <div class=\"col-lg-4\">\n                \n                </div>\n                <div class=\"col-lg-4\">\n                    <h3>Wallet Balance ({{walletDetails.walletCurrency}})</h3>\n                    <span class=\"badge badge-pill badge-danger\" style=\"text-align: center;\">\n                        <p><b>{{walletDetails.walletBalance | number : '1.2-2'}}</b></p>\n                    </span>\n                </div>\n                <div class=\"col-lg-4\">\n\n                </div>\n            </div>\n        </div>\n    </div><br>\n\n    <div class=\"row\">\n        <div class=\"col-md-6\">\n            <button class=\"badge badge-info\" (click)=\"onTopupWallet()\">Top Up Wallet</button>\n        </div>\n\n        <div class=\"col-md-6\">\n            <button class=\"badge badge-info\" (click)=\"onAccountSummary()\">Account Summary</button>\n        </div>\n\n    </div><br>\n    <div class=\"button-section\">\n        <button class=\"btn btn-outline-primary\" [routerLink]=\"['/dashboard']\">Dashboard</button>\n        <button class=\"btn btn-outline-primary\" [routerLink]=\"['/wallet']\">Go to wallet Rewards</button>\n\n    </div>\n</div>\n\n<!-- Account Summary -->\n<div class=\"container orderplace\" *ngIf=\"iteration == 'accountSummary'\">\n    <h3 style=\"text-align: center;\">Account Summary</h3><br>\n    <div class=\"row\">\n        <div class=\"col-lg-6\">\n            <a\n                class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-primary\">Wallet\n                Balance ({{walletDetails.walletCurrency}}):\n                <span>{{walletDetails.walletBalance | number : '1.2-2'}}</span>\n            </a>\n            <a\n                class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-primary\">\n                Margin In Use ({{walletDetails.walletCurrency}}):\n                <span>{{walletDetails.marginInUse | number : '1.2-2'}}</span>\n            </a>\n            <a\n                class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-primary\">\n                Credit Limit Allocated :\n                <span>0</span>\n            </a>\n\n        </div>\n        <div class=\"col-lg-6\">\n            <a\n                class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-danger\">\n                Available Balance ({{walletDetails.walletCurrency}}):\n                <span>{{walletDetails.availableBalance | number : '1.2-2'}}</span>\n            </a>\n            <a\n                class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-danger\">\n                Available Credit :\n                <span>0</span>\n            </a>\n        </div>\n    </div><br><br>\n\n\n    <br><br>\n    <div class=\"container\">\n        <div class=\"row\">      \n        <div class=\"card-body\">\n            <div  class=\"form-group row\">\n\n                <div class=\"col-md-3\">\n                    <div class=\"form-group\">\n                        <select class=\"browser-default custom-select\" [(ngModel)]=\"range\"  name=\"#range\"\n                            (ngModelChange)=\"onSelect(selected)\">\n                            <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                            <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n\n                        </select>\n                    </div>\n                </div>\n\n                <div class=\"col-md-3\" *ngIf=\"customDate==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" [(ngModel)]=\"date\" placeholder=\"From\"\n                            class=\"form-control\" (ngModelChange)=\"onDateChange($event)\">\n                        <owl-date-time #dt1 pickerType=\"calendar\" ></owl-date-time>\n                    </div>\n                </div>\n\n                <div class=\"col-md-3\" *ngIf=\"customDate==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" [(ngModel)]=\"date1\" placeholder=\"To\"\n                            class=\"form-control\"  (ngModelChange)=\"onDateChange($event)\">\n                        <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n\n        </div><br>\n        </div>\n        <div class=\"table-responsive\">\n            <table class=\"table table-striped table-responsive-md btn-table\">\n                <thead>\n                    <tr>\n                        <th>Sr. No.</th>\n                        <th>Date</th>\n                        <th>Discription</th>\n                        <th>In ({{walletDetails.walletCurrency}}) </th>\n                        <th>Out ({{walletDetails.walletCurrency}})</th>\n                        <th>Available Balance ({{walletDetails.walletCurrency}}) </th>\n                        <th>Wallet Balance ({{walletDetails.walletCurrency}}) </th>\n                    </tr>\n                </thead>\n                <tbody >\n                    <tr *ngFor=\"let a of accountSummaryFilteredList | \n                    paginate: { id: 'listing_pagination',\n                    itemsPerPage: 15,\n                    currentPage: page,\n                    totalItems: totalRec } \">\n                    <td>{{sr}}</td>\n                      <td>{{a.transactionDate | date}}</td>\n                        <td>{{a.transactionDesc}}</td>\n                        <td>{{a.inAmount | number : '1.2-2'}}</td>\n                        <td>{{a.outAmount | number : '1.2-2'}}</td>\n                        <td>{{a.availableBalance | number : '1.2-2'}}</td>\n                        <td>{{a.walletBalance | number : '1.2-2'}}</td>\n                    </tr>\n                </tbody>\n            </table>\n            <pagination-controls id=\"listing_pagination\" maxSize=\"15\" directionLinks=\"true\" (pageChange)=\"page = $event\">\n            </pagination-controls>\n        </div>\n        <div class=\"chcekbutton\">\n\n            <button class=\"btn btn-primary\" [routerLink]=\"['/dashboard']\">Dashboard</button>&nbsp;\n            <button class=\"btn btn-default\" (click)=\"onbackClick()\">Back</button>\n        </div>\n\n    </div>\n    </div>\n</div>\n\n<!-- Topup Wallet -->\n<div class=\"container\" *ngIf=\"iteration == 'topupWallet'\">\n    <h3>Top Up Wallet</h3><br>\n    <div class=\"row\">\n        <h4> Balance :&nbsp; Rs. 74</h4>\n    </div>\n    <hr>\n    <br><br>\n    <div class=\"row\">\n        <div class=\"col-lg-2 col-sm-2\">\n            <label>Top Up Amount : </label>\n        </div>\n        <div class=\"col-lg-4 col-sm-4\">\n            <span class=\"badge badge-info\">\n                <p class=\"text\"> Rs. 100</p>\n            </span>\n        </div>\n        <div class=\"col-lg-2 col-sm-2\">\n            <label>Top Up With : </label>\n        </div>\n        <div class=\"col-lg-4 col-sm-4\">\n            <select class=\"form-control\" multiple>\n                <option>\n                    Bank Transfer\n                </option>\n                <option> Credit Card</option>\n                <option>PayPal</option>\n                <option>AliPal</option>\n                <option>ApplePay</option>\n                <option>Debit Card</option>\n            </select>\n        </div>\n    </div>\n    <br>\n    <hr>\n    <div class=\"button-section\">\n        <button class=\"btn btn-primary\" (click)=\"onClick()\">Top up Wallet</button>&nbsp;&nbsp;\n        <button class=\"btn btn-primary\" [routerLink]=\"['/wallet']\">Go wallet & rewards</button>&nbsp;&nbsp;&nbsp;\n        <button class=\"btn btn-primary\" [routerLink]=\"['/dashboard']\">Dashboard</button>&nbsp;&nbsp;\n    </div>\n</div>\n\n<!-- Topup Succsess Page -->\n<div class=\"container\" *ngIf=\"iteration == 'topupSuccessPage'\">\n    <h3 style=\"text-align: center;\">Top Up Of &nbsp;<span class=\"badge badge-pill badge-danger\">\n            <p> Rs. 100</p>\n        </span>&nbsp; Successful</h3>\n    <br><br>\n    <div class=\"row\">\n        <div class=\"col-3\"><label> Current Wallet Balance :</label></div>\n        <div class=\"col-3\">\n            <span class=\"badge badge-info 1\">\n                <p class=\"text\"> Rs. 100</p>\n            </span>\n        </div>\n        <div class=\"col-lg-3\"><label> Current Wallet Balance :</label></div>\n        <div class=\"col-lg-3\">\n            <span class=\"badge badge-info 1\">\n                <p class=\"text\"> Rs. 100</p>\n            </span>\n        </div>\n    </div><br><br>\n    <div class=\"button-section\">\n        <button class=\"btn btn-primary\" [routerLink]=\"['/walletbalance']\">Back to Wallet</button>&nbsp;&nbsp;\n        <button class=\"btn btn-primary\" [routerLink]=\"['/wallet']\">Back To main Menu</button>\n    </div>\n</div><br>\n<div class=\"container\" *ngIf=\"iteration == 'topupSuccessPage'\">\n    <h3>Top Up Of</h3> &nbsp;&nbsp;\n</div>\n\n<div class=\"container\" *ngIf=\"iteration == 'walletAndRewardsMainPage'\">\n    <div class=\"row\">\n        <!-- Team member -->\n        \n        <div class=\"col-xs-12 col-sm-4 col-md-4\">\n                <div class=\"mainflip\">\n                    <div class=\"frontside\">\n                        <!-- <div class=\"card\"> -->\n                            <div class=\"card-body text-center\">\n                              <br>\n                                <a  class=\"btn btn-primary btn-sm\"> <br> Wallet</a>\n                            </div>\n                        <!-- </div> -->\n                    </div>\n                  \n                </div>\n        </div>\n        <div class=\"col-xs-12 col-sm-4 col-md-4\">\n            <div class=\"mainflip\">\n                <div class=\"frontside\">\n                    <!-- <div class=\"card\"> -->\n                        <div class=\"card-body text-center\">\n                          <br>\n                            <a [routerLink]=\"['/topup']\" class=\"btn btn-primary btn-sm\">Topup <br> Wallet </a>\n                        </div>\n                    <!-- </div> -->\n                </div>\n              \n            </div>\n    </div>\n    <div class=\"col-xs-12 col-sm-4 col-md-4\">\n        <div class=\"mainflip\">\n            <div class=\"frontside\">\n                <!-- <div class=\"card\"> -->\n                    <div class=\"card-body text-center\">\n                      <br>\n                        <a [routerLink]=\"['/rewarduser']\" class=\"btn btn-primary btn-sm\"> <br>Rewards </a>\n                    </div>\n                <!-- </div> -->\n            </div>\n          \n        </div>\n</div>\n</div><br><br>\n<div class=\"button-section\">\n  <button class=\"btn btn-primary\" [routerLink]=\"['/dashboard']\">Dashboard</button>\n</div>\n   \n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/User/offersuser/offersuser.component.html":
/*!*************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/User/offersuser/offersuser.component.html ***!
  \*************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n<div class=\"container\">\n    <h3 class=\"text\" >Offers</h3><br>\n    <div class=\"row\">\n        <div class=\"col-lg-4\">\n            <div class=\"card\">\n                <div class=\"card-body\">\n                 <div class=\"disscout\">\n                     <h4>5% Discount</h4><br>\n                 </div>\n                 <div class=\"distext\">\n                     <p>on Product Worth Rs. 1000 or More</p>\n                 </div>\n                 <div class=\"offercode\">\n                    <h4>OfferCode :</h4>\n                    <h3 class=\"offer\">DIS05</h3>\n                </div><br>\n                <div class=\"expire\">\n                    <h6 >Expires in 15 Days</h6>\n                </div>\n                </div>\n              </div>\n        </div>\n        <div class=\"col-lg-4\">\n            <div class=\"card\">\n                <div class=\"card-body\">\n                    <div class=\"disscout\">\n                        <h4>5% Discount</h4><br>\n                    </div>\n                    <div class=\"distext\">\n                        <p>on Product Worth Rs. 1000 or More</p>\n                    </div>\n                    <div class=\"offercode\">\n                       <h4>OfferCode :</h4>\n                       <h3 class=\"offer\">DIS05</h3>\n                   </div><br>\n                   <div class=\"expire\">\n                       <h6 >Expires in 1 Month</h6>\n                   </div>\n                   </div>\n              </div>\n        </div>\n        <div class=\"col-lg-4\">\n            <div class=\"card\">\n                <div class=\"card-body\">\n                    <div class=\"disscout\">\n                        <h4>5% Discount</h4><br>\n                    </div>\n                    <div class=\"distext\">\n                        <p>on Product Worth Rs. 1000 or More</p>\n                    </div>\n                    <div class=\"offercode\">\n                       <h4 > OfferCode :</h4>\n                       <h3 class=\"offer\">DIS05</h3>\n                   </div><br>\n                   <div class=\"expire\">\n                       <h6 >Expires in 1 Year</h6>\n                   </div>\n                   </div>\n              </div>\n        </div>\n    </div><br>\n    <div class=\"button-section\">\n    <button class=\"btn btn-primary btn-lg import\" [routerLink]=\"['/dashboard']\">Dashboard</button>\n    </div>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/User/orderuser/orderuser.component.html":
/*!***********************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/User/orderuser/orderuser.component.html ***!
  \***********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n\n<main>\n  <div class=\"card or\" *ngIf=\"iteration == 'initial'\">\n    <h5 class=\"card-header gradient-card-header blue-gradient white-text text-center py-4 start\">\n      <strong>Order Options</strong>\n    </h5>\n    <div class=\"card-body\">\n      <!-- Container -->\n      <div class=\"container end\">\n        <div class=\"row text-center\">\n          <div class=\"col-lg-2d col-md-2 mb-md-0 mb-2 col-2\"></div>\n          <div class=\"col-6 col-md-4\">\n            <div class=\"card card-cascade\" [routerLink]=\"['/create']\">\n              <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                <h3 style=\"color: white;\">Create Order</h3>\n              </div>\n              <div class=\"card-body card-body-cascade text-center\">\n                <i class=\"fa fa-plus-square-o importfa\" style=\"color:#0091ea \"></i>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-6 col-md-4\">\n            <div class=\"card card-cascade\" (click)=\"viewAllOrders()\">\n              <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                <h3 style=\"color: white;\">View Order</h3>\n              </div>\n              <div class=\"card-body card-body-cascade text-center\">\n                <i class=\"fa fa-newspaper-o importfa\" style=\"color:#ffa000\"></i>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <br>\n      <div class=\"row\">\n        <div class=\"col-md-5\"></div>\n        <div class=\"col-md-4\" id=\"importback\">\n          <div class=\"button-section\">\n            <button type=\"button\" class=\"btn btn-default btn-lg\" [routerLink]=\"['/dashboard']\">Back</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <!-- Container -->\n</main>\n\n\n\n<main>\n  <div class=\"container-fluid\" *ngIf=\"iteration == 'viewAllOrders'\">\n    <section class=\"mb-5\">\n      <div class=\"card p-2 mb-5\">\n        <h4 class=\"filter\">Filters</h4>\n        <div class=\"row v1\" *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">\n          <div class=\"col-md-2\">\n            <div class=\"form-group\">\n              <select class=\"form-control\" [(ngModel)]=\"region\" name=\"#region\" (ngModelChange)=\"onRegion(selected)\">\n                <option [ngValue]=\"null\">Select Region</option>\n                <option *ngFor=\"let r of regionList\" [value]=\"r\">{{r}}</option>\n              </select>\n            </div>\n          </div>\n\n          <div class=\"col-md-2\">\n            <div class=\"form-group\">\n              <select class=\"form-control\" [(ngModel)]=\"state\" name=\"#state\" (ngModelChange)=\"onState(selected)\">\n                <option [ngValue]=\"null\">Select State</option>\n                <option *ngFor=\"let s of stateList\" [value]=\"s\">{{s}}</option>\n              </select>\n            </div>\n          </div>\n\n          <div class=\"col-md-2\">\n            <div class=\"form-group\">\n              <select class=\"form-control\" [(ngModel)]=\"city\" name=\"#city\" (ngModelChange)=\"onCity(selected)\">\n                <option [ngValue]=\"null\">Select City</option>\n                <option *ngFor=\"let c of cityList\" [value]=\"c\">{{c}}</option>\n              </select>\n            </div>\n          </div>\n\n          <div class=\"col-md-2\">\n            <div class=\"form-group\">\n              <select class=\"form-control\" [(ngModel)]=\"office\" name=\"#office\" (ngModelChange)=\"onOffice(selected)\">\n                <option [ngValue]=\"null\">Select Office</option>\n                <option *ngFor=\"let o of officeList\" [value]=\"o\">{{o}}</option>\n              </select>\n            </div>\n          </div>\n\n          <div class=\"col-md-2\">\n            <div class=\"form-group\">\n              <select class=\"form-control\" [(ngModel)]=\"customerId\" name=\"#customerId\"\n                (ngModelChange)=\"onCustomerId(selected)\">\n                <option [ngValue]=\"null\">Select Customer Id</option>\n                <option *ngFor=\"let u of uniqueUserIdList\" [value]=\"u\">{{u}}</option>\n              </select>\n            </div>\n          </div>\n          <div class=\"col-md-2\">\n            <select class=\"mdb-select colorful-select dropdown-primary mx-2\" class=\"form-control\" name=\"productName\"\n              [(ngModel)]=\"productName\" (change)=\"onChangeProduct()\">\n              <option [ngValue]=\"null\">Select Product</option>\n              <option *ngFor=\"let p of productsList\" [ngValue]=\"p\">{{p}}</option>\n            </select>\n          </div>\n        </div>\n\n        <div class=\"row v1\" *ngIf=\"user==null || user!=nulll && user.userType!='CORPORATE_SUPERVISOR'\">\n          <div class=\"col-md-4\">\n            <select class=\"mdb-select colorful-select dropdown-primary mx-2\" class=\"form-control\" name=\"productName\"\n              [(ngModel)]=\"productName\" (change)=\"onChangeProduct()\">\n              <option [ngValue]=\"null\">Select Product</option>\n              <option *ngFor=\"let p of productsList\" [ngValue]=\"p\">{{p}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <!--Card-->\n      <div class=\"card card-cascade narrower body-section\">\n        <div\n          class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n          <div>\n          </div>\n          <h4 href=\"\" class=\"white-text mx-3\">Order List </h4>\n          <div>\n            <button type=\"button\" class=\"btn btn-outline-white btn-rounded btn-sm px-2 white-text mx-3\"\n              (click)=\"viewPaymentPendingOrders()\">Payment Pending Orders</button>\n          </div>\n        </div>\n        <div class=\"card-body\">\n          <div class=\"table table-responsive table-striped table-bordered\">\n            <table class=\"table text-nowrap\">\n              <thead>\n                <tr>\n\n                  <th>Order ID </th>\n                  <th>Product Name</th>\n                  <th>Date</th>\n                  <th>Equipment Name</th>\n                  <th>Quantity </th>\n                  <th>Total Value </th>\n                  <th *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">Corporate User Id</th>\n                  <th *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">User Name</th>\n                  <th *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">Region</th>\n                  <th *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">State</th>\n                  <th *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">City</th>\n                  <th *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">Office</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let o of orderManagementList | \n                paginate: { id: 'listing_pagination',\n                itemsPerPage: 4,\n                currentPage: page,\n                totalItems: totalRec }\">\n\n                  <td>{{o.orderRefNumber}}</td>\n                  <td>{{o.masterProducts.productName}}</td>\n                  <td>{{o.orderDate | date }}</td>\n                  <td>{{o.equipment.equipmentName}}</td>\n                  <td>{{o.totalQuantity}}</td>\n                  <td>{{o.totalAmount}}</td>\n                  <td *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">{{o.user.uniqueUserId}}</td>\n                  <td *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">\n                    {{o.user.firstName}}{{o.user.lastName}}</td>\n                  <td *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">{{o.user.region}}</td>\n                  <td *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">{{o.user.state}}</td>\n                  <td *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">{{o.user.city}}</td>\n                  <td *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">{{o.user.officeName}}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <div class=\"d-flex justify-content-between\">\n            <div class=\"wrap\">\n              <pagination-controls id=\"listing_pagination\" maxSize=\"4\" directionLinks=\"true\" responsive=\"true\"\n                (pageChange)=\"page = $event\">\n              </pagination-controls>\n            </div>\n          </div>\n          <div class=\"button-section\">\n            <button class=\"btn btn-default btn-lg\" (click)=\"onOrderList()\">Back</button>\n            <button class=\"btn btn-unique btn-lg\" [routerLink]=\"['/create']\">Order</button>&nbsp;\n            <button class=\"btn btn-brown btn-lg\" [routerLink]=\"['/pre-order']\">Pre-Order</button>&nbsp;\n            <button class=\"btn btn-primary btn-lg\" [routerLink]=\"['/dashboard']\">Dashboard</button>\n          </div>\n        </div>\n      </div>\n    </section>\n  </div>\n\n\n  <div class=\"container-fluid\" *ngIf=\"iteration == 'viewPaymentPendingOrders'\">\n    <section class=\"mb-5\">\n      <br><br><br><br>\n      <!--Card-->\n      <div class=\"card card-cascade narrower body-section\">\n        <div\n          class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n          <div>\n          </div>\n          <h4 href=\"\" class=\"white-text mx-3\"> Order Payment Pending</h4>\n          <div>\n\n          </div>\n        </div>\n        <div class=\"card-body\">\n          <div class=\"table table-responsive table-striped table-bordered\">\n            <table class=\"table text-nowrap\">\n              <thead>\n                <tr>\n\n                  <th>Order ID </th>\n                  <th>Product Name</th>\n                  <th>Date</th>\n                  <th>Equipment Name</th>\n                  <th>Quantity </th>\n                  <th>Total Value </th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let o of orderManagementList |\n                paginate: { id: 'listing_pagination1',\n                itemsPerPage: 4,\n                currentPage: page1,\n                totalItems: totalRec }\">\n\n                  <td>{{o.orderRefNumber}}</td>\n                  <td>{{o.masterProducts.productName}}</td>\n                  <td>{{o.orderDate | date }}</td>\n                  <td>{{o.equipment.equipmentName}}</td>\n                  <td>{{o.totalQuantity}}</td>\n                  <td>{{o.totalAmount}}</td>\n                </tr>\n                <tr *ngIf=\"orderManagementList==null || orderManagementList.length==0\">\n                  <td colspan=\"6\">\n                    <h4>No Data Found To Display....</h4>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <div class=\"d-flex justify-content-between\">\n            <div class=\"wrap\">\n              <pagination-controls id=\"listing_pagination1\" maxSize=\"4\" directionLinks=\"true\" responsive=\"true\"\n                (pageChange)=\"page1 = $event\">\n              </pagination-controls>\n            </div>\n          </div>\n          <div class=\"button-section\">\n            <button class=\"btn btn-default btn-lg\" (click)=\"onOrderList()\">Back</button>\n            <button class=\"btn btn-unique btn-lg\" [routerLink]=\"['/create']\">Order</button>&nbsp;\n            <button class=\"btn btn-brown btn-lg\" [routerLink]=\"['/pre-order']\">Pre-Order</button>&nbsp;\n            <button class=\"btn btn-primary btn-lg\" [routerLink]=\"['/dashboard']\">Dashboard</button>\n          </div>\n        </div>\n      </div>\n    </section>\n  </div>\n\n</main>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/User/paymentgateway/paymentgateway.component.html":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/User/paymentgateway/paymentgateway.component.html ***!
  \*********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n\n<div class=\"container \">\n  <div class=\"row\" *ngIf=\"pageIterator == 1\">\n    <div class=\"col-12 col-sm-8 col-md-8 col-lg-8 mx-auto\">\n      <div id=\"pay-invoice\" class=\"card\">\n        <div class=\"card-body\">\n          <div class=\"card-title\">\n            <h3 class=\"text-center\">Payment</h3>\n          </div><br>\n          <h4>Amount To Pay : Rs. XXX</h4><br>\n          <hr>\n          <form>\n            <div class=\"form-group\">\n              <label for=\"cc-number\" class=\"control-label mb-1\">Card number</label>\n              <input id=\"cc-number\" name=\"cc-number\" type=\"tel\" class=\"form-control cc-number identified visa\" required\n                autocomplete=\"off\">\n              <span class=\"invalid-feedback\">Enter a valid 12 to 16 digit card number</span>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-6\">\n                <div class=\"form-group\">\n                  <label for=\"cc-exp\" class=\"control-label mb-1\">Expiration</label>\n                  <input id=\"cc-exp\" name=\"cc-exp\" type=\"tel\" class=\"form-control cc-exp\" required placeholder=\"MM / YY\"\n                    autocomplete=\"cc-exp\">\n                  <span class=\"invalid-feedback\">Enter the expiration date</span>\n                </div>\n              </div>\n              <div class=\"col-6\">\n                <label for=\"x_card_code\" class=\"control-label mb-1\">CVV</label>\n                <div class=\"input-group\">\n                  <input id=\"x_card_code\" name=\"x_card_code\" type=\"tel\" class=\"form-control cc-cvc\" required\n                    autocomplete=\"off\">\n                  <span class=\"invalid-feedback order-last\">Enter the 3-digit code on back</span>\n                  <div class=\"input-group-append\">\n                    <div class=\"input-group-text\">\n                      <span class=\"fa fa-question-circle fa-lg\" data-toggle=\"popover\" data-container=\"body\"\n                        data-html=\"true\" data-title=\"CVV\" data-trigger=\"hover\"></span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"form-group\">\n              <label for=\"x_promotion\" class=\"control-label mb-1\">Name as on Card</label>\n              <input id=\"x_promotion\" name=\"x_prom\" type=\"text\" class=\"form-control\" value=\"\" data-val=\"true\"\n                data-val-required=\"Please enter the Promotion  code\">\n              <span class=\"help-block\" data-valmsg-for=\"x_promotion\" data-valmsg-replace=\"true\"></span>\n            </div>\n\n            <div>\n              <button class=\"btn btn-primary\" (click)=\"onPay()\">\n                Pay\n              </button>&nbsp;&nbsp;\n              <button class=\"btn btn-primary\" [routerLink]=\"['/dashboard']\">\n                Dashboard\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<br>\n<div class=\"container\" *ngIf=\"pageIterator == 2\">\n  <div id=\"login\">\n    <h3 class=\"text-center text-white pt-5\">Login form</h3>\n    <div class=\"container\">\n      <div id=\"login-row\" class=\"row justify-content-center align-items-center\">\n        <div id=\"login-column\" class=\"col-md-6\">\n          <div id=\"login-box\" class=\"col-md-12\">\n            <div class=\"card-header\">\n              <h3>Enter One Time Password</h3>\n\n            </div>\n            <form class=\"form\">\n\n              <br>\n              <h5>We have Sent you One time Password to your\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Registered Mobile Number</h5>\n              <br>\n              <div class=\"form-group\">\n                <label for=\"otp\" class=\"text-info\"> One Time Password :</label><br>\n                <input type=\"password\" name=\"otp\" class=\"form-control\" placeholder=\"Enter OTP\" formControlName=\"otp\"\n                  autofocus>\n\n              </div>\n              <div class=\"form-group\">\n\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"onSubmit()\">Submit </button>&nbsp;&nbsp;\n                <button type=\"button\" class=\"btn btn-default\" (click)=\"onClickBack()\">Back</button>\n\n              </div>\n\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"container\" *ngIf=\"pageIterator == 3\">\n  <br><br>\n  <div class=\"card-header\">\n    <h2 style=\"text-align: center;\"> Pre-Order Locked Successfuly </h2>\n  </div>\n  <br>\n  <h5 style=\"color: red;margin-left: 20px;\">Pre-Order Summary</h5>\n  <div class=\"card-body\">\n    <div class=\"row\">\n      <div class=\"col-md-6\">\n        <div class=\"list-group\">\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-primary\">\n            Id\n            <span>P001</span>\n          </a>\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-danger\">\n            Product :\n            <span>P1</span>\n          </a>\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-primary\">Quantity\n            :\n            <span>1000 Units</span>\n          </a>\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-danger\">\n            Price :\n            <span>Rs. 12/ Units</span>\n          </a>\n\n\n        </div>\n      </div>\n      <div class=\"col-md-6\">\n\n        <div class=\"list-group list-1\">\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-primary\">\n            Month and Year :\n            <span>Mouse</span>\n          </a>\n\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-danger\">Margin\n            Used :\n            <span>Rs. 1800</span>\n          </a>\n\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-danger\">Total\n            Value :\n            <span>Rs. 12000</span>\n          </a>\n\n\n        </div>\n      </div>\n    </div><br>\n    <div class=\"button-section\">\n      <button type=\"submit\" [routerLink]=\"['/dashboard']\" class=\"btn btn-primary\" style=\"float: right;\">\n        Dashboard\n      </button>\n      <button type=\"submit\" class=\"btn btn-primary\" style=\"float: right;\" [routerLink]=\"['/walletbalance']\">\n        Check Balence\n      </button>&nbsp;&nbsp;&nbsp;\n      <button type=\"submit\" [routerLink]=\"['/viewallorder']\" class=\"btn btn-primary\" style=\"float: right;\">\n        View all Orders\n      </button>\n    </div>\n  </div>\n</div>\n\n<div class=\"container\" *ngIf=\"pageIterator == 4\">\n  <br><br>\n  <br>\n  <h5 style=\"color: red;margin-left: 20px;\">Account Summary</h5>\n  <div class=\"card-body\">\n    <div class=\"row\">\n      <div class=\"col-md-6\">\n        <div class=\"list-group\">\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-primary\">\n            Wallet Balance :\n            <span>Rs. 1813.00</span>\n          </a>\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-danger\">\n            Margin in use :\n            <span>Rs. 2000</span>\n          </a>\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-primary\">Credit\n            Limit Allocated :\n            <span>Rs. 7000</span>\n          </a>\n\n\n\n        </div>\n      </div>\n      <div class=\"col-md-6\">\n\n        <div class=\"list-group list-1\">\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-primary\">\n            Available Balance :\n            <span>Rs. 12500</span>\n          </a>\n\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-danger\">Margin\n            Used :\n            <span>Rs. 1800</span>\n          </a>\n\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-danger\">Available\n            Credit :\n            <span>Rs. 500</span>\n          </a>\n\n\n        </div>\n      </div>\n      <div class=\"container\">\n\n        <br>\n        <div class=\"card-body\">\n\n          <div class=\"form-group row\">\n\n            <div class=\"col-md-2\">\n              <select class=\"browser-default custom-select\">\n                <option>Custom Range</option>\n                <option>15 Days</option>\n                <option>Current Month</option>\n              </select>\n\n            </div><br>\n\n\n            <!-- <div class=\"col-md-1\"></div> -->\n\n\n            <div class=\"col-md-2\">\n              <div class=\"form-group\">\n                <input type=\"text\" placeholder=\"From\" class=\"form-control\">\n              </div>\n            </div>\n            <div class=\"col-md-2\">\n              <div class=\"form-group\">\n                <input type=\"text\" placeholder=\"To\" class=\"form-control\">\n              </div>\n            </div>\n            <span><button class=\"btn btn-primary\"> Search </button> </span>\n\n          </div>\n        </div>\n\n        <div class=\"table-responsive\">\n          <table class=\"table  table-striped table-responsive-md btn-table\">\n            <thead>\n              <tr>\n\n                <th>Date </th>\n                <th>Discription</th>\n                <th>In (Rs).</th>\n                <th>Out (Rs).</th>\n                <th>Available Balance</th>\n                <th>Wallet Balance </th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr *ngFor=\"let x of selectedData  | paginate: {itemsPerPage: 5, currentPage: p}\">\n\n              </tr>\n\n\n            </tbody>\n          </table>\n          <pagination-controls (pageChange)=\"p =$event\"></pagination-controls>\n        </div>\n\n\n      </div>\n      <div class=\"col-md-6 offset-md-4\">\n        <br><br>\n        <button type=\"submit\" class=\"btn btn-primary\" style=\"float: right;\" (click)=\"onaccountBack()\">\n          Back\n        </button>&nbsp;&nbsp;&nbsp;\n        <button type=\"submit\" [routerLink]=\"['/dashboard']\" class=\"btn btn-primary\" style=\"float: right;\">\n          Dashboard\n        </button>\n\n      </div>\n\n    </div>\n  </div>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/User/preorder/preorder.component.html":
/*!*********************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/User/preorder/preorder.component.html ***!
  \*********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n<main>\n\t<div class=\"card pre\" *ngIf=\"iteration == 'initial'\">\n\t\t<h5 class=\"card-header gradient-card-header blue-gradient white-text text-center py-4 start\">\n\t\t\t<strong>Preorder Options</strong>\n\t\t</h5>\n\t\t<div class=\"card-body\">\n\t\t\t<div class=\"container end\">\n\t\t\t\t<div class=\"row text-center\">\n\t\t\t\t\t<div class=\"col-6 col-md-4\">\n\t\t\t\t\t\t<div class=\"card card-cascade\" (click)=\"createPreOrder()\">\n\t\t\t\t\t\t\t<div class=\"view view-cascade gradient-card-header blue-gradient\">\n\t\t\t\t\t\t\t\t<h3 style=\"color: white;\">Create Preorder</h3>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"card-body card-body-cascade text-center\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-plus-square-o importfa\" style=\"color:#0091ea \"></i>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-6 col-md-4\">\n\t\t\t\t\t\t<div class=\"card card-cascade\" (click)=\"viewAllPreOrders()\">\n\t\t\t\t\t\t\t<div class=\"view view-cascade gradient-card-header blue-gradient\">\n\t\t\t\t\t\t\t\t<h3 style=\"color: white;\">View Preorder</h3>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"card-body card-body-cascade text-center\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-newspaper-o importfa\" style=\"color:#ffa000\"></i>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-6 col-md-4\">\n\t\t\t\t\t\t<div class=\"card card-cascade\" (click)=\"cancelPreOrder()\">\n\t\t\t\t\t\t\t<div class=\"view view-cascade gradient-card-header blue-gradient\">\n\t\t\t\t\t\t\t\t<h3 style=\"color: white;\">Cancel Preorder</h3>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"card-body card-body-cascade text-center\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-times-circle-o importfa\" style=\"color:red\"></i>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br>\n\n\t\t\t\t<div class=\"button-section\">\n\t\t\t\t\t<button type=\"button\" class=\"btn btn-default btn-lg\" [routerLink]=\"['/dashboard']\">Back</button>\n\t\t\t\t</div>\n\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</main>\n\n<!-- Product & Warehouse Selection  -->\n<div class=\"container\" *ngIf=\"iteration == 'productWarehouseSelection'\">\n\t<!-- Card -->\n\t<div class=\"card card-cascade\">\n\t\t<!-- Card image -->\n\t\t<div class=\"view view-cascade gradient-card-header blue-gradient\">\n\t\t\t<!-- Title -->\n\t\t\t<h3 style=\"color: white;\">Create Preorder - Warehouse Selection</h3>\n\t\t</div>\n\t\t<!-- Card content -->\n\t\t<div class=\"card-body card-body-cascade text-center\">\n\t\t\t<form name=\"form\" (ngSubmit)=\"next()\" #f=\"ngForm\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-6\">\n\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t<select class=\"form-control\" name=\"preOrderManagement1.masterProducts\"\n\t\t\t\t\t\t\t\t[(ngModel)]=\"preOrderManagement1.masterProducts\" (ngModelChange)=\"onChangeProduct()\"\n\t\t\t\t\t\t\t\t#masterProducts=\"ngModel\"\n\t\t\t\t\t\t\t\t[ngClass]=\"{ 'is-invalid': f.submitted && masterProducts.invalid }\" required>\n\t\t\t\t\t\t\t\t<option [ngValue]=\"masterProducts.productId\">Select Product</option>\n\t\t\t\t\t\t\t\t<option *ngFor=\"let masterProducts of masterProductsList\" [ngValue]=\"masterProducts\">\n\t\t\t\t\t\t\t\t\t{{masterProducts.productName}}</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t<div *ngIf=\"f.submitted && masterProducts.invalid\" class=\"invalid-feedback\">\n\t\t\t\t\t\t\t\t<div *ngIf=\"masterProducts.errors.required\">Please Select Product</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t<select class=\"form-control\" name=\"preOrderManagement1.stateName\"\n\t\t\t\t\t\t\t\t[(ngModel)]=\"preOrderManagement1.stateName\" #stateName=\"ngModel\"\n\t\t\t\t\t\t\t\t(ngModelChange)=\"onChangeFilter()\"\n\t\t\t\t\t\t\t\t[ngClass]=\"{ 'is-invalid': f.submitted && stateName.invalid }\" required>\n\t\t\t\t\t\t\t\t<option [ngValue]=\"s\">Select State</option>\n\t\t\t\t\t\t\t\t<option *ngFor=\"let s of selectedStates\" [ngValue]=\"s\">\n\t\t\t\t\t\t\t\t\t{{s}}</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t<div *ngIf=\"f.submitted && stateName.invalid\" class=\"invalid-feedback\">\n\t\t\t\t\t\t\t\t<div *ngIf=\"stateName.errors.required\">Please Select State</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t<select class=\"form-control\" name=\"preOrderManagement1.warehouse\"\n\t\t\t\t\t\t\t\t[(ngModel)]=\"preOrderManagement1.warehouse\" (ngModelChange)=\"onChangeWarehouse()\"\n\t\t\t\t\t\t\t\t#warehouse=\"ngModel\" [ngClass]=\"{ 'is-invalid': f.submitted && warehouse.invalid }\"\n\t\t\t\t\t\t\t\trequired>\n\t\t\t\t\t\t\t\t<option [ngValue]=\"w\">Select Warehouse</option>\n\t\t\t\t\t\t\t\t<option [ngValue]=\"null\">Select All Warehouses</option>\n\t\t\t\t\t\t\t\t<option *ngFor=\"let w of warehouseList\" [ngValue]=\"w\">{{w.warehouseName}}</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t<div *ngIf=\"f.submitted && warehouse.invalid\" class=\"invalid-feedback\">\n\t\t\t\t\t\t\t\t<div *ngIf=\"warehouse.errors.required\">Please Select Warehouse</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-6\">\n\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t<select class=\"form-control\" name=\"preOrderManagement1.region\"\n\t\t\t\t\t\t\t\t[(ngModel)]=\"preOrderManagement1.region\" #region=\"ngModel\"\n\t\t\t\t\t\t\t\t(ngModelChange)=\"onChangeFilter()\"\n\t\t\t\t\t\t\t\t[ngClass]=\"{ 'is-invalid': f.submitted && region.invalid }\" required>\n\t\t\t\t\t\t\t\t<option [ngValue]=\"r\">Select Region</option>\n\n\t\t\t\t\t\t\t\t<option *ngFor=\"let r of selectedRegion\" [ngValue]=\"r\">\n\t\t\t\t\t\t\t\t\t{{r}}</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t<div *ngIf=\"f.submitted && region.invalid\" class=\"invalid-feedback\">\n\t\t\t\t\t\t\t\t<div *ngIf=\"region.errors.required\">Please Select Region</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t<select class=\"form-control\" name=\"preOrderManagement1.cityName\"\n\t\t\t\t\t\t\t\t[(ngModel)]=\"preOrderManagement1.cityName\" (ngModelChange)=\"onChangeFilter()\"\n\t\t\t\t\t\t\t\t#cityName=\"ngModel\" [ngClass]=\"{ 'is-invalid': f.submitted && cityName.invalid }\"\n\t\t\t\t\t\t\t\trequired>\n\t\t\t\t\t\t\t\t<option [ngValue]=\"c\">Select City</option>\n\t\t\t\t\t\t\t\t<option *ngFor=\"let c of selectedCity\" [ngValue]=\"c\">\n\t\t\t\t\t\t\t\t\t{{c}}</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t<div *ngIf=\"f.submitted && cityName.invalid\" class=\"invalid-feedback\">\n\t\t\t\t\t\t\t\t<div *ngIf=\"cityName.errors.required\">Please Select City</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-2\"></div>\n\t\t\t\t\t<div class=\"col-md-6\">\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-md-4\">\n\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">BACK</button>\n\t\t\t\t\t\t<button type=\"submit\" class=\"btn btn-success social-btn btn-lg\">PROCEED</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t</div>\n\t</div>\n\t<!-- Card -->\n</div>\n\n<div class=\"container importct\" *ngIf=\" iteration == 'createPreOrder'\">\n\t<form name=\"form\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-sm-4\" id=\"wallet-1\">\n\t\t\t\t<div class=\"card\" id=\"import\">\n\t\t\t\t\t<div class=\"card-header view view-cascade gradient-card-header blue-gradient imp\">\n\t\t\t\t\t\tWarehouse Selection Details\n\t\t\t\t\t</div><br>\n\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-sm-6\"> Product </div>\n\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t{{preOrderManagement.productName}}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<hr />\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-sm-6\">State</div>\n\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t<p *ngIf=\"preOrderManagement.stateName!=null\">{{preOrderManagement.stateName}}</p>\n\t\t\t\t\t\t\t<p *ngIf=\"preOrderManagement.stateName==null\">All States</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<hr />\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-sm-6\">City</div>\n\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t<p *ngIf=\"preOrderManagement.cityName!=null\">{{preOrderManagement.cityName}}</p>\n\t\t\t\t\t\t\t<p *ngIf=\"preOrderManagement.cityName==null\">All Cities</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<hr />\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-sm-6\">Warehouse</div>\n\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t<p *ngIf=\"preOrderManagement.warehouseName!=null\">{{preOrderManagement.warehouseName}}</p>\n\t\t\t\t\t\t\t<p *ngIf=\"preOrderManagement.warehouseName==null\">All Warehouses</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<hr />\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importequipment\">Action</div>\n\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t<button type=\"button\" class=\"btn  btn-deep-orange btn-lg\"\n\t\t\t\t\t\t\t\t(click)=\"productWarehouseSelection()\">Edit</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-sm-8\" id=\"importcol\">\n\t\t\t\t<div class=\"card first\" *ngIf=\"preOrderAvgConsmption != null \">\n\t\t\t\t\t<div class=\"card-header view view-cascade gradient-card-header blue-gradient\">\n\t\t\t\t\t\tCreate Preorder - Preorder Details\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"row\" id=\"import\">\n\t\t\t\t\t\t<div class=\"col-sm-12\">\n\t\t\t\t\t\t\t<h4 class=\"importtr\">Time Frame</h4>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"col-sm-3\">\n\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-outline-primary waves-effect btn-block\">1\n\t\t\t\t\t\t\t\tMonth</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-sm-3\">\n\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-outline-primary waves-effect btn-block\">3\n\t\t\t\t\t\t\t\tMonth</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-sm-3\">\n\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-outline-primary waves-effect btn-block\">6\n\t\t\t\t\t\t\t\tMonth</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-sm-3\">\n\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-outline-primary waves-effect btn-block\">12\n\t\t\t\t\t\t\t\tMonth</button>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<!-- avg con -->\n\t\t\t\t\t\t<div class=\"col-sm-12\">\n\t\t\t\t\t\t\t<h4 class=\"importtr1\">Avg Consumption</h4>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-sm-3\">\n\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-outline-primary waves-effect btn-block\">\n\t\t\t\t\t\t\t\t{{preOrderAvgConsmption.oneMonthAvgUnits}}\n\t\t\t\t\t\t\t\t{{preOrderManagement.productUnit}}\n\t\t\t\t\t\t\t</button>\n\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-sm-3\">\n\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-outline-primary waves-effect btn-block\">\n\t\t\t\t\t\t\t\t{{preOrderAvgConsmption.threeMonthAvgUnits}}\n\t\t\t\t\t\t\t\t{{preOrderManagement.productUnit}}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-sm-3\">\n\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-outline-primary waves-effect btn-block\">\n\t\t\t\t\t\t\t\t{{preOrderAvgConsmption.sixMonthAvgUnits}}\n\t\t\t\t\t\t\t\t{{preOrderManagement.productUnit}}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-sm-3\">\n\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-outline-primary waves-effect btn-block\">\n\t\t\t\t\t\t\t\t{{preOrderAvgConsmption.twelveMonthAvgUnits}}\n\t\t\t\t\t\t\t\t{{preOrderManagement.productUnit}}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div id=\"importbll\">\n\t\t\t\t\t\t\t<div class=\"col-sm-12\">\n\t\t\t\t\t\t\t\t<h4 class=\"importor\">\n\t\t\t\t\t\t\t\t\tExisting Preorder Quantity\n\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;<b style=\"color: red;\">\n\t\t\t\t\t\t\t\t\t\t{{preOrderAvgConsmption.totalPreOrderUnits}}\n\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.productUnit}}</b>\n\t\t\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-sm-12\">\n\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t<div class=\"col-sm-6\">Balance In App</div>\n\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t\t{{preOrderManagement.walletDetails.walletBalance  | currency: preOrderManagement.walletDetails.walletCurrency}}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t<div class=\"col-sm-6\">Locked Margin</div>\n\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t\t{{preOrderManagement.walletDetails.marginInUse |currency: preOrderManagement.walletDetails.walletCurrency}}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t<div class=\"col-sm-6\">Available Balance In App</div>\n\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t\t{{preOrderManagement.walletDetails.availableBalance | currency: preOrderManagement.walletDetails.walletCurrency}}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"col-sm-12\">\n\t\t\t\t\t\t\t<br>\n\t\t\t\t\t\t\t<div class=\"button-section\">\n\t\t\t\t\t\t\t\t<button class=\"btn btn-default btn-lg createbtn2\"\n\t\t\t\t\t\t\t\t\t[routerLink]=\"['/dashboard']\">Back</button>\n\t\t\t\t\t\t\t\t<button class=\"btn btn-pink btn-lg createbtn1\" (click)=\"viewAllPreOrders()\">View\n\t\t\t\t\t\t\t\t\tPreorders</button>\n\t\t\t\t\t\t\t\t<button class=\"btn btn-success btn-lg createbtn\" (click)=\"onProceed()\">Proceed</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t</div>\n\t</form>\n</div>\n\n\n\n<!-- Pre-Order Lock Menu -->\n<div class=\"container importct\" *ngIf=\" iteration == 'proceed'\">\n\t<div class=\"row\">\n\n\t\t<div class=\"col-sm-4\" id=\"wallet-1\">\n\t\t\t<div class=\"card\" id=\"import\">\n\t\t\t\t<div class=\"card-header view view-cascade gradient-card-header blue-gradient imp\">\n\t\t\t\t\tMarket Price\n\t\t\t\t</div><br>\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-sm-6\"> Vendor Name </div>\n\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t{{preOrderManagement.vendorProductPriceList[0].vendorName}}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<hr />\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-sm-6\">Price</div>\n\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t{{preOrderManagement.vendorProductPriceList[0].priceValue | currency: preOrderManagement.walletDetails.walletCurrency}}\n\t\t\t\t\t\t/\n\t\t\t\t\t\t{{preOrderManagement.productUnit}}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<hr />\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-sm-6\">Vendor Name</div>\n\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t{{preOrderManagement.vendorProductPriceList[1].vendorName}}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<hr />\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-sm-6\">Price</div>\n\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t{{preOrderManagement.vendorProductPriceList[1].priceValue | currency: preOrderManagement.walletDetails.walletCurrency}}\n\t\t\t\t\t\t/\n\t\t\t\t\t\t{{preOrderManagement.productUnit}}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"col-sm-8\">\n\t\t\t<div class=\"card first\">\n\t\t\t\t<div class=\"card-header view view-cascade gradient-card-header blue-gradient\">\n\t\t\t\t\tCreate Preorder - Lock Menu\n\t\t\t\t</div><br>\n\t\t\t\t<div class=\"card-body\">\n\t\t\t\t\t<div class=\"row\" id=\"importrow\">\n\t\t\t\t\t\t<div class=\"col-lg-3 col-md-3 col-sm-3\">\n\t\t\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t\t\t<label class=\"label\">Year</label>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<button *ngFor=\"let year of preOrderYears\"\n\t\t\t\t\t\t\t\t[ngClass]=\"{'btn': true, 'btn-info section' : !year.isSelected, 'btn-danger section1' : year.isSelected }\"\n\t\t\t\t\t\t\t\t(click)=\"onYearClick(year.year)\">{{year.year}}</button>&nbsp;&nbsp;\n\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"col-lg-4 col-md-4 col-sm-4\">\n\n\t\t\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t\t\t<label class=\"label\">Quarter</label>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t[ngClass]=\"{'btn': true, 'btn-info section' : !quarter.isSelected, 'btn-danger section1' : quarter.isSelected}\"\n\t\t\t\t\t\t\t\t*ngFor=\"let quarter of preOrderQuarters\"\n\t\t\t\t\t\t\t\t(click)=\"onQuarterClick(quarter.quarter)\">{{quarter.quarterName}}</button>&nbsp;&nbsp;\n\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-lg-5 col-md-5 col-sm-5\">\n\t\t\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t\t\t<label class=\"label\">Month</label>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t[ngClass]=\"{'btn': true, 'btn-info section' : !month.isSelected, 'btn-danger section1' : month.isSelected}\"\n\t\t\t\t\t\t\t\t*ngFor=\"let month of preOrderMonths\"\n\t\t\t\t\t\t\t\t(click)=\"onMonthClick(month.monthNo)\">{{month.monthName}}</button>&nbsp;&nbsp;\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"card-body\">\n\t\t\t\t\t<div class=\"row\" id=\"importheight\">\n\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importside\">\n\t\t\t\t\t\t\t<label id=\"importlabel1\">Preorder</label>\n\t\t\t\t\t\t\t<div class=\"input-group mb-3\">\n\t\t\t\t\t\t\t\t<div class=\"input-group-prepend imprt\">\n\t\t\t\t\t\t\t\t\t<div class=\"input-group-text\"><i class=\"fa {{curr}}\" style=\"font-size:20px\"></i>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<input type=\"number\" class=\"form-control input-vendor\" name=\"preOrderQuantity\"\n\t\t\t\t\t\t\t\t\t[(ngModel)]=\"preOrderManagement.preOrderQuantity\"\n\t\t\t\t\t\t\t\t\tplaceholder=\" Enter Pre Order Quantity\" (input)=\"onPreOrderQuantity()\"\n\t\t\t\t\t\t\t\t\t#preOrderQuantity=\"ngModel\" required min=\"1\" oninput=\"validity.valid||(value='');\">\n\t\t\t\t\t\t\t\t<div class=\"input-group-append imprt1\">\n\t\t\t\t\t\t\t\t\t<span class=\"input-group-text\"\n\t\t\t\t\t\t\t\t\t\tid=\"basic-addon2\"><b>{{preOrderManagement.productUnit}}</b></span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-sm-6\">\n\t\t\t\t\t\t\t<p id=\"importheading\">Preorder Month & Year - {{preOrderManagement.month }}\n\t\t\t\t\t\t\t\t{{preOrderManagement.preOrderYear}}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<hr />\n\t\t\t\t\t<div class=\"col-sm-12\">\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importpre\">Preorder Price</div>\n\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t{{preOrderManagement.preOrderPrice | currency: preOrderManagement.walletDetails.walletCurrency}}\n\t\t\t\t\t\t\t\t/ {{preOrderManagement.productUnit}}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importpre\"> Margin</div>\n\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t{{preOrderManagement.margin}} ({{preOrderManagement.marginIn}})\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importpre\">Savings</div>\n\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t{{preOrderManagement.savingsValue | number :\n\t\t\t\t\t\t\t\t\t'1.2-2'}} %\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t<div class=\"row\" id=\"importpre\">\n\t\t\t\t\t\t\t<div class=\"col-sm-6\">Preorder</div>\n\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t{{preOrderManagement.totalAmount | currency: preOrderManagement.walletDetails.walletCurrency}}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t<div class=\"row\" id=\"importpre\">\n\t\t\t\t\t\t\t<div class=\"col-sm-6\">Margin Required</div>\n\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t{{preOrderManagement.marginValue |  currency: preOrderManagement.walletDetails.walletCurrency}}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<hr />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div *ngIf=\"preOrderManagement.topupAndLock == true\">\n\t\t\t\t\t\t<h5 style=\"text-align: center; color: red;font-weight: bold;\">\n\t\t\t\t\t\t\tMinimum Topup to Lock this Preorder is\n\t\t\t\t\t\t\t{{preOrderManagement.requiredAmount  |  currency: preOrderManagement.walletDetails.walletCurrency}}\n\t\t\t\t\t\t</h5>\n\t\t\t\t\t\t<button class=\"btn btn-success btn-lg\" style=\"float:right\" (click)=\"onTopupAndLock()\">Topup\n\t\t\t\t\t\t\tAnd Lock</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div *ngIf=\"preOrderManagement.lock == true\">\n\t\t\t\t\t\t<div class=\"button-section\">\n\t\t\t\t\t\t\t<button class=\"btn btn-success btn-lg\" (click)=\"onLock()\">Lock</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div class=\"button-section\">\n\t\t\t\t\t\t\t<button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n</div>\n\n<!-- Pre Order Success Page-->\n<div class=\"container importct\" *ngIf=\"iteration == 'preOrderSuccessPage'\">\n\t<form name=\"form\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-sm-3\"></div>\n\t\t\t<div class=\"col-sm-6\" id=\"wallet-1\">\n\t\t\t\t<div class=\"card-header view view-cascade gradient-card-header blue-gradient\">\n\t\t\t\t\tCreate Preorder - Preorder Summary\n\t\t\t\t</div>\n\t\t\t\t<div class=\"card\" id=\"import\">\n\t\t\t\t\t<h4 style=\"color:red\" *ngIf=\"preOrderManagement.paymentStatus=='PENDING'\">Pending For Payment Update\n\t\t\t\t\t</h4>\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-sm-12\">\n\t\t\t\t\t\t\t<div class=\"importcard\">\n\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\"> Preorder Id </div>\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t\t\t<p>{{preOrderManagement.preOrderRefNumber}}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\">Product </div>\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.masterProducts.productName}}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\">Quantity </div>\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.preOrderQuantity}}\n\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.masterProducts.productUnit.paramName}}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<hr>\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\">Price </div>\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.preOrderPrice | currency: 'INR'}}\n\t\t\t\t\t\t\t\t\t\t/ {{preOrderManagement.masterProducts.productUnit.paramName}}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\">Month & Year </div>\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.month}}\n\t\t\t\t\t\t\t\t\t\t,{{preOrderManagement.preOrderYear}}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\">Margin Used </div>\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.marginValue |  currency: 'INR'}}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\">Total Value </div>\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.totalAmount |  currency: 'INR'}}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-sm-12\">\n\t\t\t\t\t\t\t<div class=\"button-section\">\n\t\t\t\t\t\t\t\t<button class=\"btn btn-primary btn-lg\" [routerLink]=\"['/dashboard']\">Dashboard</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</form>\n</div>\n\n<!-- View All Pre Orders -->\n<div class=\"container-fluid\" *ngIf=\"iteration == 'viewAllPreOrders'\">\n\t<section class=\"mb-5\">\n\t\t<div class=\"card p-2 mb-5\">\n\t\t\t<h4 class=\"filter\">Filters</h4>\n\t\t\t<div class=\"row v1\" *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">\n\n\t\t\t\t<div class=\"col-md-2\">\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<select class=\"mdb-select colorful-select dropdown-primary mx-2\" class=\"form-control\"\n\t\t\t\t\t\t\tname=\"year\" [(ngModel)]=\"year\" (ngModelChange)=\"onYear()\">\n\t\t\t\t\t\t\t<option [ngValue]=\"0\">Select Year</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let y of selectedYear\" [ngValue]=\"y\">{{y}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-2\">\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<select class=\"form-control\" name=\"productName\" [(ngModel)]=\"productName\"\n\t\t\t\t\t\t\t(ngModelChange)=\"onProduct()\">\n\t\t\t\t\t\t\t<option [ngValue]=\"null\">Select Product</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let p of selectedProductNames\" [ngValue]=\"p\">{{p}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-2\">\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<select class=\"form-control\" name=\"month\" [(ngModel)]=\"month\" (ngModelChange)=\"onMonth()\">\n\t\t\t\t\t\t\t<option [ngValue]=\"null\">Select Month</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let m of selectedMonth\" [ngValue]=\"m\">{{m}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-2\">\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<select class=\"form-control\" [(ngModel)]=\"region\" name=\"#region\"\n\t\t\t\t\t\t\t(ngModelChange)=\"onRegion(selected)\">\n\t\t\t\t\t\t\t<option [ngValue]=\"null\">Select Region</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let r of regionList\" [value]=\"r\">{{r}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-2\">\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<select class=\"form-control\" [(ngModel)]=\"state\" name=\"#state\"\n\t\t\t\t\t\t\t(ngModelChange)=\"onState(selected)\">\n\t\t\t\t\t\t\t<option [ngValue]=\"null\">Select State</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let s of stateList\" [value]=\"s\">{{s}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-2\">\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<select class=\"form-control\" [(ngModel)]=\"city\" name=\"#city\" (ngModelChange)=\"onCity(selected)\">\n\t\t\t\t\t\t\t<option [ngValue]=\"null\">Select City</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let c of cityList\" [value]=\"c\">{{c}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-2\">\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<select class=\"form-control\" [(ngModel)]=\"office\" name=\"#office\"\n\t\t\t\t\t\t\t(ngModelChange)=\"onOffice(selected)\">\n\t\t\t\t\t\t\t<option [ngValue]=\"null\">Select Office</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let o of officeList\" [value]=\"o\">{{o}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"col-md-2\">\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<select class=\"form-control\" [(ngModel)]=\"customerId\" name=\"#customerId\"\n\t\t\t\t\t\t\t(ngModelChange)=\"onCustomerId(selected)\">\n\t\t\t\t\t\t\t<option [ngValue]=\"null\">Select Customer Id</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let u of uniqueUserIdList\" [value]=\"u\">{{u}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div class=\"row v1\" *ngIf=\"user== null || user!=nulll && user.userType!='CORPORATE_SUPERVISOR'\">\n\t\t\t\t<div class=\"col-md-4\">\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<select class=\"mdb-select colorful-select dropdown-primary mx-2\" class=\"form-control\"\n\t\t\t\t\t\t\tname=\"year\" [(ngModel)]=\"year\" (ngModelChange)=\"onYear()\">\n\t\t\t\t\t\t\t<option [ngValue]=\"0\">Select Year</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let y of selectedYear\" [ngValue]=\"y\">{{y}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-4\">\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<select class=\"form-control\" name=\"productName\" [(ngModel)]=\"productName\"\n\t\t\t\t\t\t\t(ngModelChange)=\"onProduct()\">\n\t\t\t\t\t\t\t<option [ngValue]=\"null\">Select Product</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let p of selectedProductNames\" [ngValue]=\"p\">{{p}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-4\">\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<select class=\"form-control\" name=\"month\" [(ngModel)]=\"month\" (ngModelChange)=\"onMonth()\">\n\t\t\t\t\t\t\t<option [ngValue]=\"null\">Select Month</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let m of selectedMonth\" [ngValue]=\"m\">{{m}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t</div>\n\n\t\t<!--Card-->\n\t\t<div class=\"card card-cascade narrower body-section\">\n\t\t\t<div\n\t\t\t\tclass=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n\t\t\t\t<div>\n\t\t\t\t</div>\n\t\t\t\t<h4 href=\"\" class=\"white-text mx-3\">Preorder</h4>\n\t\t\t\t<div>\n\t\t\t\t\t<button type=\"button\" class=\"btn btn-outline-white btn-rounded btn-sm px-2 white-text mx-3\"\n\t\t\t\t\t\t(click)=\"viewPaymentPendingPreOrders()\">\n\t\t\t\t\t\tPayment Pending Preorders\n\t\t\t\t\t</button>\n\t\t\t\t\t<button type=\"button\" class=\"btn btn-outline-white btn-rounded btn-sm px-2 white-text mx-3\"\n\t\t\t\t\t\t(click)=\"viewAllPastPreOrders()\">\n\t\t\t\t\t\tView Old Preorders\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"card-body\">\n\t\t\t\t<div class=\"table table-responsive table-striped table-bordered\">\n\t\t\t\t\t<table class=\"table text-nowrap\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>Preorder ID</th>\n\t\t\t\t\t\t\t\t<th>Product Name</th>\n\t\t\t\t\t\t\t\t<th>Month</th>\n\t\t\t\t\t\t\t\t<th>Year </th>\n\t\t\t\t\t\t\t\t<th>Quantity </th>\n\t\t\t\t\t\t\t\t<th>Available Quantity </th>\n\t\t\t\t\t\t\t\t<th *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">Corporate User Id</th>\n\t\t\t\t\t\t\t\t<th *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">User Name</th>\n\t\t\t\t\t\t\t\t<th *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">Region</th>\n\t\t\t\t\t\t\t\t<th *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">State</th>\n\t\t\t\t\t\t\t\t<th *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">City</th>\n\t\t\t\t\t\t\t\t<th *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">Office</th>\n\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t<tr *ngFor=\"let p of preOrderManagementList  | \n                paginate: { id: 'listing_pagination1',\n                itemsPerPage: 4,\n                currentPage: page1,\n\t\t\t\ttotalItems: totalRec }\">\n\t\t\t\t\t\t\t\t<td>{{p.preOrderRefNumber}}</td>\n\t\t\t\t\t\t\t\t<td>{{p.masterProducts.productName}}</td>\n\t\t\t\t\t\t\t\t<td>{{p.month}}</td>\n\t\t\t\t\t\t\t\t<td>{{p.preOrderYear}}</td>\n\t\t\t\t\t\t\t\t<td>{{p.preOrderQuantity}} {{p.masterProducts.productUnit.paramName}}</td>\n\t\t\t\t\t\t\t\t<td>{{p.preOrderQuantity - (p.totalOrderQuantity+p.cancelledUnits)}}\n\t\t\t\t\t\t\t\t\t{{p.masterProducts.productUnit.paramName}}</td>\n\t\t\t\t\t\t\t\t<td *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">{{p.user.uniqueUserId}}\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">\n\t\t\t\t\t\t\t\t\t{{p.user.firstName}}{{p.user.lastName}}</td>\n\t\t\t\t\t\t\t\t<td *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">{{p.user.region}}</td>\n\t\t\t\t\t\t\t\t<td *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">{{p.user.state}}</td>\n\t\t\t\t\t\t\t\t<td *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">{{p.user.city}}</td>\n\t\t\t\t\t\t\t\t<td *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">{{p.user.officeName}}\n\t\t\t\t\t\t\t\t</td>\n\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td colspan=\"1\">\n\t\t\t\t\t\t\t\t\t<h5 style=\"color: black;font-weight: bold;\"> Total </h5>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td colspan=\"3\">\n\t\t\t\t\t\t\t\t</td>\n\n\t\t\t\t\t\t\t\t<td colspan=\"1\">\n\t\t\t\t\t\t\t\t\t<h5 style=\"color: red;font-weight: bold;\">{{totalPreOrderQuantity}}</h5>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td colspan=\"1\">\n\t\t\t\t\t\t\t\t\t<h5 style=\"color: green;font-weight: bold;\">{{totalAvailableQuantity}}</h5>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"d-flex justify-content-between\">\n\t\t\t\t\t<nav class=\"mt-4\">\n\t\t\t\t\t\t<pagination-controls id=\"listing_pagination1\" maxSize=\"4\" directionLinks=\"true\"\n\t\t\t\t\t\t\tresponsive=\"true\" (pageChange)=\"page1 = $event\">\n\t\t\t\t\t\t</pagination-controls>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"button-section\">\n\t\t\t\t\t<button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n\t\t\t\t\t<button class=\"btn btn-unique btn-lg\" [routerLink]=\"['/create']\">Order</button>\n\t\t\t\t\t<button class=\"btn btn-brown btn-lg\" (click)=\"createPreOrder()\">Preorder</button>\n\t\t\t\t\t<button class=\"btn btn-primary btn-lg\" [routerLink]=\"['/dashboard']\">Dashboard</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</section>\n</div>\n\n<!-- View All Payment Pending Pre Orders -->\n<div class=\"container-fluid\" *ngIf=\"iteration == 'viewAllPaymentPendingPreOrders'\">\n\t<section class=\"mb-5\">\n\t\t<br>\n\t\t<br>\n\t\t<br>\n\t\t<br>\n\t\t<!--Card-->\n\t\t<div class=\"card card-cascade narrower body-section\">\n\t\t\t<div\n\t\t\t\tclass=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n\t\t\t\t<div>\n\n\t\t\t\t</div>\n\t\t\t\t<h4 href=\"\" class=\"white-text mx-3\">Preorder Payment Pending </h4>\n\t\t\t\t<div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"card-body\">\n\t\t\t\t<div class=\"table table-responsive table-striped table-bordered\">\n\t\t\t\t\t<table class=\"table text-nowrap\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>Preorder ID</th>\n\t\t\t\t\t\t\t\t<th>Product Name</th>\n\t\t\t\t\t\t\t\t<th>Month</th>\n\t\t\t\t\t\t\t\t<th>Year </th>\n\t\t\t\t\t\t\t\t<th>Quantity </th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t<tr *ngFor=\"let p of preOrderManagementList  | \n                paginate: { id: 'listing_pagination4',\n                itemsPerPage: 4,\n                currentPage: page2,\n                totalItems: totalRec }\">\n\t\t\t\t\t\t\t\t<td>{{p.preOrderRefNumber}}</td>\n\t\t\t\t\t\t\t\t<td>{{p.masterProducts.productName}}</td>\n\t\t\t\t\t\t\t\t<td>{{p.month}}</td>\n\t\t\t\t\t\t\t\t<td>{{p.preOrderYear}}</td>\n\t\t\t\t\t\t\t\t<td>{{p.preOrderQuantity}} {{p.masterProducts.productUnit.paramName}} </td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"d-flex justify-content-between\">\n\t\t\t\t\t<div class=\"wrap\">\n\t\t\t\t\t\t<pagination-controls id=\"listing_pagination4\" maxSize=\"4\" directionLinks=\"true\"\n\t\t\t\t\t\t\tresponsive=\"true\" (pageChange)=\"page2= $event\">\n\t\t\t\t\t\t</pagination-controls>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"button-section\">\n\t\t\t\t\t<button class=\"btn btn-default btn-lg\" (click)=\"onViewPastBackClick()\">Back</button>\n\t\t\t\t\t<button class=\"btn btn-unique btn-lg\" [routerLink]=\"['/create']\">Order</button>\n\t\t\t\t\t<button class=\"btn btn-brown btn-lg\" (click)=\"createPreOrder()\">Preorder</button>\n\t\t\t\t\t<button class=\"btn btn-primary btn-lg\" [routerLink]=\"['/dashboard']\">Dashboard</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\t</section>\n</div>\n\n<!-- View All Past Pre Orders -->\n<div class=\"container-fluid\" *ngIf=\"iteration == 'viewAllPastPreOrders'\">\n\t<section class=\"mb-5\">\n\t\t<div class=\"card p-2 mb-5\">\n\t\t\t<h4 class=\"filter\">Filters</h4>\n\t\t\t<div class=\"row v1\">\n\t\t\t\t<div class=\"col-lg-4 col-md-12\">\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<select class=\"form-control\" name=\"year\" [(ngModel)]=\"year\" (ngModelChange)=\"onYear()\">\n\t\t\t\t\t\t\t<option [ngValue]=\"0\">Select Year</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let y of selectedYear\" [ngValue]=\"y\">{{y}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-lg-4 col-md-12\">\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<select class=\"form-control\" name=\"productName\" [(ngModel)]=\"productName\"\n\t\t\t\t\t\t\t(ngModelChange)=\"onProduct()\">\n\t\t\t\t\t\t\t<option [ngValue]=\"null\">Select Product</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let p of productsList\" [ngValue]=\"p\">{{p}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-lg-4 col-md-12\">\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<select class=\"form-control\" name=\"month\" [(ngModel)]=\"month\" (ngModelChange)=\"onMonth()\">\n\t\t\t\t\t\t\t<option [ngValue]=\"null\">Select Month</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let m of selectedMonth\" [ngValue]=\"m\">{{m}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<!--Card-->\n\t\t<div class=\"card card-cascade narrower body-section\">\n\t\t\t<div\n\t\t\t\tclass=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n\t\t\t\t<div>\n\n\t\t\t\t</div>\n\t\t\t\t<h4 href=\"\" class=\"white-text mx-3\">Old Preorder</h4>\n\t\t\t\t<div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"card-body\">\n\t\t\t\t<div class=\"table table-responsive table-striped table-bordered\">\n\t\t\t\t\t<table class=\"table text-nowrap\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>Preorder ID</th>\n\t\t\t\t\t\t\t\t<th>Product Name</th>\n\t\t\t\t\t\t\t\t<th>Month</th>\n\t\t\t\t\t\t\t\t<th>Year </th>\n\t\t\t\t\t\t\t\t<th>Quantity </th>\n\t\t\t\t\t\t\t\t<th>Utilized Quantity </th>\n\t\t\t\t\t\t\t\t<th>Cancelled Quantity</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t<tr *ngFor=\"let p of preOrderManagementList  | \n                paginate: { id: 'listing_pagination3',\n                itemsPerPage: 4,\n                currentPage: page3,\n                totalItems: totalRec }\">\n\t\t\t\t\t\t\t\t<td>{{p.preOrderRefNumber}}</td>\n\t\t\t\t\t\t\t\t<td>{{p.masterProducts.productName}}</td>\n\t\t\t\t\t\t\t\t<td>{{p.month}}</td>\n\t\t\t\t\t\t\t\t<td>{{p.preOrderYear}}</td>\n\t\t\t\t\t\t\t\t<td>{{p.preOrderQuantity}} {{p.masterProducts.productUnit.paramName}} </td>\n\t\t\t\t\t\t\t\t<td>{{p.totalOrderQuantity}} {{p.masterProducts.productUnit.paramName}}</td>\n\t\t\t\t\t\t\t\t<td>{{p.preOrderQuantity-p.totalOrderQuantity}}\n\t\t\t\t\t\t\t\t\t{{p.masterProducts.productUnit.paramName}}</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td colspan=\"1\">\n\t\t\t\t\t\t\t\t\t<h5 style=\"color: black;font-weight: bold;\"> Total </h5>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td colspan=\"3\">\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td colspan=\"1\">\n\t\t\t\t\t\t\t\t\t<h5 style=\"color: red;font-weight: bold;\">{{totalPreOrderQuantity}}</h5>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td colspan=\"1\">\n\t\t\t\t\t\t\t\t\t<h5 style=\"color: green;font-weight: bold;\">{{totalUtilizedPreOrderQuantity}}</h5>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td colspan=\"1\">\n\t\t\t\t\t\t\t\t\t<h5 style=\"color: green;font-weight: bold;\">\n\t\t\t\t\t\t\t\t\t\t{{totalPreOrderQuantity-totalUtilizedPreOrderQuantity}}\n\t\t\t\t\t\t\t\t\t</h5>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"d-flex justify-content-between\">\n\t\t\t\t\t<div class=\"wrap\">\n\t\t\t\t\t\t<pagination-controls id=\"listing_pagination3\" maxSize=\"6\" directionLinks=\"true\"\n\t\t\t\t\t\t\tresponsive=\"true\" (pageChange)=\"page3= $event\">\n\t\t\t\t\t\t</pagination-controls>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"button-section\">\n\t\t\t\t\t<button class=\"btn btn-default btn-lg\" (click)=\"onViewPastBackClick()\">Back</button>\n\t\t\t\t\t<button class=\"btn btn-unique btn-lg\" [routerLink]=\"['/create']\">Order</button>\n\t\t\t\t\t<button class=\"btn btn-brown btn-lg\" [routerLink]=\"['/pre-order']\">Preorder</button>\n\t\t\t\t\t<button class=\"btn btn-primary btn-lg\" [routerLink]=\"['/dashboard']\">Dashboard</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\t</section>\n</div>\n\n<!--View All  Cancel Pre-order  -->\n<div class=\"container-fluid\" *ngIf=\"iteration == 'cancelPreOrderView'\">\n\t<section class=\"mb-5\">\n\t\t<div class=\"card p-2 mb-5\">\n\t\t\t<h4 class=\"filter\">Filters</h4>\n\t\t\t<div class=\"row v1\">\n\t\t\t\t<div class=\" col-md-4\">\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<select class=\"form-control\" name=\"year\" [(ngModel)]=\"year\" (change)=\"onCancelFilter()\">\n\t\t\t\t\t\t\t<option [ngValue]=\"0\">Select Year</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let y of selectedYear\" [ngValue]=\"y\">{{y}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-4\">\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<select class=\"form-control\" name=\"month\" [(ngModel)]=\"month\" (change)=\"onCancelFilter()\">\n\t\t\t\t\t\t\t<option [ngValue]=\"null\">Select Month</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let m of selectedMonth\" [ngValue]=\"m\">{{m}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-4\">\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<select class=\"form-control\" name=\"productName\" [(ngModel)]=\"productName\"\n\t\t\t\t\t\t\t(change)=\"onCancelFilter()\">\n\t\t\t\t\t\t\t<option [ngValue]=\"null\">Select Product</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let p of selectedProductNames\" [ngValue]=\"p\">{{p}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<!--Card-->\n\t\t<div class=\"card card-cascade narrower body-section\">\n\t\t\t<div\n\t\t\t\tclass=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n\t\t\t\t<div>\n\t\t\t\t</div>\n\t\t\t\t<h4 href=\"\" class=\"white-text mx-3\">Cancel Preorder</h4>\n\t\t\t\t<div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"card-body\">\n\t\t\t\t<div class=\"table table-responsive table-striped table-bordered\">\n\t\t\t\t\t<table class=\"table text-nowrap\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>Preorder ID</th>\n\t\t\t\t\t\t\t\t<th>Product Name</th>\n\t\t\t\t\t\t\t\t<th>Month</th>\n\t\t\t\t\t\t\t\t<th>Year</th>\n\t\t\t\t\t\t\t\t<th>Total Quantity</th>\n\t\t\t\t\t\t\t\t<th>Available Quantity </th>\n\t\t\t\t\t\t\t\t<th>Action </th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t<tr *ngFor=\"let p of preOrderManagementList  | \n\t\t\t  paginate: { id: 'listing_pagination5',\n\t\t\t  itemsPerPage: 4,\n\t\t\t  currentPage: page5,\n\t\t\t  totalItems: totalRec }\">\n\t\t\t\t\t\t\t\t<td>{{p.preOrderRefNumber}}</td>\n\t\t\t\t\t\t\t\t<!--<td>{{p.preOrderId}}</td>-->\n\t\t\t\t\t\t\t\t<td>{{p.masterProducts.productName}}</td>\n\t\t\t\t\t\t\t\t<td>{{p.month}}</td>\n\t\t\t\t\t\t\t\t<td>{{p.preOrderYear}}</td>\n\t\t\t\t\t\t\t\t<td>{{p.preOrderQuantity}} {{p.masterProducts.productUnit.paramName}}</td>\n\t\t\t\t\t\t\t\t<td>{{p.preOrderQuantity -\n\t\t\t\t\t\t\t\t\t(p.totalOrderQuantity+p.cancelledUnits)}} {{p.masterProducts.productUnit.paramName}}</td>\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t<a type=\"button\" class=\"btn btn-danger\" data-toggle=\"modal\"\n\t\t\t\t\t\t\t\t\t\tdata-target=\"#fullHeightModalBottom\" (click)=\"onCancel(p)\">\n\t\t\t\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"d-flex justify-content-between\">\n\t\t\t\t\t<nav class=\"mt-4\">\n\t\t\t\t\t\t<pagination-controls id=\"listing_pagination5\" maxSize=\"4\" directionLinks=\"true\"\n\t\t\t\t\t\t\tresponsive=\"true\" (pageChange)=\"page5 = $event\">\n\t\t\t\t\t\t</pagination-controls>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"button-section\">\n\t\t\t\t\t<button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n\t\t\t\t\t<button class=\"btn btn-unique btn-lg\" [routerLink]=\"['/create']\">Order</button>\n\t\t\t\t\t<button class=\"btn btn-brown btn-lg\" (click)=\"onBackClick()\"> Preorder</button>\n\t\t\t\t\t<button class=\"btn btn-primary btn-lg\" [routerLink]=\"['/dashboard']\">Dashboard</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</section>\n</div>\n<br>\n<br>\n\n<!-- Cancel Single PreOrder -->\n<!-- <div class=\"container cancel\">\n\t<div class=\"modal fade\" id=\"fullHeightModalBottom\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\"\n\t\taria-hidden=\"true\" data-backdrop=\"false\" *ngIf=\"iteration =='cancelSinglePreOrder'\">\n\t\t<div class=\"modal-dialog modal-dialog-centered modal-xl\" role=\"document\">\n\t\t\t<div class=\"modal-content\">\n\t\t\t\t<div\n\t\t\t\t\tclass=\"modal-header view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n\t\t\t\t\t<h3 class=\"modal-title w-100 white-text mx-3\" id=\"myModalLabel\">Cancel Pre-Order</h3>\n\t\t\t\t\t<button type=\"button\" class=\"close white-text mx-3\" data-dismiss=\"modal\" aria-label=\"Close\"\n\t\t\t\t\t\t(click)=\"onCancelPreOrder()\">\n\t\t\t\t\t\t<span aria-hidden=\"true\">&times;</span>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"modal-body\">\n\t\t\t\t\t<form name=\"form\" (ngSubmit)=\"f.form.valid && onCancellationConfirm()\" #f=\"ngForm\">\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-sm-12\" id=\"wallet-1\">\n\t\t\t\t\t\t\t\t<div id=\"import1\">\n\t\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-12\">\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"importcard\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\"> Pre-order Id </div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.preOrderRefNumber}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\">Product Name </div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.masterProducts.productName}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\"> Quantity </div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.remainingpreOrderQuantity}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.masterProducts.productUnit.paramName}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<hr>\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\">Month & Year </div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.month}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.preOrderYear}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\">Admin Charges </div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.perUnitAdminCancellationCharges  | currency: preOrderManagement.walletDetails.walletCurrency}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/ {{preOrderManagement.masterProducts.productUnit.paramName}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\">Cancellation Charges</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.perUnitMarginCancellationCharges | currency: preOrderManagement.walletDetails.walletCurrency}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/ {{preOrderManagement.masterProducts.productUnit.paramName}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\">Units to be Cancelled </div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type=\"number\" class=\"form-control input-vendor\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[(ngModel)]=\"preOrderManagement.availableUnits\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"availableUnits\" (input)=\"onCancelUnit(template)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmin=\"1\" #availableUnits=\"ngModel\" pattern=\"[0-9]*\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[ngClass]=\"{ 'is-invalid': f.submitted && availableUnits.invalid }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trequired>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"f.submitted && availableUnits.invalid\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclass=\"invalid-feedback\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"availableUnits.errors.required\">Units to be\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCancelled is\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRequired</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"availableUnits.errors.pattern\">Please Enter\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tValid Units To be\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCancel</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ng-template #template>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"modal-header\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h4 class=\"modal-title\">Cancel Pre-Order</h4>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" class=\"close pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taria-label=\"Close\" (click)=\"modalRef.hide()\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span aria-hidden=\"true\">×</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"modal-body\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h5><b>You Canot Cancel More Than Available Units <br>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tPlease Enter\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAgain..!</b>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</h5>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"modal-footer\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-default\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"modalRef.hide()\">OK</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ng-template>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\">Total Locked Margin</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{{totalMargin | currency: preOrderManagement.walletDetails.walletCurrency}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\">Total Cancellation Charges </div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.totalCancellationCharges | currency: preOrderManagement.walletDetails.walletCurrency}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\">Amount Released From Margin </div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t*ngIf=\"preOrderManagement.margin!=0\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{{releasedMargin | currency: preOrderManagement.walletDetails.walletCurrency}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"row\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t*ngIf=\"preOrderManagement.requiredAmount!=0 && this.preOrderManagement.totalCancellationCharges!=this.preOrderManagement.margin\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\">Additional Amount To Be Paid </div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.requiredAmount | currency: preOrderManagement.walletDetails.walletCurrency}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<hr\n\t\t\t\t\t\t\t\t\t\t\t\t\t*ngIf=\"preOrderManagement.requiredAmount!=0 && this.preOrderManagement.totalCancellationCharges!=this.preOrderManagement.margin\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"row\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t*ngIf=\"preOrderManagement.requiredAmount!=0 && this.preOrderManagement.totalCancellationCharges==this.preOrderManagement.margin\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-12\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label class=\"preorderlabel\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclass=\"cancelamount\">{{preOrderManagement.requiredAmount | currency: preOrderManagement.walletDetails.walletCurrency}}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp; will credit To Your Wallet\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-12\">\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"button-section\">\n\t\t\t\t\t\t\t\t\t\t\t\t<button class=\"btn btn-default cancelexit btn-lg\" data-dismiss=\"modal\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"onCancelBack()\" type=\"button\">Back</button>\n\t\t\t\t\t\t\t\t\t\t\t\t<button class=\"btn btn-success cancelsucess btn-lg\"\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"submit\">Confirm\n\t\t\t\t\t\t\t\t\t\t\t\t\tCancellation</button>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div> -->\n\n<div class=\"container importct\" *ngIf=\"iteration =='cancelSinglePreOrder'\">\n\t<form name=\"form\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-sm-4\" id=\"wallet-1\">\n\t\t\t\t<div class=\"card\" id=\"import\">\n\t\t\t\t\t<div class=\"card-header view view-cascade gradient-card-header blue-gradient imp\">\n\t\t\t\t\t\tCancel Preorder Details\n\t\t\t\t\t</div><br>\n\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-sm-6\"> Preorder Id </div>\n\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t{{preOrderManagement.preOrderRefNumber}}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<hr />\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-sm-6\">Product Name</div>\n\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t<p>{{preOrderManagement.masterProducts.productName}}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<hr />\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-sm-6\">Quantity</div>\n\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t{{preOrderManagement.remainingpreOrderQuantity}}\n\t\t\t\t\t\t\t\t{{preOrderManagement.masterProducts.productUnit.paramName}}\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<hr />\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-sm-6\">Month & Year</div>\n\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t{{preOrderManagement.month}}\n\t\t\t\t\t\t\t\t{{preOrderManagement.preOrderYear}}\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<hr />\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-sm-6\">Admin Charges</div>\n\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t{{preOrderManagement.perUnitAdminCancellationCharges  | currency: preOrderManagement.walletDetails.walletCurrency}}\n\t\t\t\t\t\t\t/ {{preOrderManagement.masterProducts.productUnit.paramName}}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<hr />\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-sm-6\">Cancellation Charges</div>\n\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t{{preOrderManagement.perUnitMarginCancellationCharges | currency: preOrderManagement.walletDetails.walletCurrency}}\n\t\t\t\t\t\t\t/ {{preOrderManagement.masterProducts.productUnit.paramName}}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-sm-8\" id=\"importcol\">\n\t\t\t\t<form name=\"form\" (ngSubmit)=\"f.form.valid && onCancellationConfirm()\" #f=\"ngForm\">\n\t\t\t\t\t<div class=\"card first\">\n\t\t\t\t\t\t<div class=\"card-header view view-cascade gradient-card-header blue-gradient\">\n\t\t\t\t\t\t\tCancel Preorder\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<br>\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-sm-4\" id=\"orderqt\">Units To be Cancelled</div>\n\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t<input type=\"number\" class=\"form-control input-vendor\"\n\t\t\t\t\t\t\t\t\t\t[(ngModel)]=\"preOrderManagement.availableUnits\" name=\"availableUnits\"\n\t\t\t\t\t\t\t\t\t\t(input)=\"onCancelUnit(template)\" min=\"1\" #availableUnits=\"ngModel\"\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"Enter Units to be Cancel\" oninput=\"validity.valid||(value='');\"\n\t\t\t\t\t\t\t\t\t\t[ngClass]=\"{ 'is-invalid': f.submitted && availableUnits.invalid }\" required>\n\t\t\t\t\t\t\t\t\t<div *ngIf=\"f.submitted && availableUnits.invalid\" class=\"invalid-feedback\">\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"availableUnits.errors.required\">Units to be\n\t\t\t\t\t\t\t\t\t\t\tCancelled is\n\t\t\t\t\t\t\t\t\t\t\tRequired</div>\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"availableUnits.errors.pattern\">Please Enter\n\t\t\t\t\t\t\t\t\t\t\tValid Units To be\n\t\t\t\t\t\t\t\t\t\t\tCancel</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<ng-template #template>\n\t\t\t\t\t\t\t\t\t<div class=\"modal-header\">\n\t\t\t\t\t\t\t\t\t\t<h4 class=\"modal-title\">Cancel Preorder</h4>\n\t\t\t\t\t\t\t\t\t\t<button type=\"button\" class=\"close pull-right\" aria-label=\"Close\"\n\t\t\t\t\t\t\t\t\t\t\t(click)=\"modalRef.hide()\">\n\t\t\t\t\t\t\t\t\t\t\t<span aria-hidden=\"true\">×</span>\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"modal-body\">\n\t\t\t\t\t\t\t\t\t\t<h5><b>You Cannot Cancel More Than Available Units <br>\n\t\t\t\t\t\t\t\t\t\t\t\tPlease Enter\n\t\t\t\t\t\t\t\t\t\t\t\tAgain..!</b>\n\t\t\t\t\t\t\t\t\t\t</h5>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"modal-footer\">\n\t\t\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-default\"\n\t\t\t\t\t\t\t\t\t\t\t(click)=\"modalRef.hide()\">OK</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</ng-template>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<hr />\n\n\t\t\t\t\t\t<div class=\"row\" id=\"single\">\n\t\t\t\t\t\t\t<div class=\"col-sm-12\">\n\t\t\t\t\t\t\t\t<div class=\"importcard\">\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-12\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"singlepre\">Total Locked Margin</div>\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t\t\t\t\t{{totalMargin | currency: preOrderManagement.walletDetails.walletCurrency}}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-12\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"singlepre\">Total Cancellation Charges</div>\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.totalCancellationCharges | currency: preOrderManagement.walletDetails.walletCurrency}}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-12\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"singlepre\">Amount Released From Margin</div>\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\" *ngIf=\"preOrderManagement.margin!=0\">\n\t\t\t\t\t\t\t\t\t\t\t\t{{releasedMargin | currency: preOrderManagement.walletDetails.walletCurrency}}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-12\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"row\"\n\t\t\t\t\t\t\t\t\t\t\t*ngIf=\"preOrderManagement.requiredAmount!=0 && this.preOrderManagement.totalCancellationCharges!=this.preOrderManagement.margin\">\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"singlepre\">Additional Amount To Be Paid</div>\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\" *ngIf=\"preOrderManagement.margin!=0\">\n\t\t\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.requiredAmount | currency: preOrderManagement.walletDetails.walletCurrency}}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<hr\n\t\t\t\t\t\t\t\t\t\t*ngIf=\"preOrderManagement.requiredAmount!=0 && this.preOrderManagement.totalCancellationCharges!=this.preOrderManagement.margin\" />\n\n\t\t\t\t\t\t\t\t\t<div class=\"row\"\n\t\t\t\t\t\t\t\t\t\t*ngIf=\"preOrderManagement.requiredAmount!=0 && this.preOrderManagement.totalCancellationCharges==this.preOrderManagement.margin\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-3\"></div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t\t\t\t\t\t<marquee direction=\"down\" width=\"500\" height=\"70\" behavior=\"alternate\">\n\t\t\t\t\t\t\t\t\t\t\t\t<marquee behavior=\"alternate\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<p style=\"color: red;\n\t\t\t\t\t\t\t\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\t\t\t\t\t\t\t\tfont-size: 20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.requiredAmount | currency: preOrderManagement.walletDetails.walletCurrency}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp; will credit To Your Wallet\n\t\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t</marquee>\n\t\t\t\t\t\t\t\t\t\t\t</marquee>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<hr\n\t\t\t\t\t\t\t\t\t\t*ngIf=\"preOrderManagement.requiredAmount!=0 && this.preOrderManagement.totalCancellationCharges==this.preOrderManagement.margin\" />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-sm-12\">\n\t\t\t\t\t\t\t\t<div class=\"button-section\">\n\t\t\t\t\t\t\t\t\t<button class=\"btn btn-default cancelexit btn-lg\" data-dismiss=\"modal\"\n\t\t\t\t\t\t\t\t\t\t(click)=\"onCancelBack()\" type=\"button\">Back</button>\n\t\t\t\t\t\t\t\t\t<button class=\"btn btn-success cancelsucess btn-lg\" type=\"submit\">Confirm\n\t\t\t\t\t\t\t\t\t\tCancellation</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\n\t\t\t\t</form>\n\t\t\t</div>\n\n\t\t</div>\n\t</form>\n</div>\n\n\n\n<!-- Cancel Pre-order Summary -->\n<div class=\"container importct\" *ngIf=\"iteration == 'preOrderCancelSuccessPage'\">\n\t<form name=\"form\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-sm-3\"></div>\n\t\t\t<div class=\"col-sm-6\" id=\"wallet-1\">\n\t\t\t\t<div class=\"card-header view view-cascade gradient-card-header blue-gradient\">\n\t\t\t\t\tCancel Preorder - Summary\n\t\t\t\t</div>\n\t\t\t\t<div class=\"card\" id=\"import\">\n\t\t\t\t\t<h4 style=\"color:red\" *ngIf=\"preOrderManagement.paymentStatus=='PENDING'\">Pending For Payment Update\n\t\t\t\t\t</h4>\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-sm-12\">\n\t\t\t\t\t\t\t<div class=\"importcard\">\n\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\"> Preorder Id </div>\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.preOrderRefNumber}}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\">Product Name </div>\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.masterProducts.productName}}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\">Cancelled Quantity </div>\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.cancelledUnits}}\n\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.masterProducts.productUnit.paramName}}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<hr>\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\">Price </div>\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.preOrderPrice | currency: 'INR'}}\n\t\t\t\t\t\t\t\t\t\t/ {{preOrderManagement.masterProducts.productUnit.paramName}}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\">Month & Year </div>\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.month}} ,\n\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.preOrderYear}}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\">Remaining Quantity</div>\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.preOrderQuantity -\n\t\t\t\t\t\t\t\t\t\t\t(preOrderManagement.totalOrderQuantity+\n\t\t\t\t\t\t\t\t\t\t\tpreOrderManagement.cancelledUnits)}} {{preOrderManagement.masterProducts.productUnit.paramName}}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\">Total Cancellation </div>\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-6\" id=\"importname\">\n\t\t\t\t\t\t\t\t\t\t{{preOrderManagement.totalCancellationCharges | currency: preOrderManagement.walletDetails.walletCurrency }}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-sm-12\">\n\t\t\t\t\t\t\t<div class=\"button-section\">\n\t\t\t\t\t\t\t\t<button type=\" submit\" (click)=\"onBackClick()\"\n\t\t\t\t\t\t\t\t\tclass=\"btn btn-brown btn-lg\">Preorder</button>\n\t\t\t\t\t\t\t\t<button type=\"submit\" class=\"btn btn-success btn-lg\" [routerLink]=\"['/wallet']\">Check\n\t\t\t\t\t\t\t\t\tBalance</button>\n\t\t\t\t\t\t\t\t<button type=\"submit\" [routerLink]=\"['/dashboard']\"\n\t\t\t\t\t\t\t\t\tclass=\"btn btn-primary btn-lg\">Dashboard</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</form>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/User/redeemmangementuser/redeemmangementuser.component.html":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/User/redeemmangementuser/redeemmangementuser.component.html ***!
  \*******************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n<div class=\"container py-3\">\n    <div class=\"row\" *ngIf=\"pageIterator == 1\">\n        <div class=\"card-body\">\n            <h4 class=\"mb-0\" style=\"text-align: center;\">Redeem Rewards </h4><br><br>\n            <form class=\"form\" role=\"form\" [formGroup]=\"redeemreward\">\n                <div class=\"form-group row\">\n                    <h3 class=\"col-lg-3 col-form-label form-control-label\"> Points To be Redeemed :</h3>\n                    <div class=\"col-lg-9\">\n                        <input type=\"text\" formControlName=\"redeem\" [(ngModel)]=\"redeem\" id=\"val\" sautofocus>\n                    </div>\n                </div>\n                <div class=\"form-group row\" (click)=\"toggleDetails()\">\n                    <h3 class=\"col-lg-3 col-form-label form-control-label\">Available Points :</h3>\n                    <div class=\"col-lg-9\">\n                        <h3> <span class=\"badge badge-pill badge-info\">\n                                <p>250</p>\n                            </span></h3>\n                    </div>\n                </div>\n                <div class=\"form-group row\" (click)=\"toggleDetails()\">\n                    <h3 class=\"col-lg-3 col-form-label form-control-label\">1 Points :</h3>\n                    <div class=\"col-lg-9\" ng-init=\"num1=0.01\">\n                        <h3><span class=\"badge badge-pill badge-warning\">\n                                <p>Rs. 0.001</p>\n                            </span></h3>\n                    </div>\n                </div>\n                <div class=\"form-group row\" *ngIf=\"showDetails\">\n                    <h3 class=\"col-lg-3 col-form-label form-control-label\"> Points to Redeemed :</h3>\n                    <div class=\"col-lg-9\">\n                        <h3><span class=\"badge badge-pill badge-info\">\n                                <p>Rs. {{redeem}}</p>\n                            </span></h3>\n                    </div>\n                </div>\n                <hr><br>\n                <div class=\"form-group row\" *ngIf=\"showDetails\">\n                    <h3 class=\"col-lg-3 col-form-label form-control-label\">Amount :</h3>\n                    <div class=\"col-lg-9\">\n                        <h3><span class=\"badge badge-pill badge-info\">\n                                <p>Rs.{{redeem * 0.01 *10 }}</p>\n                            </span></h3>\n                    </div>\n                </div>\n\n                <div class=\"form-group row\" *ngIf=\"showDetails\">\n                    <h3 class=\"col-lg-3 col-form-label form-control-label\">Admin Charges :</h3>\n                    <div class=\"col-lg-9\">\n                        <h3> <span class=\"badge badge-pill badge-info\">\n                                <p>Rs. -0.2</p>\n                            </span></h3>\n                    </div>\n                </div>\n\n                <br>\n                <div *ngIf=\"showDetails\">\n\n                    <hr>\n                    <h4 style=\"color: green;\">Amount To be Credited : &nbsp;&nbsp;&nbsp;\n                        {{redeem *0.01*10 -0.2 *10 | number:'1.2-2'}} </h4>\n                </div>\n                <button type=\"button\" [routerLink]=\"['/rewardvendor']\"\n                    class=\"btn btn-default move\">Back</button>&nbsp;&nbsp;\n                <span><button type=\"button\" (click)=\"onRedeem()\" class=\"btn btn-success move\">Proceed</button></span>\n            </form>\n        </div>\n    </div>\n\n    <div class=\"container success\" style=\"text-align: center;\" *ngIf=\"pageIterator == 2\">\n        <h2> <span class=\"badge badge-pill badge-primary\">50</span> Points Reddemeded Successfully</h2>\n        <br>\n        <h4><span class=\"blinking\" style=\"color: green;font-size: 25px;font-weight: bold;\">Rs.\n                {{redeem *0.01*10 -0.2 *10}}</span> &nbsp; &nbsp;Will be Added to Your Bank Account</h4>\n        <br>\n        <div class=\"points-section\">\n            <h2>Current Wallet Balance : <span class=\"badge badge-pill badge-danger\">50</span></h2>\n            <br>\n            <h2>Perevious Wallet Balance : <span class=\"badge badge-pill badge-primary\">200</span></h2>\n            <h2>Available Reward Points : <span class=\"badge badge-pill badge-danger\">50</span></h2>\n            <br>\n            <h2>Perevious Reward Points : <span class=\"badge badge-pill badge-primary\">200</span></h2>\n        </div><br><br>\n        <button class=\"btn btn-primary\" [routerLink]=\"['/topup']\">Check Balance</button>\n        <button class=\"btn btn-primary\" [routerLink]=\"['/rewarduser']\">Goto Reward</button>\n        <button class=\"btn btn-primary\" [routerLink]=\"['/dashboard']\">Dashborad</button>\n    </div>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/User/rewaradmanagementuser/rewaradmanagementuser.component.html":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/User/rewaradmanagementuser/rewaradmanagementuser.component.html ***!
  \***********************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\r\n<div class=\"container py-3\" *ngIf=\"iterationName ==1\">\r\n    <div class=\"card card-cascade\">\r\n        <div class=\"view view-cascade gradient-card-header blue-gradient\">\r\n            <h3 style=\"color: white;\">Reward Management</h3>\r\n        </div>\r\n        <div class=\"card-body\">\r\n            <div class=\"row\">\r\n                <div class=\"col-sm-3\" id=\"importhead\">\r\n                    Earned Points<p id=\"importbal\">\r\n                        <span class=\"badge badge-pill badge-info\">\r\n                            {{userRewarpoint.totalRewardPoints}}\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <div class=\"col-sm-3\" id=\"importhead\">\r\n                    Redeemed Points\r\n                    <p id=\"importbal\">\r\n                        <span class=\"badge badge-pill badge-warning\">\r\n                            {{userRewarpoint.totalRedeemPoints}}\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <div class=\"col-sm-3\" id=\"importhead\">\r\n                    Lapsed Points\r\n                    <p id=\"importbal\">\r\n                        <span class=\"badge badge-pill badge-danger\">\r\n                            {{userRewarpoint.lapsedPoints}}\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <div class=\"col-sm-3\" id=\"importhead\">\r\n                    Available Points\r\n                    <p id=\"importbal\">\r\n                        <span class=\"badge badge-pill badge-success\">\r\n                            {{userRewarpoint.totalRewardPoints - userRewarpoint.totalRedeemPoints - userRewarpoint.lapsedPoints}}\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <hr />\r\n            <div class=\"row\">\r\n                <div class=\"col-sm-10\">\r\n                    <h5 style=\"text-align: left;\" class=\"importpara\">You'll get 1 Point on every order worth\r\n                        <span>\r\n                            {{rewardfactor.paramName | currency : currencyCode}}\r\n                        </span> Delivered\r\n                    </h5>\r\n                </div>\r\n                <div class=\"col-sm-2\">\r\n                    <button type=\"button\" (click)=\"redeem()\" class=\"btn btn-danger btn-lg\">Redeem</button>\r\n                </div>\r\n            </div>\r\n            <hr />\r\n            <div class=\"button-section\">\r\n                <button [routerLink]=\"['/wallet']\" class=\"btn btn-default btn-lg\">Back</button>\r\n                <button (click)=\"rewardPointHistory()\" type=\"button\" class=\"btn btn-success btn-lg\">Rewards Point\r\n                    History</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"container py-3\" *ngIf=\"iterationName ==2\">\r\n    <div class=\"card card-cascade\">\r\n        <div class=\"view view-cascade gradient-card-header blue-gradient\">\r\n            <h3 style=\"color: white;\">Reward Point History</h3>\r\n        </div>\r\n        <div class=\"card-body\">\r\n            <div class=\"row\">\r\n                <div class=\"col-sm-3\" id=\"importhead\">\r\n                    Earned Points<p id=\"importbal\">\r\n                        <span class=\"badge badge-pill badge-info\">\r\n                            {{userRewarpoint.totalRewardPoints}}\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <div class=\"col-sm-3\" id=\"importhead\">\r\n                    Redeemed Points\r\n                    <p id=\"importbal\">\r\n                        <span class=\"badge badge-pill badge-warning\">\r\n                            {{userRewarpoint.totalRedeemPoints}}\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <div class=\"col-sm-3\" id=\"importhead\">\r\n                    Lapsed Points\r\n                    <p id=\"importbal\">\r\n                        <span class=\"badge badge-pill badge-danger\">\r\n                            {{userRewarpoint.lapsedPoints}}\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <div class=\"col-sm-3\" id=\"importhead\">\r\n                    Available Points\r\n                    <p id=\"importbal\">\r\n                        <span class=\"badge badge-pill badge-success\">\r\n                            {{userRewarpoint.totalRewardPoints - userRewarpoint.totalRedeemPoints - userRewarpoint.lapsedPoints}}\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <hr />\r\n            <div class=\"form-group row\">\r\n                <div class=\"col-md-4\">\r\n                    <div class=\"form-group\">\r\n                        <select class=\"form-control\" [(ngModel)]=\"range\" name=\"#range\"\r\n                            (ngModelChange)=\"onSelectRangeForRewardPoints(selected)\">\r\n                            <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\r\n                            <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\r\n\r\n                        </select>\r\n                    </div>\r\n\r\n                </div>\r\n                <div class=\"col-md-4\" *ngIf=\"customDate==true\">\r\n                    <div class=\"form-group\">\r\n                        <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" [(ngModel)]=\"date\" placeholder=\"From\"\r\n                            class=\"form-control input-vendor\"\r\n                            (ngModelChange)=\"onDateChangeForRewardPointHistory($event)\">\r\n                        <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-md-4\" *ngIf=\"customDate==true\">\r\n                    <div class=\"form-group\">\r\n                        <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" [(ngModel)]=\"date1\" placeholder=\"To\"\r\n                            class=\"form-control input-vendor\"\r\n                            (ngModelChange)=\"onDateChangeForRewardPointHistory($event)\">\r\n                        <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n            <div class=\"table table-striped table-bordered table-responsive\">\r\n                <table class=\"table text-nowrap\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Date</th>\r\n                            <th>Description</th>\r\n                            <th>Amount Spent</th>\r\n                            <th>Rewarded Points</th>\r\n                            <th>Redeemed Points</th>\r\n                            <th>Lapsed Points</th>\r\n                            <th>Available Points</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr *ngFor=\"let rh of rewardPointHistoryList |\r\n                        paginate: { id: 'listing_pagination1',\r\n                        itemsPerPage: 5,\r\n                        currentPage: page1,\r\n                        totalItems: totalRec }\r\n                        \">\r\n                            <td>{{rh.updatedDate | date : shortDate}}</td>\r\n                            <td>{{rh.description}}</td>\r\n                            <td>{{rh.orderAmount}}</td>\r\n                            <td>{{rh.earnedPoint}}</td>\r\n                            <td>{{rh.redeemPoint}}</td>\r\n                            <td>{{rh.lapsedPoint}}</td>\r\n                            <td>{{rh.availablePoint}}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <div class=\"d-flex justify-content-between\">\r\n                <div class=\"wrap\">\r\n                    <pagination-controls id=\"listing_pagination1\" maxSize=\"5\" directionLinks=\"true\" responsive=\"true\"\r\n                        (pageChange)=\"page1 = $event\">\r\n                    </pagination-controls>\r\n                </div>\r\n            </div>\r\n            <div class=\"button-section\">\r\n                <button (click)=\"onBackClick()\" class=\"btn btn-default btn-lg\">Back</button>\r\n                <button [routerLink]=\"['/dashboard']\" type=\"button\" class=\"btn btn-primary btn-lg\"> Dashboard\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n<div class=\"container py-3\" *ngIf=\"iterationName == 3\">\r\n    <div class=\"card card-cascade\">\r\n        <div class=\"view view-cascade gradient-card-header blue-gradient\">\r\n            <h3 style=\"color: white;\">Redeem Rewards</h3>\r\n        </div>\r\n        <div class=\"card-body\">\r\n            <form name=\"form\" (ngSubmit)=\"f.form.valid && onRedeem()\" #f=\"ngForm\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-sm-3\" id=\"importhead\">\r\n                        Points To be Redeem<p id=\"importbal\">\r\n                        <div class=\"form-group\">\r\n                            <input type=\"number\" [(ngModel)]=\"redeemPoint\" id=\"redeemPoint\" (input)=\"viewDetails()\"\r\n                                name=\"redeemPoint\" class=\"form-control input-vendor\" style=\"margin-top: 15px;\"\r\n                                placeholder=\"Redeem Points\" #redeemPoint1=\"ngModel\" min=0\r\n                                oninput=\"validity.valid||(value='');\"\r\n                                [ngClass]=\"{ 'is-invalid': f.submitted && redeemPoint1.invalid }\" required>\r\n                            <div *ngIf=\"f.submitted && redeemPoint1.invalid\" class=\"invalid-feedback\">\r\n                                <div *ngIf=\"redeemPoint1.errors.required\"> Points To be Redeem required</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col-sm-3\" id=\"importhead\">\r\n                        1 Points\r\n                        <p id=\"importbal\">\r\n                            <span class=\"badge badge-pill badge-warning\">\r\n                                {{rewardConfig.valuePerPoint | currency : currencyCode}}\r\n                            </span>\r\n                        </p>\r\n                    </div>\r\n                    <div class=\"col-sm-3\" id=\"importhead\" *ngIf=\"showDetails\">\r\n                        Points To Redeem\r\n                        <p id=\"importbal\">\r\n                            <span class=\"badge badge-pill badge-danger\">\r\n                                {{redeemPoint}}\r\n                            </span>\r\n                        </p>\r\n                    </div>\r\n                    <div class=\"col-sm-3\" id=\"importhead\">\r\n                        Available Points\r\n                        <p id=\"importbal\">\r\n                            <span class=\"badge badge-pill badge-success\">\r\n                                {{availablePoints}}\r\n                            </span>\r\n                        </p>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n                <hr />\r\n                <div class=\"row\">\r\n\r\n                    <div class=\"col-sm-12\" *ngIf=\"showDetails\">\r\n                        <h5 style=\"text-align: center;\" class=\"importpara\">Amount To be Credited\r\n                            <span>\r\n                                {{redeemAmount  | currency : currencyCode}}\r\n                            </span>\r\n                        </h5>\r\n                    </div>\r\n                    <!-- <div class=\"col-sm-2\" *ngIf=\"showDetails\" id=\"importhead\">\r\n                    <span class=\"badge badge-pill badge-success\">\r\n                        Amount {{redeemAmount | currency : currencyCode}}\r\n                    </span>\r\n                </div> -->\r\n                </div>\r\n                <hr *ngIf=\"showDetails\" />\r\n                <ng-template #template>\r\n                    <div class=\"modal-header\">\r\n                        <h4 class=\"modal-title\">Redeem Rewards</h4>\r\n                        <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\" (click)=\"modalRef.hide()\">\r\n                            <span aria-hidden=\"true\">×</span>\r\n                        </button>\r\n                    </div>\r\n                    <div class=\"modal-body\">\r\n                        <h5>Redeem point should not be greater than available point</h5>\r\n                    </div>\r\n                    <div class=\"modal-footer\">\r\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"modalRef.hide()\">OK</button>\r\n\r\n                    </div>\r\n                </ng-template>\r\n                <div class=\"button-section\">\r\n                    <button (click)=\"onBackClick()\" type=\"button\" class=\"btn btn-default btn-lg\">Back</button>\r\n                    <button type=\"submit\" class=\"btn btn-success btn-lg\">Proceed</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"container success\" style=\"text-align: center;\" *ngIf=\"iterationName ==4\">\r\n    <div class=\"card\">\r\n        <div class=\"view view-cascade gradient-card-header blue-gradient\">\r\n            <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Reward Points History</h4>\r\n        </div>\r\n        <div class=\"card-body\">\r\n            <h2> <span class=\"badge badge-pill badge-primary\">{{redeemPoint}}</span> Points Redeemed Successfully</h2>\r\n            <br>\r\n            <h4><span style=\"color: green;font-size: 25px;font-weight: bold;\">\r\n                    {{redeemAmount  | currency : currencyCode}}</span> &nbsp; &nbsp;Will be Added to Your Bank Account\r\n            </h4>\r\n            <br>\r\n\r\n            <div class=\"row\">\r\n                <div class=\"col-sm-3\"></div>\r\n                <div class=\"col-sm-6\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-sm-6\" id=\"importlabel\"> Current Wallet Balance </div>\r\n                        <div class=\"col-sm-6\" id=\"importname\">\r\n                            {{walletBalance | currency : currencyCode}}\r\n                        </div>\r\n                        <div class=\"col-sm-6\" id=\"importlabel\"> Previous Wallet Balance </div>\r\n                        <div class=\"col-sm-6\" id=\"importname\">\r\n                            {{walletBalance-redeemAmount | currency : currencyCode}}\r\n                        </div>\r\n                        <div class=\"col-sm-6\" id=\"importlabel\"> Available Reward Points </div>\r\n                        <div class=\"col-sm-6\" id=\"importname\">\r\n                            {{availablePoints - redeemPoint}}\r\n                        </div>\r\n                        <div class=\"col-sm-6\" id=\"importlabel\">Previous Reward Points</div>\r\n                        <div class=\"col-sm-6\" id=\"importname\">\r\n                            {{availablePoints}}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-sm-4\"></div>\r\n\r\n            </div>\r\n            <br>\r\n            <button class=\"btn btn-success btn-lg\" [routerLink]=\"['/wallet']\">Check Balance</button>\r\n            <button class=\"btn btn-deep-orange btn-lg\" [routerLink]=\"['/rewarduser']\">Go To Reward</button>\r\n            <button class=\"btn btn-primary btn-lg\" [routerLink]=\"['/dashboard']\">Dashborad</button>\r\n        </div>\r\n    </div>\r\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/User/rewardpointhistoryuser/rewardpointhistoryuser.component.html":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/User/rewardpointhistoryuser/rewardpointhistoryuser.component.html ***!
  \*************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n<div class=\"container py-3\">\n    <!-- <div class=\"row\"> -->\n        <!-- <div class=\"mx-auto col-sm-6\"> -->\n                    <!-- form user info -->\n                    <!-- <div class=\"card\"> -->\n                        <!-- <div class=\"card-header\" style=\"text-align: center;\"> -->\n                            <br>\n                            <h4 class=\"mb-0\" style=\"text-align: center;\">Reward Point History</h4><br>\n                        <!-- </div> -->\n                        <div class=\"card-body\">\n                            <form class=\"form\" role=\"form\">\n                                <div class=\"form-group row\">\n                                    <h3 class=\"col-lg-3 col-form-label form-control-label\">Earned Points :</h3>\n                                    <div class=\"col-lg-9\">\n                                        <h3><span  class=\"badge badge-pill badge-info\"><p>Rs. 200</p></span></h3>\n\n                                    </div>\n                                </div>\n                                \n                                <div class=\"form-group row\">\n                                    <h3 class=\"col-lg-3 col-form-label form-control-label\">Redeemed Points :</h3>\n                                    <div class=\"col-lg-9\">\n                                        <h3><span  class=\"badge badge-pill badge-info\"><p>Rs. 0</p></span></h3>\n\n                                    </div>\n                                </div>\n                                <div class=\"form-group row\">\n                                    <h3 class=\"col-lg-3 col-form-label form-control-label\">Lapsed Points :</h3>\n                                    <div class=\"col-lg-9\">\n                                        <h3><span  class=\"badge badge-pill badge-info\"><p>Rs. 50</p></span></h3>\n                                    </div>\n                                </div>\n                                <div class=\"form-group row\">\n                                    <h3 class=\"col-lg-3 col-form-label form-control-label\">Available  Points :</h3>\n                                    <div class=\"col-lg-9\">\n                                        <h3><span  class=\"badge badge-pill badge-info\"><p>Rs. 250</p></span></h3>\n                                    </div>\n                                </div>\n                                <div>\n                                  \n                                    <!-- <div class=\"card\" style=\"width: 100%\"> -->\n                                        <div class=\"card-body\">\n                                          <h5 class=\"card-title\">Range </h5>\n                                          <div class=\"form-group row\">\n                                            <div class=\"col-lg-3\">\n                                                <select class=\"browser-default custom-select\">\n                                                    <option selected> Select Range</option>\n                                                    <option value=\"1\">Last week </option>\n                                                    <option value=\"2\">Last week 15 days</option>\n                                                    <option value=\"3\">Last week Month</option>\n                                                  </select>\n                                            </div>\n                                            <div class=\"col-lg-1\">\n                                                <label>From :</label>\n                                            </div>\n                                            <div class=\"col-lg-2\">\n                                                <div class=\"form-group\">\n                                                    <input type=\"text\" name=\"LGform1_user\" class=\"form-control\" placeholder=\" \" value=\"\" required=\"\"/>\n                                                </div>\n                                            </div>\n                                            <div class=\"col-lg-1\">\n                                                <label>To :</label>\n                                            </div>\n                                            <div class=\"col-lg-2\">\n                                                <div class=\"form-group\">\n                                                    <input type=\"text\" name=\"LGform1_user\" class=\"form-control\" placeholder=\"\" value=\"\" required=\"\"/>\n                                                </div>\n                                            </div>\n                                            <span> <button type=\"button\" class=\"btn btn-primary\">Search</button></span>\n\n                                        </div>\n                                    \n\n                                        </div>\n                                      <!-- </div> -->\n                                      </div>\n                                      <!-- <div class=\"form-group row\"> -->\n                                                \n                                        <!-- <div class=\"col-lg-4\"> -->\n                                            <button [routerLink]=\"['/rewarduser']\" type=\"button\" class=\"btn btn-default\">Back</button>\n                                        <!-- </div> -->\n                                        <!-- <div class=\"col-lg-4\"> -->\n                                            <button [routerLink]=\"['/dashboard']\" type=\"button\" class=\"btn btn-primary\">Dashboard</button>\n                                        <!-- </div> -->\n                                    <!-- </div> -->\n                            </form>\n                        </div>\n                    <!-- </div> -->\n                    <!-- /form user info -->\n        <!-- </div> -->\n    <!-- </div> -->\n\n</div>\n<div class=\"container\">\n    \n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/User/top-up-wallet/top-up-wallet.component.html":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/User/top-up-wallet/top-up-wallet.component.html ***!
  \*******************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n<br>\n<div class=\"container\" *ngIf=\"pageIterator == 1\">\n    <h3>Top Up Wallet</h3><br>\n    <div class=\"row\">\n        <h4> Balance :&nbsp; Rs. 74</h4>\n    </div>\n    <hr>\n    <br><br>\n    <div class=\"row\">\n        <div class=\"col-lg-2 col-sm-2\">\n            <label>Top Up Amount : </label>\n        </div>\n        <div class=\"col-lg-4 col-sm-4\">\n            <span class=\"badge badge-info\">\n                <p class=\"text\"> Rs. 100</p>\n            </span>\n        </div>\n        <div class=\"col-lg-2 col-sm-2\">\n            <label>Top Up With : </label>\n        </div>\n        <div class=\"col-lg-4 col-sm-4\">\n            <select class=\"form-control\" multiple>\n                <option>\n                    Bank Transfer\n                </option>\n                <option> Credit Card</option>\n                <option>PayPal</option>\n                <option>AliPal</option>\n                <option>ApplePay</option>\n                <option>Debit Card</option>\n            </select>\n        </div>\n    </div>\n    <br>\n    <hr>\n    <div class=\"button-section\">\n        <button class=\"btn btn-primary\" (click)=\"onClick()\">Top up Wallet</button>&nbsp;&nbsp;\n        <button class=\"btn btn-primary\" [routerLink]=\"['/wallet']\">Go wallet & rewards</button>&nbsp;&nbsp;&nbsp;\n        <button class=\"btn btn-primary\" [routerLink]=\"['/dashboard']\">Dashboard</button>&nbsp;&nbsp;\n    </div>\n</div>\n<div class=\"container\" *ngIf=\"pageIterator == 2\">\n    <div id=\"login\">\n        <h3 class=\"text-center text-white pt-5\">Login form</h3>\n        <div class=\"container\">\n            <div id=\"login-row\" class=\"row justify-content-center align-items-center\">\n                <div id=\"login-column\" class=\"col-md-6\">\n                    <div id=\"login-box\" class=\"col-md-12\">\n                        <div class=\"card-header\">\n                            <h3>Enter One Time Password</h3>\n\n                        </div>\n                        <form class=\"form\">\n\n                            <br>\n                            <h5>We have Sent you One time Password to your\n                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Registered Mobile Number</h5>\n                            <br>\n                            <div class=\"form-group\">\n                                <label for=\"otp\" class=\"text-info\"> One Time Password :</label><br>\n                                <input type=\"password\" name=\"otp\" class=\"form-control\" placeholder=\"Enter OTP\"\n                                    formControlName=\"otp\" autofocus>\n\n                            </div>\n                            <div class=\"form-group\">\n\n                                <button type=\"button\" class=\"btn btn-primary\" (click)=\"onSubmit()\">Submit\n                                </button>&nbsp;&nbsp;\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"onClickBack()\">Back</button>\n\n                            </div>\n\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div class=\"container\" *ngIf=\"pageIterator == 3\">\n    <h3 style=\"text-align: center;\">Top Up Of &nbsp;<span class=\"badge badge-pill badge-danger\">\n            <p> Rs. 100</p>\n        </span>&nbsp; Successful</h3>\n    <br><br>\n    <div class=\"row\">\n        <div class=\"col-3\"><label> Current Wallet Balance :</label></div>\n        <div class=\"col-3\">\n            <span class=\"badge badge-info 1\">\n                <p class=\"text\"> Rs. 100</p>\n            </span>\n        </div>\n        <div class=\"col-lg-3\"><label> Current Wallet Balance :</label></div>\n        <div class=\"col-lg-3\">\n            <span class=\"badge badge-info 1\">\n                <p class=\"text\"> Rs. 100</p>\n            </span>\n        </div>\n    </div><br><br>\n    <div class=\"button-section\">\n        <button class=\"btn btn-primary\" [routerLink]=\"['/walletbalance']\">Back to Wallet</button>&nbsp;&nbsp;\n        <button class=\"btn btn-primary\" [routerLink]=\"['/wallet']\">Back To main Menu</button>\n    </div>\n</div><br>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/User/userpaymentgateway/userpaymentgateway.component.html":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/User/userpaymentgateway/userpaymentgateway.component.html ***!
  \*****************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n<br>\n<div class=\"container-fluid\" *ngIf=\"iterationName == 'initial'\">\n\n    <div class=\"card\">\n        <form name=\"form\" (ngSubmit)=\"f.form.valid && onProceed()\" #f=\"ngForm\">\n            <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                <h4 class=\"card-header-title mb-3 initial\" style=\"color: white;\">Wallet - Payment Methods</h4>\n            </div><br>\n            <h4 style=\"font-weight: bold;\">Topup Amount &nbsp;&nbsp;\n                <b style=\"color:green\"\n                    class=\"dot\">{{walletDetails.topupAmount | currency : walletDetails.walletCurrency}}</b></h4>\n            <h5 class=\"outerheader\">Select Method Of Payment</h5>\n            <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                <h4 class=\"card-header-title mb-3 initial\" style=\"color: white;\">Payment Method ( Offline )</h4>\n            </div>\n            <div class=\"card-body\">\n                <div class=\"row\">\n                    <div class=\"col-md-3\" *ngFor=\"let p of paymentMethods[0].agreegatorPayMethodList\">\n                        <h5 class=\"card-title\">\n                            <div class=\"custom-control custom-radio\">\n                                <input type=\"radio\" class=\"custom-control-input\" id=\"id1{{p.paymentMethod.paramName}}\"\n                                    name=\"paymentMethod\" [value]=\"p.paymentMethod.paramName\" [(ngModel)]=\"paymentMethod\"\n                                    (change)=\"onPaymentSelection(p)\" #paymentMethod1=\"ngModel\" [ngClass]=\"{ 'is-invalid': f.submitted && paymentMethod1.invalid }\" required>\n                                <div *ngIf=\"f.submitted && paymentMethod1.invalid\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"paymentMethod1.errors.required\">Please Select Payment Method</div>\n                                </div>\n                                <label class=\"custom-control-label b\"\n                                    for=\"id1{{p.paymentMethod.paramName}}\">{{p.paymentMethod.paramName}}</label>\n                                <div class=\"charges\">\n                                    <p class=\"card-text\" *ngIf=\"p.slab1==0\">* No Additional Charge.</p>\n                                    <p class=\"card-text\" *ngIf=\"p.slab1!=0\">* Charge: {{p.slab1}} % of the\n                                        transaction\n                                        amount\n                                        below 2000 + Applicable Tax</p>\n                                    <p class=\"card-text\" *ngIf=\"p.slab2!=0\">* Charge: {{p.slab2}} % of the\n                                        transaction\n                                        amount\n                                        above 2000 + Applicable Total GST</p>\n                                </div>\n                            </div>\n                        </h5>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                <h4 class=\"card-header-title mb-3 initial\" style=\"color: white;\">Payment Method ( Online )</h4>\n            </div>\n\n            <div class=\"card-body\">\n                <div class=\"row\">\n                    <div class=\"col-md-3\" *ngFor=\"let p of paymentMethods[1].agreegatorPayMethodList\">\n                        <h5 class=\"card-title\">\n                            <div class=\"custom-control custom-radio\">\n                                <input type=\"radio\" class=\"custom-control-input\" id=id{{p.paymentMethod.paramName}}\n                                    name=\"paymentMethod\" [value]=\"p.paymentMethod.paramName\" [(ngModel)]=\"paymentMethod\"\n                                    (change)=\"onPaymentSelection(p)\" #paymentMethod1=\"ngModel\" [ngClass]=\"{ 'is-invalid': f.submitted && paymentMethod1.invalid }\" required>\n                                    <div *ngIf=\"f.submitted && paymentMethod1.invalid\" class=\"invalid-feedback\">\n                                        <div *ngIf=\"paymentMethod1.errors.required\">Please Select Payment Method</div>\n                                    </div>\n                                <label class=\"custom-control-label b\"\n                                    for=id{{p.paymentMethod.paramName}}>{{p.paymentMethod.paramName}}</label>\n                                <div class=\"charges\">\n                                    <p class=\"card-text\" *ngIf=\"p.slab1==0\">* No Additional Charge.</p>\n                                    <p class=\"card-text\" *ngIf=\"p.slab1!=0\">* Charge: {{p.slab1}} % of the\n                                        transaction\n                                        amount below\n                                        2000.00 + Applicable Total GST</p>\n                                    <p class=\"card-text\" *ngIf=\"p.slab2!=0\">* Charge: {{p.slab2}} % of the\n                                        transaction\n                                        amount\n                                        above 2000.00 + Applicable Total GST</p>\n                                </div>\n                            </div>\n                        </h5>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                <h4 class=\"card-header-title mb-3 initial\" style=\"color: white;\">Others</h4>\n            </div>\n            <div class=\"card-body\">\n                <div class=\"row\">\n                    <div class=\"col-md-3 col-6\">\n                        <h5 class=\"card-title\">\n                            <div class=\"custom-control custom-radio\">\n                                <input type=\"radio\" class=\"custom-control-input\" id=\"defaultChecked6\"\n                                    name=\"paymentMethod\" [value]=\"8\" [(ngModel)]=\"paymentMethod\">\n                                <label class=\"custom-control-label b\" for=\"defaultChecked6\">EMI</label>\n                            </div>\n                        </h5>\n                        <div class=\"charges\">\n                            <p class=\"card-text\">* Charge: 3% of the transaction amount *.</p>\n                        </div>\n                    </div>\n                    <div class=\"col-md-3 col-6\">\n                        <h5 class=\"card-title\">\n                            <div class=\"custom-control custom-radio\">\n                                <input type=\"radio\" class=\"custom-control-input\" id=\"defaultUnchecked7\"\n                                    name=\"paymentMethod\" [value]=\"9\" [(ngModel)]=\"paymentMethod\">\n                                <label class=\"custom-control-label b\" for=\"defaultUnchecked7\"> Pay Later</label>\n                            </div>\n                        </h5>\n                        <div class=\"charges\">\n                            <p class=\"card-text\">* *Charge: 3% of the transaction amount *.</p>\n                        </div>\n                    </div>\n                    <div class=\"col-md-3 col-6\">\n                        <h5 class=\"card-title\">\n                            <div class=\"custom-control custom-radio\">\n                                <input type=\"radio\" class=\"custom-control-input\" id=\"defaultUnchecked8\"\n                                    name=\"paymentMethod\" [value]=\"10\" [(ngModel)]=\"paymentMethod\">\n                                <label class=\"custom-control-label b\" for=\"defaultUnchecked8\"> Gift Voucher</label>\n                            </div>\n                        </h5>\n                    </div>\n                </div>\n            </div>\n            <div class=\"card-body\">\n                <div class=\"button-section\">\n                    <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                    <button class=\"btn btn-success btn-lg\" type=\"submit\">Proceed</button>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>\n<br>\n\n<div class=\"container importct\" *ngIf=\"iterationName == 'SHOW_TOPUP'\">\n    <form name=\"form\" (ngSubmit)=\"f.form.valid && onPaymentsubmit()\" #f=\"ngForm\">\n        <div class=\"row\">\n            <div class=\"col-sm-2\"></div>\n            <div class=\"col-sm-8\" id=\"wallet-1\">\n                <div class=\"card-header view view-cascade gradient-card-header blue-gradient\">\n                    Wallet - Bank Transfer Update Info\n                </div>\n                <div class=\"card\" id=\"import\">\n                    <h4 id=\"addCharges\">*No additional charges*</h4><br>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\">\n                            <p class=\"import-text\">Please Proceed with Bank Transfer to Complete Your Topup.</p>\n                        </div>\n                        <hr />\n                    </div>\n                    <hr />\n                    <h4 id=\"importhead\">Topup Value &nbsp;&nbsp;<b\n                            style=\"color:#ff4444;\">{{bankPayment.topupAmount | currency : bankPayment.currency}}</b>\n                    </h4>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-2\"></div>\n                        <div class=\"col-sm-8\">\n                            <div class=\"importcard\">\n                                <div class=\"row\">\n                                    <div class=\"col-sm-6\" id=\"importpaid\"> Bank Details For Payment </div>\n                                </div>\n                                <hr />\n                                <div class=\"row\">\n                                    <div class=\"col-sm-6\"> Account Name </div>\n                                    <div class=\"col-sm-6\" id=\"importname\">\n                                        {{accountDetials.accountHolderName}}\n                                    </div>\n                                </div>\n                                <hr />\n                                <div class=\"row\">\n                                    <div class=\"col-sm-6\">Bank </div>\n                                    <div class=\"col-sm-6\" id=\"importname\">\n                                        {{accountDetials.bankName}}\n                                    </div>\n                                </div>\n                                <hr />\n                                <div class=\"row\">\n                                    <div class=\"col-sm-6\">Branch </div>\n                                    <div class=\"col-sm-6\" id=\"importname\">\n                                        {{accountDetials.branchName}}\n                                    </div>\n                                </div>\n                                <hr>\n                                <div class=\"row\">\n                                    <div class=\"col-sm-6\">Account Number </div>\n                                    <div class=\"col-sm-6\" id=\"importname\">\n                                        {{accountDetials.accountNumber}}\n                                    </div>\n                                </div>\n                                <hr />\n                                <div class=\"row\">\n                                    <div class=\"col-sm-6\">IFSC Code </div>\n                                    <div class=\"col-sm-6\" id=\"importname\">\n\n                                        {{accountDetials.ifscCode}}\n\n                                    </div>\n                                </div>\n                                <hr />\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\">\n                            <p class=\"import-end\">Once you have\n                                made the\n                                Bank Transfer, please update payment details</p>\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-2\"></div>\n                        <div class=\"col-sm-7\">\n                            <div class=\"button-section\">\n                                <button class=\"btn btn-default btn-lg back\" (click)=\"onBackPendingTopup()\">Back</button>\n                                <button class=\"btn btn-success btn-lg update\" (click)=\"updatePaymntInfo()\">Update\n                                    Payment Info</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>\n\n<div class=\"container importct\" *ngIf=\"iterationName == 'SHOW_UPDATE_PAYMENT_INFO'\">\n    <form name=\"form\" (ngSubmit)=\"f.form.valid && onPaymentsubmit()\" #f=\"ngForm\">\n        <div class=\"row\">\n            <div class=\"col-sm-4\" id=\"wallet-1\">\n                <div class=\"card\" id=\"import\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient imp\">\n                        Topup Details\n                    </div><br>\n\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\" *ngIf=\"bankPayment.customerId!=null\"> Customer ID </div>\n                        <div class=\"col-sm-6\" id=\"importname\" *ngIf=\"bankPayment.customerId!=null\">\n                            {{bankPayment.customerId}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\" *ngIf=\"bankPayment.organisationRefNo!=null\">\n                        <div class=\"col-sm-6\"> Organisation ID </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{bankPayment.organisationRefNo}}\n                        </div>\n                    </div>\n                    <hr *ngIf=\"bankPayment.organisationRefNo!=null\" />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Topup Ref.No </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{bankPayment.topupRefNo}}\n                        </div>\n                    </div>\n                    <hr>\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Topup Date</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{bankPayment.topupDate | date}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\" id=\"importpaid\">Topup Amount </div>\n                        <div class=\"col-sm-6\" id=\"importpaid1\">\n\n                            {{bankPayment.topupAmount |currency : bankPayment.currency}}\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-sm-8\">\n                <div class=\"card first\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient\">\n                        Wallet - Bank Transfer\n                    </div>\n                    <div class=\"charge\">\n                        <h4 id=\"addCharges\" *ngIf=\"bankPayment.charges==0\">*No additional charges*</h4>\n                        <h4 id=\"addCharges\" *ngIf=\"bankPayment.charges!=0\">Charges : {{bankPayment.charges}} % of\n                            Transactional Amount</h4>\n                    </div>\n                    <div class=\"row\" id=\"import\">\n                        <div class=\"col-sm-6\">\n                            <label id=\"importlabel\">Paid Amount </label>\n                            <div class=\"input-group\">\n                                <div class=\"input-group-prepend\">\n                                    <div class=\"input-group-text\"><i class=\"fa {{curr}}\" style=\"font-size:25px\"></i>\n                                    </div>\n                                </div>\n                                <input type=\"text\" class=\"form-control input-vendor\"\n                                    [(ngModel)]=\"bankPayment.paidAmount\" name=\"paidAmount\"\n                                    placeholder=\"Enter Paid Amount \" value=\"\" #paidAmount=\"ngModel\"\n                                    (change)=\"onPaidAmount(template)\" #paidAmount=\"ngModel\"\n                                    pattern=\"['0-9',{/^\\d+\\.\\d{2}$/}]*\"\n                                    [ngClass]=\"{ 'is-invalid': f.submitted && paidAmount.invalid }\" required>\n                                <div *ngIf=\"f.submitted && paidAmount.invalid\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"paidAmount.errors.required\">Please Enter Amount</div>\n                                    <div *ngIf=\"paidAmount.errors.pattern\">Please Enter Numbers Alphabets Not\n                                        Allowed</div>\n                                </div>\n                            </div>\n                        </div>\n                        <ng-template #template>\n                            <div class=\"modal-header\">\n                                <h4 class=\"modal-title\">Payment by Bank Transfer User</h4>\n                                <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\"\n                                    (click)=\"modalRef.hide()\">\n                                    <span aria-hidden=\"true\">×</span>\n                                </button>\n                            </div>\n                            <div class=\"modal-body\">\n                                <h5><b>You Need To Pay Minimum Amount....!</b>\n                                </h5>\n                            </div>\n                            <div class=\"modal-footer\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"modalRef.hide()\">OK</button>\n                            </div>\n                        </ng-template>\n                        <div class=\"col-sm-6\">\n                            <label id=\"importlabel\">Remitting Bank </label>\n                            <div class=\"form-group\">\n                                <input list=\"hosting-plan\" [(ngModel)]=\"bankPayment.remittingBank\" name=\"remittingBank\"\n                                    type=\"text\" class=\"form-control input-vendor\" placeholder=\"Enter Bank Name\"\n                                    #remittingBank=\"ngModel\" pattern=\"^[A-Za-z ]+$\"\n                                    [ngClass]=\"{ 'is-invalid': f.submitted && remittingBank.invalid }\" required>\n                                <div *ngIf=\"f.submitted && remittingBank.invalid\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"remittingBank.errors.required\">Please Remitting Bank</div>\n                                    <div *ngIf=\"remittingBank.errors.pattern\">Numbers Not Allowed</div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"col-sm-6\">\n                            <label id=\"importlabel\">Remitter Name </label>\n                            <div class=\"form-group\">\n                                <input type=\"text\" class=\"form-control input-vendor\"\n                                    [(ngModel)]=\"bankPayment.remittingName\" name=\"remittingName\"\n                                    placeholder=\"Enter Remitter Name\" #remittingName=\"ngModel\"\n                                    [ngClass]=\"{ 'is-invalid': f.submitted && remittingName.invalid }\" required>\n                                <div *ngIf=\"f.submitted && remittingName.invalid\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"remittingName.errors.required\">Please Enter Remitter Name</div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\">\n                            <label id=\"importlabel\">Remittance Date </label>\n                            <div class=\"form-group\">\n                                <input placeholder=\" Date\" [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\"\n                                    class=\"form-control input-vendor\" [(ngModel)]=\"bankPayment.remittingDate\"\n                                    name=\"remittingDate\" #remittingDate=\"ngModel\" [min]=\"min\" [max]=\"max\"\n                                    [ngClass]=\"{ 'is-invalid': f.submitted && remittingDate.invalid }\" required>\n                                <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                                <div *ngIf=\"f.submitted && remittingDate.invalid\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"remittingDate.errors.required\">Please Enter Remittance Date</div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\">\n                            <label id=\"importlabel\">Unique Transaction Ref.No (UTR) </label>\n                            <div class=\"form-group\">\n                                <input type=\"text\" class=\"form-control input-vendor\" [(ngModel)]=\"bankPayment.utrNo\"\n                                    name=\"utrNo\" placeholder=\"Enter UTR Ref.Number\" #utrNo=\"ngModel\" pattern=\"^[a-zA-Z0-9]+$\"\n                                    [ngClass]=\"{ 'is-invalid': f.submitted && utrNo.invalid }\" required>\n                                <div *ngIf=\"f.submitted && utrNo.invalid\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"utrNo.errors.required\">Please Enter Unique Transaction Ref.No (UTR)\n                                    </div>\n                                    <div *ngIf=\"utrNo.errors.pattern\">Special Charectors Not Allowed\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\"></div>\n                        <div class=\"col-sm-3\"></div>\n                        <div class=\"col-sm-9\">\n                            <br>\n                            <div class=\"button-section\">\n                                <button type=\"button\" *ngIf=\"topupPendingYN == null\" class=\"btn btn-lg btn-default banktr\"\n                                    (click)=\"onBackPendingTopup()\">Back</button>\n                             <button *ngIf=\"topupPendingYN !=null && topupPendingYN == true\" type=\"button\"\n                                    class=\"btn btn-lg btn-default banktr\" (click)=\"onBackClick()\">Back</button> \n                                <button type=\"submit\" class=\"btn btn-lg btn-success banktr1\">Submit</button>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n\n        </div>\n    </form>\n</div>\n\n<div class=\"container importct\" *ngIf=\"iterationName == 'CHEQUE'\">\n    <form name=\"form\" (ngSubmit)=\"f.form.valid && onSaveCheque()\" #f=\"ngForm\">\n        <div class=\"row\">\n            <div class=\"col-sm-4\" id=\"wallet-1\">\n                <div class=\"card\" id=\"import\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient imp\">\n                        Topup Details\n                    </div><br>\n\n                    <div class=\"row\" *ngIf=\"chequePayment.customerId!=null\">\n                        <div class=\"col-sm-6\"> Customer ID </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{chequePayment.customerId}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\" *ngIf=\"chequePayment.organisationRefNo!=null\"> Organisation ID </div>\n                        <div class=\"col-sm-6\" id=\"importname\" *ngIf=\"chequePayment.organisationRefNo!=null\">\n                            {{chequePayment.organisationRefNo}}\n                        </div>\n                    </div>\n                    <hr *ngIf=\"chequePayment.organisationRefNo!=null\" />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Topup Ref.No </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{chequePayment.topupRefNo}}\n                        </div>\n                    </div>\n                    <hr>\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Topup Date</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{chequePayment.topupDate | date}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\" id=\"importpaid\">Topup Amount </div>\n                        <div class=\"col-sm-6\" id=\"importpaid1\">\n\n                            {{chequePayment.topupAmount |currency : chequePayment.currency}}\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-sm-8\">\n                <div class=\"card first\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient\">\n                        Wallet - Payment by Cheque\n                    </div>\n                    <div class=\"charge\">\n                        <h4 id=\"addCharges\" *ngIf=\"chequePayment.charges==0\">*No additional charges*</h4>\n                        <h4 id=\"addCharges\" *ngIf=\"chequePayment.charges!=0\">Charges : {{chequePayment.charges}} %\n                            of\n                            Transactional Amount</h4>\n                    </div>\n                    <br><br>\n                    <div class=\"row\">\n                        <div class=\"col-md-3\">\n                            <label id=\"importlabeltype\">Choose Cheque Type :</label>\n                        </div>\n                        <div class=\"col-md-3\" *ngFor=\"let c of chequeTypes\">\n                            <h5 class=\"card-title\">\n                                <div class=\"custom-control custom-radio\">\n                                    <input type=\"radio\" class=\"custom-control-input\" id=\"id2{{c.paramName}}\"\n                                        name=\"chequeMode\" [value]=\"c.paramName\" [(ngModel)]=\"chequeMode\"\n                                        #chequeMode1=\"ngModel\"\n                                        [ngClass]=\"{ 'is-invalid': f.submitted && chequeMode1.invalid }\" required>\n                                    <label class=\"custom-control-label type\" for=\"id2{{c.paramName}}\"\n                                        id=\"importlabel\">{{c.paramName}}</label>\n                                    <div *ngIf=\"f.submitted && chequeMode1.invalid\" class=\"invalid-feedback\">Please\n                                        Select\n                                        Cheque Type</div>\n                                </div>\n                            </h5>\n                        </div>\n                    </div>\n                    <div class=\"row\" id=\"import\">\n                        <div class=\"col-sm-6\">\n                            <label id=\"importlabel\">Cheque Issuing Bank </label>\n                            <div class=\"form-group\">\n                                <div class=\"form-group\">\n                                    <input type=\"text\" class=\"form-control input-vendor\"\n                                        [(ngModel)]=\"chequePayment.chequeIssuingBank\" name=\"chequeIssuingBank\"\n                                        #chequeIssuingBank=\"ngModel\" placeholder=\" Enter Cheque Issuing Bank\"\n                                        [ngClass]=\"{'is-invalid' : f.submitted && chequeIssuingBank.invalid}\"\n                                        pattern=\"^[A-Za-z ]+$\" required>\n                                    <div *ngIf=\"f.submitted && chequeIssuingBank.invalid\" class=\"invalid-feedback\">\n                                        <div *ngIf=\"chequeIssuingBank.errors.required\">Please Enter Cheque Bank\n                                        </div>\n                                        <div *ngIf=\"chequeIssuingBank.errors.pattern\">Numbers Not Allowed</div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"col-sm-6\">\n                            <label id=\"importlabel\">Cheque Issuer Name </label>\n                            <div class=\"form-group\">\n                                <input placeholder=\"Cheque Issuer Name\" type=\"text\" class=\"form-control input-vendor\"\n                                    [(ngModel)]=\"chequePayment.chequeIssuerName\" name=\"chequeIssuerName\"\n                                    #chequeIssuerName=\"ngModel\"\n                                    [ngClass]=\"{ 'is-invalid': f.submitted && chequeIssuerName.invalid }\" required>\n                                <div *ngIf=\"f.submitted && chequeIssuerName.invalid\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"chequeIssuerName.errors.required\">Please Enter Cheque Issuer Name\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"col-sm-6\">\n                            <label id=\"importlabel\">Cheque Number </label>\n                            <div class=\"form-group\">\n                                <input placeholder=\"Cheque Number\" type=\"text\" class=\"form-control input-vendor\"\n                                    [(ngModel)]=\"chequePayment.chequeNumber\" name=\"chequeNumber\" #chequeNumber=\"ngModel\"\n                                    minlength=\"6\" maxlength=\"6\" pattern=\"[0-9]*\"\n                                    [ngClass]=\"{ 'is-invalid': f.submitted && chequeNumber.invalid }\" required>\n                                <div *ngIf=\"f.submitted && chequeNumber.invalid\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"chequeNumber.errors.required\">Please Enter Cheque Number</div>\n                                    <div *ngIf=\"chequeNumber.errors.minlength\">Please 6 digit Cheque Number</div>\n                                    <div *ngIf=\"chequeNumber.errors.pattern\">Cheque number should be only numbers\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\">\n                            <label id=\"importlabel\">Cheque Amount</label>\n                            <div class=\"form-group\">\n                                <input type=\"text\" class=\"form-control height\" [(ngModel)]=\"chequePayment.chequeAmount\"\n                                    placeholder=\"Cheque Amount\" name=\"chequeAmount\" value=\"\"\n                                    class=\"form-control input-vendor\" #chequeAmount=\"ngModel\"\n                                    pattern=\"['0-9',{/^\\d+\\.\\d{2}$/}]*\"\n                                    [ngClass]=\"{ 'is-invalid': f.submitted && chequeAmount.invalid }\" required\n                                    (change)=\"onChequeAmount(template)\">\n                                <div *ngIf=\"f.submitted && chequeAmount.invalid\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"chequeAmount.errors.required\">Please Enter Cheque Amount</div>\n                                    <div *ngIf=\"chequeAmount.errors.pattern\">Please Enter Numbers Alphabets Not\n                                        Allowed</div>\n                                </div>\n                            </div>\n                            <ng-template #template>\n                                <div class=\"modal-header\">\n                                    <h4 class=\"modal-title\">Payment by Cheque</h4>\n                                    <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\"\n                                        (click)=\"modalRef.hide()\">\n                                        <span aria-hidden=\"true\">×</span>\n                                    </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                    <h5><b>You Need To Pay Minimum Amount..!</b>\n                                    </h5>\n                                </div>\n                                <div class=\"modal-footer\">\n                                    <button type=\"button\" class=\"btn btn-default\" (click)=\"modalRef.hide()\">OK</button>\n                                </div>\n                            </ng-template>\n                        </div>\n                        <div class=\"col-sm-6\">\n                            <label id=\"importlabel\">Cheque Date </label>\n                            <div class=\"form-group\">\n                                <input placeholder=\"Cheque Date\" [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\"\n                                    class=\"form-control input-vendor\" [(ngModel)]=\"chequePayment.chequeDate\"\n                                    name=\"chequeDate\" #chequeDate=\"ngModel\"\n                                    [ngClass]=\"{'is-invalid' : f.submitted && chequeDate.invalid}\" required>\n                                <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                                <div *ngIf=\"f.submitted && chequeDate.invalid\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"chequeDate.errors.required\">Please Enter Cheque Date</div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\" *ngIf=\"chequeMode == 'Cheque Deposit'\">\n                            <label id=\"importlabel\">Deposited On </label>\n                            <div class=\"form-group\">\n                                <input placeholder=\"Deposited On\" [owlDateTime]=\"dt20\" [owlDateTimeTrigger]=\"dt20\"\n                                    class=\"form-control input-vendor\" [(ngModel)]=\"chequePayment.depositedOn\"\n                                    name=\"depositedOn\" #depositedOn=\"ngModel\"\n                                    [ngClass]=\"{ 'is-invalid': f.submitted && depositedOn.invalid }\" required>\n                                <owl-date-time #dt20 pickerType=\"calendar\"></owl-date-time>\n                                <div *ngIf=\"f.submitted && depositedOn.invalid\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"depositedOn.errors.required\">Please Enter Deposited On</div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\" *ngIf=\"chequeMode == 'Cheque Delivery'\">\n                            <label id=\"importlabel\">To Be Delivered On</label>\n                            <div class=\"form-group\">\n                                <input placeholder=\"To Be Delivered On\" [owlDateTime]=\"dt20\" [owlDateTimeTrigger]=\"dt20\"\n                                    class=\"form-control input-vendor\" [(ngModel)]=\"chequePayment.toBeDeliveredOn\"\n                                    name=\"toBeDeliveredOn\" #toBeDeliveredOn=\"ngModel\"\n                                    [ngClass]=\"{ 'is-invalid': f.submitted && toBeDeliveredOn.invalid }\" required>\n                                <owl-date-time #dt20 pickerType=\"calendar\"></owl-date-time>\n                                <div *ngIf=\"f.submitted && toBeDeliveredOn.invalid\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"toBeDeliveredOn.errors.required\">Please Enter To Be Delivered On\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\" *ngIf=\"chequeMode == 'Cheque Collection'\">\n                            <label id=\"importlabel\">To Be Collected On</label>\n                            <div class=\"form-group\">\n                                <input placeholder=\"To Be Collected On\" [owlDateTime]=\"dt20\" [owlDateTimeTrigger]=\"dt20\"\n                                    class=\"form-control input-vendor\" [(ngModel)]=\"chequePayment.toBeCollectedOn\"\n                                    name=\"toBeCollectedOn\" #toBeCollectedOn=\"ngModel\"\n                                    [ngClass]=\"{ 'is-invalid': f.submitted && toBeCollectedOn.invalid }\" required>\n                                <owl-date-time #dt20 pickerType=\"calendar\"></owl-date-time>\n                                <div *ngIf=\"f.submitted && toBeCollectedOn.invalid\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"toBeCollectedOn.errors.required\">Please Enter To Be Collected On\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\"></div>\n                        <div class=\"col-sm-3\"></div>\n                        <div class=\"col-sm-12\">\n                            <br>\n                            <div class=\"button-section\">\n                                <!-- <button type=\"button\" *ngIf=\"pendingTopupYN==false\" class=\"btn btn-default btn-lg\"\n                                    (click)=\"onBackClick()\">Back</button> -->\n                                <button type=\"button\" class=\"btn btn-default btn-lg\"\n                                    (click)=\"onBackPendingTopup()\">Back</button>\n                                <button type=\"submit\" class=\"btn btn-success btn-lg\">Submit</button>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n\n        </div>\n    </form>\n</div>\n\n<div class=\"container importct\" *ngIf=\"iterationName =='SHOW_BHIM_UPI'\">\n    <form>\n        <div class=\"row\">\n            <div class=\"col-sm-4\" id=\"wallet-1\">\n                <div class=\"card\" id=\"import\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient imp\">\n                        Topup Details\n                    </div><br>\n                    <div class=\"row\" *ngIf=\"onlinePayment.organisationRefNo!=null\">\n                        <div class=\"col-sm-6\"> Organisation ID </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{onlinePayment.organisationRefNo}}\n                        </div>\n                    </div>\n                    <hr *ngIf=\"onlinePayment.organisationRefNo!=null\" />\n                    <div class=\"row\" *ngIf=\"onlinePayment.customerId!=null\">\n                        <div class=\"col-sm-6\"> Customer ID </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{onlinePayment.customerId}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Topup Ref.No </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n\n                            {{onlinePayment.topupRefNo}}\n                        </div>\n                    </div>\n                    <hr>\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Topup Date</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{onlinePayment.topupDate | date}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Topup Amount </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{onlinePayment.topupAmount | currency : onlinePayment.currency }}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\" id=\"importpaid\"> Amount to be Paid</div>\n                        <div class=\"col-sm-6\" id=\"importpaid1\">\n                            {{onlinePayment.paidAmount | currency : onlinePayment.currency}}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-sm-8\">\n                <div class=\"card first\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient\">\n                        Wallet - Payment by BHIM / UPI\n                    </div>\n                    <div class=\"charge\">\n                        <h4 id=\"addCharges\" *ngIf=\"onlinePayment.charges==0\">*No additional charges*</h4>\n                        <h4 id=\"addCharges\" *ngIf=\"onlinePayment.charges!=0\">Charges : {{onlinePayment.charges}} % of\n                            Transaction Amount + Applicable Tax</h4>\n                    </div>\n                    <div class=\"row\" id=\"import\">\n                        <div class=\"col-sm-6\">\n                            <label id=\"importlabel\">Please Enter your UPI ID </label>\n                            <div class=\"form-group\">\n                                <input type=\"text\" class=\"form-control input-vendor\"\n                                    placeholder=\"Ex : Mobilenumber@upi\">\n                            </div>\n                            <div class=\"form-group\">\n                                <div class=\"form-check\">\n                                    <input class=\"form-check-input\" type=\"checkbox\" id=\"gridCheck\">\n                                    <label class=\"form-check-label\" for=\"gridCheck\">\n                                        Remember my ID\n                                    </label>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\">\n                            <br>\n                            <div class=\"form-group\">\n                                <button class=\"btn btn-primary btn-block btn-lg verify\"\n                                    (click)=\"onSaveOnlinePayment()\">Verify\n                                    &\n                                    Pay</button>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\"></div>\n                        <div class=\"col-sm-3\"></div>\n                        <div class=\"col-sm-12\">\n                            <div class=\"button-section\">\n                                <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    </form>\n</div>\n\n<div class=\"container importct\" *ngIf=\"iterationName =='SHOW_VERIFY_SUCCESS'\">\n    <form name=\"form\" (ngSubmit)=\"f.form.valid && onPaymentsubmit()\" #f=\"ngForm\">\n        <div class=\"row\">\n            <div class=\"col-sm-2\"></div>\n            <div class=\"col-sm-8\" id=\"wallet-1\">\n                <div class=\"card-header view view-cascade gradient-card-header blue-gradient\">\n                    Wallet\n                </div>\n                <div class=\"card\" id=\"import\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\">\n                            <p class=\"import-text\">Thank You For Your Payment, Top Up Successfull</p>\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-3\"></div>\n                        <div class=\"col-sm-6\">\n                            <div class=\"row\" *ngIf=\"onlinePayment.customerId!=null\">\n                                <div class=\"col-sm-6\">Customer Id </div>\n                                <div class=\"col-sm-6\" id=\"importname\">\n                                    {{onlinePayment.customerId}}\n                                </div>\n                            </div>\n                            <hr />\n                            <div class=\"row\" *ngIf=\"onlinePayment.organisationRefNo!=null\">\n                                <div class=\"col-sm-6\">Customer Id </div>\n                                <div class=\"col-sm-6\" id=\"importname\">\n                                    {{onlinePayment.organisationRefNo}}\n                                </div>\n                            </div>\n                            <hr *ngIf=\"onlinePayment.organisationRefNo!=null\" />\n                            <div class=\"row\">\n                                <div class=\"col-sm-6\">Previous Balance </div>\n                                <div class=\"col-sm-6\" id=\"importname\">\n                                    {{walletDetails.availableBalance - onlinePayment.topupAmount |currency : onlinePayment.currency}}\n                                </div>\n                            </div>\n                            <hr />\n                            <div class=\"row\">\n                                <div class=\"col-sm-6\">Top Up Amount </div>\n                                <div class=\"col-sm-6\" id=\"importname\">\n                                    {{onlinePayment.topupAmount |currency : onlinePayment.currency}}\n                                </div>\n                            </div>\n                            <hr>\n                            <div class=\"row\">\n                                <div class=\"col-sm-6\">Top Up Date </div>\n                                <div class=\"col-sm-6\" id=\"importname\">\n                                    {{onlinePayment.topupDate | date}}\n                                </div>\n                            </div>\n                            <hr />\n                            <div class=\"row\">\n                                <div class=\"col-sm-6\">Current Balance </div>\n                                <div class=\"col-sm-6\" id=\"importname\">\n\n                                    {{walletDetails.availableBalance |currency : walletDetails.walletCurrency}}\n\n                                </div>\n                            </div>\n                            <hr />\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-sm-2\"></div>\n                        <div class=\"col-sm-6\">\n                            <div class=\"button-section\">\n                                <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                                <button class=\"btn btn-primary btn-lg\" [routerLink]=\"['/dashboard']\">Dashboard</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>\n\n<div class=\"container importct\" *ngIf=\"iterationName == 'SHOW_RUPAY_DETAILS'\">\n    <form>\n        <div class=\"row\">\n            <div class=\"col-sm-4\" id=\"wallet-1\">\n                <div class=\"card\" id=\"import\">\n\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient imp\">\n                        Topup Details\n                    </div><br>\n                    <div class=\"row\" *ngIf=\"onlinePayment.organisationRefNo!=null\">\n                        <div class=\"col-sm-6\"> Organisation ID </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{onlinePayment.organisationRefNo}}\n                        </div>\n                    </div>\n                    <hr *ngIf=\"onlinePayment.organisationRefNo!=null\" />\n                    <div class=\"row\" *ngIf=\"onlinePayment.customerId!=null\">\n                        <div class=\"col-sm-6\"> Customer ID </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{onlinePayment.customerId}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Topup Ref.No </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n\n                            {{onlinePayment.topupRefNo}}\n                        </div>\n                    </div>\n                    <hr>\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Topup Date</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{onlinePayment.topupDate | date}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Topup Amount </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n\n                            {{onlinePayment.topupAmount | currency : onlinePayment.currency }}\n\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\" id=\"importpaid\"> Amount to be Paid</div>\n                        <div class=\"col-sm-6\" id=\"importpaid1\">\n\n                            {{onlinePayment.paidAmount | currency : onlinePayment.currency}}\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-sm-8\">\n                <div class=\"card first\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient\">\n                        Wallet - Payment by Debit Card ( Rupay )\n                    </div>\n                    <div class=\"charge\">\n                        <h4 id=\"addCharges\" *ngIf=\"onlinePayment.charges==0\">*No additional charges*</h4>\n                        <h4 id=\"addCharges\" *ngIf=\"onlinePayment.charges!=0\">Charges : {{onlinePayment.charges}} % of\n                            Transaction Amount + Applicable Tax</h4>\n                    </div>\n                    <div class=\"row\" id=\"import\">\n                        <div class=\"col-sm-6\">\n                            <label id=\"importlabel\">Name as on Card</label>\n                            <div class=\"form-group\">\n                                <input type=\"text\" class=\"form-control input-vendor\" required autocomplete=\"off\"\n                                    placeholder=\"Enter Name as on Card\"> </div>\n                        </div>\n                        <div class=\"col-sm-6\">\n                            <div class=\"form-group\">\n                                <label id=\"importlabel\"> Rupay Card Number</label>\n                                <input type=\"text\" class=\"form-control input-vendor\" required autocomplete=\"off\"\n                                    placeholder=\"Enter Card Number\">\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\">\n                            <div class=\"form-group\">\n                                <label id=\"importlabel\">Expiration</label>\n                                <input id=\"cc-exp\" name=\"cc-exp\" type=\"tel\" class=\"form-control input-vendor\" required\n                                    placeholder=\"MM\" autocomplete=\"cc-exp\">\n\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\">\n                            <div class=\"form-group\">\n                                <label id=\"importlabel\">Year</label>\n                                <input id=\"cc-exp\" name=\"cc-exp\" type=\"tel\" class=\"form-control input-vendor\" required\n                                    placeholder=\"YY\" autocomplete=\"cc-exp\">\n\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\">\n                            <div class=\"form-group\">\n                                <label id=\"importlabel\">CVV</label>\n                                <input id=\"cc-exp\" name=\"cc-exp\" type=\"password\" class=\"form-control input-vendor\"\n                                    required placeholder=\"Enter 3 Digit CVV No\" autocomplete=\"cc-exp\">\n\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\"></div>\n                        <div class=\"col-sm-6\">\n                            <div class=\"form-group\">\n                                <div class=\"form-check\">\n                                    <input class=\"form-check-input\" type=\"checkbox\" id=\"gridCheck\">\n                                    <label class=\"form-check-label\" for=\"gridCheck\">\n                                        Remember my Card details (CVV number will not be stored)\n                                    </label>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\"></div>\n                        <div class=\"col-sm-3\"></div>\n                        <div class=\"col-sm-12\">\n                            <div class=\"button-section\">\n                                <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">\n                                    Back\n                                </button>\n                                <button class=\"btn btn-success btn-lg\" (click)=\"onSaveOnlinePayment()\">\n                                    Proceed\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    </form>\n</div>\n\n<div class=\"container importct\" *ngIf=\"iterationName == 'ON_DEBIT_CARD_VISA_MASTER'\">\n    <form name=\"form\" (ngSubmit)=\"f.form.valid && onSaveOnlinePayment()\" #f=\"ngForm\">\n        <div class=\"row\">\n            <div class=\"col-sm-4\" id=\"wallet-1\">\n                <div class=\"card\" id=\"import\">\n\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient imp\">\n                        Topup Details\n                    </div><br>\n                    <div class=\"row\" *ngIf=\"onlinePayment.organisationRefNo!=null\">\n                        <div class=\"col-sm-6\"> Organisation ID </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{onlinePayment.organisationRefNo}}\n                        </div>\n                    </div>\n                    <hr *ngIf=\"onlinePayment.organisationRefNo!=null\" />\n                    <div class=\"row\" *ngIf=\"onlinePayment.customerId!=null\">\n                        <div class=\"col-sm-6\"> Customer ID </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{onlinePayment.customerId}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Topup Ref.No</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{onlinePayment.topupRefNo}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Topup Date</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{onlinePayment.topupDate | date}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Topup Amount </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{onlinePayment.topupAmount |currency : onlinePayment.currency}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\" id=\"importpaid\">Amount to be paid </div>\n                        <div class=\"col-sm-6\" id=\"importpaid1\">\n                            {{onlinePayment.paidAmount |currency : onlinePayment.currency}}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-sm-8\">\n                <div class=\"card first\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient\">\n                        Wallet - Payment by Debit Card ( Visa/Master )\n                    </div>\n                    <div class=\"charge\">\n                        <h4 id=\"addCharges\" *ngIf=\"onlinePayment.charges==0\">*No additional charges*</h4>\n                        <h4 id=\"addCharges\" *ngIf=\"onlinePayment.charges!=0\">Charges : {{onlinePayment.charges}} % of\n                            Transaction Amount + Applicable Total GST</h4>\n                    </div>\n                    <div class=\"row\" id=\"import\">\n                        <div class=\"col-sm-6\">\n                            <label id=\"importlabel\">Name as on Card</label>\n                            <div class=\"form-group\">\n                                <input type=\"text\" class=\"form-control input-vendor\" required autocomplete=\"off\"\n                                    placeholder=\"Enter Name as on Card\"> </div>\n                        </div>\n                        <div class=\"col-sm-6\">\n                            <div class=\"form-group\">\n                                <label id=\"importlabel\"> Debit Card Number</label>\n                                <input type=\"text\" class=\"form-control input-vendor\" required autocomplete=\"off\"\n                                    placeholder=\"Enter Card Number\">\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\">\n                            <div class=\"form-group\">\n                                <label id=\"importlabel\">Expiration</label>\n                                <input id=\"cc-exp\" name=\"cc-exp\" type=\"tel\" class=\"form-control input-vendor\" required\n                                    placeholder=\"MM\" autocomplete=\"cc-exp\">\n\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\">\n                            <div class=\"form-group\">\n                                <label id=\"importlabel\">Year</label>\n                                <input id=\"cc-exp\" name=\"cc-exp\" type=\"tel\" class=\"form-control input-vendor\" required\n                                    placeholder=\"YY\" autocomplete=\"cc-exp\">\n\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\">\n                            <div class=\"form-group\">\n                                <label id=\"importlabel\">CVV</label>\n                                <input id=\"cc-exp\" name=\"cc-exp\" type=\"password\" class=\"form-control input-vendor\"\n                                    required placeholder=\"Enter 3 Digit CVV No\" autocomplete=\"cc-exp\">\n\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\"></div>\n                        <div class=\"col-sm-6\">\n                            <div class=\"form-group\">\n                                <div class=\"form-check\">\n                                    <input class=\"form-check-input\" type=\"checkbox\" id=\"gridCheck\">\n                                    <label class=\"form-check-label\" for=\"gridCheck\">\n                                        Remember my Card details (CVV number will not be stored)\n                                    </label>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\"></div>\n                        <div class=\"col-sm-3\"></div>\n                        <div class=\"col-sm-12\">\n                            <div class=\"button-section\">\n                                <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">\n                                    Back\n                                </button>\n                                <button class=\"btn btn-success btn-lg\">\n                                    Proceed\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    </form>\n</div>\n\n<div class=\"container importct\" *ngIf=\"iterationName == 'ON_CREDIT_CARD_VISA_MASTER'\">\n    <form name=\"form\" (ngSubmit)=\"f.form.valid && onSaveOnlinePayment()\" #f=\"ngForm\">\n        <div class=\"row\">\n            <div class=\"col-sm-4\" id=\"wallet-1\">\n                <div class=\"card\" id=\"import\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient imp\">\n                        Topup Details\n                    </div><br>\n                    <div class=\"row\" *ngIf=\"onlinePayment.organisationRefNo!=null\">\n                        <div class=\"col-sm-6\"> Organisation ID </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{onlinePayment.organisationRefNo}}\n                        </div>\n                    </div>\n                    <hr *ngIf=\"onlinePayment.organisationRefNo!=null\" />\n                    <div class=\"row\" *ngIf=\"onlinePayment.customerId!=null\">\n                        <div class=\"col-sm-6\"> Customer ID </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{onlinePayment.customerId}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Topup Ref.No</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{onlinePayment.topupRefNo}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Topup Date</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{onlinePayment.topupDate | date}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Topup Amount </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n\n                            {{onlinePayment.topupAmount |currency : onlinePayment.currency}}\n\n                        </div>\n                    </div>\n                    <hr>\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\" id=\"importpaid\">Amount to be paid </div>\n                        <div class=\"col-sm-6\" id=\"importpaid1\">\n\n                            {{onlinePayment.paidAmount |currency : onlinePayment.currency}}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-sm-8\">\n                <div class=\"card first\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient\">\n                        Wallet - Payment by Credit Card ( Visa/Master )\n                    </div>\n                    <div class=\"charge\">\n                        <h4 id=\"addCharges\" *ngIf=\"onlinePayment.charges==0\">*No additional charges*</h4>\n                        <h4 id=\"addCharges\" *ngIf=\"onlinePayment.charges!=0\">Charges : {{onlinePayment.charges}} % of\n                            Transaction Amount + Applicable Total GST</h4>\n                    </div>\n                    <div class=\"row\" id=\"import\">\n                        <div class=\"col-sm-6\">\n                            <label id=\"importlabel\">Name as on Card</label>\n                            <div class=\"form-group\">\n                                <input type=\"text\" class=\"form-control input-vendor\" required autocomplete=\"off\"\n                                    placeholder=\"Enter Name as on Card\"> </div>\n                        </div>\n                        <div class=\"col-sm-6\">\n                            <div class=\"form-group\">\n                                <label id=\"importlabel\"> Credit Card Number</label>\n                                <input type=\"text\" class=\"form-control input-vendor\" required autocomplete=\"off\"\n                                    placeholder=\"Enter Card Number\">\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\">\n                            <div class=\"form-group\">\n                                <label id=\"importlabel\">Expiration</label>\n                                <input id=\"cc-exp\" name=\"cc-exp\" type=\"tel\" class=\"form-control input-vendor\" required\n                                    placeholder=\"MM\" autocomplete=\"cc-exp\">\n\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\">\n                            <div class=\"form-group\">\n                                <label id=\"importlabel\">Year</label>\n                                <input id=\"cc-exp\" name=\"cc-exp\" type=\"tel\" class=\"form-control input-vendor\" required\n                                    placeholder=\"YY\" autocomplete=\"cc-exp\">\n\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\">\n                            <div class=\"form-group\">\n                                <label id=\"importlabel\">CVV</label>\n                                <input id=\"cc-exp\" name=\"cc-exp\" type=\"password\" class=\"form-control input-vendor\"\n                                    required placeholder=\"Enter 3 Digit CVV No\" autocomplete=\"cc-exp\">\n\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\"></div>\n                        <div class=\"col-sm-6\">\n                            <div class=\"form-group\">\n                                <div class=\"form-check\">\n                                    <input class=\"form-check-input\" type=\"checkbox\" id=\"gridCheck\">\n                                    <label class=\"form-check-label\" for=\"gridCheck\">\n                                        Remember my Card details (CVV number will not be stored)\n                                    </label>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\"></div>\n                        <div class=\"col-sm-3\"></div>\n                        <div class=\"col-sm-12\">\n                            <div class=\"button-section\">\n                                <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">\n                                    Back\n                                </button>\n                                <button class=\"btn btn-success btn-lg\">\n                                    Proceed\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    </form>\n</div>\n\n\n\n\n<!--  Payment by Wallet-->\n<div class=\"container\" *ngIf=\"iterationName == 'PAYMENTBY_WALLET'\">\n    <div class=\"row\">\n        <div class=\"col-12 col-sm-8 col-md-8 col-lg-8 mx-auto\">\n            <div id=\"pay-invoice\" class=\"card\">\n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Payment by Wallet</h4>\n                </div>\n                <div class=\"card-body\">\n                    <h4 style=\"color:red\">\n                        Charges: 1.99% of the transaction amount</h4><br>\n                    <form>\n                        <div class=\"row\">\n                            <div class=\"col-md-6\">\n                                <div class=\"row\">\n                                    <div class=\"col-md-6 col-6\">\n                                        <label>Customer ID :</label>\n                                    </div>\n                                    <div class=\"col-md-6 col-6\">\n                                        <label>XXXXXXXXXXX</label>\n                                    </div>\n                                </div>\n                                <div class=\"row\">\n                                    <div class=\"col-md-6 col-6\">\n                                        <label>Top Up Date :</label>\n                                    </div>\n                                    <div class=\"col-md-6 col-6\">\n                                        <label>XXXXXXXXXXX</label>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"col-md-6\">\n                                <div class=\"row\">\n                                    <div class=\"col-md-6 col-6\">\n                                        <label>Top Up Ref.No :</label>\n                                    </div>\n                                    <div class=\"col-md-6 col-6\">\n                                        <label>XXXXXXXXXXX</label>\n                                    </div>\n                                </div>\n                                <div class=\"row\">\n                                    <div class=\"col-md-6 col-6\">\n                                        <label>Top Up Amount :</label>\n                                    </div>\n                                    <div class=\"col-md-6 col-6\">\n                                        <label>XXXXXXXXXXX</label>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <hr class=\"mb-0\"><br>\n                        <div class=\"row\">\n                            <div class=\"col-md-6\">\n                                <label>Mobile number linked with Paytm</label>\n                            </div>\n                            <div class=\"col-md-6\">\n                                <div class=\"form-group\">\n                                    <input type=\"text\" class=\"form-control\" placeholder=\"Enter Mobile Number\">\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"form-group\">\n                            <div class=\"form-check\">\n                                <input class=\"form-check-input\" type=\"checkbox\" id=\"gridCheck\">\n                                <label class=\"form-check-label\" for=\"gridCheck\">\n                                    Remember my Mobile Number\n                                </label>\n                            </div>\n                        </div>\n                        <div class=\"button-section\">\n                            <button class=\"btn btn-light \" (click)=\"onBackClick()\">\n                                Back\n                            </button>\n                            <button class=\"btn btn-primary \" (click)=\"onProceedRupay()\">\n                                Proceed\n                            </button>\n                        </div>\n\n\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/User/walletandrewards/walletandrewards.component.html":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/User/walletandrewards/walletandrewards.component.html ***!
  \*************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n<br>\n<div class=\"card t1\" *ngIf=\"iteration == 'walletAndRewardsMainPage'\">\n    <div\n        class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n        <div>\n        </div>\n        <h4 href=\"\" class=\"white-text mx-3\">Wallet and Rewards</h4>\n        <div>\n        </div>\n    </div>\n    <div class=\"container t2\">\n        <div class=\"row\">\n            <div class=\"col-6 col-md-4\">\n                <div class=\"card card-cascade\" (click)=\"onWallet()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Wallet</h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center\">\n                        <i class=\"fas fa-wallet\" style=\"font-size:80px;color:#2e7d32\"></i>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"col-6 col-md-4\">\n                <div class=\"card card-cascade\" (click)=\"onTopupWallet()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Topup Wallet</h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center\">\n                        <i class=\"fa fa-plus-square-o\" style=\"font-size:80px;color:#0091ea \"></i>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"col-6 col-md-4\">\n                <div class=\"card card-cascade\" [routerLink]=\"['/rewarduser']\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Rewards </h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center\">\n                        <i class=\"fa fa-gift\" style=\"font-size:80px;color:red\"></i>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"button-section\">\n            <button class=\"btn btn-primary btn-lg\" [routerLink]=\"['/dashboard']\">Dashboard</button>\n        </div>\n    </div>\n</div>\n<div class=\"container\" *ngIf=\"iteration == 'walletDetail'\">\n    <div class=\"card\">\n        <div class=\"card-header view view-cascade gradient-card-header blue-gradient\">\n            Wallet\n        </div>\n        <div class=\"card-body\">\n            <div class=\"row\">\n                <div class=\"col-sm-12\">\n                    <label id=\"importbal\">Balance</label>\n                    <span id=\"importbal1\">\n                        {{walletDetails.availableBalance |currency:walletDetails.walletCurrency}}\n                    </span>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-sm-4\">\n                    <div class=\"card importcard\" (click)=\"onTopupWallet()\">\n                        <i class=\"fas fa-wallet\" style=\"font-size:36px;color: green;\"></i>\n                        <h5 id=\"importsub\" style=\" margin-left: 28px;\">Topup Wallet</h5>\n                    </div>\n                </div>\n                <div class=\"col-sm-4\">\n                    <div class=\"card importcard\" (click)=\"onAccountSummary()\">\n                        <i class=\"\tfa fa-newspaper-o\" style=\"font-size:36px;color: blue;\"></i>\n                        <h5 id=\"importsub\">Account Summary</h5>\n                    </div>\n                </div>\n                <div class=\"col-sm-4\">\n                    <div class=\"card importcard\" (click)=\"onCreditSummary()\">\n                        <i class=\"fa fa-reorder\" style=\"font-size:36px;color:fuchsia\"></i>\n                        <h5 id=\"importsub\">Credit Limit Summary</h5>\n                    </div>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-sm-4\">\n                    <div class=\"card importcard\" (click)=\"onHoldTransaction()\">\n                        <i class=\"fa fa-pause\" style=\"font-size:36px;color:cornflowerblue\"></i>\n                        <h5 id=\"importsub\">Held Transactions</h5>\n                    </div>\n                </div>\n                <div class=\"col-sm-4\">\n                    <div class=\"card importcard\" (click)=\"onPendingTransation()\">\n                        <i class=\"fa fa-exclamation-triangle\" style=\"font-size:36px;color:red\"></i>\n                        <h5 id=\"importsub\">Pending Transactions</h5>\n                    </div>\n                </div>\n                <div class=\"col-sm-4\">\n                    <div class=\"card importcard\" (click)=\"onPendingTopup()\">\n                        <i class=\"fa fa-edit\" style=\"font-size:36px;color: brown;\"></i>\n                        <h5 id=\"importsub\">Topup Payment Update</h5>\n                    </div>\n                </div>\n            </div>\n            <div class=\"button-section\" style=\"padding: 15px 0px 10px 0px;\">\n                <button class=\"btn btn-primary btn-lg\" [routerLink]=\"['/dashboard']\">Dashboard</button>\n                <button class=\"btn btn-deep-orange btn-lg\" (click)=\"ngOnInit()\">Go to wallet Rewards</button>\n            </div>\n        </div>\n    </div><br>\n    <div class=\"row\">\n        <div class=\"col-md-6\">\n        </div>\n        <div class=\"col-md-6\">\n        </div>\n    </div>\n\n</div>\n\n<!-- Account Summary -->\n<div class=\"container-fluid\" *ngIf=\"iteration == 'accountSummary'\">\n    <div class=\"row\">\n        <div class=\"col-sm-4\" id=\"wallet-1\">\n            <div class=\"card\" id=\"import\">\n\n                <div class=\"card-header view view-cascade gradient-card-header blue-gradient imp\">\n                    Wallet Details\n                </div><br>\n                <div class=\"row\" *ngIf=\"walletDetails.organisationRefNo!=null\">\n                    <div class=\"col-sm-6\"> Organisation ID </div>\n                    <div class=\"col-sm-6\" id=\"importname\">\n                        {{walletDetails.organisationRefNo}}\n                    </div>\n                </div>\n                <hr *ngIf=\"walletDetails.organisationRefNo!=null\" />\n                <div class=\"row\" *ngIf=\"walletDetails.customerId!=null\">\n                    <div class=\"col-sm-6\"> Customer ID </div>\n                    <div class=\"col-sm-6\" id=\"importname\">\n                        {{walletDetails.customerId}}\n                    </div>\n                </div>\n                <hr />\n                <div class=\"row\">\n                    <div class=\"col-sm-6\"> Wallet Balance </div>\n                    <div class=\"col-sm-6\" id=\"importname\">\n                        {{walletDetails.walletBalance | currency : walletDetails.walletCurrency}}\n                    </div>\n                </div>\n                <hr />\n                <div class=\"row\">\n                    <div class=\"col-sm-6\">Margin In Use </div>\n                    <div class=\"col-sm-6\" id=\"importname\">\n                        {{walletDetails.marginInUse  | currency : walletDetails.walletCurrency}}\n                    </div>\n                </div>\n                <hr />\n                <div class=\"row\">\n                    <div class=\"col-sm-6\">Available Balance</div>\n                    <div class=\"col-sm-6\" id=\"importname\">\n                        {{walletDetails.availableBalance |currency: walletDetails.walletCurrency}}\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"col-sm-8\" id=\"importcol\">\n            <section class=\"mb-5\">\n                <!--Card-->\n                <div class=\"card\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient imp1\">\n                        Wallet - Account Summary\n                    </div><br>\n                    <div class=\"row v1\" *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">\n                        <div class=\"col-md-2\">\n                            <div class=\"form-group\">\n                                <select class=\"form-control\" [(ngModel)]=\"region\" name=\"#region\"\n                                    (ngModelChange)=\"onRegion(selected)\">\n                                    <option [ngValue]=\"null\">Select Region</option>\n                                    <option *ngFor=\"let r of regionList\" [value]=\"r\">{{r}}</option>\n                                </select>\n                            </div>\n                        </div>\n\n                        <div class=\"col-md-2\">\n                            <div class=\"form-group\">\n                                <select class=\"form-control\" [(ngModel)]=\"state\" name=\"#state\"\n                                    (ngModelChange)=\"onState(selected)\">\n                                    <option [ngValue]=\"null\">Select State</option>\n                                    <option *ngFor=\"let s of stateList\" [value]=\"s\">{{s}}</option>\n                                </select>\n                            </div>\n                        </div>\n\n                        <div class=\"col-md-2\">\n                            <div class=\"form-group\">\n                                <select class=\"form-control\" [(ngModel)]=\"city\" name=\"#city\"\n                                    (ngModelChange)=\"onCity(selected)\">\n                                    <option [ngValue]=\"null\">Select City</option>\n                                    <option *ngFor=\"let c of cityList\" [value]=\"c\">{{c}}</option>\n                                </select>\n                            </div>\n                        </div>\n\n                        <div class=\"col-md-2\">\n                            <div class=\"form-group\">\n                                <select class=\"form-control\" [(ngModel)]=\"office\" name=\"#office\"\n                                    (ngModelChange)=\"onOffice(selected)\">\n                                    <option [ngValue]=\"null\">Select Office</option>\n                                    <option *ngFor=\"let o of officeList\" [value]=\"o\">{{o}}</option>\n                                </select>\n                            </div>\n                        </div>\n\n                        <div class=\"col-md-2\">\n                            <div class=\"form-group\">\n                                <select class=\"form-control\" [(ngModel)]=\"customerId\" name=\"#customerId\"\n                                    (ngModelChange)=\"onCustomerId(selected)\">\n                                    <option [ngValue]=\"null\">Select Customer Id</option>\n                                    <option *ngFor=\"let u of uniqueUserIdList\" [value]=\"u\">{{u}}</option>\n                                </select>\n                            </div>\n                        </div>\n                        <div class=\"col-md-2\">\n                            <div class=\"form-group\">\n                                <select class=\"form-control\" [(ngModel)]=\"range\" name=\"#range\"\n                                    (ngModelChange)=\"onSelect(selected)\">\n                                    <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                                    <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n                                </select>\n                            </div>\n                        </div>\n                        <div class=\"col-md-2\" *ngIf=\"customDate==true\">\n                            <div class=\"form-group\">\n                                <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" [(ngModel)]=\"date\"\n                                    placeholder=\"From\" class=\"form-control input-vendor\"\n                                    (ngModelChange)=\"onDateChange($event)\">\n                                <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                            </div>\n                        </div>\n                        <div class=\"col-md-2\" *ngIf=\"customDate==true\">\n                            <div class=\"form-group\">\n                                <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" [(ngModel)]=\"date1\"\n                                    placeholder=\"To\" class=\"form-control input-vendor\"\n                                    (ngModelChange)=\"onDateChange($event)\">\n                                <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"row v1\" *ngIf=\"user == null || user!=nulll && user.userType!='CORPORATE_SUPERVISOR'\">\n                        <div class=\"col-md-4\">\n                            <div class=\"form-group\">\n                                <select class=\"form-control\" [(ngModel)]=\"range\" name=\"#range\"\n                                    (ngModelChange)=\"onSelect(selected)\">\n                                    <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                                    <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n                                </select>\n                            </div>\n                        </div>\n                        <div class=\"col-md-4\" *ngIf=\"customDate==true\">\n                            <div class=\"form-group\">\n                                <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" [(ngModel)]=\"date\"\n                                    placeholder=\"From\" class=\"form-control input-vendor\"\n                                    (ngModelChange)=\"onDateChange($event)\">\n                                <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                            </div>\n                        </div>\n                        <div class=\"col-md-4\" *ngIf=\"customDate==true\">\n                            <div class=\"form-group\">\n                                <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" [(ngModel)]=\"date1\"\n                                    placeholder=\"To\" class=\"form-control input-vendor\"\n                                    (ngModelChange)=\"onDateChange($event)\">\n                                <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"card-body\">\n                        <div class=\"table table-responsive table-striped table-bordered\">\n                            <table class=\"table text-nowrap\">\n                                <thead>\n                                    <tr>\n                                        <th *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">Corporate User\n                                            Id</th>\n                                        <th *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">User Name</th>\n                                        <th *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">Region</th>\n                                        <th *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">State</th>\n                                        <th *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">City</th>\n                                        <th *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">Office</th>\n                                        <th>Date</th>\n                                        <th>Description</th>\n                                        <th>IN</th>\n                                        <th>OUT</th>\n                                        <th>Available Balance</th>\n                                        <th>Wallet Balance</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr *ngFor=\"let a of accountSummaryFilteredList | \n                                    paginate: { id: 'listing_pagination',\n                                    itemsPerPage: 6,\n                                    currentPage: page,\n                                    totalItems: totalRec }\">\n                                        <td *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">\n                                            {{a.user.uniqueUserId}}\n                                        </td>\n                                        <td *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">\n                                            {{a.user.firstName}}\n                                            {{a.user.lastName}}</td>\n                                        <td *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">\n                                            {{a.user.region}}</td>\n                                        <td *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">\n                                            {{a.user.state}}</td>\n                                        <td *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">{{a.user.city}}\n                                        </td>\n                                        <td *ngIf=\"user!=nulll && user.userType=='CORPORATE_SUPERVISOR'\">\n                                            {{a.user.officeName}}\n                                        </td>\n                                        <td>{{a.transactionDate | date}}</td>\n                                        <td> {{a.transactionDesc}}</td>\n                                        <td *ngIf=\"a.inAmount!=0\">{{a.inAmount |currency:a.transactionCurrency}}</td>\n                                        <td *ngIf=\"a.inAmount==0\">-</td>\n                                        <td *ngIf=\"a.outAmount!=0\">\n                                            {{a.outAmount | currency : walletDetails.walletCurrency}}\n                                        </td>\n                                        <td *ngIf=\"a.outAmount==0\">-</td>\n                                        <td>{{a.availableBalance | currency : walletDetails.walletCurrency}}</td>\n                                        <td>{{a.walletBalance | currency : walletDetails.walletCurrency}}</td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                        <br>\n                        <div class=\"d-flex justify-content-between\">\n                            <div class=\"wrap\">\n                                <pagination-controls id=\"listing_pagination\" maxSize=\"4\" directionLinks=\"true\"\n                                    (pageChange)=\"page = $event\">\n                                </pagination-controls>\n                            </div>\n                        </div>\n                        <div class=\"button-section\">\n                            <button class=\"btn btn-default btn-lg\" (click)=\"onbackClick()\">Back</button>\n                            <button type=\"submit\" [routerLink]=\"['/dashboard']\"\n                                class=\"btn btn-primary btn-lg\">Dashboard</button>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        </div>\n    </div>\n</div>\n\n<!-- Credit Summary -->\n<div class=\"container importct\" *ngIf=\"iteration == 'creditSummary'\">\n    <form>\n        <div class=\"row\">\n            <div class=\"col-sm-4\" id=\"wallet-1\">\n                <div class=\"card\" id=\"import\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient imp\">\n                        Wallet Details\n                    </div><br>\n                    <div class=\"row\" *ngIf=\"walletDetails.organisationRefNo!=null\">\n                        <div class=\"col-sm-6\"> Organisation ID </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{walletDetails.organisationRefNo}}\n                        </div>\n                    </div>\n                    <hr *ngIf=\"walletDetails.organisationRefNo!=null\" />\n                    <div class=\"row\" *ngIf=\"walletDetails.customerId!=null\">\n                        <div class=\"col-sm-6\"> Customer ID </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{walletDetails.customerId}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Wallet Balance</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{walletDetails.walletBalance | currency : walletDetails.walletCurrency}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Margin In Use</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{walletDetails.marginInUse | currency : walletDetails.walletCurrency}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Available Balance</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{walletDetails.availableBalance |currency: walletDetails.walletCurrency}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Approved Credit Limit</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{ creditLimit |currency: 'INR'}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Available Credit</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{ creditLimit1 |currency: 'INR'}}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-sm-7\" id=\"wallet-1\">\n\n                <div class=\"card\" id=\"import\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient importh\">\n                        Wallet - Credit Limit Summary\n                    </div><br>\n                    <div class=\"table table-responsive table-striped table-bordered\">\n                        <table class=\"table text-nowrap\">\n                            <thead>\n                                <tr>\n                                    <th>Credit Used</th>\n                                    <th>Due Date</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <td>{{creditLimit | currency : 'INR'}}</td>\n                                    <td>29/07/2020</td>\n                                </tr>\n                                <tr>\n                                    <td>{{creditLimit1 | currency : 'INR'}}</td>\n                                    <td>6/08/2020</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\">\n                            <div class=\"button-section\">\n                                <button class=\"btn btn-default btn-lg\" (click)=\"onbackClick()\">Back</button>\n                                <button type=\"submit\" [routerLink]=\"['/dashboard']\"\n                                    class=\"btn btn-primary btn-lg\">Dashboard</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>\n\n\n<!-- Topup Wallet -->\n<div class=\"container importct\" *ngIf=\"iteration == 'topupWallet'\">\n    <form name=\"form\" (ngSubmit)=\"f.form.valid && onTopUp()\" #f=\"ngForm\">\n        <div class=\"row\">\n            <div class=\"col-sm-4\" id=\"wallet-1\">\n                <div class=\"card\" id=\"import\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient imp\">\n                        Wallet Details\n                    </div><br>\n                    <div class=\"row\" *ngIf=\"walletDetails.organisationRefNo!=null\">\n                        <div class=\"col-sm-6\"> Organisation ID </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{walletDetails.organisationRefNo}}\n                        </div>\n                    </div>\n                    <hr *ngIf=\"walletDetails.organisationRefNo!=null\" />\n                    <div class=\"row\" *ngIf=\"walletDetails.customerId!=null\">\n                        <div class=\"col-sm-6\"> Customer ID </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{walletDetails.customerId}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Wallet Balance</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{walletDetails.walletBalance | currency : walletDetails.walletCurrency}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Margin In Use</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{walletDetails.marginInUse | currency : walletDetails.walletCurrency}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Available Balance</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{walletDetails.availableBalance |currency: walletDetails.walletCurrency}}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-sm-8\" id=\"importcol\">\n                <div class=\"card first\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient\">\n                        Wallet - Topup Wallet\n                    </div>\n                    <div class=\"row\" id=\"import\">\n                        <div class=\"col-sm-12\">\n                            <h4 class=\"card-title\" style=\"font-weight:bold;color: red;\"\n                                *ngIf=\"walletDetails.requiredAmount!=0\">\n                                Minnimun\n                                Topup to Complete &nbsp;&nbsp;\n                                {{walletDetails.requiredAmount |currency: walletDetails.walletCurrency}}</h4>\n                        </div>\n                        <div class=\"col-sm-12\">\n                            <h4 class=\"importtr\">Topup</h4>\n                        </div>\n\n                        <div class=\"col-sm-3\">\n                            <button type=\"button\" class=\"btn btn-outline-primary waves-effect btn-block\" value=\"1000\"\n                                (click)=\"onTopUpRupeesClick($event.target.value,template)\">{{ no1 |currency: walletDetails.walletCurrency}}</button>\n                            <ng-template #template>\n                                <div class=\"modal-header\">\n                                    <h4 class=\"modal-title\" style=\"text-align: center;font-weight: bold;\">Wallet\n                                    </h4>\n                                    <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\"\n                                        (click)=\"modalRef.hide()\">\n                                        <span aria-hidden=\"true\">×</span>\n                                    </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                    <h5><b>Topup minimum amount...!</b>\n                                    </h5>\n                                </div>\n                                <div class=\"modal-footer\">\n                                    <button type=\"button\" class=\"btn btn-default\" (click)=\"modalRef.hide()\">OK</button>\n                                </div>\n                            </ng-template>\n                        </div>\n                        <div class=\"col-sm-3\">\n                            <button class=\"btn btn-outline-default waves-effect btn-block\" value=\"2000\"\n                                (click)=\"onTopUpRupeesClick($event.target.value,template)\">{{ no2 |currency: walletDetails.walletCurrency}}</button>\n                        </div>\n                        <div class=\"col-sm-3\">\n\n                            <button class=\"btn btn-outline-secondary waves-effect btn-block\" value=\"5000\"\n                                (click)=\"onTopUpRupeesClick($event.target.value,template)\">{{ no3 |currency: walletDetails.walletCurrency}}</button>\n                        </div>\n                        <div class=\"col-sm-3\">\n\n                            <button class=\"btn btn-outline-warning waves-effect btn-block\" value=\"10000\"\n                                (click)=\"onTopUpRupeesClick($event.target.value,template)\">{{ no4 |currency: walletDetails.walletCurrency}}</button>\n                        </div>\n                        <div class=\"col-sm-12\">\n                            <h4 class=\"importor\">OR</h4>\n                        </div>\n                        <div class=\"col-sm-3\" id=\"importmove\">\n                            <label id=\"importlabel\" style=\"margin-top:10px;\">Enter Topup Amount </label>\n                        </div>\n                        <div class=\"col-sm-6\" id=\"importmove\">\n                            <div class=\"input-group\">\n                                <div class=\"input-group-prepend\">\n                                    <div class=\"input-group-text\"><i class=\"fa {{curr}}\" style=\"font-size:36px\"></i>\n                                    </div>\n                                </div>\n                                <input type=\"text\" class=\"form-control input-vendor\"\n                                    [(ngModel)]=\"walletDetails.topupAmount\" name=\"topupAmount\"\n                                    class=\"form-control top-input\" #topupAmount=\"ngModel\"\n                                    id=\"inlineFormInputGroupUsername\" placeholder=\"Enter Amount\"\n                                    [ngClass]=\"{ 'is-invalid': f.submitted && topupAmount.invalid }\" required\n                                    pattern=\"['0-9',{/^\\d+\\.\\d{0,2}$/}]*\" appTwodigitdecimalnumber>\n                                <div *ngIf=\"f.submitted && topupAmount.invalid\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"topupAmount.errors.required\">Please Enter Top Up Amount</div>\n                                    <div *ngIf=\"topupAmount.errors.pattern\">Please Enter Valid Topup Amount\n                                    </div>\n                                </div>\n                            </div>\n\n                        </div>\n                        <div class=\"col-sm-3\" id=\"importmove\">\n                            <button type=\"submit\" class=\"btn btn-success btn-block btn-lg Proceed\">Proceed</button>\n                        </div>\n\n                        <div class=\"col-sm-12\">\n                            <br>\n                            <div class=\"button-section\">\n                                <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                                <button class=\"btn btn-primary btn-lg\" [routerLink]=\"['/dashboard']\">Dashboard</button>\n                                <button class=\"btn btn-deep-orange btn-lg\" (click)=\"goToWallet()\">Go wallet &\n                                    rewards</button>\n                                <button class=\"btn btn-purple btn-lg\" (click)=\"onCreditSummary()\">View Credit-Limit\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n\n        </div>\n    </form>\n</div>\n\n\n\n<div class=\"container-fluid wallet-top\" *ngIf=\"iteration == 'PENDING_TRANSACTION'\">\n    <div class=\"row\">\n        <div class=\"col-sm-4\" id=\"wallet-1\">\n            <div class=\"card\" id=\"import\">\n                <div class=\"card-header view view-cascade gradient-card-header blue-gradient imp\">\n                    Wallet Details\n                </div><br>\n\n                <div class=\"row\" *ngIf=\"walletDetails.organisationRefNo!=null\">\n                    <div class=\"col-sm-6\"> Organisation ID </div>\n                    <div class=\"col-sm-6\" id=\"importname\">\n                        {{walletDetails.organisationRefNo}}\n                    </div>\n                </div>\n                <hr *ngIf=\"walletDetails.organisationRefNo!=null\" />\n                <div class=\"row\" *ngIf=\"walletDetails.customerId!=null\">\n                    <div class=\"col-sm-6\"> Customer ID </div>\n                    <div class=\"col-sm-6\" id=\"importname\">\n                        {{walletDetails.customerId}}\n                    </div>\n                </div>\n                <hr />\n                <div class=\"row\">\n                    <div class=\"col-sm-6\">Wallet Balance</div>\n                    <div class=\"col-sm-6\" id=\"importname\">\n                        {{walletDetails.walletBalance | currency : walletDetails.walletCurrency}}\n                    </div>\n                </div>\n                <hr />\n                <div class=\"row\">\n                    <div class=\"col-sm-6\">Margin In Use</div>\n                    <div class=\"col-sm-6\" id=\"importname\">\n                        {{walletDetails.marginInUse | currency : walletDetails.walletCurrency}}\n                    </div>\n                </div>\n                <hr />\n                <div class=\"row\">\n                    <div class=\"col-sm-6\">Available Balance</div>\n                    <div class=\"col-sm-6\" id=\"importname\">\n                        {{walletDetails.availableBalance |currency: walletDetails.walletCurrency}}\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"col-sm-8\">\n            <div class=\"card\">\n                <div class=\"card-header view view-cascade gradient-card-header blue-gradient imp1\">\n                    Wallet - Pending Transactions\n                </div><br>\n\n                <div class=\"card-body\">\n                    <div class=\"table table-striped table-bordered table-responsive\">\n                        <table class=\"table text-nowrap\">\n                            <thead>\n                                <tr>\n                                    <th>Top Up Ref No</th>\n                                    <th>UTR No / Cheque Number </th>\n                                    <th>Date</th>\n                                    <th>Amount</th>\n                                    <th>Status</th>\n                                    <th>Payment Mode</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr *ngFor=\"let p of pendingTopUpList | paginate: { id: 'listing_pagination',\n                            itemsPerPage: 6,\n                            currentPage: page,\n                            totalItems: totalRec }\n                            \">\n\n                                    <td>{{p.topupRefNo}}</td>\n                                    <td *ngIf=\"p.utrNo!=null\">{{p.utrNo}}</td>\n                                    <td *ngIf=\"p.chequeNumber!=null\">{{p.chequeNumber}}</td>\n                                    <td>{{p.topupDate | date}}</td>\n                                    <td>{{p.topupAmount | currency : p.currency}}</td>\n                                    <td>{{p.status}}</td>\n                                    <td>{{p.paymentType}}</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                    <div class=\"d-flex justify-content-between\">\n                        <div class=\"wrap\">\n                            <pagination-controls id=\"listing_pagination\" maxSize=\"5\" directionLinks=\"true\"\n                                (pageChange)=\"page= $event\">\n                            </pagination-controls>\n                        </div>\n                    </div>\n                    <div class=\"button-section\">\n                        <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">BACK</button>\n                        <button class=\"btn btn-primary btn-lg\" [routerLink]=\"['/dashboard']\">DASHBOARD</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n\n<div class=\"container-fluid\" *ngIf=\"iteration == 'PENDING_TOPUP'\">\n    <div class=\"row\">\n        <div class=\"col-sm-4\" id=\"wallet-1\">\n            <div class=\"card\" id=\"import\">\n\n                <div class=\"card-header view view-cascade gradient-card-header blue-gradient imp\">\n                    Wallet Details\n                </div><br>\n                <div class=\"row\" *ngIf=\"walletDetails.organisationRefNo!=null\">\n                    <div class=\"col-sm-6\"> Organisation ID </div>\n                    <div class=\"col-sm-6\" id=\"importname\">\n                        {{walletDetails.organisationRefNo}}\n                    </div>\n                </div>\n                <hr *ngIf=\"walletDetails.organisationRefNo!=null\" />\n                <div class=\"row\" *ngIf=\"walletDetails.customerId!=null\">\n                    <div class=\"col-sm-6\"> Customer ID </div>\n                    <div class=\"col-sm-6\" id=\"importname\">\n                        {{walletDetails.customerId}}\n                    </div>\n                </div>\n                <hr />\n                <div class=\"row\">\n                    <div class=\"col-sm-6\">Wallet Balance</div>\n                    <div class=\"col-sm-6\" id=\"importname\">\n                        {{walletDetails.walletBalance | currency : walletDetails.walletCurrency}}\n                    </div>\n                </div>\n                <hr />\n                <div class=\"row\">\n                    <div class=\"col-sm-6\">Margin In Use</div>\n                    <div class=\"col-sm-6\" id=\"importname\">\n                        {{walletDetails.marginInUse | currency : walletDetails.walletCurrency}}\n                    </div>\n                </div>\n                <hr />\n                <div class=\"row\">\n                    <div class=\"col-sm-6\">Available Balance</div>\n                    <div class=\"col-sm-6\" id=\"importname\">\n                        {{walletDetails.availableBalance |currency: walletDetails.walletCurrency}}\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"col-sm-8\" id=\"importcol\">\n            <section class=\"mb-5\">\n                <div class=\"card\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient imp1\">\n                        Wallet - Topup Payment Update\n                    </div><br>\n                    <div class=\"card-body\">\n                        <div class=\"table table-striped table-bordered table-responsive\">\n                            <table class=\"table text-nowrap\">\n                                <thead>\n                                    <tr>\n                                        <th>Select</th>\n                                        <th>Top Up Ref No</th>\n                                        <th>Topup Date</th>\n                                        <th>Amount</th>\n                                        <th>Payment Mode</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr *ngFor=\"let p of pendingTopUpList | paginate: { id: 'listing_pagination',\n                                    itemsPerPage: 6,\n                                    currentPage: page,\n                                    totalItems: totalRec }\n                                    \">\n                                        <td>\n                                            <div class=\" form-check\">\n                                                <input class=\"form-check-input\" type=\"radio\" id=payval{{p}} name=\"p\"\n                                                    [value]=\"p\" (change)=\"onHoldTopup(p)\">\n                                            </div>\n                                        </td>\n                                        <td>{{p.topupRefNo}}</td>\n                                        <td>{{p.topupDate | date}}</td>\n                                        <td>{{p.topupAmount | currency : p.currency}}</td>\n                                        <td>{{p.paymentType}}</td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                        <div class=\"d-flex justify-content-between\">\n                            <div class=\"wrap\">\n                                <pagination-controls id=\"listing_pagination\" maxSize=\"5\" directionLinks=\"true\"\n                                    (pageChange)=\"page= $event\">\n                                </pagination-controls>\n                            </div>\n                        </div>\n                        <div class=\"button-section\">\n                            <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                            <button class=\"btn btn-light-blue btn-lg\" (click)=\"onEdit()\">Edit</button>\n                            <button class=\"btn btn-danger btn-lg\" (click)=\"onDelete()\">Delete</button>\n                            <button class=\"btn btn-success btn-lg\" (click)=\"onUpdateInfo()\">Update Payment Info</button>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        </div>\n    </div>\n</div>\n\n\n<div class=\"container-fluid\" *ngIf=\"iteration == 'HOLD_TRANSACTION'\">\n    <div class=\"row\">\n        <div class=\"col-sm-4\" id=\"wallet-1\">\n            <div class=\"card\" id=\"import\">\n                <div class=\"card-header view view-cascade gradient-card-header blue-gradient imp\">\n                    Wallet Details\n                </div><br>\n\n                <div class=\"row\" *ngIf=\"walletDetails.organisationRefNo!=null\">\n                    <div class=\"col-sm-6\"> Organisation ID </div>\n                    <div class=\"col-sm-6\" id=\"importname\">\n                        {{walletDetails.organisationRefNo}}\n                    </div>\n                </div>\n                <hr *ngIf=\"walletDetails.organisationRefNo!=null\" />\n                <div class=\"row\" *ngIf=\"walletDetails.customerId!=null\">\n                    <div class=\"col-sm-6\"> Customer ID </div>\n                    <div class=\"col-sm-6\" id=\"importname\">\n                        {{walletDetails.customerId}}\n                    </div>\n                </div>\n                <hr />\n                <div class=\"row\">\n                    <div class=\"col-sm-6\">Wallet Balance</div>\n                    <div class=\"col-sm-6\" id=\"importname\">\n                        {{walletDetails.walletBalance | currency : walletDetails.walletCurrency}}\n                    </div>\n                </div>\n                <hr />\n                <div class=\"row\">\n                    <div class=\"col-sm-6\">Margin In Use</div>\n                    <div class=\"col-sm-6\" id=\"importname\">\n                        {{walletDetails.marginInUse | currency : walletDetails.walletCurrency}}\n                    </div>\n                </div>\n                <hr />\n                <div class=\"row\">\n                    <div class=\"col-sm-6\">Available Balance</div>\n                    <div class=\"col-sm-6\" id=\"importname\">\n                        {{walletDetails.availableBalance |currency: walletDetails.walletCurrency}}\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"col-sm-8\">\n            <div class=\"card\">\n\n                <div class=\"card-header view view-cascade gradient-card-header blue-gradient imp1\">\n                    Held Transactions - Details\n                </div><br>\n\n                <div class=\"card-body\">\n                    <h5 style=\"font-size: x-large;font-weight: bold;color:red;margin-left: -56px;\">Pending Top Up</h5>\n                    <div class=\"table table-responsive table-striped table-bordered\">\n                        <table class=\"table text-nowrap\">\n                            <thead>\n                                <tr>\n                                    <th>Select</th>\n                                    <th>Top Up Ref No</th>\n                                    <th>UTR No</th>\n                                    <th>Cheque No</th>\n                                    <th>Date</th>\n                                    <th>Amount</th>\n                                    <th>Status</th>\n                                    <th>Payment Mode</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr *ngFor=\"let p of pendingTopUpList | paginate: { id: 'listing_pagination1',\n                        itemsPerPage: 6,\n                        currentPage: page1,\n                        totalItems: totalRec }\n                        \">\n                                    <td>\n                                        <div class=\" form-check\">\n                                            <input class=\"form-check-input\" type=\"radio\" id=cpayval{{p}} name=\"p\"\n                                                [value]=\"p\" (change)=\"onHoldTopup(p)\">\n                                        </div>\n                                    </td>\n                                    <td>{{p.topupRefNo}}</td>\n                                    <th>{{p.utrNo}}</th>\n                                    <th>{{p.chequeNumber}}</th>\n                                    <td>{{p.topupDate | date}}</td>\n                                    <td>{{p.topupAmount | currency : p.currency}}</td>\n                                    <td>{{p.status}}</td>\n                                    <td>{{p.paymentType}}</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                    <div class=\"d-flex justify-content-between\">\n                        <div class=\"wrap\">\n                            <pagination-controls id=\"listing_pagination1\" maxSize=\"5\" directionLinks=\"true\"\n                                (pageChange)=\"page1 = $event\">\n                            </pagination-controls>\n                        </div>\n                    </div>\n                    <div class=\"button-section\">\n                        <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                        <button class=\"btn btn-success btn-lg\" (click)=\"onProceed()\">Detail</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<!-- Not Found -->\n<div class=\"container importct\" *ngIf=\"iteration == 'NOT_FOUND'\">\n    <form name=\"form\" (ngSubmit)=\"f.form.valid && onPaymentsubmit()\" #f=\"ngForm\">\n        <div class=\"row\">\n            <div class=\"col-sm-2\"></div>\n            <div class=\"col-sm-8\" id=\"wallet-1\">\n\n                <div class=\"card\" id=\"import\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient importh\">\n                        Failed Transaction\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-sm-2\"></div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\">\n                            <p class=\"import-text\" style=\"font-weight: 600;\">We are unable to find your payment\n                                transaction in our Bank Record</p>\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-3\"></div>\n                        <div class=\"col-sm-6\">\n                            <div class=\"row\">\n                                <div class=\"col-sm-6\"> Customer Id </div>\n                                <div class=\"col-sm-6\" id=\"importname\">\n                                    {{walletDetails.customerId}}\n                                </div>\n                            </div>\n                            <hr />\n                            <div class=\"row\">\n                                <div class=\"col-sm-6\">\n                                    Top Up Amount </div>\n                                <div class=\"col-sm-6\" id=\"importname\">\n                                    {{transaction.topupAmount}}\n                                </div>\n                            </div>\n                            <hr />\n                            <div class=\"row\">\n                                <div class=\"col-sm-6\">Remittance Date </div>\n                                <div class=\"col-sm-6\" id=\"importname\">\n                                    {{transaction.remittingDate | date}}\n                                </div>\n                            </div>\n                            <hr>\n                            <div class=\"row\">\n                                <div class=\"col-sm-6\">UTR No </div>\n                                <div class=\"col-sm-6\" id=\"importname\">\n                                    {{transaction.utrNo}}\n                                </div>\n                            </div>\n                            <hr />\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\">\n                            <h3 style=\"font-weight: bold\" class=\"blinking\">Please Check with your Bank.....</h3>\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-2\"></div>\n                        <div class=\"col-sm-8\">\n                            <div class=\"button-section\">\n                                <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                                <button class=\"btn btn-brown btn-lg\"\n                                    (click)=\"onReProcessTransaction()\">Re-Check</button>\n                                <button class=\"btn btn-light-blue btn-lg\" (click)=\"onEditTransaction()\">Edit\n                                    Details</button>\n                                <button class=\"btn btn-danger btn-lg\" (click)=\"onCancelTransaction()\">Cancel</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/app.component.html":
/*!**************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/app.component.html ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<!-- \n    <svg id=\"clouds\" alt=\"Gray Clouds Background\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2611.084\" height=\"485.677\" viewBox=\"0 0 2611.084 485.677\">\n        <path id=\"Path_39\" data-name=\"Path 39\" d=\"M2379.709,863.793c10-93-77-171-168-149-52-114-225-105-264,15-75,3-140,59-152,133-30,2.83-66.725,9.829-93.5,26.25-26.771-16.421-63.5-23.42-93.5-26.25-12-74-77-130-152-133-39-120-212-129-264-15-54.084-13.075-106.753,9.173-138.488,48.9-31.734-39.726-84.4-61.974-138.487-48.9-52-114-225-105-264,15a162.027,162.027,0,0,0-103.147,43.044c-30.633-45.365-87.1-72.091-145.206-58.044-52-114-225-105-264,15-75,3-140,59-152,133-53,5-127,23-130,83-2,42,35,72,70,86,49,20,106,18,157,5a165.625,165.625,0,0,0,120,0c47,94,178,113,251,33,61.112,8.015,113.854-5.72,150.492-29.764a165.62,165.62,0,0,0,110.861-3.236c47,94,178,113,251,33,31.385,4.116,60.563,2.495,86.487-3.311,25.924,5.806,55.1,7.427,86.488,3.311,73,80,204,61,251-33a165.625,165.625,0,0,0,120,0c51,13,108,15,157-5a147.188,147.188,0,0,0,33.5-18.694,147.217,147.217,0,0,0,33.5,18.694c49,20,106,18,157,5a165.625,165.625,0,0,0,120,0c47,94,178,113,251,33C2446.709,1093.793,2554.709,922.793,2379.709,863.793Z\" transform=\"translate(142.69 -634.312)\" fill=\"#eee\"/>\n    </svg> -->\n<router-outlet></router-outlet>\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/commoncomponents/registeruser/registeruser.component.html":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/commoncomponents/registeruser/registeruser.component.html ***!
  \*****************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<div className=\"app-branding\">\n    <img src=\"assets/smallerLogo.png\" width=\"160\" height=\"50\" data-toggle=\"modal\" data-target=\"#navBarModel\" />\n</div>\n<div class=\"container py-3\">\n    <div class=\"row justify-content-center align-items-center\">\n        <div class=\"mx-auto col-sm-9\">\n            <div class=\"card card card-cascade narrower body-section\" *ngIf=\"iteration == 1\">\n                <h5 class=\"card-header gradient-card-header blue-gradient white-text text-center py-4\">\n                    <strong>User Registration</strong>\n                </h5>\n                <div class=\"card-body reg\">\n                    <form class=\"form\" role=\"form\" [formGroup]=\"regForm\" autocomplete=\"off\">\n                        <div class=\"form-group row\">\n                            <label class=\"col-lg-3 col-form-label form-control-label\">E-mail </label>\n                            <div class=\"col-lg-9\">\n                                <input class=\"form-control input-vendor\" type=\"text\" formControlName=\"email\"\n                                    name=\"email\" [(ngModel)]=\"regUser.email\" placeholder=\"Enter E-mail address\"\n                                    uniqueEmail [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\">\n                                <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"f.email.errors.required\">Email is required</div>\n                                    <div *ngIf=\"f.email.errors.emailExists\">Email must be a valid email address</div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"form-group row\">\n                            <label class=\"col-lg-3 col-form-label form-control-label\">Mobile No </label>\n                            <div class=\"col-lg-9\">\n                                <input class=\"form-control input-vendor\" formControlName=\"mobileNumber\" type=\"tel\"\n                                    [(ngModel)]=\"regUser.mobileNumber\" name=\"mobileNumber\" maxlength=\"10\"\n                                    placeholder=\"Enter User Mobile Number\"\n                                    [ngClass]=\"{ 'is-invalid': submitted && f.mobileNumber.errors }\">\n                                <div *ngIf=\"submitted && f.mobileNumber.errors\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"f.mobileNumber.errors.required\">Mobile Number is required</div>\n                                    <!-- <div *ngIf=\"f.mobileNumber.errors.minlength\">Mobile Number must be 10 Digits\n                                        </div> -->\n                                    <div *ngIf=\"f.mobileNumber.errors.pattern\">Please, Enter 10 digit Mobile Number.\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"form-group row\">\n                            <label class=\"col-lg-3 col-form-label form-control-label\">Password </label>\n                            <div class=\"col-lg-9\">\n                                <input class=\"form-control input-vendor\" formControlName=\"password\" type=\"password\"\n                                    name=\"password\" [(ngModel)]=\"regUser.password\" placeholder=\"Enter Password\"\n                                    [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\">\n\n                                <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"f.password.errors.required\">Password is required</div>\n                                    <div *ngIf=\"f.password.errors.minlength\">Password is required and must be atleast 8\n                                        characters long.</div>\n                                    <div *ngIf=\"f.password.errors.pattern\">Password must contain Alphabet,Numbers &\n                                        Special Charectors\n                                    </div>\n                                </div>\n                                <div class=\"s1\">\n                                    <em class=\"subtitle\">Use 8 or more characters with at least one lowercase char,at\n                                        least one uppercase char,at least one number & symbols</em>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"form-group row\">\n                            <label class=\"col-lg-3 col-form-label form-control-label\">Re-Type Password </label>\n                            <div class=\"col-lg-9\">\n                                <input class=\"form-control input-vendor\" formControlName=\"retypedPass\" type=\"password\"\n                                    name=\"retypedPass\" [(ngModel)]=\"regUser.retypedPass\" placeholder=\"Re-Type Password\"\n                                    [ngClass]=\"{ 'is-invalid': submitted && f.retypedPass.errors }\">\n                                <div *ngIf=\"submitted && f.retypedPass.errors\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"f.retypedPass.errors.required\">Confirm Password is required</div>\n                                    <div *ngIf=\"f.retypedPass.errors.mustMatch\">Passwords must match</div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"text-center\">\n\n                        </div>\n                        <div class=\"row\">\n                            <div class=\"col-md-3\"></div>\n                            <div class=\"col-md-4\">\n                                <button type=\"button\" class=\"btn btn-default btn-block btn-lg\"\n                                    [routerLink]=\"['/login']\">BACK</button>\n                            </div>\n                            <div class=\"col-md-5\">\n                                <button type=\"button\" (click)=\"onNextClickGenerateOtp()\"\n                                    class=\"btn btn-success btn-block btn-lg\">Proceed</button>\n                            </div>\n\n                        </div>\n                    </form>\n                </div>\n            </div>\n\n            <div class=\"card\" *ngIf=\"iteration == 2\">\n                <!-- <div\n                    class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n                    <div>\n                    </div>\n                    <h4 href=\"\" class=\"white-text mx-3\"> New User Verification</h4>\n                    <div>\n                    </div>\n                </div> -->\n                <h5 class=\"card-header gradient-card-header blue-gradient white-text text-center py-4\">\n                    <strong> Registration - User Verification</strong>\n                </h5>\n                <div class=\"card-body otp\">\n                    <form class=\"form\" role=\"form\" #saveuser (ngSubmit)=\"continue(user)\" autocomplete=\"off\">\n                        <em>We have sent you the one time password to your registered {{mobileNo}} Mobile\n                            Number, please\n                            enter in below,</em>\n                        <br /><br />\n                        <div class=\"form-group row\">\n                            <div class=\"col-lg-2\"></div>\n                            <div class=\"col-lg-8\">\n                                <input class=\"form-control input-vendor\" name=\"otp\" [(ngModel)]=\"regUser.otp\"\n                                    type=\"text\" placeholder=\"Enter OTP\" required>\n                            </div>\n                        </div>\n\n\n                        <div class=\"row bt\">\n                            <div class=\"col-lg-2\"></div>\n                            <div class=\"col-lg-4\">\n                                <button type=\"button\" (click)=\"onResendOtp()\"\n                                    class=\"btn btn-deep-orange btn-block btn-lg\">Resend OTP</button>\n                            </div>\n                            <div class=\"col-lg-4\">\n                                <button type=\"button\" (click)=\"onNextClickValidateOtp()\"\n                                    class=\"btn btn-success btn-block btn-lg\">Proceed</button>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n\n            <div class=\"card card-cascade narrower body-section\" *ngIf=\"iteration == 3\">\n                <h5 class=\"card-header gradient-card-header blue-gradient white-text text-center py-4\">\n                    <strong>Registration - Basic Information</strong>\n                </h5>\n                <div class=\"card-body reg\">\n                    <form class=\"form\" role=\"form\" [formGroup]=\"addressForm\" autocomplete=\"off\">\n\n                        <div *ngIf=\"addressForm.controls['name'].invalid && (addressForm.controls['name'].dirty || addressForm.controls['name'].touched)\"\n                            class=\"alert alert-danger\">\n                            <div *ngIf=\"addressForm.controls['name'].errors.required\">\n                                Name required.\n                            </div>\n                            <div *ngIf=\"addressForm.controls['name'].errors.dataNotSaved\">\n                                Data Not saved.\n                            </div>\n                        </div>\n\n                        <div class=\"form-group row\">\n                            <label class=\"col-lg-3 col-form-label form-control-label\">Name </label>\n                            <div class=\"col-lg-9\">\n                                <input class=\"form-control input-vendor\" name=\"name\" [(ngModel)]=\"regUser.name\"\n                                    formControlName=\"name\" type=\"text\"\n                                    placeholder=\"Enter First Name first and Last Name\" required>\n                            </div>\n                        </div>\n                        <div class=\"form-group row\">\n                            <label class=\"col-lg-3 col-form-label form-control-label\">Address </label>\n                            <div class=\"col-lg-9\">\n                                <input class=\"form-control input-vendor\" name=\"fullAddress\"\n                                    [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"address.addressLine1\" type=\"text\"\n                                    placeholder=\"Enter Address\" #addressLine1=\"ngModel\" required>\n                                <div *ngIf=\"addressLine1.invalid && (addressLine1.dirty || addressLine1.touched)\"\n                                    class=\"alert alert-danger\">\n\n                                    <div *ngIf=\"addressLine1.errors.required\">\n                                        address Required.\n                                    </div>\n                                </div>\n                            </div>\n\n                        </div>\n                        <div class=\"form-group row\">\n                            <label class=\"col-lg-3 col-form-label form-control-label\">Country </label>\n                            <div class=\"col-lg-9\">\n                                <select class=\"form-control input-vendor\" name=\"countryId\"\n                                    [(ngModel)]=\"address.countryId\" (change)=\"onChangeCountry()\"\n                                    [ngModelOptions]=\"{standalone: true}\" #countryId=\"ngModel\" required>\n                                    <option [ngValue]=\"null\">Select Country</option>\n                                    <option *ngFor=\"let c of countries\" [ngValue]=\"c.countryId\">{{c.countryName}}\n                                    </option>\n                                </select>\n                                <div *ngIf=\"countryId.invalid && (countryId.dirty || countryId.touched)\"\n                                    class=\"alert alert-danger\">\n                                    <div [hidden]=\"!countryId.hasError('required')\">Select Country </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"form-group row\">\n                            <label class=\"col-lg-3 col-form-label form-control-label\">State</label>\n                            <div class=\"col-lg-9\">\n                                <select class=\"form-control input-vendor\" name=\"stateId\" [(ngModel)]=\"address.stateId\"\n                                    (change)=\"onChangeState()\" [ngModelOptions]=\"{standalone: true}\" #stateId=\"ngModel\"\n                                    required>\n                                    <option [ngValue]=\"null\" selected=\"selected\">Select state </option>\n                                    <option *ngFor=\"let s of states\" [value]=\"s.stateId\">{{s.stateName}}</option>\n                                </select>\n                                <div *ngIf=\"stateId.invalid && (stateId.dirty || stateId.touched)\"\n                                    class=\"alert alert-danger\">\n\n                                    <div *ngIf=\"region.errors.required\">\n                                        Please Select State.\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"form-group row\">\n                            <label class=\"col-lg-3 col-form-label form-control-label\">City </label>\n                            <div class=\"col-lg-9\">\n                                <select class=\"form-control input-vendor\" name=\"cityId\" [(ngModel)]=\"address.cityId\"\n                                    [ngModelOptions]=\"{standalone: true}\" #cityId=\"ngModel\">\n                                    <option [ngValue]=\"null\">Select City</option>\n                                    <option *ngFor=\"let s of cities\" [value]=\"s.cityId\">{{s.cityName}}</option>\n                                </select>\n                                <div *ngIf=\"cityId.invalid && (cityId.dirty || cityId.touched)\"\n                                    class=\"alert alert-danger\">\n                                    <div *ngIf=\"cityId.errors.required\">\n                                        Please Select City.\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"form-group row\">\n                            <label class=\"col-lg-3 col-form-label form-control-label\">Region </label>\n                            <div class=\"col-lg-9\">\n                                <input class=\"form-control input-vendor\" name=\"region\" [(ngModel)]=\"address.region\"\n                                    [ngModelOptions]=\"{standalone: true}\" type=\"text\" placeholder=\"Enter Region\"\n                                    #region=\"ngModel\" required>\n                                <div *ngIf=\"region.invalid && (region.dirty || region.touched)\"\n                                    class=\"alert alert-danger\">\n\n                                    <div *ngIf=\"region.errors.required\">\n                                        Region Required.\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"row\">\n                            <div class=\"col-md-3\"></div>\n                            <div class=\"col-md-9\">\n                                <button type=\"button\" (click)=\"submitUserData()\"\n                                    class=\"btn btn-success btn-block btn-lg\">Submit</button>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n\n            <div class=\"card  card-cascade narrower body-section\" *ngIf=\"iteration == 4\">\n                <h5 class=\"card-header gradient-card-header blue-gradient white-text text-center py-4\">\n                    <strong>Registration Successfull</strong>\n                </h5>\n                <div class=\"card-body\">\n                    <form class=\"form\" role=\"form\" #saveuser (ngSubmit)=\"continue(user)\" autocomplete=\"off\">\n                        <em class=\"id1\">Registration Done..! And Your Customer ID is , <em class=\"id\"></em><span\n                                style=\"color: red;\"><b>{{uniqueId}}</b></span></em>\n\n                        <br><br>\n                        <div class=\"button-section\">\n                            <button type=\"button\" [routerLink]=\"['/login']\" class=\"btn btn-primary btn-lg\">LOGIN PAGE\n                            </button>\n                            <button type=\"button\" (click)=\"assignEquipment()\" class=\"btn btn-success btn-lg\">ADDITIONAL\n                                INFO</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n\n\n        </div>\n    </div>\n</div>\n\n<div class=\"container regis\" *ngIf=\"iteration == 5\">\n    <div class=\"card\">\n        <h5 class=\"card-header gradient-card-header blue-gradient white-text text-center py-4\">\n            <strong>Register Equipments</strong>\n        </h5>\n        <br>\n        <ul class=\"nav nav-tabs nav-justified\" id=\"myTab\" role=\"tablist\">\n            <li class=\"nav-item\">\n                <a class=\"nav-link active\" id=\"eq1-tab\" data-toggle=\"tab\" href=\"#eq1\" role=\"tab\" aria-controls=\"eq1\"\n                    aria-selected=\"true\"> EQ1</a>\n            </li>\n            <li class=\"nav-item\">\n                <a class=\"nav-link\" id=\"eq2-tab\" data-toggle=\"tab\" href=\"#eq2\" role=\"tab\" aria-controls=\"eq3\"\n                    aria-selected=\"false\">EQ2</a>\n            </li>\n            <li class=\"nav-item\">\n                <a class=\"nav-link\" id=\"eq3-tab\" data-toggle=\"tab\" href=\"#eq3\" role=\"tab\" aria-controls=\"eq3\"\n                    aria-selected=\"false\"> EQ3</a>\n            </li>\n            <li class=\"nav-item\">\n                <a class=\"nav-link\" id=\"eq4-tab\" data-toggle=\"tab\" href=\"#eq4\" role=\"tab\" aria-controls=\"ew4\"\n                    aria-selected=\"false\">EQ4</a>\n            </li>\n            <li class=\"nav-item\">\n                <a class=\"nav-link\" id=\"eq5-tab\" data-toggle=\"tab\" href=\"#eq5\" role=\"tab\" aria-controls=\"ew5\"\n                    aria-selected=\"false\">EQ5</a>\n            </li>\n        </ul>\n        <div class=\"tab-content\" id=\"myTabContent\">\n            <div class=\"tab-pane fade show active text-align form-new\" id=\"eq1\" role=\"tabpanel\"\n                aria-labelledby=\"eq1-tab\">\n                <div class=\"card-body\">\n\n                    <form class=\"form\" (ngSubmit)=\"onSubmit()\">\n                        <div class=\"row\">\n                            <div class=\"col-md-4\">\n                                <label>Equipment Maker</label>\n                                <div class=\"form-group\">\n                                    <select class=\"form-control\" name=\"#equipmentMaker\"\n                                        [(ngModel)]=\"equipment.equipmentMaker\" (change)=\"onChangeMaker()\">\n                                        <option [ngValue]=\"null\">Select Maker</option>\n                                        <option *ngFor=\"let m of makers\">\n                                            {{m}}</option>\n                                    </select>\n                                </div>\n                            </div>\n                            <div class=\"col-md-4\">\n                                <label>Equipment Name </label>\n                                <div class=\"form-group\">\n                                    <select class=\"form-control\" name=\"#equipmentName\"\n                                        [(ngModel)]=\"equipment.equipmentName\" (change)=\"onChangeName()\">\n                                        <option [ngValue]=\"null\">Select Name</option>\n                                        <option *ngFor=\"let n of names\">\n                                            {{n}}</option>\n                                    </select>\n                                </div>\n                            </div>\n                            <div class=\"col-md-4\">\n                                <label>Equipment Id </label>\n                                <div class=\"form-group\">\n                                    <select class=\"form-control\" name=\"#uniqueEquipmentId\"\n                                        [(ngModel)]=\"equipment.uniqueEquipmentId\" (change)=\"onChangeId()\">\n                                        <option [ngValue]=\"null\">Select Id</option>\n                                        <option *ngFor=\"let e of equipments\">\n                                            {{e.uniqueEquipmentId}}</option>\n                                    </select>\n                                </div>\n                            </div>\n                        </div>\n                        <!-- row Ends -->\n\n                        <div class=\"row\">\n                            <div class=\"col-md-4\">\n                                <label>Equipment Description </label>\n                                <div class=\"form-group\">\n                                    <input class=\"form-control\" name=\"equipmentDesc\" required\n                                        [(ngModel)]=\"equipment.equipmentDesc\" type=\"text\"\n                                        placeholder=\"Enter Equipment Description \" #equipmentDesc=\"ngModel\">\n                                    <div *ngIf=\"equipmentDesc.invalid && (equipmentDesc.dirty || equipmentDesc.touched)\"\n                                        class=\"alert alert-danger\">\n                                        <div [hidden]=\"!equipmentDesc.hasError('required')\">Please Enter Equipment\n                                            Description\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"col-md-4\">\n                                <label>Launched Year </label>\n                                <div class=\"form-group\">\n                                    <select class=\"form-control\" name=\"manufactureYear\"\n                                        [(ngModel)]=\"product.manufactureYear\" #manufactureYear=\"ngModel\">\n                                        <option value=\"\" selected=\"selected\">Select Year</option>\n                                        <option *ngFor=\"let e of manufacturedYears\">\n                                            {{e}}</option>\n                                    </select>\n                                </div>\n                            </div>\n                            <div class=\"col-md-4\">\n                                <label>Product Category </label>\n                                <div class=\"form-group\">\n                                    <select class=\"form-control\" name=\"productCategory\" (change)=\"onchangeCategory()\"\n                                        [(ngModel)]=\"product.productCategory\" #productCategory=\"ngModel\">\n                                        <option [ngValue]=\"null\">Select Category</option>\n                                        <option *ngFor=\"let c of categories\" [ngValue]=\"c.categoryId\">\n                                            {{c.categoryDesc}}\n                                        </option>\n                                    </select>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"row\">\n                            <div class=\"col-md-4\">\n                                <label>Product Name </label>\n                                <div class=\"form-group\">\n                                    <select class=\"form-control\" name=\"#productId\" [(ngModel)]=\"product.productId\">\n                                        <option [ngValue]=\"null\">Select Name</option>\n                                        <option *ngFor=\"let n of products\" [ngValue]=\"n.productId\">\n                                            {{n.productName}}</option>\n                                    </select>\n                                </div>\n                            </div>\n                            <div class=\"col-md-4\">\n                                <label>Prefered access type </label>\n                                <div class=\"form-group\">\n                                    <select class=\"form-control\" name=\"accessType\" [(ngModel)]=\"accessType\">\n                                        <option [ngValue]=\"null\">Select Name</option>\n                                    </select>\n                                </div>\n                            </div>\n                            <div class=\"col-md-4\">\n                                <label>Serial Number </label>\n                                <div class=\"form-group\">\n                                    <input type=\"text\" name=\"serialNo\" class=\"form-control\" [(ngModel)]=\"serialNo\"\n                                        placeholder=\"Serial Number*\" value=\"\" required />\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"row\">\n                            <div class=\"col-md-4\">\n                                <label>Mobile Number </label>\n                                <div class=\"form-group\">\n                                    <input type=\"tel\" name=\"mobileNumber\" class=\"form-control\"\n                                        [(ngModel)]=\"mobileNumber\" placeholder=\"Mobile Number*\" value=\"\" required />\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"button-section\">\n                            <button type=\"button\" (click)=\"submitEquipment()\"\n                                class=\"btn btn-success btn-lg\">Submit</button>\n                            <button [routerLink]=\"['/']\" class=\"btn btn-cyan btn-lg\">Skip</button>\n                        </div>\n                    </form>\n\n                </div>\n            </div>\n        </div>\n\n    </div>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/adminpayment/adminpayment.component.html":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/components/adminpayment/adminpayment.component.html ***!
  \***********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n\n<div class=\"container\" *ngIf=\"iteration == 'walletDetail'\">\n    <div class=\"card\">\n        <div class=\"card-header view view-cascade gradient-card-header blue-gradient\">\n            Vendor Account\n        </div>\n        <div class=\"card-body\">\n\n            <div class=\"row\">\n                <div class=\"col-sm-4\">\n                    <div class=\"card importcard\" (click)=\"onTopupWallet()\">\n                        <i class=\"fas fa-wallet\" style=\"font-size:36px;color: green;\"></i>\n                        <h5 id=\"importsub\" style=\" margin-left: 0px;\">Payment</h5>\n                    </div>\n                </div>\n                <div class=\"col-sm-4\">\n                    <div class=\"card importcard\" (click)=\"onAccountSummary()\">\n                        <i class=\"\tfa fa-newspaper-o\" style=\"font-size:36px;color: blue;\"></i>\n                        <h5 id=\"importsub\">Account Summary</h5>\n                    </div>\n                </div>\n                <div class=\"col-sm-4\">\n                    <div class=\"card importcard\" (click)=\"onPendingTransation()\">\n                        <i class=\"fa fa-exclamation-triangle\" style=\"font-size:36px;color:red\"></i>\n                        <h5 id=\"importsub\">Pending Transactions</h5>\n                    </div>\n                </div>\n            </div>\n            <div class=\"row\">\n\n\n                <div class=\"col-sm-4\">\n                    <div class=\"card importcard\" (click)=\"onPendingTopup()\">\n                        <i class=\"fa fa-edit\" style=\"font-size:36px;color: brown;\"></i>\n                        <h5 id=\"importsub\">Pending Payment Update</h5>\n                    </div>\n                </div>\n            </div>\n            <div class=\"button-section\" style=\"padding: 15px 0px 10px 0px;\">\n                <button class=\"btn btn-default btn-lg\" [routerLink]=\"['/vendor']\">BACK</button>\n                <button class=\"btn btn-primary btn-lg\" [routerLink]=\"['/dashboard']\">Dashboard</button>\n            </div>\n        </div>\n    </div><br>\n    <div class=\"row\">\n        <div class=\"col-md-6\">\n        </div>\n        <div class=\"col-md-6\">\n        </div>\n    </div>\n\n</div>\n\n\n<div class=\"container importct\" *ngIf=\"iteration == 'initial'\">\n    <form name=\"form\" (ngSubmit)=\"f.form.valid && paymentOptions()\" #f=\"ngForm\">\n        <div class=\"row\">\n            <div class=\"col-sm-2\" id=\"importcol\"></div>\n            <div class=\"col-sm-8\" id=\"importcol\">\n                <div class=\"card\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient\">\n                        Vendor Management - Make Payment\n                    </div>\n                    <!--<h4 id=\"importdeposit\">Deposit</h4>-->\n                    <div class=\"row\" id=\"import\">\n                        <div class=\"row col-sm-12\">\n                            <div class=\"col-sm-2\" id=\"importtr\">Vendor </div>\n                            <div class=\"col-sm-4\">\n                                <select class=\"form-control\" name=\"vendorId\" [(ngModel)]=\"vendorId\" id=\"importselect\"\n                                    (change)=\"onChangeVendor()\">\n                                    <option [ngValue]=\"null\">Select Vendor</option>\n                                    <option *ngFor=\"let v of vendors\" [ngValue]=\"v.organisationId\">\n                                        {{v.organisationName}}\n                                    </option>\n                                </select>\n                            </div>\n                            <div class=\"col-sm-6\" *ngIf=\"vendorId!=null\" id=\"importvendordepo\">\n                                Current Account Balance &nbsp;&nbsp;\n                                {{walletBalance | currency: basecurrency.paramName}}\n                            </div>\n                        </div>\n\n                    </div>\n                    <br>\n\n                    <div class=\"row\" *ngIf=\"vendorId!=null\" id=\"importvendortopup\">\n\n                        <div class=\"col-sm-6\"></div>\n                        <br>\n                        <hr />\n                        <div class=\"col-sm-12\">\n                            <h4 class=\"importtr\">Payment</h4>\n                        </div>\n                        <div class=\"col-sm-3\">\n                            <button type=\"button\" class=\"btn btn-outline-primary waves-effect btn-block\" value=\"10000\"\n                                (click)=\"onTopUpRupeesClick($event.target.value,template)\">{{ no1 |currency: basecurrency.paramName}}</button>\n                            <ng-template #template>\n                                <div class=\"modal-header\">\n                                    <h4 class=\"modal-title\" style=\"text-align: center;font-weight: bold;\">Wallet\n                                    </h4>\n                                    <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\"\n                                        (click)=\"modalRef.hide()\">\n                                        <span aria-hidden=\"true\">×</span>\n                                    </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                    <h5><b>Payment minimum amount...!</b>\n                                    </h5>\n                                </div>\n                                <div class=\"modal-footer\">\n                                    <button type=\"button\" class=\"btn btn-default\" (click)=\"modalRef.hide()\">OK</button>\n                                </div>\n                            </ng-template>\n                        </div>\n\n                        <div class=\"col-sm-3\">\n                            <button class=\"btn btn-outline-default waves-effect btn-block\" value=\"20000\"\n                                (click)=\"onTopUpRupeesClick($event.target.value,template)\">{{ no2 |currency: basecurrency.paramName}}</button>\n                        </div>\n                        <div class=\"col-sm-3\">\n\n                            <button class=\"btn btn-outline-secondary waves-effect btn-block\" value=\"50000\"\n                                (click)=\"onTopUpRupeesClick($event.target.value,template)\">{{ no3 |currency: basecurrency.paramName}}</button>\n                        </div>\n                        <div class=\"col-sm-3\">\n\n                            <button class=\"btn btn-outline-warning waves-effect btn-block\" value=\"100000\"\n                                (click)=\"onTopUpRupeesClick($event.target.value,template)\">{{ no4 |currency: basecurrency.paramName}}</button>\n                        </div>\n                        <div class=\"col-sm-12\">\n                            <h4 class=\"importor\">OR</h4>\n                        </div>\n                        <div class=\"col-sm-3\" id=\"importmove\">\n                            <label id=\"importlabel\" style=\"margin-top:10px;\">Enter Payment Amount </label>\n                        </div>\n                        <div class=\"col-sm-6\" id=\"importmove\">\n                            <div class=\"input-group\">\n                                <div class=\"input-group-prepend\">\n                                    <div class=\"input-group-text\" id=\"importpre1\"><i class=\"fa {{curr}}\"\n                                            style=\"font-size:36px\"></i>\n                                    </div>\n                                </div>\n                                <input type=\"text\" class=\"form-control input-vendor\" name=\"topupAmount\"\n                                    [(ngModel)]=\"topupAmount\" class=\"form-control top-input\"\n                                    id=\"inlineFormInputGroupUsername\" placeholder=\"Enter Amount\"\n                                    [ngClass]=\"{ 'is-invalid': f.submitted && topupAmount1.invalid }\"\n                                    #topupAmount1=\"ngModel\" required pattern=\"['0-9',{/^\\d+\\.\\d{2}$/}]*\" appTwodigitdecimalnumber>\n                                <div *ngIf=\"f.submitted && topupAmount1.invalid\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"topupAmount1.errors.required\">Topup Amount is required</div>\n                                </div>\n                                <div *ngIf=\"f.submitted && topupAmount1.invalid\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"topupAmount1.errors.pattern\">Topup Amount is required</div>\n                                </div>\n                            </div>\n\n                        </div>\n                        <div class=\"col-sm-3\" id=\"importmove\">\n                            <button type=\"submit\" class=\"btn btn-success btn-block btn-lg Proceed\">Proceed</button>\n                        </div>\n                    </div>\n                    <div class=\"col-sm-12\">\n                        <br>\n                        <div class=\"button-section\">\n                            <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                            <button class=\"btn btn-primary btn-lg\" [routerLink]=\"['/dashboard']\">Dashboard</button>\n\n                        </div>\n                    </div>\n\n\n                </div>\n            </div>\n        </div>\n\n\n    </form>\n</div>\n\n\n<div class=\"container-fluid\" *ngIf=\"iteration == 'paymentoptions'\">\n\n    <div class=\"card\">\n        <form name=\"form\" (ngSubmit)=\"f.form.valid && onProceed()\" #f=\"ngForm\">\n            <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                <h4 class=\"card-header-title mb-3 initial\" style=\"color: white;\">Vendor - Payment Methods</h4>\n            </div><br>\n            <h4 style=\"font-weight: bold;\">Vendor Payment Amount &nbsp;&nbsp;\n                <b style=\"color:green\" class=\"dot\"> {{topupAmount | currency : walletCurrency}}</b></h4>\n            <h5 class=\"outerheader\">Select Method Of Payment</h5>\n            <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                <h4 class=\"card-header-title mb-3 initial\" style=\"color: white;\">Payment Method </h4>\n            </div>\n            <div class=\"card-body\">\n                <div class=\"row\">\n                    <div class=\"col-md-3\" *ngFor=\"let p of paymentMethods[0].agreegatorPayMethodList\">\n                        <h5 class=\"card-title\">\n                            <div class=\"custom-control custom-radio\">\n                                <input type=\"radio\" class=\"custom-control-input\" id=\"id1{{p.paymentMethod.paramName}}\"\n                                    name=\"paymentMethod\" [value]=\"p.paymentMethod.paramName\" [(ngModel)]=\"paymentMethod\"\n                                    (change)=\"onPaymentSelection(p)\" #paymentMethod1=\"ngModel\"\n                                    [ngClass]=\"{ 'is-invalid': f.submitted && paymentMethod1.invalid }\" required>\n                                <div *ngIf=\"f.submitted && paymentMethod1.invalid\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"paymentMethod1.errors.required\">Please Select Payment Method</div>\n                                </div>\n                                <label class=\"custom-control-label b\"\n                                    for=\"id1{{p.paymentMethod.paramName}}\">{{p.paymentMethod.paramName}}</label>\n                                <div class=\"charges\">\n                                    <p class=\"card-text\" *ngIf=\"p.slab1==0\">* No Additional Charge.</p>\n                                    <p class=\"card-text\" *ngIf=\"p.slab1!=0\">* Charge: {{p.slab1}} % of the\n                                        transaction\n                                        amount\n                                        below 2000 + Applicable Tax</p>\n                                    <p class=\"card-text\" *ngIf=\"p.slab2!=0\">* Charge: {{p.slab2}} % of the\n                                        transaction\n                                        amount\n                                        above 2000 + Applicable Total GST</p>\n                                </div>\n                            </div>\n                        </h5>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"card-body\">\n                <div class=\"button-section\">\n                    <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                    <button class=\"btn btn-success btn-lg\" type=\"submit\">Proceed</button>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>\n<br>\n\n<div class=\"container importct\" *ngIf=\"iteration == 'SHOW_TOPUP'\">\n    <form name=\"form\" (ngSubmit)=\"f.form.valid && onPaymentsubmit()\" #f=\"ngForm\">\n        <div class=\"row\">\n            <div class=\"col-sm-2\"></div>\n            <div class=\"col-sm-8\" id=\"wallet-1\">\n                <div class=\"card-header view view-cascade gradient-card-header blue-gradient\">\n                    Vendor - Bank Transfer Update Info\n                </div>\n                <div class=\"card\" id=\"import\">\n                    <!-- <h4 id=\"addCharges\">*No additional charges*</h4><br> -->\n                    <!-- <hr /> -->\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\">\n                            <p class=\"import-text\">Please Proceed with Bank Transfer to Complete Your Payment.</p>\n                        </div>\n                        <hr />\n                    </div>\n                    <hr />\n                    <h4 id=\"importhead\">Payment Value &nbsp;&nbsp;<b\n                            style=\"color:#ff4444;\">{{topupAmount | currency: basecurrency.paramName}}</b>\n                    </h4>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-2\"></div>\n                        <div class=\"col-sm-8\">\n                            <div class=\"importcard\">\n                                <div class=\"row\">\n                                    <div class=\"col-sm-8\" id=\"importpaid\"> Vendor Bank Details For Payment </div>\n                                </div>\n                                <hr />\n                                <div class=\"row\">\n                                    <div class=\"col-sm-6\"> Account Name </div>\n                                    <div class=\"col-sm-6\" id=\"importname\">\n                                        {{accountDetials.accountHolderName}}\n                                    </div>\n                                </div>\n                                <hr />\n                                <div class=\"row\">\n                                    <div class=\"col-sm-6\">Bank </div>\n                                    <div class=\"col-sm-6\" id=\"importname\">\n                                        {{accountDetials.bankName}}\n                                    </div>\n                                </div>\n                                <hr />\n                                <div class=\"row\">\n                                    <div class=\"col-sm-6\">Branch </div>\n                                    <div class=\"col-sm-6\" id=\"importname\">\n                                        {{accountDetials.branchName}}\n                                    </div>\n                                </div>\n                                <hr>\n                                <div class=\"row\">\n                                    <div class=\"col-sm-6\">Account Number </div>\n                                    <div class=\"col-sm-6\" id=\"importname\">\n                                        {{accountDetials.accountNumber}}\n                                    </div>\n                                </div>\n                                <hr />\n                                <div class=\"row\">\n                                    <div class=\"col-sm-6\">IFSC Code </div>\n                                    <div class=\"col-sm-6\" id=\"importname\">\n\n                                        {{accountDetials.ifscCode}}\n\n                                    </div>\n                                </div>\n                                <hr />\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\">\n                            <p class=\"import-end\">Once you have\n                                made the\n                                Bank Transfer, please update payment details</p>\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-2\"></div>\n                        <div class=\"col-sm-7\">\n                            <div class=\"button-section\">\n                                <button class=\"btn btn-default btn-lg back\" (click)=\"onBackPayment()\">Back</button>\n                                <button class=\"btn btn-success btn-lg update\" (click)=\"updatePaymntInfo()\">Update\n                                    Payment Info</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>\n\n\n<div class=\"container importct\" *ngIf=\"iteration == 'SHOW_UPDATE_PAYMENT_INFO'\">\n    <form name=\"form\" (ngSubmit)=\"f.form.valid && onBankPayment()\" #f=\"ngForm\">\n        <div class=\"row\">\n            <div class=\"col-sm-4\" id=\"wallet-1\">\n                <div class=\"card\" id=\"import\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient imp\">\n                        Payment Details\n                    </div><br>\n\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\" *ngIf=\"bankPayment.customerId!=null\"> Customer ID </div>\n                        <div class=\"col-sm-6\" id=\"importname\" *ngIf=\"bankPayment.customerId!=null\">\n                            {{bankPayment.customerId}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\" *ngIf=\"bankPayment.organisationRefNo!=null\">\n                        <div class=\"col-sm-6\"> Organisation ID </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{bankPayment.organisationRefNo}}\n                        </div>\n                    </div>\n                    <hr *ngIf=\"bankPayment.organisationRefNo!=null\" />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Payment Ref.No </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{bankPayment.topupRefNo}}\n                        </div>\n                    </div>\n                    <hr>\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Payment Date</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{bankPayment.topupDate | date}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\" id=\"importpaid\">Payment Amount </div>\n                        <div class=\"col-sm-6\" id=\"importpaid1\">\n\n                            {{bankPayment.topupAmount |currency: vendor.basecurrency}}\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-sm-8\">\n                <div class=\"card first\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient\">\n                        Vendor - Bank Transfer\n                    </div>\n                    <div class=\"charge\">\n                        <h4 id=\"addCharges\" *ngIf=\"bankPayment.charges!=0\">Bank Transfer</h4>\n                    </div>\n                    <div class=\"row\" id=\"import\">\n                        <div class=\"col-sm-6\">\n                            <label id=\"importlabel\">Paid Amount </label>\n                            <div class=\"input-group\">\n                                <div class=\"input-group-prepend\" id=\"importpre\">\n                                    <div class=\"input-group-text\"><i class=\"fa {{curr}}\" style=\"font-size:25px\"></i>\n                                    </div>\n                                </div>\n                                <input type=\"text\" class=\"form-control input-vendor\"\n                                    [(ngModel)]=\"bankPayment.paidAmount\" name=\"paidAmount\"\n                                    placeholder=\"Enter Paid Amount \" value=\"\" #paidAmount=\"ngModel\"\n                                    #paidAmount=\"ngModel\" pattern=\"['0-9',{/^\\d+\\.\\d{2}$/}]*\"\n                                    [ngClass]=\"{ 'is-invalid': f.submitted && paidAmount.invalid }\" required>\n                                <div *ngIf=\"f.submitted && paidAmount.invalid\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"paidAmount.errors.required\">Please Enter Amount</div>\n                                    <div *ngIf=\"paidAmount.errors.pattern\">Please Enter Numbers Alphabets Not\n                                        Allowed</div>\n                                </div>\n                            </div>\n                        </div>\n                        <ng-template #template>\n                            <div class=\"modal-header\">\n                                <h4 class=\"modal-title\">Payment by Bank Transfer User</h4>\n                                <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\"\n                                    (click)=\"modalRef.hide()\">\n                                    <span aria-hidden=\"true\">×</span>\n                                </button>\n                            </div>\n                            <div class=\"modal-body\">\n                                <h5><b>You Need To Pay Minimum Amount....!</b>\n                                </h5>\n                            </div>\n                            <div class=\"modal-footer\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"modalRef.hide()\">OK</button>\n                            </div>\n                        </ng-template>\n                        <div class=\"col-sm-6\">\n                            <label id=\"importlabel\">Remitting Bank </label>\n                            <div class=\"form-group\" >\n                                <select class=\"form-control\" name=\"remittingBank\" [(ngModel)]=\"bankPayment.remittingBank\" id=\"bankSelect\">\n                                    <option [ngValue]=\"null\">Select Bank</option>\n                                    <option *ngFor=\"let b of banks\" [ngValue]=\"b.bankName\">\n                                        {{b.bankName}}\n                                    </option>\n                                </select>\n                            </div>\n                        </div>\n\n                        <div class=\"col-sm-6\">\n                            <label id=\"importlabel\">Remitter Name </label>\n                            <div class=\"form-group\">\n                                <input type=\"text\" class=\"form-control input-vendor\"\n                                    [(ngModel)]=\"bankPayment.remittingName\" name=\"remittingName\"\n                                    placeholder=\"Enter Remitter Name\" #remittingName=\"ngModel\"\n                                    [ngClass]=\"{ 'is-invalid': f.submitted && remittingName.invalid }\" required>\n                                <div *ngIf=\"f.submitted && remittingName.invalid\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"remittingName.errors.required\">Please Enter Remitter Name</div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\">\n                            <label id=\"importlabel\">Remittance Date </label>\n                            <div class=\"form-group\">\n                                <input placeholder=\" Date\" [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\"\n                                    class=\"form-control input-vendor\" [(ngModel)]=\"bankPayment.remittingDate\"\n                                    name=\"remittingDate\" #remittingDate=\"ngModel\"\n                                    [ngClass]=\"{ 'is-invalid': f.submitted && remittingDate.invalid }\" required>\n                                <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                                <div *ngIf=\"f.submitted && remittingDate.invalid\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"remittingDate.errors.required\">Please Enter Remittance Date</div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\">\n                            <label id=\"importlabel\">Unique Transaction Ref.No (UTR) </label>\n                            <div class=\"form-group\">\n                                <input type=\"text\" class=\"form-control input-vendor\" [(ngModel)]=\"bankPayment.utrNo\"\n                                    name=\"utrNo\" placeholder=\"Enter UTR Ref.Number\" #utrNo=\"ngModel\"\n                                    [ngClass]=\"{ 'is-invalid': f.submitted && utrNo.invalid }\" required>\n                                <div *ngIf=\"f.submitted && utrNo.invalid\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"utrNo.errors.required\">Please Enter Unique Transaction Ref.No (UTR)\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\"></div>\n                        <div class=\"col-sm-3\"></div>\n                        <div class=\"col-sm-9\">\n                            <br>\n                            <div class=\"button-section\">\n                                <button type=\"button\" *ngIf=\"topupPendingYN == null\"\n                                    class=\"btn btn-lg btn-default banktr\" (click)=\"onBackClick()\">Back</button>\n                                <button *ngIf=\"topupPendingYN !=null && topupPendingYN == true\" type=\"button\"\n                                    class=\"btn btn-lg btn-default banktr\" (click)=\"paymentOptions()\">Back</button>\n                                <button type=\"submit\" class=\"btn btn-lg btn-success banktr1\">Submit</button>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n\n        </div>\n    </form>\n</div>\n\n<div class=\"container importct\" *ngIf=\"iteration == 'CHEQUE'\">\n    <form name=\"form\" (ngSubmit)=\"f.form.valid && onSaveCheque()\" #f=\"ngForm\">\n        <div class=\"row\">\n            <div class=\"col-sm-4\" id=\"wallet-1\">\n                <div class=\"card\" id=\"import\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient imp\">\n                        Payment Details\n                    </div><br>\n\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\" *ngIf=\"chequePayment.organisationRefNo!=null\"> Vendor ID </div>\n                        <div class=\"col-sm-6\" id=\"importname\" *ngIf=\"chequePayment.organisationRefNo!=null\">\n                            {{chequePayment.organisationRefNo}}\n                        </div>\n                    </div>\n                    <hr *ngIf=\"chequePayment.organisationRefNo!=null\" />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Payment Ref.No </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{chequePayment.topupRefNo}}\n                        </div>\n                    </div>\n                    <hr>\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Payment Date</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{chequePayment.topupDate | date}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\" id=\"importpaid\">Payment Amount </div>\n                        <div class=\"col-sm-6\" id=\"importpaid1\">\n\n                            {{chequePayment.topupAmount |currency : chequePayment.currency}}\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-sm-8\">\n                <div class=\"card first\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient\">\n                        Vendor - Payment by Cheque\n                    </div>\n                    <!--<div class=\"charge\">\n                        <h4 id=\"addCharges\" *ngIf=\"chequePayment.charges==0\">*No additional charges*</h4>\n                        <h4 id=\"addCharges\" *ngIf=\"chequePayment.charges!=0\">Charges : {{chequePayment.charges}} %\n                            of\n                            Transactional Amount</h4>\n                    </div>-->\n                    <div class=\"charge\">\n                        <h4 id=\"addCharges\">Cheque Deposit</h4>\n                    </div>\n                    <br><br>\n                    <div class=\"row\" id=\"import\">\n                        <div class=\"col-sm-6\">\n                            <label id=\"importlabel\">Cheque Issuing Bank </label>\n                            <div class=\"form-group\">\n                                <div class=\"form-group\">\n                                    <select class=\"form-control\" name=\"chequeIssuingBank\" [(ngModel)]=\"chequePayment.chequeIssuingBank\" id=\"bankselect\">\n                                    <option [ngValue]=\"null\">Select Bank</option>\n                                    <option *ngFor=\"let b of banks\" [ngValue]=\"b.bankName\">\n                                        {{b.bankName}}\n                                    </option>\n                                    </select>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"col-sm-6\">\n                            <label id=\"importlabel\">Cheque Issuer Name </label>\n                            <div class=\"form-group\">\n                                <input placeholder=\"Cheque Issuer Name\" type=\"text\" class=\"form-control input-vendor\"\n                                    [(ngModel)]=\"chequePayment.chequeIssuerName\" name=\"chequeIssuerName\"\n                                    #chequeIssuerName=\"ngModel\"\n                                    [ngClass]=\"{ 'is-invalid': f.submitted && chequeIssuerName.invalid }\" required>\n                                <div *ngIf=\"f.submitted && chequeIssuerName.invalid\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"chequeIssuerName.errors.required\">Please Enter Cheque Issuer Name\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"col-sm-6\">\n                            <label id=\"importlabel\">Cheque Number </label>\n                            <div class=\"form-group\">\n                                <input placeholder=\"Cheque Number\" type=\"text\" class=\"form-control input-vendor\"\n                                    [(ngModel)]=\"chequePayment.chequeNumber\" name=\"chequeNumber\" #chequeNumber=\"ngModel\"\n                                    minlength=\"6\" maxlength=\"6\" pattern=\"[0-9]*\"\n                                    [ngClass]=\"{ 'is-invalid': f.submitted && chequeNumber.invalid }\" required>\n                                <div *ngIf=\"f.submitted && chequeNumber.invalid\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"chequeNumber.errors.required\">Please Enter Cheque Number</div>\n                                    <div *ngIf=\"chequeNumber.errors.minlength\">Please 6 digit Cheque Number</div>\n                                    <div *ngIf=\"chequeNumber.errors.pattern\">Cheque number should be only numbers\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\">\n                            <label id=\"importlabel\">Cheque Amount</label>\n                            <div class=\"form-group\">\n                                <input type=\"text\" class=\"form-control height\" [(ngModel)]=\"chequePayment.chequeAmount\"\n                                    placeholder=\"Cheque Amount\" name=\"chequeAmount\" value=\"\"\n                                    class=\"form-control input-vendor\" #chequeAmount=\"ngModel\"\n                                    pattern=\"['0-9',{/^\\d+\\.\\d{2}$/}]*\"\n                                    [ngClass]=\"{ 'is-invalid': f.submitted && chequeAmount.invalid }\" required>\n                                <div *ngIf=\"f.submitted && chequeAmount.invalid\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"chequeAmount.errors.required\">Please Enter Cheque Amount</div>\n                                    <div *ngIf=\"chequeAmount.errors.pattern\">Please Enter Numbers Alphabets Not\n                                        Allowed</div>\n                                </div>\n                            </div>\n                            <ng-template #template>\n                                <div class=\"modal-header\">\n                                    <h4 class=\"modal-title\">Payment by Cheque</h4>\n                                    <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\"\n                                        (click)=\"modalRef.hide()\">\n                                        <span aria-hidden=\"true\">×</span>\n                                    </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                    <h5><b>You Need To Pay Minimum Amount..!</b>\n                                    </h5>\n                                </div>\n                                <div class=\"modal-footer\">\n                                    <button type=\"button\" class=\"btn btn-default\" (click)=\"modalRef.hide()\">OK</button>\n                                </div>\n                            </ng-template>\n                        </div>\n                        <div class=\"col-sm-6\">\n                            <label id=\"importlabel\">Cheque Date </label>\n                            <div class=\"form-group\">\n                                <input placeholder=\"Cheque Date\" [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\"\n                                    class=\"form-control input-vendor\" [(ngModel)]=\"chequePayment.chequeDate\"\n                                    name=\"chequeDate\" #chequeDate=\"ngModel\"\n                                    [ngClass]=\"{'is-invalid' : f.submitted && chequeDate.invalid}\" required>\n                                <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                                <div *ngIf=\"f.submitted && chequeDate.invalid\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"chequeDate.errors.required\">Please Enter Cheque Date</div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\">\n                            <label id=\"importlabel\">Deposited On </label>\n                            <div class=\"form-group\">\n                                <input placeholder=\"Deposited On\" [owlDateTime]=\"dt20\" [owlDateTimeTrigger]=\"dt20\"\n                                    class=\"form-control input-vendor\" [(ngModel)]=\"chequePayment.depositedOn\"\n                                    name=\"depositedOn\" #depositedOn=\"ngModel\"\n                                    [ngClass]=\"{ 'is-invalid': f.submitted && depositedOn.invalid }\" required>\n                                <owl-date-time #dt20 pickerType=\"calendar\"></owl-date-time>\n                                <div *ngIf=\"f.submitted && depositedOn.invalid\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"depositedOn.errors.required\">Please Enter Deposited On</div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\"></div>\n                        <div class=\"col-sm-3\"></div>\n                        <div class=\"col-sm-12\">\n                            <br>\n                            <div class=\"button-section\">\n                                <!-- <button type=\"button\" *ngIf=\"pendingTopupYN==false\" class=\"btn btn-default btn-lg\"\n                                    (click)=\"onBackClick()\">Back</button> -->\n                                <button type=\"button\" class=\"btn btn-default btn-lg\"\n                                    (click)=\"onBackPayment()\">Back</button>\n                                <button type=\"submit\" class=\"btn btn-success btn-lg\">Submit</button>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n\n        </div>\n    </form>\n</div>\n\n\n\n<div class=\"container-fluid wallet-top\" *ngIf=\"iteration == 'PENDING_TRANSACTION'\">\n    <div class=\"row\">\n\n        <div class=\"col-sm-12\">\n            <div class=\"card\">\n                <div class=\"card-header view view-cascade gradient-card-header blue-gradient imp1\">\n                    Vendor - Pending Transactions\n                </div><br>\n                <div class=\"col-sm-12\" id=\"wallet-1\" *ngIf=\"adminPayment!=null\">\n                    <div class=\"card\" id=\"import\">\n                        <div class=\"row\">\n                            <div class=\"col-sm-4\"> &nbsp;</div>\n                            <div class=\"col-sm-2\"> Vendor Id </div>\n                            <div class=\"col-sm-2\" id=\"importname\">\n                                {{vendor.organisationRefNo}}\n                            </div>\n                            <div class=\"col-sm-4\"> &nbsp;</div>\n                        </div>\n                        <hr />\n                        <div class=\"row\">\n                            <div class=\"col-sm-4\"> &nbsp;</div>\n                            <div class=\"col-sm-2\">Vendor Current Account Balance</div>\n                            <div class=\"col-sm-2\" id=\"importname\">\n                                {{adminPayment.adminWalletAvailableBalance | currency : adminPayment.currency}}\n                            </div>\n                            <div class=\"col-sm-4\"> &nbsp;</div>\n                        </div>\n                        <hr />\n                    </div>\n                </div>\n                <div class=\"card-body\">\n                    <div class=\"table table-striped table-bordered table-responsive\">\n                        <table class=\"table text-nowrap\">\n                            <thead>\n                                <tr>\n                                    <th *ngIf=\"allVenodr==true\">Vendor Name</th>\n                                    <th>Top Up Ref No</th>\n                                    <th>UTR No / Cheque Number </th>\n                                    <th>Date</th>\n                                    <th>Amount</th>\n                                    <th>Status</th>\n                                    <th>Payment Mode</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr *ngFor=\"let p of pendingTopUpList | paginate: { id: 'listing_pagination',\n                            itemsPerPage: 6,\n                            currentPage: page,\n                            totalItems: totalRec }\n                            \">\n                                    <td *ngIf=\"allVenodr==true\">{{p.vendorName}}</td>\n                                    <td>{{p.topupRefNo}}</td>\n                                    <td *ngIf=\"p.utrNo!=null\">{{p.utrNo}}</td>\n                                    <td *ngIf=\"p.chequeNumber!=null\">{{p.chequeNumber}}</td>\n                                    <td>{{p.topupDate | date}}</td>\n                                    <td>{{p.topupAmount | currency : basecurrency.paramName}}</td>\n                                    <td>{{p.paymentStatus}}</td>\n                                    <td>{{p.paymentType}}</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                    <div class=\"d-flex justify-content-between\">\n                        <div class=\"wrap\">\n                            <pagination-controls id=\"listing_pagination\" maxSize=\"5\" directionLinks=\"true\"\n                                (pageChange)=\"page= $event\">\n                            </pagination-controls>\n                        </div>\n                    </div>\n                    <div class=\"button-section\">\n                        <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">BACK</button>\n                        <button class=\"btn btn-primary btn-lg\" [routerLink]=\"['/dashboard']\">DASHBOARD</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n<div class=\"container-fluid\" *ngIf=\"iteration == 'PENDING_TOPUP'\">\n    <div class=\"row\">\n        <div class=\"col-sm-12\" id=\"importcol\">\n            <section class=\"mb-5\">\n                <div class=\"card\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient imp1\">\n                        Vendor - Pending Payment Update\n                    </div><br>\n                    <div class=\"card-body\">\n                        <div class=\"table table-striped table-bordered table-responsive\">\n                            <table class=\"table text-nowrap\">\n                                <thead>\n                                    <tr>\n                                        <th>Select</th>\n                                        <th>Vendor Name</th>\n                                        <th>Top Up Ref No</th>\n                                        <th>Topup Date</th>\n                                        <th>Amount</th>\n                                        <th>Payment Mode</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr *ngFor=\"let p of pendingTopUpList | paginate: { id: 'listing_pagination',\n                                    itemsPerPage: 6,\n                                    currentPage: page,\n                                    totalItems: totalRec }\n                                    \">\n                                        <td>\n                                            <div class=\" form-check\">\n                                                <input class=\"form-check-input\" type=\"radio\" id=payval{{p}} name=\"p\"\n                                                    [value]=\"p\" (change)=\"onHoldTopup(p)\">\n                                            </div>\n                                        </td>\n                                        <td>{{p.vendorName}}</td>\n                                        <td>{{p.topupRefNo}}</td>\n                                        <td>{{p.topupDate | date}}</td>\n                                        <td>{{p.topupAmount | currency : basecurrency.paramName}}</td>\n                                        <td>{{p.paymentType}}</td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                        <div class=\"d-flex justify-content-between\">\n                            <div class=\"wrap\">\n                                <pagination-controls id=\"listing_pagination\" maxSize=\"5\" directionLinks=\"true\"\n                                    (pageChange)=\"page= $event\">\n                                </pagination-controls>\n                            </div>\n                        </div>\n                        <div class=\"button-section\">\n                            <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                            <!-- <button class=\"btn btn-light-blue btn-lg\" (click)=\"onEdit()\">Edit</button> -->\n                            <button class=\"btn btn-danger btn-lg\" (click)=\"onDelete()\">Delete</button>\n                            <button class=\"btn btn-success btn-lg\" (click)=\"onUpdateInfo()\">Update Payment Info</button>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        </div>\n    </div>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/amdinpaymentgate/amdinpaymentgate.component.html":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/components/amdinpaymentgate/amdinpaymentgate.component.html ***!
  \*******************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n<div class=\"card pay\" *ngIf=\"iterationName =='initial'\">\n    <div\n        class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n        <div>\n        </div>\n        <h4 href=\"\" class=\"white-text mx-3\">Payment</h4>\n        <div>\n        </div>\n    </div>\n    <div class=\"container in\">\n        <div class=\"row\">\n            <div class=\"col-6 col-md-1\"></div>\n            <div class=\"col-6 col-md-5\">\n                <div class=\"card card-cascade\" (click)=\"onPaymentReconciliation()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Payment Reconciliation<br></h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <i class=\"fas fa-file-invoice\" style=\"font-size:88px;color:#fe24e3\"></i>\n\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-6 col-md-5\">\n                <div class=\"card card-cascade\" (click)=\"onPaymentByCheque()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Payment by Cheque</h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <i class=\"fas fa-money-bill-wave-alt\" style=\"font-size:88px;color:#ff707d\"></i>\n\n                    </div>\n                </div>\n            </div>\n        </div>\n        <br>\n        <div class=\"row\">\n            <div class=\"col-6 col-md-5\"></div>\n            <div class=\"col-6 col-md-6\">\n                <div class=\"button-section\">\n                    <button class=\"btn btn-primary btn-lg\" [routerLink]=\"['/dashboard']\">Dashboard</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<!-- Payment Reconciliation-->\n<div class=\"card pay\" *ngIf=\"iterationName == 'Payment_Reconciliation'\">\n    <div\n        class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n        <div>\n        </div>\n        <h4 href=\"\" class=\"white-text mx-3\">Payment Reconciliation</h4>\n        <div>\n        </div>\n    </div>\n    <div class=\"container in\">\n        <div class=\"row\">\n            <div class=\"col-6 col-md-4\">\n                <div class=\"card card-cascade\" (click)=\"onBankTransfer()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Bank Transfer<br></h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <i class=\"fas fa-university\" style=\"font-size:88px;color:#ff707d\"></i>\n\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"col-6 col-md-4\">\n                <div class=\"card card-cascade\" (click)=\"onChequeTransfer()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Cheque Deposit</h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <i class=\"fas fa-money-check\" style=\"font-size:88px;color:#49f990\"></i>\n\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-6 col-md-4\">\n                <div class=\"card card-cascade\" (click)=\"onAggregator()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Aggregator</h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <img class=\"card-img-top\" src=\"assets/aggre.png\" style=\"width: 120px;height:100px\">\n                    </div>\n                </div>\n            </div>\n        </div><br>\n        <div class=\"row\">\n            <div class=\"col-6 col-md-4\">\n                <div class=\"card card-cascade\" (click)=\"uploadBankStatement()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Upload Bank Statement</h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <i class=\"fas fa-file-upload\" style=\"font-size:88px;color:#865141\"></i>\n\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"col-6 col-md-4\">\n                <div class=\"card card-cascade\" (click)=\"uploadAggregatorSettlement()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Upload Aggregator Settlement</h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <i class=\"fas fa-upload\" style=\"font-size:88px;color:#ff9e0c\"></i>\n\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"col-6 col-md-4\">\n                <div class=\"card card-cascade\" (click)=\"onReconciliation()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Reconciliation</h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <i class=\"fas fa-retweet\" style=\"font-size:88px;color:#ac42ef\"></i>\n\n                    </div>\n                </div>\n            </div>\n\n        </div>\n        <div class=\"button-section\">\n            <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n        </div>\n    </div>\n</div>\n\n<!-- Bank Transfer -->\n<div class=\"card pay\" *ngIf=\"iterationName == 'Bank_Transfer'\">\n    <div\n        class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n        <div>\n        </div>\n        <h4 href=\"\" class=\"white-text mx-3\">Bank Transfer</h4>\n        <div>\n        </div>\n    </div>\n    <div class=\"container in\">\n        <div class=\"row\">\n            <div class=\"col-6 col-md-4\">\n                <div class=\"card card-cascade\" (click)=\"onBankPaymentReconciliation()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Pending Transaction<br></h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <i class=\"fa fa-clock-o\" style=\"font-size:83px;color:#e3b227fa\"></i>\n\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"col-6 col-md-4\">\n                <div class=\"card card-cascade\" (click)=\"onHoldBankPaymentTransaction()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Hold Transaction</h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <i class=\"fas fa-ban\" style=\"font-size:83px;color:#dc3545\"></i>\n\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"col-6 col-md-4\">\n                <div class=\"card card-cascade\" (click)=\"onBankPaymentReport()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Bank Transfer Report</h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <i class=\"fa fa-file\" style=\"font-size:83px;color:#a107b3\"></i>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n        <div class=\"row\">\n            <div class=\"col-6 col-md-4\"></div>\n            <div class=\"col-6 col-md-4\"></div>\n            <div class=\"col-6 col-md-4\">\n                <div class=\"button-section\">\n                    <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<!-- Cheque Transfer -->\n<div class=\"card pay\" *ngIf=\"iterationName == 'Cheque_Transfer'\">\n    <div\n        class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n        <div>\n        </div>\n        <h4 href=\"\" class=\"white-text mx-3\">Cheque Deposit</h4>\n        <div>\n        </div>\n    </div>\n    <div class=\"container in\">\n        <div class=\"row\">\n            <div class=\"col-6 col-md-4\">\n                <div class=\"card card-cascade\" (click)=\"onChequePaymentReconcilation()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Pending Transaction<br></h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <i class=\"fa fa-clock-o\" style=\"font-size:83px;color:#e3b227fa\"></i>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"col-6 col-md-4\">\n                <div class=\"card card-cascade\" (click)=\"onHoldChequePaymentTransaction()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Hold Transaction</h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <i class=\"fas fa-ban\" style=\"font-size:83px;color:#dc3545\"></i>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"col-6 col-md-4\">\n                <div class=\"card card-cascade\" (click)=\"onChequePaymentReport()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\"> Cheque Payment Report</h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <i class=\"fa fa-file\" style=\"font-size:83px;color:#a107b3\"></i>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <br>\n        <div class=\"row\">\n            <div class=\"col-6 col-md-4\"></div>\n            <div class=\"col-6 col-md-4\"></div>\n            <div class=\"col-6 col-md-4\">\n                <div class=\"button-section\">\n                    <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<!-- Bank Payment Reconciliation -->\n<div class=\"container-fluid\" *ngIf=\"iterationName =='Bank_Payment_Reconciliation'\">\n    <div class=\"card card-cascade narrower body-section\">\n        <div\n            class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n            <div>\n            </div>\n            <h4 href=\"\" class=\"white-text mx-3\">Bank Reconciliation (Wallet Top Up by Bank Transfer) </h4>\n            <div>\n            </div>\n        </div>\n        <div class=\"card-body banrecon\">\n            <div class=\"row dummy\">\n                <div class=\"col-md-3\">\n                    <div class=\"form-group\">\n                        <select class=\"form-control\" [(ngModel)]=\"range\" name=\"#range\"\n                            (ngModelChange)=\"onSelectRange()\">\n                            <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                            <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n                        </select>\n                    </div>\n                </div>\n                <div class=\"col-md-2\" *ngIf=\"customDate==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" placeholder=\"From\" [(ngModel)]=\"date\"\n                            (ngModelChange)=\"onDateChange($event)\" class=\"form-control input-vendor\">\n                        <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n                <div class=\"col-md-2\" *ngIf=\"customDate==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" placeholder=\"To\" [(ngModel)]=\"date1\"\n                            (ngModelChange)=\"onDateChange($event)\" class=\"form-control input-vendor\">\n                        <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n                <div class=\"col-md-2\">\n                    <div class=\"form-group\">\n                        <input placeholder=\"Name\" class=\"form-control input-vendor\" [(ngModel)]=\"customerName\"\n                            (input)=\"onCustomerName()\">\n\n                    </div>\n                </div>\n                <div class=\"col-md-3\">\n                    <div class=\"form-group\">\n                        <input placeholder=\"UTR Number\" class=\"form-control input-vendor\" [(ngModel)]=\"utrNo\"\n                            (input)=\"onUtrNo()\">\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"button-section approve\">\n                <button class=\"btn btn-dark-green\" (click)=\"showMatchingBankPayments()\">{{buttonValue}}</button>\n            </div>\n\n            <h5 class=\"table-head\" style=\"font-size: x-large;font-weight: bold;color:red\">Pending Transactions</h5>\n            <div class=\"table table-responsive table-striped table-bordered\">\n                <table class=\"table text-nowrap\">\n                    <thead>\n                        <tr>\n                            <th>Select</th>\n                            <th>Customer Id</th>\n                            <th>Name</th>\n                            <th>Top Up Ref.No</th>\n                            <th>Remittance Date</th>\n                            <th>Amount</th>\n                            <th>Remitting Bank</th>\n                            <th>Remitter Name</th>\n                            <th>UTR No</th>\n                            <th>Status</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let p of bankPaymentList | \n                        paginate: { id: 'listing_pagination',\n                        itemsPerPage: 5,\n                        currentPage: page,\n                        totalItems: totalRec }\n                        \">\n                            <td>\n                                <div class=\" form-check\">\n                                    <input class=\"form-check-input\" type=\"checkbox\" id=payval{{p}}\n                                        name=\"selectedBankPay\" [(ngModel)]=\"p.selectedBankPay\"\n                                        (change)=\"onBankPayment(p)\">\n\n                                </div>\n                            </td>\n                            <td>{{p.customerId}}</td>\n                            <td>{{p.customerName}}</td>\n                            <td>{{p.topupRefNo}}</td>\n                            <td>{{p.remittingDate | date}}</td>\n                            <td>{{p.paidAmount | currency : p.currency}}</td>\n                            <td>{{p.remittingBank}}</td>\n                            <td>{{p.remittingName}}</td>\n                            <td>{{p.utrNo}}</td>\n                            <td>{{p.status}}</td>\n                        </tr>\n                        <tr *ngIf=\"bankPaymentList && bankPaymentList.length ==0\">\n                            <td colspan=\"10\" style=\"color: rgba(244, 67, 54, 0.7) ;\">\n                                <h4>No Data Found to Display.....</h4>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"d-flex justify-content-between\">\n                <div class=\"wrap\">\n                    <pagination-controls id=\"listing_pagination\" maxSize=\"5\" directionLinks=\"true\" responsive=\"true\"\n                        (pageChange)=\"page= $event\">\n                    </pagination-controls>\n                </div>\n            </div>\n            <br>\n            <div class=\"card\">\n                <div class=\"card-body\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-2\"></div>\n                        <div class=\"col-sm-2\" id=\"importhead\">\n                            Bank Name <p id=\"importbal\">{{accountDetails.bankName}}</p>\n                        </div>\n                        <div class=\"col-sm-4\" id=\"importhead\">\n                            Branch Name <p id=\"importbal\">{{accountDetails.branchName}}</p>\n                        </div>\n                        <div class=\"col-sm-2\" id=\"importhead\">\n                            A/c No <p id=\"importbal\">{{accountDetails.accountNumber}}</p>\n                        </div>\n                        <div class=\"col-sm-2\"></div>\n                    </div>\n                </div>\n            </div>\n            <hr>\n            <div class=\"row\">\n                <div class=\"col-md-3\">\n                    <div class=\"form-group\">\n                        <select class=\"form-control\" [(ngModel)]=\"bRange\" name=\"#bRange\"\n                            (ngModelChange)=\"onSelectRangeBank()\">\n                            <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                            <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n                        </select>\n                    </div>\n                </div>\n                <div class=\"col-md-2\" *ngIf=\"bCustomDate==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt3\" [owlDateTimeTrigger]=\"dt3\" placeholder=\"From\" [(ngModel)]=\"bDate\"\n                            (ngModelChange)=\"onDateChangeBank($event)\" class=\"form-control input-vendor\">\n                        <owl-date-time #dt3 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n                <div class=\"col-md-2\" *ngIf=\"bCustomDate==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"d4\" [owlDateTimeTrigger]=\"d4\" placeholder=\"Tp\" [(ngModel)]=\"bDate1\"\n                            (ngModelChange)=\"onDateChangeBank($event)\" class=\"form-control input-vendor\">\n                        <owl-date-time #d4 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n                <div class=\"col-md-3\">\n                    <div class=\"form-group\">\n                        <input placeholder=\"Particulars\" class=\"form-control input-vendor\" [(ngModel)]=\"particulars\"\n                            (input)=\"onParticulars()\">\n                    </div>\n                </div>\n                <div class=\"col-md-2 hidetrans\">\n                    <div class=\"form-group\">\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input hide1\" type=\"checkbox\" name=\"hideTransaction\"\n                                [value]=\"hideTransaction\" (click)=\"onHideTransaction(hideTransaction)\">\n                            <label class=\"form-check-label hidelabel\" for=\"hideTransaction\">\n                                Hide DB Transaction\n                            </label>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <h5 class=\"table-head\" style=\"font-size: x-large;font-weight: bold;color:red\">Bank Statement</h5>\n            <div class=\"table table-responsive table-striped table-bordered\">\n                <table class=\"table text-nowrap\">\n                    <thead>\n                        <tr>\n                            <th>Select</th>\n                            <th>Date</th>\n                            <th>Particulars</th>\n                            <th>Cr</th>\n                            <th>Db</th>\n                            <th>Balance </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let b of bankStatementList |\n                        paginate: { id: 'listing_pagination1',\n                        itemsPerPage: 5,\n                        currentPage: page1,\n                        totalItems: totalRec }\n                        \">\n                            <td>\n                                <div class=\"form-check\">\n                                    <input class=\"form-check-input\" type=\"checkbox\" id=idval{{b}}\n                                        name=\"selectedBankStmt\" [(ngModel)]=\"b.selectedBankStmt\"\n                                        (change)=\"onBankStatement(b)\">\n                                </div>\n                            </td>\n                            <td>{{b.createdDate | date}}</td>\n                            <td>{{b.particulars}}</td>\n                            <td>{{b.creditAmount | currency : accountDetails.accountCurrency}}</td>\n                            <td *ngIf=\"b.debitAmount!=null\">\n                                {{b.debitAmount | currency : accountDetails.accountCurrency}}</td>\n                            <td *ngIf=\"b.debitAmount==null\">-</td>\n                            <td>{{b.balance | currency : accountDetails.accountCurrency}}</td>\n                        </tr>\n                        <tr *ngIf=\"bankStatementList && bankStatementList.length ==0\">\n                            <td colspan=\"10\" style=\"color: rgba(244, 67, 54, 0.7) ;\">\n                                <h4>No Data Found to Display.....</h4>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"d-flex justify-content-between\">\n                <div class=\"wrap\">\n                    <pagination-controls id=\"listing_pagination1\" maxSize=\"5\" directionLinks=\"true\" responsive=\"true\"\n                        (pageChange)=\"page1= $event\">\n                    </pagination-controls>\n                </div>\n            </div>\n            <div class=\"button-section\">\n                <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                <button class=\"btn btn-dark-green btn-lg\" (click)=\"onApproveBankPayment()\">Approve</button>\n                <button class=\"btn btn-danger btn-lg\" (click)=\"onHoldBankPayment()\">Hold</button>&nbsp;&nbsp;\n            </div>\n        </div>\n    </div>\n</div>\n\n<!-- Bank Payment Reconciliation -->\n<div class=\"container-fluid\" *ngIf=\"iterationName =='Bank_Payment_Report'\">\n    <div class=\"card card-cascade narrower body-section\">\n        <div\n            class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n            <div>\n            </div>\n            <h4 href=\"\" class=\"white-text mx-3\">Bank Transfer (Report) </h4>\n            <div>\n            </div>\n        </div>\n        <div class=\"card-body banrecon\">\n            <div class=\"row dummy\">\n                <div class=\"col-md-3\">\n                    <div class=\"form-group\">\n                        <select class=\"form-control\" [(ngModel)]=\"range\" name=\"#range\"\n                            (ngModelChange)=\"onSelectRange()\">\n                            <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                            <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n                        </select>\n                    </div>\n                </div>\n                <div class=\"col-md-2\" *ngIf=\"customDate==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" placeholder=\"From\" [(ngModel)]=\"date\"\n                            (ngModelChange)=\"onDateChange($event)\" class=\"form-control input-vendor\">\n                        <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n                <div class=\"col-md-2\" *ngIf=\"customDate==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" placeholder=\"To\" [(ngModel)]=\"date1\"\n                            (ngModelChange)=\"onDateChange($event)\" class=\"form-control input-vendor\">\n                        <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n                <div class=\"col-md-2\">\n                    <div class=\"form-group\">\n                        <input placeholder=\"Name\" class=\"form-control input-vendor\" [(ngModel)]=\"customerName\"\n                            (input)=\"onCustomerName()\">\n\n                    </div>\n                </div>\n                <div class=\"col-md-3\">\n                    <div class=\"form-group\">\n                        <input placeholder=\"UTR Number\" class=\"form-control input-vendor\" [(ngModel)]=\"utrNo\"\n                            (input)=\"onUtrNo()\">\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"table table-responsive table-striped table-bordered\">\n                <table class=\"table text-nowrap\">\n                    <thead>\n                        <tr>\n                            <th>Customer Id</th>\n                            <th>Name</th>\n                            <th>Top Up Ref.No</th>\n                            <th>Remittance Date</th>\n                            <th>Amount</th>\n                            <th>Remitting Bank</th>\n                            <th>Remitter Name</th>\n                            <th>UTR No</th>\n                            <th>Status</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let p of bankPaymentList | \n                        paginate: { id: 'listing_pagination',\n                        itemsPerPage: 15,\n                        currentPage: page,\n                        totalItems: totalRec }\n                        \">\n                            <td>{{p.customerId}}</td>\n                            <td>{{p.customerName}}</td>\n                            <td>{{p.topupRefNo}}</td>\n                            <td>{{p.remittingDate | date}}</td>\n                            <td>{{p.paidAmount | currency : p.currency}}</td>\n                            <td>{{p.remittingBank}}</td>\n                            <td>{{p.remittingName}}</td>\n                            <td>{{p.utrNo}}</td>\n                            <td *ngIf=\"p.status == 'PENDING'\" style=\"color:red;font-weight: bold;\">{{p.status}}</td>\n                            <td *ngIf=\"p.status == 'APPROVED'\" style=\"color:green;font-weight: bold;\">{{p.status}}</td>\n                        </tr>\n                        <tr>\n                            <td colspan=\"1\">\n                                <h5 style=\"color: black;font-weight: bold;\"> Total </h5>\n                            </td>\n                            <td colspan=\"3\"></td>\n\n                            <td colspan=\"1\">\n                                <h5 style=\"color: red;font-weight: bold;\">{{totalPaidAmount | currency : 'INR' }}</h5>\n                            </td>\n                            <td colspan=\"4\"></td>\n\n                        </tr>\n                        <tr *ngIf=\"bankPaymentList && bankPaymentList.length ==0\">\n                            <td colspan=\"10\" style=\"color: rgba(244, 67, 54, 0.7) ;\">\n                                <h4>No Data Found to Display.....</h4>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"d-flex justify-content-between\">\n                <div class=\"wrap\">\n                    <pagination-controls id=\"listing_pagination\" maxSize=\"5\" directionLinks=\"true\" responsive=\"true\"\n                        (pageChange)=\"page= $event\">\n                    </pagination-controls>\n                </div>\n            </div>\n\n\n            <div class=\"button-section\">\n                <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button></div>\n        </div>\n    </div>\n</div>\n\n<!-- Bank Payment Reconciliation Auto Match -->\n<div class=\"container-fluid\" *ngIf=\"iterationName =='Bank_Payment_Reconciliation_Auto_Match'\">\n    <div class=\"card card-cascade narrower body-section\">\n        <div\n            class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n            <div>\n            </div>\n            <h4 href=\"\" class=\"white-text mx-3\">Bank Reconciliation (Wallet Top Up by Bank Transfer) </h4>\n            <div>\n            </div>\n        </div>\n        <div class=\"card-body banrecon\">\n            <h4 style=\"font-size: x-large;font-weight: bold;color:blue\">Matching Records</h4>\n\n            <div class=\"table-head import\">\n                <input class=\"form-check-input hide1\" type=\"checkbox\" name=\"selectAllMatchingBankPayment\"\n                    [(ngModel)]=\"selectAllMatchingBankPayment\"\n                    (click)=\"selectAllMatchingBankPay(selectAllMatchingBankPayment)\">\n                <label class=\"form-check-label hidelabel import1\" style=\"font-size: x-large;font-weight: bold;color:red\"\n                    for=\"selectAllMatchingBankPayment\">\n                    Select All Transaction\n                </label>\n            </div>\n            <br>\n            <div class=\"table table-responsive table-striped table-bordered\">\n                <table class=\"table text-nowrap\">\n                    <thead>\n                        <tr>\n                            <th>Select</th>\n                            <th>Name</th>\n                            <th>Top Up Ref.No</th>\n                            <th>Remittance Date</th>\n                            <th>Remitting Bank</th>\n                            <th>Remitter Name</th>\n                            <th>Paid Amount</th>\n                            <th>UTR No</th>\n                            <th style=\"background-color: lightsteelblue;\">Credit Amount</th>\n                            <th style=\"background-color: lightsteelblue;\">Bank Particulars</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let p of bankPaymentList | \n                        paginate: { id: 'listing_pagination',\n                        itemsPerPage: 5,\n                        currentPage: page,\n                        totalItems: totalRec }\n                        \">\n                            <td>\n                                <div class=\" form-check\">\n                                    <input class=\"form-check-input\" type=\"checkbox\" id=bnkid name=\"selectedBankPay\"\n                                        [(ngModel)]=\"p.selectedBankPay\" (change)=\"onBankPayment(p)\">\n\n                                </div>\n                            </td>\n                            <td>{{p.customerName}}</td>\n                            <td>{{p.topupRefNo}}</td>\n                            <td>{{p.remittingDate | date}}</td>\n                            <td>{{p.remittingBank}}</td>\n                            <td>{{p.remittingName}}</td>\n                            <td>{{p.paidAmount | currency : p.currency}}</td>\n                            <td>{{p.utrNo}}</td>\n                            <td style=\"background-color: lightsteelblue;\">{{p.creditAmount | currency : p.currency}}\n                            </td>\n                            <td style=\"background-color: lightsteelblue;\">{{p.particulars}}</td>\n                        </tr>\n                        <tr *ngIf=\"bankPaymentList && bankPaymentList.length ==0\">\n                            <td colspan=\"10\" style=\"color: rgba(244, 67, 54, 0.7) ;\">\n                                <h4>No Data Found to Display.....</h4>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"d-flex justify-content-between\">\n                <div class=\"wrap\">\n                    <pagination-controls id=\"listing_pagination\" maxSize=\"5\" directionLinks=\"true\" responsive=\"true\"\n                        (pageChange)=\"page= $event\">\n                    </pagination-controls>\n                </div>\n            </div>\n            <br>\n            <hr>\n\n            <div class=\"button-section\">\n                <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                <button class=\"btn btn-dark-green btn-lg\" (click)=\"onAutoApproveBankPayment()\">Approve</button>\n                <!-- <button class=\"btn btn-danger\" (click)=\"onHoldBankPayment()\">Hold</button>&nbsp;&nbsp; -->\n            </div>\n        </div>\n    </div>\n</div>\n\n<!-- Hold Bank Payment -->\n<div class=\"container-fluid\" *ngIf=\"iterationName =='Hold_Bank_Payment'\">\n    <div class=\"card card-cascade narrower body-section\">\n        <div\n            class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n            <div>\n            </div>\n            <h4 href=\"\" class=\"white-text mx-3\">Bank Reconciliation (Wallet Top Up by Bank Transfer) </h4>\n            <div>\n            </div>\n        </div>\n        <div class=\"card-body banrecon\">\n            <div class=\"row dummy\">\n                <div class=\"col-md-3\">\n                    <div class=\"form-group\">\n                        <select class=\"form-control\" [(ngModel)]=\"range\" name=\"#range\"\n                            (ngModelChange)=\"onSelectRange()\">\n                            <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                            <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n                        </select>\n                    </div>\n                </div>\n                <div class=\"col-md-2\" *ngIf=\"customDate==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" placeholder=\"From\" [(ngModel)]=\"date\"\n                            (ngModelChange)=\"onDateChange($event)\" class=\"form-control input-vendor\">\n                        <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n                <div class=\"col-md-2\" *ngIf=\"customDate==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" placeholder=\"To\" [(ngModel)]=\"date1\"\n                            (ngModelChange)=\"onDateChange($event)\" class=\"form-control input-vendor\">\n                        <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n                <div class=\"col-md-2\">\n                    <div class=\"form-group\">\n                        <input placeholder=\"Name\" class=\"form-control input-vendor\" [(ngModel)]=\"customerName\"\n                            (input)=\"onCustomerName()\">\n\n                    </div>\n                </div>\n                <div class=\"col-md-3\">\n                    <div class=\"form-group\">\n                        <input placeholder=\"UTR Number\" class=\"form-control input-vendor\" [(ngModel)]=\"utrNo\"\n                            (input)=\"onUtrNo()\">\n                    </div>\n                </div>\n            </div>\n            <h5 class=\"table-head\" style=\"font-size: x-large;font-weight: bold;color:red\">Hold Transactions</h5>\n            <div class=\"table table-responsive table-striped table-bordered\">\n                <table class=\"table text-nowrap\">\n                    <thead>\n                        <tr>\n                            <th>Select</th>\n                            <th>Customer Id</th>\n                            <th>Name</th>\n                            <th>Top Up Ref.No</th>\n                            <th>Remittance Date</th>\n                            <th>Amount</th>\n                            <th>Remitting Bank</th>\n                            <th>Remitter Name</th>\n                            <th>UTR No</th>\n                            <th>Status</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let p of bankPaymentList |\n                        paginate: { id: 'listing_pagination2',\n                        itemsPerPage: 5,\n                        currentPage: page2,\n                        totalItems: totalRec }\n                        \">\n                            <td>\n                                <div class=\"form-check\">\n                                    <input class=\"form-check-input\" type=\"checkbox\" id=payval{{p}}\n                                        name=\"selectedBankPay\" [(ngModel)]=\"p.selectedBankPay\"\n                                        (change)=\"onBankPayment(p)\">\n                                </div>\n                            </td>\n                            <td>{{p.customerId}}</td>\n                            <td>{{p.customerName}}</td>\n                            <td>{{p.topupRefNo}}</td>\n                            <td>{{p.remittingDate | date}}</td>\n                            <td>{{p.paidAmount | currency : p.currency}}</td>\n                            <td>{{p.remittingBank}}</td>\n                            <td>{{p.remittingName}}</td>\n                            <td>{{p.utrNo}}</td>\n                            <td>{{p.status}}</td>\n                        </tr>\n                        <tr *ngIf=\"bankPaymentList && bankPaymentList.length ==0\">\n                            <td colspan=\"10\">\n                                <h4 style=\"color: rgba(244, 67, 54, 0.7) ;\">\n                                    No Data Found To Display.....\n                                </h4>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"d-flex justify-content-between\">\n                <div class=\"wrap\">\n                    <pagination-controls id=\"listing_pagination2\" maxSize=\"5\" directionLinks=\"true\" responsive=\"true\"\n                        (pageChange)=\"page2 = $event\">\n                    </pagination-controls>\n                </div>\n            </div>\n            <br>\n            <div class=\"card\">\n                <div class=\"card-body\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-2\"></div>\n                        <div class=\"col-sm-2\" id=\"importhead\">\n                            Bank Name <p id=\"importbal\">{{accountDetails.bankName}}</p>\n                        </div>\n                        <div class=\"col-sm-4\" id=\"importhead\">\n                            Branch Name <p id=\"importbal\">{{accountDetails.branchName}}</p>\n                        </div>\n                        <div class=\"col-sm-2\" id=\"importhead\">\n                            A/c No <p id=\"importbal\">{{accountDetails.accountNumber}}</p>\n                        </div>\n                        <div class=\"col-sm-2\"></div>\n                    </div>\n                </div>\n            </div>\n            <br>\n            <div class=\"row\">\n                <div class=\"col-md-3\">\n                    <div class=\"form-group\">\n                        <select class=\"form-control\" [(ngModel)]=\"bRange\" name=\"#bRange\"\n                            (ngModelChange)=\"onSelectRangeBank()\">\n                            <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                            <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n                        </select>\n                    </div>\n                </div>\n                <div class=\"col-md-2\" *ngIf=\"bCustomDate==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt3\" [owlDateTimeTrigger]=\"dt3\" placeholder=\"From\" [(ngModel)]=\"bDate\"\n                            (ngModelChange)=\"onDateChangeBank($event)\" class=\"form-control input-vendor\">\n                        <owl-date-time #dt3 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n                <div class=\"col-md-2\" *ngIf=\"bCustomDate==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt4\" [owlDateTimeTrigger]=\"dt4\" placeholder=\"To\" [(ngModel)]=\"bDate1\"\n                            (ngModelChange)=\"onDateChangeBank($event)\" class=\"form-control input-vendor\">\n                        <owl-date-time #dt4 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n                <div class=\"col-md-3\">\n                    <div class=\"form-group\">\n                        <input placeholder=\"Particulars\" class=\"form-control input-vendor\" [(ngModel)]=\"particulars\"\n                            (input)=\"onParticulars()\">\n                    </div>\n                </div>\n                <div class=\"col-md-2 hidetrans\">\n                    <div class=\"form-group\">\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input hide1\" type=\"checkbox\" name=\"hideTransaction\"\n                                [value]=\"hideTransaction\" (click)=\"onHideTransaction(hideTransaction)\">\n                            <label class=\"form-check-label hidelabel\" for=\"hideTransaction\">\n                                Hide DB Transaction\n                            </label>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <h5 class=\"table-head\" style=\"font-size: x-large;font-weight: bold;color:red\">Bank Statement</h5>\n            <div class=\"table table-responsive table-striped table-bordered\">\n                <table class=\"table text-nowrap\">\n                    <thead>\n                        <tr>\n                            <th>Select</th>\n                            <th>Date</th>\n                            <th>Particulars</th>\n                            <th>Cr</th>\n                            <th>Db</th>\n                            <th>Balance </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let b of bankStatementList |\n                        paginate: { id: 'listing_pagination3',\n                        itemsPerPage: 5,\n                        currentPage: page3,\n                        totalItems: totalRec }\">\n                            <td>\n                                <div class=\"form-check\">\n                                    <input class=\"form-check-input\" type=\"checkbox\" id=idval{{b}}\n                                        name=\"selectedBankStmt\" [(ngModel)]=\"b.selectedBankStmt\"\n                                        (change)=\"onBankStatement(b)\">\n                                </div>\n                            </td>\n                            <td>{{b.createdDate | date}}</td>\n                            <td>{{b.particulars}}</td>\n                            <td>{{b.creditAmount | currency : accountDetails.accountCurrency}}</td>\n                            <td *ngIf=\"b.debitAmount!=null\">\n                                {{b.debitAmount | currency : accountDetails.accountCurrency}}</td>\n                            <td *ngIf=\"b.debitAmount==null\">-</td>\n                            <td>{{b.balance | currency : accountDetails.accountCurrency}}</td>\n                        </tr>\n                        <tr *ngIf=\"bankStatementList && bankStatementList.length ==0\">\n                            <td colspan=\"7\">\n                                <h4 style=\"color: rgba(244, 67, 54, 0.7) ;\">\n                                    No Data Found To Display.....\n                                </h4>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"d-flex justify-content-between\">\n                <div class=\"wrap\">\n                    <pagination-controls id=\"listing_pagination3\" maxSize=\"5\" directionLinks=\"true\" responsive=\"true\"\n                        (pageChange)=\"page3 = $event\">\n                    </pagination-controls>\n                </div>\n            </div>\n            <div class=\"button-section\">\n                <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                <button class=\"btn btn-dark-green btn-lg\" (click)=\"onApproveBankPayment()\">Approve</button>\n                <button class=\"btn btn-deep-orange btn-lg\" (click)=\"onBankPayAmountMismatch()\">Amount\n                    Mismatch</button>\n                <button class=\"btn btn-danger btn-lg\" (click)=\"onBankPayNotFound()\">Not Found</button>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n<!-- Cheque Payment Reconciliation  -->\n<div class=\"container-fluid\" *ngIf=\"iterationName == 'Cheque_Payment_Reconciliation'\">\n    <section class=\"mb-5\">\n        <!--Card-->\n        <div class=\"card card-cascade narrower body-section\">\n            <div\n                class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n                <div>\n                </div>\n                <h4 href=\"\" class=\"white-text mx-3\">Bank Reconciliation ( Pending Transaction Cheque ) </h4>\n                <div>\n                </div>\n            </div>\n            <div class=\"card-body banrecon\">\n                <div class=\"row dummy\">\n                    <div class=\"col-md-3\">\n                        <div class=\"form-group\">\n                            <select class=\"form-control\" [(ngModel)]=\"cRange\" name=\"#cRange\"\n                                (ngModelChange)=\"onSelectRangeCheque()\">\n                                <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                                <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\" *ngIf=\"cCustomDate==true\">\n                        <div class=\"form-group\">\n                            <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" placeholder=\"From\" [(ngModel)]=\"cDate\"\n                                (ngModelChange)=\"onDateChangeCheque($event)\" class=\"form-control input-vendor\">\n                            <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\" *ngIf=\"cCustomDate==true\">\n                        <div class=\"form-group\">\n                            <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" placeholder=\"To\" [(ngModel)]=\"cDate1\"\n                                (ngModelChange)=\"onDateChangeCheque($event)\" class=\"form-control input-vendor\">\n                            <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <div class=\"form-group\">\n                            <input placeholder=\"Name\" class=\"form-control input-vendor\" [(ngModel)]=\"customerName\"\n                                (input)=\"onChequeCustomerName()\">\n\n                        </div>\n                    </div>\n                    <div class=\"col-md-3\">\n                        <div class=\"form-group\">\n                            <input placeholder=\"Cheque Number\" class=\"form-control input-vendor\"\n                                [(ngModel)]=\"chequeNumber\" (input)=\"onChequeNumber()\">\n                        </div>\n                    </div>\n                </div>\n                <div class=\"button-section approve\">\n                    <button class=\"btn btn-dark-green\" (click)=\"showMatchingChequePayments()\">{{buttonValue}}</button>\n                </div>\n\n                <h5 class=\"table-head\" style=\"font-size: x-large;font-weight: bold;color:red\">Pending Transactions\n                </h5>\n                <div class=\"table table-responsive table-striped table-bordered\">\n                    <table class=\"table text-nowrap\">\n                        <thead>\n                            <tr>\n                                <th>Select</th>\n                                <th>Customer Id</th>\n                                <th>Name</th>\n                                <th>Top Up Ref.No </th>\n                                <th>Cheque Date</th>\n                                <th>Amount </th>\n                                <th>Cheque Issuing Bank Name</th>\n                                <th>Cheque Issuer Name</th>\n                                <th>Cheque Number</th>\n                                <th>Deposited On</th>\n                                <th>Status</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let c of chequePaymentList |paginate: { id: 'listing_pagination4',\n                            itemsPerPage: 5,\n                            currentPage: page4,\n                            totalItems: totalRec }\n                            \">\n                                <td>\n                                    <div class=\"form-check\">\n                                        <input class=\"form-check-input\" type=\"checkbox\" id=cpayval{{c}}\n                                            name=\"selectedChequePay\" [(ngModel)]=\"c.selectedChequePay\"\n                                            (change)=\"onChequePayment(c)\">\n                                    </div>\n                                </td>\n                                <td>{{c.customerId}}</td>\n                                <td>{{c.customerName}}</td>\n                                <td>{{c.topupRefNo}}</td>\n                                <td>{{c.chequeDate | date}}</td>\n                                <td>{{c.chequeAmount | currency:c.currency}}</td>\n                                <td>{{c.chequeIssuingBank}}</td>\n                                <td>{{c.chequeIssuerName}}</td>\n                                <td>{{c.chequeNumber}}</td>\n                                <td>{{c.depositedOn | date}}</td>\n                                <td>{{c.status}}</td>\n                            </tr>\n                            <tr *ngIf=\"chequePaymentList && chequePaymentList.length ==0\">\n                                <td colspan=\"11\" style=\"color: rgba(244, 67, 54, 0.7) ;\">\n                                    <h4>No Data Found to Display.....</h4>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <br>\n                <div class=\"d-flex justify-content-between\">\n                    <div class=\"wrap\">\n                        <pagination-controls id=\"listing_pagination4\" maxSize=\"4\" directionLinks=\"true\"\n                            (pageChange)=\"page4 = $event\">\n                        </pagination-controls>\n                    </div>\n                </div>\n                <br>\n                <div class=\"card\">\n                    <div class=\"card-body\">\n                        <div class=\"row\">\n                            <div class=\"col-sm-2\"></div>\n                            <div class=\"col-sm-2\" id=\"importhead\">\n                                Bank Name <p id=\"importbal\">{{accountDetails.bankName}}</p>\n                            </div>\n                            <div class=\"col-sm-4\" id=\"importhead\">\n                                Branch Name <p id=\"importbal\">{{accountDetails.branchName}}</p>\n                            </div>\n                            <div class=\"col-sm-2\" id=\"importhead\">\n                                A/c No <p id=\"importbal\">{{accountDetails.accountNumber}}</p>\n                            </div>\n                            <div class=\"col-sm-2\"></div>\n                        </div>\n                    </div>\n                </div>\n                <br>\n                <div class=\"row\">\n                    <div class=\"col-md-3\">\n                        <div class=\"form-group\">\n                            <select class=\"form-control\" [(ngModel)]=\"bRange\" name=\"#bRange\"\n                                (ngModelChange)=\"onSelectRangeBank()\">\n                                <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                                <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\" *ngIf=\"bCustomDate==true\">\n                        <div class=\"form-group\">\n                            <input [owlDateTime]=\"dt3\" [owlDateTimeTrigger]=\"dt3\" placeholder=\"From\" [(ngModel)]=\"bDate\"\n                                (ngModelChange)=\"onDateChangeBank($event)\" class=\"form-control input-vendor\">\n                            <owl-date-time #dt3 pickerType=\"calendar\"></owl-date-time>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\" *ngIf=\"bCustomDate==true\">\n                        <div class=\"form-group\">\n                            <input [owlDateTime]=\"dt4\" [owlDateTimeTrigger]=\"dt4\" placeholder=\"To\" [(ngModel)]=\"bDate1\"\n                                (ngModelChange)=\"onDateChangeBank($event)\" class=\"form-control input-vendor\">\n                            <owl-date-time #dt4 pickerType=\"calendar\"></owl-date-time>\n                        </div>\n                    </div>\n                    <div class=\"col-md-3\">\n                        <div class=\"form-group\">\n                            <input placeholder=\"Particulars\" class=\"form-control input-vendor\" [(ngModel)]=\"particulars\"\n                                (input)=\"onParticulars()\">\n                        </div>\n                    </div>\n                    <div class=\"col-md-2 hidetrans\">\n                        <div class=\"form-group\">\n                            <div class=\"form-check\">\n                                <input class=\"form-check-input hide1\" type=\"checkbox\" name=\"hideTransaction\"\n                                    [value]=\"hideTransaction\" (click)=\"onHideTransaction(hideTransaction)\">\n                                <label class=\"form-check-label hidelabel\" for=\"hideTransaction\">\n                                    Hide DB Transaction\n                                </label>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <h5 class=\"table-head\" style=\"font-size: x-large;font-weight: bold;color: red;\">Bank Statement</h5>\n                <div class=\"table table-responsive table-striped table-bordered\">\n                    <table class=\"table  text-nowrap\">\n                        <thead>\n                            <tr>\n                                <th>Select</th>\n                                <th>Date</th>\n                                <th>Particulars</th>\n                                <th>Cr</th>\n                                <th>Db</th>\n                                <th>Balance </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let b of bankStatementList | paginate: { id: 'listing_pagination6',\n                            itemsPerPage: 5,\n                            currentPage: page6,\n                            totalItems: totalRec }\">\n                                <td>\n                                    <div class=\"form-check\">\n                                        <input class=\"form-check-input\" type=\"checkbox\" id=idval{{b}}\n                                            name=\"selectedBankStmt\" [(ngModel)]=\"b.selectedBankStmt\"\n                                            (change)=\"onBankStatement(b)\">\n                                    </div>\n                                </td>\n                                <td>{{b.createdDate | date}}</td>\n                                <td>{{b.particulars}}</td>\n                                <td>{{b.creditAmount | currency : accountDetails.accountCurrency}}</td>\n                                <td *ngIf=\"b.debitAmount!=null\">\n                                    {{b.debitAmount | currency : accountDetails.accountCurrency}}</td>\n                                <td *ngIf=\"b.debitAmount==null\">-</td>\n                                <td>{{b.balance | currency : accountDetails.accountCurrency}}</td>\n                            </tr>\n                            <tr *ngIf=\"bankStatementList && bankStatementList.length ==0\">\n                                <td colspan=\"11\" style=\"color: rgba(244, 67, 54, 0.7) ;\">\n                                    <h4>No Data Found to Display.....</h4>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div class=\"d-flex justify-content-between\">\n                    <div class=\"wrap\">\n                        <pagination-controls id=\"listing_pagination6\" maxSize=\"5\" directionLinks=\"true\"\n                            responsive=\"true\" (pageChange)=\"page6 = $event\">\n                        </pagination-controls>\n                    </div>\n                </div>\n                <div class=\"button-section\">\n                    <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                    <button class=\"btn btn-dark-green btn-lg\" (click)=\"onApproveChequePayment()\">Approve</button>\n                    <button class=\"btn btn-danger btn-lg\" (click)=\"onHoldChequePayment()\">Hold</button>&nbsp;&nbsp;\n                </div>\n            </div>\n        </div>\n    </section>\n</div>\n\n<!-- Cheque Payment Reconciliation Auto Match -->\n<div class=\"container-fluid\" *ngIf=\"iterationName == 'Cheque_Payment_Reconciliation_Auto_Match'\">\n    <section class=\"mb-5\">\n        <!--Card-->\n        <div class=\"card card-cascade narrower body-section\">\n            <div\n                class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n                <div>\n                </div>\n                <h4 href=\"\" class=\"white-text mx-3\">Bank Reconciliation ( Pending Transaction Cheque ) </h4>\n                <div>\n                </div>\n            </div>\n            <div class=\"card-body banrecon\">\n                <h4 style=\"font-size: x-large;font-weight: bold;color:blue\">Matching Records</h4>\n\n                <div class=\"table-head import\">\n                    <input class=\"form-check-input hide1\" type=\"checkbox\" name=\"selectAllMatchingChequePayment\"\n                        [(ngModel)]=\"selectAllMatchingChequePayment\"\n                        (click)=\"selectAllMatchingChequePay(selectAllMatchingChequePayment)\">\n                    <label class=\"form-check-label hidelabel import1\"\n                        style=\"font-size: x-large;font-weight: bold;color:red\" for=\"selectAllMatchingBankPayment\">\n                        Select All Transaction\n                    </label>\n                </div>\n                <br>\n                <div class=\"table table-responsive table-striped table-bordered\">\n                    <table class=\"table text-nowrap\">\n                        <thead>\n                            <tr>\n                                <th>Select</th>\n                                <th>Name</th>\n                                <th>Top Up Ref.No </th>\n                                <th>Cheque Date</th>\n                                <th>Cheque Issuing Bank Name</th>\n                                <th>Cheque Issuer Name</th>\n                                <th>Deposited On</th>\n                                <th>Cheque Amount </th>\n                                <th>Cheque Number</th>\n                                <th style=\"background-color: lightsteelblue;\">Credit Amount</th>\n                                <th style=\"background-color: lightsteelblue;\">Bank Particulars</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let c of chequePaymentList |paginate: { id: 'listing_pagination4',\n                            itemsPerPage: 5,\n                            currentPage: page4,\n                            totalItems: totalRec }\n                            \">\n                                <td>\n                                    <div class=\"form-check\">\n                                        <input class=\"form-check-input\" type=\"checkbox\" id=cpayval{{c}}\n                                            name=\"selectedChequePay\" [(ngModel)]=\"c.selectedChequePay\"\n                                            (change)=\"onChequePayment(c)\">\n                                    </div>\n                                </td>\n                                <td>{{c.customerName}}</td>\n                                <td>{{c.topupRefNo}}</td>\n                                <td>{{c.chequeDate | date}}</td>\n                                <td>{{c.chequeIssuingBank}}</td>\n                                <td>{{c.chequeIssuerName}}</td>\n                                <td>{{c.depositedOn | date}}</td>\n                                <td>{{c.chequeAmount | currency:c.currency}}</td>\n                                <td>{{c.chequeNumber}}</td>\n                                <td style=\"background-color: lightsteelblue;\">{{c.creditAmount | currency : c.currency}}\n                                </td>\n                                <td style=\"background-color: lightsteelblue;\">{{c.particulars}}</td>\n                            </tr>\n                            <tr *ngIf=\"chequePaymentList && chequePaymentList.length ==0\">\n                                <td colspan=\"11\" style=\"color: rgba(244, 67, 54, 0.7) ;\">\n                                    <h4>No Data Found to Display.....</h4>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <br>\n                <div class=\"d-flex justify-content-between\">\n                    <div class=\"wrap\">\n                        <pagination-controls id=\"listing_pagination4\" maxSize=\"4\" directionLinks=\"true\"\n                            (pageChange)=\"page4 = $event\">\n                        </pagination-controls>\n                    </div>\n                </div>\n                <div class=\"button-section\">\n                    <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                    <button class=\"btn btn-dark-green btn-lg\" (click)=\"onAutoApproveChequePayment()\">Approve</button>\n                </div>\n            </div>\n        </div>\n\n    </section>\n</div>\n\n<!-- Hold Cheque Payment  -->\n<div class=\"container-fluid\" *ngIf=\"iterationName == 'Hold_Cheque_Payment'\">\n    <section class=\"mb-5\">\n        <!--Card-->\n        <div class=\"card card-cascade narrower body-section\">\n            <div\n                class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n                <div>\n                </div>\n                <h4 href=\"\" class=\"white-text mx-3\">Bank Reconciliation ( Hold Transaction Cheque ) </h4>\n                <div>\n                </div>\n            </div>\n            <div class=\"card-body banrecon\">\n                <div class=\"row dummy\">\n                    <div class=\"col-md-3\">\n                        <div class=\"form-group\">\n                            <select class=\"form-control\" [(ngModel)]=\"cRange\" name=\"#cRange\"\n                                (ngModelChange)=\"onSelectRangeCheque()\">\n                                <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                                <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\" *ngIf=\"cCustomDate==true\">\n                        <div class=\"form-group\">\n                            <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" placeholder=\"From\" [(ngModel)]=\"cDate\"\n                                (ngModelChange)=\"onDateChangeCheque($event)\" class=\"form-control input-vendor\">\n                            <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\" *ngIf=\"cCustomDate==true\">\n                        <div class=\"form-group\">\n                            <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" placeholder=\"To\" [(ngModel)]=\"cDate1\"\n                                (ngModelChange)=\"onDateChangeCheque($event)\" class=\"form-control input-vendor\">\n                            <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <div class=\"form-group\">\n                            <input placeholder=\"Name\" class=\"form-control input-vendor\" [(ngModel)]=\"customerName\"\n                                (input)=\"onChequeCustomerName()\">\n\n                        </div>\n                    </div>\n                    <div class=\"col-md-3\">\n                        <div class=\"form-group\">\n                            <input placeholder=\"Cheque Number\" class=\"form-control input-vendor\"\n                                [(ngModel)]=\"chequeNumber\" (input)=\"onChequeNumber()\">\n                        </div>\n                    </div>\n                </div>\n                <h5 class=\"table-head\" style=\"font-size: x-large;font-weight: bold;color:red\">Hold Transactions</h5>\n                <div class=\"table table-responsive table-striped table-bordered\">\n                    <table class=\"table text-nowrap\">\n                        <thead>\n                            <tr>\n                                <th>Select</th>\n                                <th>Customer Id</th>\n                                <th>Name</th>\n                                <th>Top Up Ref.No </th>\n                                <th>Cheque Date</th>\n                                <th>Amount </th>\n                                <th>Cheque Issuing Bank Name</th>\n                                <th>Cheque Issuer Name</th>\n                                <th>Cheque Number</th>\n                                <th>Deposited On</th>\n                                <th>Status</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let c of chequePaymentList |\n                            paginate: { id: 'listing_pagination7',\n                            itemsPerPage: 5,\n                            currentPage: page7,\n                            totalItems: totalRec }\">\n                                <td>\n                                    <div class=\"form-check\">\n                                        <input class=\"form-check-input\" type=\"radio\" id=cpayval{{c}} name=\"c\"\n                                            [value]=\"c\" (change)=\"onChequePayment(c)\">\n                                    </div>\n                                </td>\n                                <td>{{c.customerId}}</td>\n                                <td>{{c.customerName}}</td>\n                                <td>{{c.topupRefNo}}</td>\n                                <td>{{c.chequeDate | date}}</td>\n                                <td>{{c.chequeAmount}}</td>\n                                <td>{{c.chequeIssuingBank}}</td>\n                                <td>{{c.chequeIssuerName}}</td>\n                                <td>{{c.chequeNumber}}</td>\n                                <td>{{c.depositedOn | date}}</td>\n                                <td>{{c.status}}</td>\n                            </tr>\n                            <tr *ngIf=\"chequePaymentList && chequePaymentList.length ==0\">\n                                <td colspan=\"11\" style=\"color: rgba(244, 67, 54, 0.7) ;\">\n                                    <h4>No Data Found to Display.....</h4>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <br>\n                <div class=\"d-flex justify-content-between\">\n                    <div class=\"wrap\">\n                        <pagination-controls id=\"listing_pagination7\" maxSize=\"4\" directionLinks=\"true\"\n                            (pageChange)=\"page7 = $event\">\n                        </pagination-controls>\n                    </div>\n\n                </div>\n                <br>\n                <div class=\"card\">\n                    <div class=\"card-body\">\n                        <div class=\"row\">\n                            <div class=\"col-sm-2\"></div>\n                            <div class=\"col-sm-2\" id=\"importhead\">\n                                Bank Name <p id=\"importbal\">{{accountDetails.bankName}}</p>\n                            </div>\n                            <div class=\"col-sm-4\" id=\"importhead\">\n                                Branch Name <p id=\"importbal\">{{accountDetails.branchName}}</p>\n                            </div>\n                            <div class=\"col-sm-2\" id=\"importhead\">\n                                A/c No <p id=\"importbal\">{{accountDetails.accountNumber}}</p>\n                            </div>\n                            <div class=\"col-sm-2\"></div>\n                        </div>\n                    </div>\n                </div>\n                <br>\n                <div class=\"row\">\n                    <div class=\"col-md-3\">\n                        <div class=\"form-group\">\n                            <select class=\"form-control\" [(ngModel)]=\"bRange\" name=\"#bRange\"\n                                (ngModelChange)=\"onSelectRangeBank()\">\n                                <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                                <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\" *ngIf=\"bCustomDate==true\">\n                        <div class=\"form-group\">\n                            <input [owlDateTime]=\"dt3\" [owlDateTimeTrigger]=\"dt3\" placeholder=\"From\" [(ngModel)]=\"bDate\"\n                                (ngModelChange)=\"onDateChangeBank($event)\" class=\"form-control input-vendor\">\n                            <owl-date-time #dt3 pickerType=\"calendar\"></owl-date-time>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\" *ngIf=\"bCustomDate==true\">\n                        <div class=\"form-group\">\n                            <input [owlDateTime]=\"dt4\" [owlDateTimeTrigger]=\"dt4\" placeholder=\"To\" [(ngModel)]=\"bDate1\"\n                                (ngModelChange)=\"onDateChangeBank($event)\" class=\"form-control input-vendor\">\n                            <owl-date-time #dt4 pickerType=\"calendar\"></owl-date-time>\n                        </div>\n                    </div>\n                    <div class=\"col-md-3\">\n                        <div class=\"form-group\">\n                            <input placeholder=\"Particulars\" class=\"form-control input-vendor\" [(ngModel)]=\"particulars\"\n                                (input)=\"onParticulars()\">\n                        </div>\n                    </div>\n                    <div class=\"col-md-2 hidetrans\">\n                        <div class=\"form-group\">\n                            <div class=\"form-check\">\n                                <input class=\"form-check-input hide1\" type=\"checkbox\" name=\"hideTransaction\"\n                                    [value]=\"hideTransaction\" (click)=\"onHideTransaction(hideTransaction)\">\n                                <label class=\"form-check-label hidelabel\" for=\"hideTransaction\">\n                                    Hide DB Transaction\n                                </label>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <h5 class=\"table-head\" style=\"font-size: x-large;font-weight: bold;color:red\">Bank Statement</h5>\n                <div class=\"table table-responsive table-striped table-bordered\">\n                    <table class=\"table  text-nowrap\">\n                        <thead>\n                            <tr>\n                                <th>Select</th>\n                                <th>Date</th>\n                                <th>Particulars</th>\n                                <th>Cr</th>\n                                <th>Db</th>\n                                <th>Balance </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let b of bankStatementList |\n                            paginate: { id: 'listing_pagination8',\n                            itemsPerPage: 5,\n                            currentPage: page8,\n                            totalItems: totalRec }\">\n                                <td>\n                                    <div class=\"form-check\">\n                                        <input class=\"form-check-input\" type=\"radio\" id=idval{{b}} name=\"b\" [value]=\"b\"\n                                            (change)=\"onBankStatement(b)\">\n                                    </div>\n                                </td>\n                                <td>{{b.createdDate | date}}</td>\n                                <td>{{b.particulars}}</td>\n                                <td>{{b.creditAmount | currency : accountDetails.accountCurrency}}</td>\n                                <td *ngIf=\"b.debitAmount!=null\">\n                                    {{b.debitAmount | currency : accountDetails.accountCurrency}}</td>\n                                <td *ngIf=\"b.debitAmount==null\">-</td>\n                                <td>{{b.balance | currency : accountDetails.accountCurrency}}</td>\n                            </tr>\n                            <tr *ngIf=\"bankStatementList && bankStatementList.length ==0\">\n                                <td colspan=\"11\" style=\"color: rgba(244, 67, 54, 0.7) ;\">\n                                    <h4>No Data Found to Display.....</h4>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div class=\"d-flex justify-content-between\">\n                    <div class=\"wrap\">\n                        <pagination-controls id=\"listing_pagination8\" maxSize=\"5\" directionLinks=\"true\"\n                            responsive=\"true\" (pageChange)=\"page8 = $event\">\n                        </pagination-controls>\n                    </div>\n                </div>\n                <div class=\"button-section\">\n                    <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                    <button class=\"btn btn-dark-green btn-lg\" (click)=\"onApproveChequePayment()\">Approve</button>\n                    <button class=\"btn btn-deep-orange btn-lg\" (click)=\"onChequePayAmountMismatch()\">Amount\n                        Mismatch</button>\n                    <button class=\"btn btn-danger btn-lg\" (click)=\"onChequePayNotFound()\">Not Found</button>\n                </div>\n            </div>\n        </div>\n    </section>\n</div>\n\n<!-- Agreegator -->\n<div class=\"card pay\" *ngIf=\"iterationName == 'AGREEGATOR'\">\n    <div\n        class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n        <div>\n        </div>\n        <h4 href=\"\" class=\"white-text mx-3\">Aggregator</h4>\n        <div>\n        </div>\n    </div>\n    <div class=\"container in\">\n        <div class=\"row\">\n            <div class=\"col-6 col-md-4\">\n                <div class=\"card card-cascade\" (click)=\"onAgreegatorPaymentReconciliation()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Pending Transaction<br></h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <i class=\"fa fa-clock-o\" style=\"font-size:83px;color:#e3b227fa\"></i>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"col-6 col-md-4\">\n                <div class=\"card card-cascade\" (click)=\"onAgreegatorPaymentReport()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Agreegator Payment Report</h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <i class=\"fa fa-file\" style=\"font-size:83px;color:#a107b3\"></i>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n        <div class=\"row\">\n            <div class=\"col-6 col-md-4\"></div>\n            <div class=\"col-6 col-md-4\">\n                <div class=\"button-section\">\n                    <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<!-- Bank Reconciliation (Payment Received from Aggregator) -->\n<div class=\"container-fluid\" *ngIf=\"iterationName =='AGGREGATOR_RECONCILATION'\">\n    <div class=\"card card-cascade narrower body-section\">\n        <div\n            class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n            <div>\n            </div>\n            <h4 href=\"\" class=\"white-text mx-3\">Bank Reconciliation (Payment Received from Aggregator) </h4>\n            <div>\n            </div>\n        </div>\n        <div class=\"card-body banrecon\">\n            <div class=\"row dummy\">\n                <div class=\"col-md-2\">\n                    <div class=\"form-group\">\n                        <select class=\"form-control\" [(ngModel)]=\"rangeOP\" name=\"#rangeOP\"\n                            (ngModelChange)=\"onSelectRangeOP()\">\n                            <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                            <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n                        </select>\n                    </div>\n                </div>\n                <div class=\"col-md-2\" *ngIf=\"customDateOP==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" placeholder=\"From\" [(ngModel)]=\"dateOP\"\n                            (ngModelChange)=\"onDateChangeOP($event)\" class=\"form-control input-vendor\">\n                        <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n                <div class=\"col-md-2\" *ngIf=\"customDateOP==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" placeholder=\"To\" [(ngModel)]=\"date1OP\"\n                            (ngModelChange)=\"onDateChangeOP($event)\" class=\"form-control input-vendor\">\n                        <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n                <div class=\"col-md-2\">\n                    <div class=\"form-group\">\n                        <input placeholder=\"Name\" class=\"form-control input-vendor\" [(ngModel)]=\"customerName\"\n                            (input)=\"onCustomerNameOnline()\">\n\n                    </div>\n                </div>\n                <div class=\"col-md-2\">\n                    <div class=\"form-group\">\n                        <input placeholder=\"Order Id\" class=\"form-control input-vendor\" [(ngModel)]=\"orderId\"\n                            (input)=\"onOrderId()\">\n                    </div>\n                </div>\n                <div class=\"col-md-2\">\n                    <div class=\"form-group\">\n                        <input placeholder=\"Payment Mode\" class=\"form-control input-vendor\" [(ngModel)]=\"paymentMode\"\n                            (input)=\"onPaymentMode()\">\n                    </div>\n                </div>\n            </div>\n\n            <h5 class=\"table-head\" style=\"font-size: x-large;font-weight: bold;color:red\">Pending Online\n                Transactions\n            </h5>\n\n            <div class=\"table table-responsive table-striped table-bordered\">\n                <table class=\"table text-nowrap\">\n                    <thead>\n                        <tr>\n                            <th>Select</th>\n                            <!-- <th>Customer Id</th> -->\n                            <th>Customer Name</th>\n                            <th>Top Up Ref.No</th>\n                            <th> Topup Amount</th>\n                            <th> Charges</th>\n                            <th>Order Id</th>\n                            <th>Date</th>\n                            <th>Total Amount</th>\n                            <th>Payment Mode</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let p of onlinePaymentList | \n                            paginate: { id: 'listing_pagination',\n                            itemsPerPage: 5,\n                            currentPage: page,\n                            totalItems: totalRec }\n                            \">\n                            <td>\n                                <div class=\"form-check p1\">\n                                    <input class=\"form-check-input importcheck\" type=\"checkbox\" id=cp1\n                                        name=\"selectedOnlinePay\" [(ngModel)]=\"p.selectedOnlinePay\"\n                                        (change)=\"onCheckedOnlinePayment(p)\">\n                                </div>\n                            </td>\n                            <!-- <td>{{p.customerId}}</td> -->\n                            <td>{{p.customerName}}</td>\n                            <td>{{p.topupRefNo}}</td>\n                            <td>{{p.topupAmount | currency : p.currency}}</td>\n                            <td *ngIf=\"p.charges==0\">-</td>\n                            <td *ngIf=\"p.charges!=0\">{{p.paidAmount - p.topupAmount | currency : p.currency }}</td>\n                            <td>{{p.orderId}}</td>\n                            <td>{{p.topupDate| date}}</td>\n                            <td>{{p.paidAmount | currency : p.currency}}</td>\n                            <td>{{p.paymentMode}}</td>\n                        </tr>\n                        <tr *ngIf=\"bankPaymentList && bankPaymentList.length ==0\">\n                            <td colspan=\"10\" style=\"color: rgba(244, 67, 54, 0.7) ;\">\n                                <h4>No Data Found to Display.....</h4>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"d-flex justify-content-between\">\n                <div class=\"wrap\">\n                    <pagination-controls id=\"listing_pagination\" maxSize=\"5\" directionLinks=\"true\" responsive=\"true\"\n                        (pageChange)=\"page= $event\">\n                    </pagination-controls>\n                </div>\n            </div>\n            <br>\n\n            <br>\n\n            <div class=\"card\">\n                <div class=\"card-body\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-3\" id=\"importhead\">\n                            Agreegator Name <p id=\"importbal\" *ngIf=\"agreegatorPayment==null\">\n                                {{agreegatorPaymentList[0].merchantName}}</p>\n                            <p id=\"importbal\" *ngIf=\"agreegatorPayment!=null\">{{agreegatorPayment.merchantName}}\n                            </p>\n                        </div>\n                        <div class=\"col-sm-3\" id=\"importhead\">\n                            Payment Ref No.\n                            <p id=\"importbal\">\n                                <select class=\"form-control importpay\" [(ngModel)]=\"paymentRefNo\" name=\"#paymentRefNo\"\n                                    (ngModelChange)=\"onSelectPaymentRefNo()\">\n                                    <option [ngValue]=\"null\">Select Payment Ref No</option>\n                                    <option *ngFor=\"let r of paymentRefNoList\" [value]=\"r\">{{r}}</option>\n                                </select>\n                            </p>\n                        </div>\n                        <div class=\"col-sm-3\" id=\"importhead\">\n                            Total Amount\n                            <p id=\"importbal\" *ngIf=\"agreegatorPayment!=null\">\n                                {{agreegatorPayment.totalAmount  | currency:'INR'}}\n                            </p>\n                        </div>\n                        <div class=\"col-sm-3\" id=\"importhead\" *ngIf=\"paymentRefNo!=null\">\n                            Match Transactions\n                            <p id=\"importbal\">\n                                <button class=\"btn btn-dark-green match\"\n                                    (click)=\"onCheckedMatchingRecordOfAgre()\">{{buttonValue}}</button>\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <hr>\n            <div class=\"row\">\n                <div class=\"col-md-3\">\n                    <div class=\"form-group\">\n                        <select class=\"form-control\" [(ngModel)]=\"rangeAgr\" name=\"#rangeAgr\"\n                            (ngModelChange)=\"onSelectRangeAgr()\">\n                            <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                            <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n                        </select>\n                    </div>\n                </div>\n                <div class=\"col-md-2\" *ngIf=\"customDateAgr==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt3\" [owlDateTimeTrigger]=\"dt3\" placeholder=\"From\" [(ngModel)]=\"dateAgr\"\n                            (ngModelChange)=\"onDateChangeAgr($event)\" class=\"form-control input-vendor\">\n                        <owl-date-time #dt3 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n                <div class=\"col-md-2\" *ngIf=\"customDateAgr==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt4\" [owlDateTimeTrigger]=\"dt4\" placeholder=\"To\" [(ngModel)]=\"date1Agr\"\n                            (ngModelChange)=\"onDateChangeAgr($event)\" class=\"form-control input-vendor\">\n                        <owl-date-time #dt4 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n                <div class=\"col-md-2\">\n                    <div class=\"form-group\">\n                        <input placeholder=\"Order Id\" class=\"form-control input-vendor\" [(ngModel)]=\"orderIdAgr\"\n                            (input)=\"onOrderIdAgr()\">\n                    </div>\n                </div>\n                <div class=\"col-md-3\">\n                    <div class=\"form-group\">\n                        <input placeholder=\"Payment Mode \" class=\"form-control input-vendor\"\n                            [(ngModel)]=\"paymentModeAgr\" (input)=\"onPaymentModeAgr()\">\n                    </div>\n                </div>\n\n            </div>\n            <h5 class=\"table-head\" style=\"font-size: x-large;font-weight: bold;color:red\">Agreegator Settlement</h5>\n            <div class=\"table table-responsive table-striped table-bordered\">\n                <table class=\"table text-nowrap\">\n                    <thead>\n                        <tr>\n                            <th>Select</th>\n                            <th>Order Id</th>\n                            <th>Transaction Ref No</th>\n                            <th>Paid Amount</th>\n                            <th>Payment Method</th>\n                            <th>Commission</th>\n                            <th>Transaction Date</th>\n                            <th>Settlement</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <ng-container *ngIf=\"agreegatorPayment==null;else second\"></ng-container>\n\n                        <ng-template #second>\n                            <tr *ngFor=\"let a of agreegatorPayment.agreegatorSettlement |\n                            paginate: { id: 'listing_pagination1',\n                            itemsPerPage: 5,\n                            currentPage: page1,\n                            totalItems: totalRec }\n                            \">\n                                <td>\n                                    <div class=\"form-check p1\">\n                                        <input class=\"form-check-input importcheck\" type=\"checkbox\"\n                                            id=cp1{{selectedAgreeSettlement}} name=\"selectedAgreeSettlement\"\n                                            [(ngModel)]=\"a.selectedAgreeSettlement\"\n                                            (change)=\"onCheckedAgreeSettlement(a)\">\n                                    </div>\n                                </td>\n                                <td>{{a.orderId }}</td>\n                                <td>{{a.transactionRefNo}}</td>\n                                <td>{{a.amount}}</td>\n                                <td>{{a.paymentMethod }}</td>\n                                <td>{{a.commissionAmount}}</td>\n                                <td>{{a.transactionDate | date}}</td>\n                                <td>{{a.settlement}}</td>\n                            </tr>\n                        </ng-template>\n\n                        <tr *ngIf=\"agreegatorPaymentList==null\">\n                            <td colspan=\"10\" style=\"color: rgba(244, 67, 54, 0.7) ;\">\n                                <h4>No Data Found to Display.....</h4>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"d-flex justify-content-between\">\n                <div class=\"wrap\">\n                    <pagination-controls id=\"listing_pagination1\" maxSize=\"5\" directionLinks=\"true\" responsive=\"true\"\n                        (pageChange)=\"page1= $event\">\n                    </pagination-controls>\n                </div>\n            </div>\n\n\n            <br>\n            <div class=\"card\">\n                <div class=\"card-body\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-2\"></div>\n                        <div class=\"col-sm-2\" id=\"importhead\">\n                            Bank Name <p id=\"importbal\">{{accountDetails.bankName}}</p>\n                        </div>\n                        <div class=\"col-sm-4\" id=\"importhead\">\n                            Branch Name <p id=\"importbal\">{{accountDetails.branchName}}</p>\n                        </div>\n                        <div class=\"col-sm-2\" id=\"importhead\">\n                            A/c No <p id=\"importbal\">{{accountDetails.accountNumber}}</p>\n                        </div>\n                        <div class=\"col-sm-2\"></div>\n                    </div>\n                </div>\n            </div>\n            <br>\n            <div class=\"row\">\n                <div class=\"col-md-3\">\n                    <div class=\"form-group\">\n                        <select class=\"form-control\" [(ngModel)]=\"bRange\" name=\"#bRange\"\n                            (ngModelChange)=\"onSelectRangeBank()\">\n                            <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                            <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n                        </select>\n                    </div>\n                </div>\n                <div class=\"col-md-2\" *ngIf=\"bCustomDate==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt6\" [owlDateTimeTrigger]=\"dt6\" placeholder=\"From\" [(ngModel)]=\"bDate\"\n                            (ngModelChange)=\"onDateChangeBank($event)\" class=\"form-control input-vendor\">\n                        <owl-date-time #dt6 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n                <div class=\"col-md-2\" *ngIf=\"bCustomDate==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt7\" [owlDateTimeTrigger]=\"dt7\" placeholder=\"To\" [(ngModel)]=\"bDate1\"\n                            (ngModelChange)=\"onDateChangeBank($event)\" class=\"form-control input-vendor\">\n                        <owl-date-time #dt7 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n                <div class=\"col-md-3\">\n                    <div class=\"form-group\">\n                        <input placeholder=\"Particulars\" class=\"form-control input-vendor\" [(ngModel)]=\"particulars\"\n                            (input)=\"onParticulars()\">\n                    </div>\n                </div>\n                <div class=\"col-md-2 hidetrans\">\n                    <div class=\"form-group\">\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input hide1\" type=\"checkbox\" name=\"hideTransaction\"\n                                [value]=\"hideTransaction\" (click)=\"onHideTransaction(hideTransaction)\">\n                            <label class=\"form-check-label hidelabel\" for=\"hideTransaction\">\n                                Hide DB Transaction\n                            </label>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <h5 class=\"table-head\" style=\"font-size: x-large;font-weight: bold;color:red\">Bank Statement</h5>\n            <div class=\"table table-responsive table-striped table-bordered\">\n                <table class=\"table text-nowrap\">\n                    <thead>\n                        <tr>\n                            <th>Select</th>\n                            <th>Date</th>\n                            <th>Particulars</th>\n                            <th>Cr</th>\n                            <th>Db</th>\n                            <th>Balance </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let b of bankStatementList |\n                            paginate: { id: 'listing_pagination2',\n                            itemsPerPage: 5,\n                            currentPage: page2,\n                            totalItems: totalRec }\n                            \">\n                            <td>\n                                <div class=\"form-check p1\">\n                                    <input class=\"form-check-input importcheck\" type=\"checkbox\"\n                                        id=cp1{{selectedBankStmt}} name=\"selectedBankStmt\"\n                                        [(ngModel)]=\"b.selectedBankStmt\" (change)=\"onCheckedBankStatement(b)\">\n                                </div>\n                            </td>\n                            <td>{{b.createdDate | date}}</td>\n                            <td>{{b.particulars}}</td>\n                            <td>{{b.creditAmount | currency : accountDetails.accountCurrency}}</td>\n                            <td *ngIf=\"b.debitAmount!=null\">\n                                {{b.debitAmount | currency : accountDetails.accountCurrency}}</td>\n                            <td *ngIf=\"b.debitAmount==null\">-</td>\n                            <td>{{b.balance | currency : accountDetails.accountCurrency}}</td>\n                        </tr>\n                        <tr *ngIf=\"bankStatementList && bankStatementList.length ==0\">\n                            <td colspan=\"10\" style=\"color: rgba(244, 67, 54, 0.7) ;\">\n                                <h4>No Data Found to Display.....</h4>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"d-flex justify-content-between\">\n                <div class=\"wrap\">\n                    <pagination-controls id=\"listing_pagination2\" maxSize=\"5\" directionLinks=\"true\" responsive=\"true\"\n                        (pageChange)=\"page2= $event\">\n                    </pagination-controls>\n                </div>\n            </div>\n            <div class=\"button-section\">\n                <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                <button class=\"btn btn-dark-green btn-lg\" (click)=\"onApproveOnlinePayment()\">Approve</button>\n            </div>\n        </div>\n    </div>\n</div>\n\n<!-- Bank Reconciliation (Payment Received from Aggregator) Auto Match -->\n<div class=\"container-fluid\" *ngIf=\"iterationName =='AGGREGATOR_RECONCILATION_AUTOMATCH'\">\n    <div class=\"card card-cascade narrower body-section\">\n        <div\n            class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n            <div>\n            </div>\n            <h4 href=\"\" class=\"white-text mx-3\">Bank Reconciliation (Payment Received from Aggregator) </h4>\n            <div>\n            </div>\n        </div>\n        <div class=\"card-body banrecon\">\n            <div class=\"card\">\n                <div class=\"card-body\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-3\" id=\"importhead\">\n                            Agg Payment Ref No <p id=\"importbal\" style=\"color: green;font-weight: bold;\">\n                                {{onlinePaymentList[0].paymentRefNo}}</p>\n                        </div>\n                        <div class=\"col-sm-3\" id=\"importhead\">\n                            Agg Total Settlement Amount <p id=\"importbal\" style=\"color: red;font-weight: bold;\">\n                                {{totalSettlementAmount | currency : onlinePaymentList[0].currency }}</p>\n                        </div>\n                        <div class=\"col-sm-3\" id=\"importhead\">\n                            Bank Particulars <p id=\"importbal\" style=\"color: green;font-weight: bold;\">\n                                {{onlinePaymentList[0].particulars}}</p>\n                        </div>\n                        <div class=\"col-sm-3\" id=\"importhead\">\n                            Bank Credit Amount <p id=\"importbal\" style=\"color: red;font-weight: bold;\">\n                                {{onlinePaymentList[0].creditAmount | currency : onlinePaymentList[0].currency }}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <br>\n            <div class=\"table table-responsive table-striped table-bordered\">\n                <table class=\"table text-nowrap\">\n                    <thead>\n                        <tr>\n                            <th>Customer Name</th>\n                            <th>Top Up Ref.No</th>\n                            <th> Topup Amount</th>\n                            <th> Charges</th>\n                            <th>Order Id</th>\n                            <th>Date</th>\n                            <th>Total Amount</th>\n                            <th>Payment Mode</th>\n                            <th style=\"background-color: lightsteelblue;\">Agg Settlement Amount</th>\n\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let p of onlinePaymentList | \n                            paginate: { id: 'listing_pagination',\n                            itemsPerPage: 5,\n                            currentPage: page,\n                            totalItems: totalRec }\n                            \">\n                            <td>{{p.customerName}}</td>\n                            <td>{{p.topupRefNo}}</td>\n                            <td>{{p.topupAmount | currency : p.currency}}</td>\n                            <td *ngIf=\"p.charges==0\">-</td>\n                            <td *ngIf=\"p.charges!=0\">{{p.paidAmount - p.topupAmount | currency : p.currency }}</td>\n                            <td>{{p.orderId}}</td>\n                            <td>{{p.topupDate| date}}</td>\n                            <td>{{p.paidAmount | currency : p.currency}}</td>\n                            <td>{{p.paymentMode}}</td>\n                            <td style=\"background-color: lightsteelblue;\">{{p.settlement | currency : p.currency}}</td>\n                        </tr>\n                        <tr>\n                            <td colspan=\"1\">\n                                <h5 style=\"color: black;font-weight: bold;\"> Total </h5>\n                            </td>\n                            <td colspan=\"7\">\n                            </td>\n\n                            <td colspan=\"1\">\n                                <h5 style=\"color: red;font-weight: bold;\">\n                                    {{totalSettlementAmount | currency : onlinePaymentList[0].currency }}</h5>\n                            </td>\n\n                        </tr>\n\n                        <tr *ngIf=\"bankPaymentList && bankPaymentList.length ==0\">\n                            <td colspan=\"10\" style=\"color: rgba(244, 67, 54, 0.7) ;\">\n                                <h4>No Data Found to Display.....</h4>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"d-flex justify-content-between\">\n                <div class=\"wrap\">\n                    <pagination-controls id=\"listing_pagination\" maxSize=\"5\" directionLinks=\"true\" responsive=\"true\"\n                        (pageChange)=\"page= $event\">\n                    </pagination-controls>\n                </div>\n            </div>\n            <br>\n            <div class=\"button-section\">\n                <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                <button class=\"btn btn-dark-green btn-lg\" (click)=\"onAutoApproveOnlinePayment()\">Approve</button>\n            </div>\n        </div>\n    </div>\n</div>\n\n<!-- Aggregator Report -->\n<div class=\"container-fluid\" *ngIf=\"iterationName =='AGGREGATOR_REPORT'\">\n    <div class=\"card card-cascade narrower body-section\">\n        <div\n            class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n            <div>\n            </div>\n            <h4 href=\"\" class=\"white-text mx-3\">Aggregator Report </h4>\n            <div>\n            </div>\n        </div>\n        <div class=\"card-body banrecon\">\n            <div class=\"row dummy\">\n                <div class=\"col-md-2\">\n                    <div class=\"form-group\">\n                        <select class=\"form-control\" [(ngModel)]=\"rangeOP\" name=\"#rangeOP\"\n                            (ngModelChange)=\"onSelectRangeOP()\">\n                            <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                            <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n                        </select>\n                    </div>\n                </div>\n                <div class=\"col-md-2\" *ngIf=\"customDateOP==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" placeholder=\"From\" [(ngModel)]=\"dateOP\"\n                            (ngModelChange)=\"onDateChangeOP($event)\" class=\"form-control input-vendor\">\n                        <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n                <div class=\"col-md-2\" *ngIf=\"customDateOP==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" placeholder=\"To\" [(ngModel)]=\"date1OP\"\n                            (ngModelChange)=\"onDateChangeOP($event)\" class=\"form-control input-vendor\">\n                        <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n                <div class=\"col-md-2\">\n                    <div class=\"form-group\">\n                        <input placeholder=\"Name\" class=\"form-control input-vendor\" [(ngModel)]=\"customerName\"\n                            (input)=\"onCustomerNameOnline()\">\n\n                    </div>\n                </div>\n                <div class=\"col-md-2\">\n                    <div class=\"form-group\">\n                        <input placeholder=\"Order Id\" class=\"form-control input-vendor\" [(ngModel)]=\"orderId\"\n                            (input)=\"onOrderId()\">\n                    </div>\n                </div>\n                <div class=\"col-md-2\">\n                    <div class=\"form-group\">\n                        <input placeholder=\"Payment Mode\" class=\"form-control input-vendor\" [(ngModel)]=\"paymentMode\"\n                            (input)=\"onPaymentMode()\">\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"table table-responsive table-striped table-bordered\">\n                <table class=\"table text-nowrap\">\n                    <thead>\n                        <tr>\n                            <th>Customer Name</th>\n                            <th>Top Up Ref.No</th>\n                            <th> Topup Amount</th>\n                            <th> Charges</th>\n                            <th>Order Id</th>\n                            <th>Date</th>\n                            <th>Total Amount</th>\n                            <th>Payment Mode</th>\n                            <th style=\"background-color: lightsteelblue;\">Agg Payment Ref No</th>\n                            <th style=\"background-color: lightsteelblue;\">Agg Settlement Amount</th>\n                            <th>Status</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let p of onlinePaymentList | \n                            paginate: { id: 'listing_pagination',\n                            itemsPerPage: 10,\n                            currentPage: page,\n                            totalItems: totalRec }\n                            \">\n\n                            <td>{{p.customerName}}</td>\n                            <td>{{p.topupRefNo}}</td>\n                            <td>{{p.topupAmount | currency : p.currency}}</td>\n                            <td *ngIf=\"p.charges==0\">-</td>\n                            <td *ngIf=\"p.charges!=0\">{{p.paidAmount - p.topupAmount | currency : p.currency }}</td>\n                            <td>{{p.orderId}}</td>\n                            <td>{{p.topupDate| date}}</td>\n                            <td>{{p.paidAmount | currency : p.currency}}</td>\n                            <td>{{p.paymentMode}}</td>\n                            <td style=\"background-color: lightsteelblue;\" [attr.rowspan]=\"1\">{{p.paymentRefNo}}</td>\n                            <td style=\"background-color: lightsteelblue;\">{{p.settlement | currency : p.currency}}</td>\n                            <td *ngIf=\"p.status == 'PENDING'\" style=\"color:red;font-weight: bold;\">{{p.status}}</td>\n                            <td *ngIf=\"p.status == 'APPROVED'\" style=\"color:green;font-weight: bold;\">{{p.status}}</td>\n                        </tr>\n                        <tr>\n                            <td colspan=\"1\">\n                                <h5 style=\"color: black;font-weight: bold;\"> Total </h5>\n                            </td>\n                            <td colspan=\"1\"></td>\n\n                            <td colspan=\"1\">\n                                <h5 style=\"color: red;font-weight: bold;\">{{totalTopupAmount | currency : 'INR' }}</h5>\n                            </td>\n\n                            <td colspan=\"3\"></td>\n\n                            <td colspan=\"1\">\n                                <h5 style=\"color: red;font-weight: bold;\">{{totalPaidAmount | currency : 'INR' }}</h5>\n                            </td>\n\n                            <td colspan=\"2\"></td>\n\n                            <td colspan=\"1\">\n                                <h5 style=\"color: red;font-weight: bold;\">{{totalSettlementAmount | currency : 'INR' }}\n                                </h5>\n                            </td>\n                            <td colspan=\"1\"></td>\n                        </tr>\n\n                        <tr *ngIf=\"bankPaymentList && bankPaymentList.length ==0\">\n                            <td colspan=\"10\" style=\"color: rgba(244, 67, 54, 0.7) ;\">\n                                <h4>No Data Found to Display.....</h4>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"d-flex justify-content-between\">\n                <div class=\"wrap\">\n                    <pagination-controls id=\"listing_pagination\" maxSize=\"5\" directionLinks=\"true\" responsive=\"true\"\n                        (pageChange)=\"page= $event\">\n                    </pagination-controls>\n                </div>\n            </div>\n            <br>\n\n\n            <div class=\"button-section\">\n                <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n<!-- Payment By Cheque -->\n<div class=\"card pay\" *ngIf=\"iterationName =='Payment_By_Cheque'\">\n    <div\n        class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n        <div>\n        </div>\n        <h4 href=\"\" class=\"white-text mx-3\">Payment By Cheque </h4>\n        <div>\n        </div>\n    </div>\n    <div class=\"container in\">\n        <div class=\"row\">\n            <div class=\"col-6 col-md-4\">\n                <div class=\"card card-cascade\" (click)=\"onChequeDelivery()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Cheque Delivery<br></h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <i class=\"fas fa-share-square\" style=\"font-size:88px;color:#ff311d\"></i>\n\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-6 col-md-4\">\n                <div class=\"card card-cascade\" (click)=\"onChequeCollection()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Cheque Collection<br></h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <i class=\"fas fa-box-open\" style=\"font-size:88px;color:#fe24e3\"></i>\n\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"col-6 col-md-4\">\n                <div class=\"card card-cascade\" (click)=\"onChequeDeposit()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Cheque Deposit</h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <i class=\"fas fa-envelope-open\" style=\"font-size:88px;color:#e57d56\"></i>\n\n                    </div>\n                </div>\n            </div>\n\n        </div><br>\n        <div class=\"row\">\n            <div class=\"col-md-4\"></div>\n            <div class=\"col-md-8\">\n                <div class=\"button-section\">\n                    <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<!-- Cheque Delivery -->\n<div class=\"container-fluid\" *ngIf=\"iterationName == 'Cheque_Delivery'\">\n    <section class=\"mb-5\">\n        <!--Card-->\n        <div class=\"card card-cascade narrower body-section\">\n            <div\n                class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n                <div>\n                </div>\n                <h4 href=\"\" class=\"white-text mx-3\">Cheque Delivery </h4>\n                <div>\n                </div>\n            </div>\n            <div class=\"card-body\">\n                <div class=\"row\">\n                    <div class=\"col-md-2\">\n                        <div class=\"form-group\">\n                            <select class=\"form-control\" [(ngModel)]=\"cRange\" name=\"#cRange\"\n                                (ngModelChange)=\"onSelectRangeChequeCol()\">\n                                <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                                <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\" *ngIf=\"cCustomDate==true\">\n                        <div class=\"form-group\">\n                            <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" placeholder=\"From\" [(ngModel)]=\"cDate\"\n                                (ngModelChange)=\"onDateChangeChequeCol($event)\" class=\"form-control input-vendor\">\n                            <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\" *ngIf=\"cCustomDate==true\">\n                        <div class=\"form-group\">\n                            <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" placeholder=\"To\" [(ngModel)]=\"cDate1\"\n                                (ngModelChange)=\"onDateChangeChequeCol($event)\" class=\"form-control input-vendor\">\n                            <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <div class=\"form-group\">\n                            <input placeholder=\"Name\" class=\"form-control input-vendor\" [(ngModel)]=\"customerName\"\n                                (input)=\"onChequeustomerNameCol()\">\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <div class=\"form-group\">\n                            <select class=\"form-control\" name=\"region\" [(ngModel)]=\"region\"\n                                (ngModelChange)=\"onSelectRegion(region)\">\n                                <option [ngValue]=\"null\">Select Region</option>\n                                <option *ngFor=\"let r of selectedRegion\" [value]=\"r\">{{r}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <div class=\"form-group\">\n                            <select class=\"form-control\" name=\"state\" [(ngModel)]=\"state\"\n                                (ngModelChange)=\"onSelectState(state)\">\n                                <option [ngValue]=\"null\">Select State</option>\n                                <option *ngFor=\"let s of selectedState\" [value]=\"s\">{{s}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <div class=\"form-group\">\n                            <select class=\"form-control\" name=\"city\" [(ngModel)]=\"city\"\n                                (ngModelChange)=\"onSelectCity(city)\">\n                                <option [ngValue]=\"null\">Select City</option>\n                                <option *ngFor=\"let c of selectedCity\" [value]=\"c\">{{c}}</option>\n                            </select>\n                        </div>\n                    </div>\n\n                </div>\n                <div class=\"col-md-2 hidetrans\">\n\n                </div>\n                <br>\n                <div class=\"form-group\">\n                    <div class=\"form-check excel\">\n                        <input class=\"form-check-input hide1\" type=\"checkbox\" name=\"pendingChequeColl\"\n                            [(ngModel)]=\"pendingChequeColl\" (click)=\"onChangeCollected(pendingChequeColl)\">\n                        <label class=\"form-check-label hidelabel1\" for=\"pendingChequeColl\"\n                            style=\"font-size: x-large;font-weight: bold;color:red\">\n                            Select Pending Transaction\n                        </label>\n\n                        <i class=\"fa fa-cloud-download\"\n                            style=\"font-size:80px;color:#f57f17;float: right;margin-top: -27px;\"\n                            (click)=\"downloadChequeDelivery()\"></i>\n                    </div>\n                </div>\n                <br>\n                <div class=\"table table-responsive table-striped table-bordered\">\n                    <table class=\"table text-nowrap\">\n                        <thead>\n                            <tr>\n                                <th>Select</th>\n                                <th>Name</th>\n                                <th>Cheque Number</th>\n                                <th>Cheque Amount </th>\n                                <th>Address</th>\n                                <th>Region</th>\n                                <th>State</th>\n                                <th>City</th>\n                                <th>Mode</th>\n                                <th>Status</th>\n                                <th>To Be Delivered On</th>\n\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let c of chequePaymentList |\n                            paginate: { id: 'listing_pagination9',\n                            itemsPerPage: 10,\n                            currentPage: page9,\n                            totalItems: totalRec }\">\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">&nbsp;</td>\n                                <td\n                                    *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeDeliveredOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\">\n                                    <div class=\"form-check\" *ngIf=\"c.receivedOn==null\">\n                                        <input class=\"form-check-input\" type=\"radio\" id=cpayval{{c}} name=\"c\"\n                                            [value]=\"c\" (change)=\"onChequePayment1(c)\">\n                                    </div>\n                                </td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && today.setHours(0,0,0,0) == c.toBeDeliveredOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange\">\n                                    <div class=\"form-check\" *ngIf=\"c.receivedOn==null\">\n                                        <input class=\"form-check-input\" type=\"radio\" id=cpayval{{c}} name=\"c\"\n                                            [value]=\"c\" (change)=\"onChequePayment1(c)\">\n                                    </div>\n                                </td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && today.setHours(0,0,0,0)  > c.toBeDeliveredOn.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(243, 56, 56);\">\n                                    <div class=\"form-check\" *ngIf=\"c.receivedOn==null\">\n                                        <input class=\"form-check-input\" type=\"radio\" id=cpayval{{c}} name=\"c\"\n                                            [value]=\"c\" (change)=\"onChequePayment1(c)\">\n                                    </div>\n                                </td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && upcoming.setHours(0,0,0,0) >= c.toBeDeliveredOn.setHours(0,0,0,0) && c.toBeDeliveredOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(248, 248, 114);font-weight: bold;font-size: 16px;\">\n                                    <div class=\"form-check\" *ngIf=\"c.receivedOn==null\">\n                                        <input class=\"form-check-input\" type=\"radio\" id=cpayval{{c}} name=\"c\"\n                                            [value]=\"c\" (change)=\"onChequePayment1(c)\">\n                                    </div>\n                                </td>\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">{{c.customerName}}</td>\n                                <td\n                                    *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeDeliveredOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\">\n                                    {{c.customerName}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && today.setHours(0,0,0,0) == c.toBeDeliveredOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.customerName}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && today.setHours(0,0,0,0)  > c.toBeDeliveredOn.setHours(0,0,0,0) \"\n                                    style=\"background-color:  rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.customerName}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && upcoming.setHours(0,0,0,0) >= c.toBeDeliveredOn.setHours(0,0,0,0) && c.toBeDeliveredOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(241, 241, 109);font-weight: bold;font-size: 16px;\">\n                                    {{c.customerName}}</td>\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">{{c.chequeNumber}}</td>\n                                <td\n                                    *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeDeliveredOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\">\n                                    {{c.chequeNumber}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && today.setHours(0,0,0,0) == c.toBeDeliveredOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeNumber}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && today.setHours(0,0,0,0)  > c.toBeDeliveredOn.setHours(0,0,0,0) \"\n                                    style=\"background-color:  rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeNumber}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && upcoming.setHours(0,0,0,0) >= c.toBeDeliveredOn.setHours(0,0,0,0) && c.toBeDeliveredOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(241, 241, 109);font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeNumber}}</td>\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">{{c.chequeAmount |currency : c.currency}}\n                                </td>\n                                <td\n                                    *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeDeliveredOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\">\n                                    {{c.chequeAmount |currency : c.currency}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && today.setHours(0,0,0,0) == c.toBeDeliveredOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeAmount |currency : c.currency}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && today.setHours(0,0,0,0)  > c.toBeDeliveredOn.setHours(0,0,0,0) \"\n                                    style=\"background-color:  rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeAmount |currency : c.currency}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && upcoming.setHours(0,0,0,0) >= c.toBeDeliveredOn.setHours(0,0,0,0) && c.toBeDeliveredOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(241, 241, 109);font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeAmount |currency : c.currency}}</td>\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">{{c.address}}</td>\n                                <td\n                                    *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeDeliveredOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\">\n                                    {{c.address}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && today.setHours(0,0,0,0) == c.toBeDeliveredOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.address}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && today.setHours(0,0,0,0)  > c.toBeDeliveredOn.setHours(0,0,0,0) \"\n                                    style=\"background-color:  rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.address}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && upcoming.setHours(0,0,0,0) >= c.toBeDeliveredOn.setHours(0,0,0,0) && c.toBeDeliveredOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(248, 248, 114);font-weight: bold;font-size: 16px;\">\n                                    {{c.address}}</td>\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">{{c.region}}</td>\n                                <td\n                                    *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeDeliveredOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\">\n                                    {{c.region}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && today.setHours(0,0,0,0) == c.toBeDeliveredOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff\">{{c.region}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && today.setHours(0,0,0,0)  > c.toBeDeliveredOn.setHours(0,0,0,0) \"\n                                    style=\"background-color:  rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.region}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && upcoming.setHours(0,0,0,0) >= c.toBeDeliveredOn.setHours(0,0,0,0) && c.toBeDeliveredOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(241, 241, 109);font-weight: bold;font-size: 16px;\">\n                                    {{c.region}}</td>\n\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">{{c.state}}</td>\n                                <td\n                                    *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeDeliveredOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\">\n                                    {{c.state}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && today.setHours(0,0,0,0) == c.toBeDeliveredOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.state}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && today.setHours(0,0,0,0)  > c.toBeDeliveredOn.setHours(0,0,0,0) \"\n                                    style=\"background-color:  rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.state}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && upcoming.setHours(0,0,0,0) >= c.toBeDeliveredOn.setHours(0,0,0,0) && c.toBeDeliveredOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(241, 241, 109);font-weight: bold;font-size: 16px;\">\n                                    {{c.state}}</td>\n\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">{{c.city}}</td>\n                                <td\n                                    *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeDeliveredOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\">\n                                    {{c.city}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && today.setHours(0,0,0,0) == c.toBeDeliveredOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.city}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && today.setHours(0,0,0,0)  > c.toBeDeliveredOn.setHours(0,0,0,0) \"\n                                    style=\"background-color:  rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.city}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && upcoming.setHours(0,0,0,0) >= c.toBeDeliveredOn.setHours(0,0,0,0) && c.toBeDeliveredOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(241, 241, 109);font-weight: bold;font-size: 16px;\">\n                                    {{c.city}}</td>\n\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">{{c.chequeType}}</td>\n                                <td\n                                    *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeDeliveredOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\">\n                                    {{c.chequeType}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && today.setHours(0,0,0,0) == c.toBeDeliveredOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeType}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && today.setHours(0,0,0,0)  > c.toBeDeliveredOn.setHours(0,0,0,0) \"\n                                    style=\"background-color:  rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeType}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && upcoming.setHours(0,0,0,0) >= c.toBeDeliveredOn.setHours(0,0,0,0) && c.toBeDeliveredOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(241, 241, 109);font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeType}}</td>\n\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">{{c.chequeStatus}}</td>\n                                <td\n                                    *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeDeliveredOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\">\n                                    {{c.chequeStatus}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && today.setHours(0,0,0,0) == c.toBeDeliveredOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeStatus}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && today.setHours(0,0,0,0)  > c.toBeDeliveredOn.setHours(0,0,0,0) \"\n                                    style=\"background-color:  rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeStatus}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && upcoming.setHours(0,0,0,0) >= c.toBeDeliveredOn.setHours(0,0,0,0) && c.toBeDeliveredOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(241, 241, 109);font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeStatus}}</td>\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">{{c.toBeDeliveredOn | date}}</td>\n                                <td\n                                    *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeDeliveredOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\">\n                                    {{c.toBeDeliveredOn | date}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && today.setHours(0,0,0,0) == c.toBeDeliveredOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;font-weight: bold;font-size: 16px;\">\n                                    {{c.toBeDeliveredOn | date}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && today.setHours(0,0,0,0)  > c.toBeDeliveredOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.toBeDeliveredOn | date}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='RECEIVED' && upcoming.setHours(0,0,0,0) >= c.toBeDeliveredOn.setHours(0,0,0,0) && c.toBeDeliveredOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(241, 241, 109);font-weight: bold;font-size: 16px;\">\n                                    {{c.toBeDeliveredOn | date}}</td>\n                            </tr>\n                            <tr *ngIf=\"chequePaymentList && chequePaymentList.length==0\">\n                                <td colspan=\"10\">\n                                    <h4 style=\"color: rgba(244, 67, 54, 0.7) ;\">No Data Found To Display....</h4>\n                                </td>\n                            </tr>\n                        </tbody>\n\n                    </table>\n                </div>\n                <div class=\"d-flex justify-content-between\">\n                    <div class=\"wrap\">\n                        <pagination-controls id=\"listing_pagination9\" maxSize=\"5\" directionLinks=\"true\"\n                            responsive=\"true\" (pageChange)=\"page9 = $event\">\n                        </pagination-controls>\n                    </div>\n                </div>\n                <div class=\"button-section\">\n                    <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                    <button class=\"btn btn-dark-green btn-lg\" (click)=\"onChequeCollectionSubmit()\">Proceed</button>\n                </div>\n            </div>\n        </div>\n\n    </section>\n</div>\n\n<!-- Cheque Collection -->\n<div class=\"container-fluid\" *ngIf=\"iterationName == 'Cheque_Collection'\">\n    <section class=\"mb-5\">\n        <!--Card-->\n        <div class=\"card card-cascade narrower body-section\">\n            <div\n                class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n                <div>\n                </div>\n                <h4 href=\"\" class=\"white-text mx-3\">Cheque Collection </h4>\n                <div>\n                </div>\n            </div>\n            <div class=\"card-body\">\n                <div class=\"row\">\n                    <div class=\"col-md-2\">\n                        <div class=\"form-group\">\n                            <select class=\"form-control\" [(ngModel)]=\"cRange\" name=\"#cRange\"\n                                (ngModelChange)=\"onSelectRangeChequeCol()\">\n                                <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                                <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\" *ngIf=\"cCustomDate==true\">\n                        <div class=\"form-group\">\n                            <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" placeholder=\"From\" [(ngModel)]=\"cDate\"\n                                (ngModelChange)=\"onDateChangeChequeCol($event)\" class=\"form-control input-vendor\">\n                            <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\" *ngIf=\"cCustomDate==true\">\n                        <div class=\"form-group\">\n                            <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" placeholder=\"To\" [(ngModel)]=\"cDate1\"\n                                (ngModelChange)=\"onDateChangeChequeCol($event)\" class=\"form-control input-vendor\">\n                            <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <div class=\"form-group\">\n                            <input placeholder=\"Name\" class=\"form-control input-vendor\" [(ngModel)]=\"customerName\"\n                                (input)=\"onChequeustomerNameCol()\">\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <div class=\"form-group\">\n                            <select class=\"form-control\" name=\"region\" [(ngModel)]=\"region\"\n                                (ngModelChange)=\"onSelectRegion(region)\">\n                                <option [ngValue]=\"null\">Select Region</option>\n                                <option *ngFor=\"let r of selectedRegion\" [value]=\"r\">{{r}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <div class=\"form-group\">\n                            <select class=\"form-control\" name=\"state\" [(ngModel)]=\"state\"\n                                (ngModelChange)=\"onSelectState(state)\">\n                                <option [ngValue]=\"null\">Select State</option>\n                                <option *ngFor=\"let s of selectedState\" [value]=\"s\">{{s}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <div class=\"form-group\">\n                            <select class=\"form-control\" name=\"city\" [(ngModel)]=\"city\"\n                                (ngModelChange)=\"onSelectCity(city)\">\n                                <option [ngValue]=\"null\">Select City</option>\n                                <option *ngFor=\"let c of selectedCity\" [value]=\"c\">{{c}}</option>\n                            </select>\n                        </div>\n                    </div>\n\n                </div>\n                <div class=\"col-md-2 hidetrans\">\n\n                </div>\n                <div class=\"form-group\">\n                    <div class=\"form-check excel\">\n                        <input class=\"form-check-input hide1\" type=\"checkbox\" name=\"pendingChequeColl\"\n                            [(ngModel)]=\"pendingChequeColl\" (click)=\"onChangeCollected(pendingChequeColl)\">\n                        <label class=\"form-check-label hidelabel1\" for=\"pendingChequeColl\"\n                            style=\"font-size: x-large;font-weight: bold;color:red\">\n                            Select Pending Transaction\n                        </label>\n                        <!-- <img src=\"assets/download.jpg\" id=\"importimg\" style=\"width: 50pt;height:50pt;float: right\"\n                            (click)=\"exportBankStatement($event)\"> -->\n                        <i class=\"fa fa-cloud-download\"\n                            style=\"font-size:80px;color:#f57f17;float: right;margin-top: -27px;\"\n                            (click)=\"exportBankStatement($event)\"></i>\n                    </div>\n                </div>\n\n                <br>\n                <div class=\"table table-responsive table-striped table-bordered\">\n                    <table class=\"table text-nowrap\">\n                        <thead>\n                            <tr>\n                                <th>Select</th>\n                                <th>Name</th>\n                                <th>Cheque Number</th>\n                                <th>Cheque Amount </th>\n                                <th>Address</th>\n                                <th>Region</th>\n                                <th>State</th>\n                                <th>City</th>\n                                <th>Mode</th>\n                                <th>Status</th>\n                                <th>To Be Collected On</th>\n\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let c of chequePaymentList |\n                            paginate: { id: 'listing_pagination9',\n                            itemsPerPage: 10,\n                            currentPage: page9,\n                            totalItems: totalRec }\">\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">&nbsp;</td>\n                                <td\n                                    *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeCollectedOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\">\n                                    <div class=\"form-check\" *ngIf=\"c.collectedOn==null\">\n                                        <input class=\"form-check-input\" type=\"radio\" id=cpayval{{c}} name=\"c\"\n                                            [value]=\"c\" (change)=\"onChequePayment1(c)\">\n                                    </div>\n                                </td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && today.setHours(0,0,0,0) == c.toBeCollectedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange\">\n                                    <div class=\"form-check\" *ngIf=\"c.collectedOn==null\">\n                                        <input class=\"form-check-input\" type=\"radio\" id=cpayval{{c}} name=\"c\"\n                                            [value]=\"c\" (change)=\"onChequePayment1(c)\">\n                                    </div>\n                                </td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && today.setHours(0,0,0,0)  > c.toBeCollectedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;;\">\n                                    <div class=\"form-check\" *ngIf=\"c.collectedOn==null\">\n                                        <input class=\"form-check-input\" type=\"radio\" id=cpayval{{c}} name=\"c\"\n                                            [value]=\"c\" (change)=\"onChequePayment1(c)\">\n                                    </div>\n                                </td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && upcoming.setHours(0,0,0,0) >= c.toBeCollectedOn.setHours(0,0,0,0) && c.toBeCollectedOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(248, 248, 114);font-weight: bold;font-size: 16px;;\">\n                                    <div class=\"form-check\" *ngIf=\"c.collectedOn==null\">\n                                        <input class=\"form-check-input\" type=\"radio\" id=cpayval{{c}} name=\"c\"\n                                            [value]=\"c\" (change)=\"onChequePayment1(c)\">\n                                    </div>\n                                </td>\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">{{c.customerName}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeCollectedOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\"\n                                    style=\"font-weight: bold;font-size: 16px;\">{{c.customerName}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && today.setHours(0,0,0,0) == c.toBeCollectedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.customerName}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && today.setHours(0,0,0,0)  > c.toBeCollectedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.customerName}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && upcoming.setHours(0,0,0,0) >= c.toBeCollectedOn.setHours(0,0,0,0) && c.toBeCollectedOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(248, 248, 114);font-weight: bold;font-size: 16px;\">\n                                    {{c.customerName}}</td>\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">{{c.chequeNumber}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeCollectedOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\"\n                                    style=\"font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeNumber}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && today.setHours(0,0,0,0) == c.toBeCollectedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeNumber}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && today.setHours(0,0,0,0)  > c.toBeCollectedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;;\">\n                                    {{c.chequeNumber}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && upcoming.setHours(0,0,0,0) >= c.toBeCollectedOn.setHours(0,0,0,0) && c.toBeCollectedOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(248, 248, 114);font-weight: bold;font-size: 16px;;\">\n                                    {{c.chequeNumber}}</td>\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">{{c.chequeAmount |currency : c.currency}}\n                                </td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeCollectedOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\"\n                                    style=\"font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeAmount |currency : c.currency}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && today.setHours(0,0,0,0) == c.toBeCollectedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeAmount |currency : c.currency}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && today.setHours(0,0,0,0)  > c.toBeCollectedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeAmount |currency : c.currency}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && upcoming.setHours(0,0,0,0) >= c.toBeCollectedOn.setHours(0,0,0,0) && c.toBeCollectedOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(248, 248, 114);font-weight: bold;font-size: 16px;;\">\n                                    {{c.chequeAmount |currency : c.currency}}</td>\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">{{c.address}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeCollectedOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\"\n                                    style=\"font-weight: bold;font-size: 16px;\">\n                                    {{c.address}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && today.setHours(0,0,0,0) == c.toBeCollectedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.address}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && today.setHours(0,0,0,0)  > c.toBeCollectedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.address}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && upcoming.setHours(0,0,0,0) >= c.toBeCollectedOn.setHours(0,0,0,0) && c.toBeCollectedOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(248, 248, 114);font-weight: bold;font-size: 16px;;\">\n                                    {{c.address}}</td>\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">{{c.region}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeCollectedOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\"\n                                    style=\"font-weight: bold;font-size: 16px;\">\n                                    {{c.region}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && today.setHours(0,0,0,0) == c.toBeCollectedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.region}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && today.setHours(0,0,0,0)  > c.toBeCollectedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.region}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && upcoming.setHours(0,0,0,0) >= c.toBeCollectedOn.setHours(0,0,0,0) && c.toBeCollectedOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(248, 248, 114);font-weight: bold;font-size: 16px;;\">\n                                    {{c.region}}</td>\n\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">{{c.state}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeCollectedOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\"\n                                    style=\"font-weight: bold;font-size: 16px;\">\n                                    {{c.state}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && today.setHours(0,0,0,0) == c.toBeCollectedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.state}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && today.setHours(0,0,0,0)  > c.toBeCollectedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.state}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && upcoming.setHours(0,0,0,0) >= c.toBeCollectedOn.setHours(0,0,0,0) && c.toBeCollectedOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(248, 248, 114);font-weight: bold;font-size: 16px;;\">\n                                    {{c.state}}</td>\n\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">{{c.city}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeCollectedOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\"\n                                    style=\"font-weight: bold;font-size: 16px;\">\n                                    {{c.city}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && today.setHours(0,0,0,0) == c.toBeCollectedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.city}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && today.setHours(0,0,0,0)  > c.toBeCollectedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.city}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && upcoming.setHours(0,0,0,0) >= c.toBeCollectedOn.setHours(0,0,0,0) && c.toBeCollectedOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(248, 248, 114);font-weight: bold;font-size: 16px;;\">\n                                    {{c.city}}</td>\n\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">{{c.chequeType}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeCollectedOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\"\n                                    style=\"font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeType}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && today.setHours(0,0,0,0) == c.toBeCollectedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeType}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && today.setHours(0,0,0,0)  > c.toBeCollectedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeType}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && upcoming.setHours(0,0,0,0) >= c.toBeCollectedOn.setHours(0,0,0,0) && c.toBeCollectedOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(248, 248, 114);font-weight: bold;font-size: 16px;;\">\n                                    {{c.chequeType}}</td>\n\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">{{c.chequeStatus}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeCollectedOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\"\n                                    style=\"font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeStatus}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && today.setHours(0,0,0,0) == c.toBeCollectedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeStatus}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && today.setHours(0,0,0,0)  > c.toBeCollectedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeStatus}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && upcoming.setHours(0,0,0,0) >= c.toBeCollectedOn.setHours(0,0,0,0) && c.toBeCollectedOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(248, 248, 114);font-weight: bold;font-size: 16px;;\">\n                                    {{c.chequeStatus}}</td>\n\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">{{c.toBeCollectedOn | date}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeCollectedOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\"\n                                    style=\"font-weight: bold;font-size: 16px;\">\n                                    {{c.toBeCollectedOn | date}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && today.setHours(0,0,0,0) == c.toBeCollectedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.toBeCollectedOn | date}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && today.setHours(0,0,0,0)  > c.toBeCollectedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.toBeCollectedOn | date}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.chequeStatus!='COLLECTED' && upcoming.setHours(0,0,0,0) >= c.toBeCollectedOn.setHours(0,0,0,0) && c.toBeCollectedOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(248, 248, 114);font-weight: bold;font-size: 16px;;\">\n                                    {{c.toBeCollectedOn | date}}</td>\n                            </tr>\n                            <tr *ngIf=\"chequePaymentList && chequePaymentList.length==0\">\n                                <td colspan=\"10\">\n                                    <h4 style=\"color: rgba(244, 67, 54, 0.7) ;\">No Data Found To Display....</h4>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div class=\"d-flex justify-content-between\">\n                    <div class=\"wrap\">\n                        <pagination-controls id=\"listing_pagination9\" maxSize=\"5\" directionLinks=\"true\"\n                            responsive=\"true\" (pageChange)=\"page9 = $event\">\n                        </pagination-controls>\n                    </div>\n                </div>\n                <div class=\"button-section\">\n                    <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                    <button class=\"btn btn-dark-green btn-lg\" (click)=\"onChequeCollectionSubmit()\">Proceed</button>\n                </div>\n            </div>\n        </div>\n\n    </section>\n\n</div>\n\n<!--  Collected Cheque Details  -->\n<div class=\"container importct\" *ngIf=\"iterationName=='Collected_Cheque_Details'\">\n    <form name=\"form\" (ngSubmit)=\"f.form.valid && onTopUp()\" #f=\"ngForm\">\n        <div class=\"row\">\n            <div class=\"col-sm-4\" id=\"wallet-1\">\n                <div class=\"card\" id=\"import\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient imp\">\n                        Topup Details\n                    </div><br>\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Customer ID </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{chequePayment.customerId}}\n                        </div>\n                    </div>\n                    <hr>\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\"> Topup Ref.No</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{chequePayment.topupRefNo}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\"> Topup Date</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{chequePayment.topupDate | date}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Topup Amount</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{chequePayment.topupAmount |currency : chequePayment.currency }}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-sm-8\" id=\"importcol\">\n                <div class=\"card\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient\">\n                        <span *ngIf=\"chequePayment.toBeCollectedOn!=null\" class=\"card-header-title mb-3\"\n                            style=\"color: white;\">Payment\n                            by Cheque ( Collection )</span>\n                        <span *ngIf=\"chequePayment.toBeDeliveredOn!=null\" class=\"card-header-title mb-3\"\n                            style=\"color: white;\">Payment\n                            by Cheque ( Delivery )</span>\n                    </div>\n                    <div class=\"card-body\">\n                        <h4 style=\"color: red;\" class=\"blinking\">*No additional charges*</h4><br>\n                        <form name=\"form\" (ngSubmit)=\"f.form.valid && onConformCollectedCheque()\" #f=\"ngForm\">\n                            <div class=\"row\">\n                                <div class=\"col-sm-4\">\n                                    <label>Cheque Amount</label>\n                                    <input type=\"text\" class=\"form-control input-vendor\"\n                                        [(ngModel)]=\"chequePayment.chequeAmount\" name=\"chequeAmount\"\n                                        #chequeAmount=\"ngModel\"\n                                        [ngClass]=\"{ 'is-invalid': f.submitted && chequeAmount.invalid }\" required>\n                                    <div *ngIf=\"f.submitted && chequeAmount.invalid\" class=\"invalid-feedback\">\n                                        <div *ngIf=\"chequeAmount.errors.required\">Cheque Amount is required</div>\n                                    </div>\n                                </div>\n                                <div class=\"col-sm-4\">\n                                    <label>Cheque Date</label>\n                                    <div class=\"form-group\">\n                                        <input placeholder=\"Cheque Date\" [owlDateTime]=\"cdate\"\n                                            [owlDateTimeTrigger]=\"cdate\" class=\"form-control input-vendor\"\n                                            [(ngModel)]=\"chequePayment.chequeDate\" name=\"chequeDate\"\n                                            #chequeDate=\"ngModel\"\n                                            [ngClass]=\"{ 'is-invalid': f.submitted && chequeDate.invalid }\" required>\n                                        <owl-date-time #cdate pickerType=\"calendar\"></owl-date-time>\n                                        <div *ngIf=\"f.submitted && chequeDate.invalid\" class=\"invalid-feedback\">\n                                            <div *ngIf=\"chequeDate.errors.required\">Cheque Date is required</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"col-sm-4\">\n                                    <label>Cheque Number</label>\n                                    <div class=\"form-group\">\n                                        <input type=\"text\" class=\"form-control input-vendor\"\n                                            [(ngModel)]=\"chequePayment.chequeNumber\" name=\"chequeNumber\"\n                                            #chequeNumber=\"ngModel\"\n                                            [ngClass]=\"{ 'is-invalid': f.submitted && chequeNumber.invalid }\" required>\n                                        <div *ngIf=\"f.submitted && chequeNumber.invalid\" class=\"invalid-feedback\">\n                                            <div *ngIf=\"chequeNumber.errors.required\">Cheque Number is required</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-sm-4\">\n                                    <label>Cheque Issuing Bank</label>\n                                    <div class=\"form-group\">\n                                        <input type=\"text\" class=\"form-control input-vendor\"\n                                            [(ngModel)]=\"chequePayment.chequeIssuingBank\" name=\"chequeIssuingBank\"\n                                            #chequeIssuingBank=\"ngModel\"\n                                            [ngClass]=\"{ 'is-invalid': f.submitted && chequeIssuingBank.invalid }\"\n                                            required>\n                                        <div *ngIf=\"f.submitted && chequeIssuingBank.invalid\" class=\"invalid-feedback\">\n                                            <div *ngIf=\"chequeIssuingBank.errors.required\">Cheque Issuing Bank is\n                                                required</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"col-sm-4\">\n                                    <label>Cheque Issuer Name</label>\n                                    <div class=\"form-group\">\n                                        <input type=\"text\" class=\"form-control input-vendor\"\n                                            [(ngModel)]=\"chequePayment.chequeIssuerName\" name=\"chequeIssuerName\"\n                                            #chequeIssuerName=\"ngModel\"\n                                            [ngClass]=\"{ 'is-invalid': f.submitted && chequeIssuerName.invalid }\"\n                                            required>\n                                        <div *ngIf=\"f.submitted && chequeIssuerName.invalid\" class=\"invalid-feedback\">\n                                            <div *ngIf=\"chequeIssuerName.errors.required\">Cheque Issuer Name is required\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"col-sm-4\" *ngIf=\"chequePayment.toBeDeliveredOn!=null\">\n                                    <label>Received On</label>\n                                    <div class=\"form-group\">\n                                        <input [owlDateTime]=\"cd\" [owlDateTimeTrigger]=\"cd\"\n                                            class=\"form-control input-vendor\" [(ngModel)]=\"chequePayment.receivedOn\"\n                                            name=\"receivedOn\" #receivedOn=\"ngModel\"\n                                            [ngClass]=\"{ 'is-invalid': f.submitted && receivedOn.invalid }\" required>\n                                        <owl-date-time #cd pickerType=\"calendar\"></owl-date-time>\n                                        <div *ngIf=\"f.submitted && receivedOn.invalid\" class=\"invalid-feedback\">\n                                            <div *ngIf=\"receivedOn.errors.required\">Received On is required</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"col-sm-4\" *ngIf=\"chequePayment.toBeCollectedOn!=null\">\n                                    <label>Collected On</label>\n                                    <div class=\"form-group\">\n                                        <input [owlDateTime]=\"cd\" [owlDateTimeTrigger]=\"cd\"\n                                            class=\"form-control input-vendor\" [(ngModel)]=\"chequePayment.collectedOn\"\n                                            name=\"collectedOn\" #collectedOn=\"ngModel\"\n                                            [ngClass]=\"{ 'is-invalid': f.submitted && collectedOn.invalid }\" required>\n                                        <owl-date-time #cd pickerType=\"calendar\"></owl-date-time>\n                                        <div *ngIf=\"f.submitted && collectedOn.invalid\" class=\"invalid-feedback\">\n                                            <div *ngIf=\"collectedOn.errors.required\">Collected On is required</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"col-sm-4\" *ngIf=\"chequePayment.toBeDeliveredOn!=null\">\n                                    <label>Received By</label>\n                                    <div class=\"form-group\">\n                                        <input placeholder=\"Received By\" type=\"text\" class=\"form-control input-vendor\"\n                                            [(ngModel)]=\"chequePayment.receivedBy\" name=\"receivedBy\"\n                                            #receivedBy=\"ngModel\"\n                                            [ngClass]=\"{ 'is-invalid': f.submitted && receivedBy.invalid }\" required>\n                                        <div *ngIf=\"f.submitted && receivedBy.invalid\" class=\"invalid-feedback\">\n                                            <div *ngIf=\"receivedBy.errors.required\">Received By is required</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"col-sm-4\" *ngIf=\"chequePayment.toBeCollectedOn!=null\">\n                                    <label>Collected By</label>\n                                    <div class=\"form-group\">\n                                        <input placeholder=\"Collected By\" type=\"text\" class=\"form-control input-vendor\"\n                                            [(ngModel)]=\"chequePayment.collectedBy\" name=\"collectedBy\"\n                                            #collectedBy=\"ngModel\"\n                                            [ngClass]=\"{ 'is-invalid': f.submitted && collectedBy.invalid }\" required>\n                                        <div *ngIf=\"f.submitted && collectedBy.invalid\" class=\"invalid-feedback\">\n                                            <div *ngIf=\"collectedBy.errors.required\">Collected By is required</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"col-sm-4\">\n                                    <label>To be Deposited On</label>\n                                    <div class=\"form-group\">\n                                        <input placeholder=\"To Be Deposited On\" [owlDateTime]=\"cd1\"\n                                            [owlDateTimeTrigger]=\"cd1\" class=\"form-control input-vendor\"\n                                            [(ngModel)]=\"chequePayment.toBeDepositedOn\" name=\"toBeDepositedOn\"\n                                            #toBeDepositedOn=\"ngModel\"\n                                            [ngClass]=\"{ 'is-invalid': f.submitted && toBeDepositedOn.invalid }\"\n                                            required>\n                                        <owl-date-time #cd1 pickerType=\"calendar\"></owl-date-time>\n                                        <div *ngIf=\"f.submitted && toBeDepositedOn.invalid\" class=\"invalid-feedback\">\n                                            <div *ngIf=\"toBeDepositedOn.errors.required\">To Be Deposited On is required\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"col-sm-12\">\n                                    <div class=\"button-section\">\n                                        <button class=\"btn btn-default btn-lg\"\n                                            (click)=\"onBackCheque(chequePayment)\">Back</button>\n                                        <button class=\"btn btn-green btn-lg\" type=\"submit\">Submit</button>\n                                    </div>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>\n\n\n\n<!-- Collected Cheque Success Page -->\n<div class=\"container\" *ngIf=\"iterationName == 'Collected_Cheque_Sucess_Page'\">\n    <div class=\"card\">\n        <div class=\"view view-cascade gradient-card-header blue-gradient\">\n            <h4 class=\"card-header-title mb-3\" style=\"color: white;\" *ngIf=\"chequePayment.collectedOn!=null\">Payment by\n                Cheque ( Collection )</h4>\n            <h4 class=\"card-header-title mb-3\" style=\"color: white;\" *ngIf=\"chequePayment.receivedOn!=null\">Payment by\n                Cheque ( Delivery )</h4>\n        </div>\n        <div class=\"card-body\">\n            <h4 style=\"color: green;font-weight: bold;\">Payment By Cheque Submitted\n                Successfuly......!\n            </h4>\n            <hr>\n            <form>\n                <div class=\"row\">\n                    <div class=\"col-md-6\">\n                        <div class=\"row\">\n                            <div class=\"col-md-6 col-7\">\n                                <label>Customer ID :</label>\n                            </div>\n                            <div class=\"col-md-6 col-5\">\n                                <label class=\"color\">{{chequePayment.customerId}}</label>\n                            </div>\n                        </div>\n                        <hr>\n                        <div class=\"row\">\n                            <div class=\"col-md-6 col-7\">\n                                <label> Date :</label>\n                            </div>\n                            <div class=\"col-md-6 col-5\">\n                                <label class=\"color\">{{chequePayment.chequeDate | date}}</label>\n                            </div>\n                        </div>\n                        <hr>\n                        <div class=\"row\">\n                            <div class=\"col-md-6 col-7\">\n                                <label> Cheque Amount :</label>\n                            </div>\n                            <div class=\"col-md-6 col-5\">\n                                <label\n                                    class=\"color\">{{chequePayment.chequeAmount |currency : chequePayment.currency}}</label>\n                            </div>\n                        </div>\n                        <hr>\n                        <div class=\"row\">\n                            <div class=\"col-md-6 col-7\">\n                                <label> Cheque Number : </label>\n                            </div>\n                            <div class=\"col-md-6 col-5\">\n                                <label class=\"color\">{{chequePayment.chequeNumber}}</label>\n                            </div>\n                        </div>\n                        <hr>\n                        <div class=\"row\">\n                            <div class=\"col-md-6 col-7\">\n                                <label> Cheque Issuer Name :</label>\n                            </div>\n                            <div class=\"col-md-6 col-5\">\n                                <label class=\"color\">{{chequePayment.chequeIssuerName}}</label>\n                            </div>\n                        </div>\n                        <hr>\n                        <div class=\"row\" *ngIf=\"chequePayment.toBeCollectedOn\">\n                            <div class=\"col-md-6 col-7\">\n                                <label> Collected By :</label>\n                            </div>\n                            <div class=\"col-md-6 col-5\">\n                                <label class=\"color\">{{chequePayment.collectedBy}}</label>\n                            </div>\n                        </div>\n                        <div class=\"row\" *ngIf=\"chequePayment.toBeDeliveredOn\">\n                            <div class=\"col-md-6 col-7\">\n                                <label> Received By :</label>\n                            </div>\n                            <div class=\"col-md-6 col-5\">\n                                <label class=\"color\">{{chequePayment.receivedBy}}</label>\n                            </div>\n                        </div>\n                        <hr>\n                    </div>\n                    <div class=\"col-md-6\">\n                        <div class=\"row\">\n                            <div class=\"col-md-6 col-7\">\n                                <label>Top Up Ref.No :</label>\n                            </div>\n                            <div class=\"col-md-6 col-5\">\n                                <label class=\"color\">{{chequePayment.topupRefNo}}</label>\n                            </div>\n                        </div>\n                        <hr>\n                        <div class=\"row\">\n                            <div class=\"col-md-6 col-7\">\n                                <label> Amount :</label>\n                            </div>\n                            <div class=\"col-md-6 col-5\">\n                                <label\n                                    class=\"color\">{{chequePayment.topupAmount |currency : chequePayment.currency}}</label>\n                            </div>\n                        </div>\n                        <hr>\n                        <div class=\"row\">\n                            <div class=\"col-md-6 col-7\">\n                                <label> Cheque Date :</label>\n                            </div>\n                            <div class=\"col-md-6 col-5\">\n                                <label class=\"color\">{{chequePayment.chequeDate | date}}</label>\n                            </div>\n                        </div>\n                        <hr>\n                        <div class=\"row\">\n                            <div class=\"col-md-6 col-7\">\n                                <label> Cheque Issuing Bank :</label>\n                            </div>\n                            <div class=\"col-md-6 col-5\">\n                                <label class=\"color\">{{chequePayment.chequeIssuingBank}}</label>\n                            </div>\n                        </div>\n                        <hr>\n                        <div class=\"row\" *ngIf=\"chequePayment.toBeCollectedOn\">\n                            <div class=\"col-md-6 col-7\">\n                                <label>Collection Date :</label>\n                            </div>\n                            <div class=\"col-md-6 col-5\">\n                                <label class=\"color\">{{chequePayment.collectedOn | date}}</label>\n                            </div>\n                        </div>\n                        <div class=\"row\" *ngIf=\"chequePayment.toBeDeliveredOn\">\n                            <div class=\"col-md-6 col-7\">\n                                <label>Received Date :</label>\n                            </div>\n                            <div class=\"col-md-6 col-5\">\n                                <label class=\"color\">{{chequePayment.receivedOn | date}}</label>\n                            </div>\n                        </div>\n                        <hr>\n                        <div class=\"row\">\n                            <div class=\"col-md-6 col-7\">\n                                <label>To Be Deposited On :</label>\n                            </div>\n                            <div class=\"col-md-6 col-5\">\n                                <label class=\"color\">{{chequePayment.toBeDepositedOn | date}}</label>\n                            </div>\n                        </div>\n                        <hr>\n                    </div>\n                </div>\n                <div class=\"button-section\">\n                    <button class=\"btn btn-default btn-lg\" (click)=\"onPaymentByCheque()\">Back</button>\n                    <button class=\"btn btn-primary btn-lg\" [routerLink]=\"['/dashboard']\">Dashboard</button>\n                </div>\n            </form>\n        </div>\n    </div>\n\n</div>\n\n<!-- Cheque Deposit -->\n<div class=\"container-fluid\" *ngIf=\"iterationName == 'Cheque_Deposit'\">\n    <section class=\"mb-5\">\n        <!--Card-->\n        <div class=\"card card-cascade narrower body-section\">\n            <div\n                class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n                <div>\n                </div>\n                <h4 href=\"\" class=\"white-text mx-3\">Payment by Cheque ( Deposit ) </h4>\n                <div>\n                </div>\n            </div>\n            <div class=\"card-body\">\n                <div class=\"row\">\n                    <div class=\"col-md-3\">\n                        <div class=\"form-group\">\n                            <select class=\"form-control\" [(ngModel)]=\"cRange\" name=\"#cRange\"\n                                (ngModelChange)=\"onSelectRangeChequeToBeDep()\">\n                                <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                                <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\" *ngIf=\"cCustomDate==true\">\n                        <div class=\"form-group\">\n                            <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" placeholder=\"From\" [(ngModel)]=\"cDate\"\n                                (ngModelChange)=\"onDateChangeChequeToBeDep($event)\" class=\"form-control input-vendor\">\n                            <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\" *ngIf=\"cCustomDate==true\">\n                        <div class=\"form-group\">\n                            <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" placeholder=\"To\" [(ngModel)]=\"cDate1\"\n                                (ngModelChange)=\"onDateChangeChequeToBeDep($event)\" class=\"form-control input-vendor\">\n                            <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                        </div>\n                    </div>\n\n                    <div class=\"col-md-2\">\n                        <div class=\"form-group\">\n                            <input placeholder=\"Name\" class=\"form-control input-vendor\" [(ngModel)]=\"customerName\"\n                                (input)=\"onChequeToBeCustomerName()\">\n\n                        </div>\n                    </div>\n                    <div class=\"col-md-3\">\n                        <div class=\"form-group\">\n                            <input placeholder=\"Cheque Number\" class=\"form-control input-vendor\"\n                                [(ngModel)]=\"chequeNumber\" (input)=\"onChequeNumberToBe()\">\n                        </div>\n                    </div>\n                </div>\n                <div class=\"collect1\">\n                    <span class=\"col-md-2 hidetrans\">\n                        <h5 style=\"font-size: x-large;font-weight: bold;color:blue\"> Deposit</h5>\n                        <div class=\"form-group\">\n                            <div class=\"form-check excel\">\n                                <input class=\"form-check-input hide1\" type=\"checkbox\" name=\"pendingChequeDepo\"\n                                    [(ngModel)]=\"pendingChequeDepo\" (click)=\"onPendingDeposited(pendingChequeDepo)\">\n                                <label class=\"form-check-label hidelabel1\" for=\"pendingChequeDepo\"\n                                    style=\"font-size: x-large;font-weight: bold;color:red\">\n                                    Select Pending Transaction\n                                </label>\n\n                                <i class=\"fa fa-cloud-download\"\n                                    style=\"font-size:80px;color:#f57f17;float: right;margin-top: -27px;\"\n                                    (click)=\"downloadChequeDepsit()\"></i>\n                            </div>\n                        </div>\n                    </span>\n                </div>\n                <div class=\"table table-responsive table-striped table-bordered\">\n                    <table class=\"table text-nowrap\">\n                        <thead>\n                            <tr>\n                                <th>Select</th>\n                                <th>Name</th>\n                                <th>Top Up Ref.No</th>\n                                <th>Cheque Date</th>\n                                <th>Cheque Amount </th>\n                                <th>Cheque Issuing Bank</th>\n                                <th>Cheque Number </th>\n                                <th>Collected On / Received On </th>\n                                <th>To Be Deposited On </th>\n                                <th> Deposited On </th>\n                                <th>Status </th>\n\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let c of chequePaymentList  |\n                            paginate: { id: 'listing_pagination10',\n                            itemsPerPage: 15,\n                            currentPage: page10,\n                            totalItems: totalRec } \">\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">&nbsp;</td>\n                                <td\n                                    *ngIf=\"c.chequeStatus!='DEPOSITED' && c.toBeDepositedOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\">\n                                    <div class=\"form-check check1\"\n                                        *ngIf=\"c.toBeCollectedOn!=null && c.collectedOn!=null && c.depositedOn==null || c.toBeDeliveredOn!=null && c.receivedOn!=null && c.depositedOn==null\">\n                                        <input class=\"form-check-input\" type=\"checkbox\" id=cpayval{{selectedChequePay}}\n                                            name=\"selectedChequePay\" [(ngModel)]=\"c.selectedChequePay\"\n                                            (change)=\"onCheckedChequePayment(c)\">\n                                    </div>\n                                </td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && today.setHours(0,0,0,0) == c.toBeDepositedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange\">\n                                    <div class=\"form-check check1\"\n                                        *ngIf=\"c.toBeCollectedOn!=null && c.collectedOn!=null && c.depositedOn==null || c.toBeDeliveredOn!=null && c.receivedOn!=null && c.depositedOn==null\">\n                                        <input class=\"form-check-input\" type=\"checkbox\" id=cpayval{{selectedChequePay}}\n                                            name=\"selectedChequePay\" [(ngModel)]=\"c.selectedChequePay\"\n                                            (change)=\"onCheckedChequePayment(c)\">\n                                    </div>\n                                </td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && today.setHours(0,0,0,0)  > c.toBeDepositedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;;\">\n                                    <div class=\"form-check check1\"\n                                        *ngIf=\"c.toBeCollectedOn!=null && c.collectedOn!=null && c.depositedOn==null || c.toBeDeliveredOn!=null && c.receivedOn!=null && c.depositedOn==null\">\n                                        <input class=\"form-check-input\" type=\"checkbox\" id=cpayval{{selectedChequePay}}\n                                            name=\"selectedChequePay\" [(ngModel)]=\"c.selectedChequePay\"\n                                            (change)=\"onCheckedChequePayment(c)\">\n                                    </div>\n                                </td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && upcoming.setHours(0,0,0,0) >= c.toBeDepositedOn.setHours(0,0,0,0) && c.toBeDepositedOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(248, 248, 114);font-weight: bold;font-size: 16px;;\">\n                                    <div class=\"form-check check1\"\n                                        *ngIf=\"c.toBeCollectedOn!=null && c.collectedOn!=null && c.depositedOn==null || c.toBeDeliveredOn!=null && c.receivedOn!=null && c.depositedOn==null\">\n                                        <input class=\"form-check-input\" type=\"checkbox\" id=cpayval{{selectedChequePay}}\n                                            name=\"selectedChequePay\" [(ngModel)]=\"c.selectedChequePay\"\n                                            (change)=\"onCheckedChequePayment(c)\">\n                                    </div>\n                                </td>\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">{{c.customerName}}</td>\n                                <td\n                                    *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeDepositedOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\">\n                                    {{c.customerName}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && today.setHours(0,0,0,0) == c.toBeDepositedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.customerName}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && today.setHours(0,0,0,0)  > c.toBeDepositedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.customerName}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && upcoming.setHours(0,0,0,0) >= c.toBeDepositedOn.setHours(0,0,0,0) && c.toBeDepositedOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(248, 248, 114);font-weight: bold;font-size: 16px;\">\n                                    {{c.customerName}}</td>\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">{{c.topupRefNo}}</td>\n                                <td\n                                    *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeDepositedOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\">\n                                    {{c.topupRefNo}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && today.setHours(0,0,0,0) == c.toBeDepositedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.topupRefNo}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && today.setHours(0,0,0,0)  > c.toBeDepositedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.topupRefNo}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && upcoming.setHours(0,0,0,0) >= c.toBeDepositedOn.setHours(0,0,0,0) && c.toBeDepositedOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(248, 248, 114);font-weight: bold;font-size: 16px;\">\n                                    {{c.topupRefNo}}</td>\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">{{c.chequeDate | date}}</td>\n                                <td\n                                    *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeDepositedOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\">\n                                    {{c.chequeDate | date}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && today.setHours(0,0,0,0) == c.toBeDepositedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeDate | date}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && today.setHours(0,0,0,0)  > c.toBeDepositedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeDate | date}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && upcoming.setHours(0,0,0,0) >= c.toBeDepositedOn.setHours(0,0,0,0) && c.toBeDepositedOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(248, 248, 114);font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeDate | date}}</td>\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeAmount | currency : c.currency}}</td>\n                                <td\n                                    *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeDepositedOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\">\n                                    {{c.chequeAmount | currency : c.currency}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && today.setHours(0,0,0,0) == c.toBeDepositedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeAmount | currency : c.currency}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && today.setHours(0,0,0,0)  > c.toBeDepositedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeAmount | currency : c.currency}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && upcoming.setHours(0,0,0,0) >= c.toBeDepositedOn.setHours(0,0,0,0) && c.toBeDepositedOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(248, 248, 114);font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeAmount | currency : c.currency}}</td>\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">{{c.chequeIssuingBank}}</td>\n                                <td\n                                    *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeDepositedOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\">\n                                    {{c.chequeIssuingBank}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && today.setHours(0,0,0,0) == c.toBeDepositedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeIssuingBank}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && today.setHours(0,0,0,0)  > c.toBeDepositedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeIssuingBank}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && upcoming.setHours(0,0,0,0) >= c.toBeDepositedOn.setHours(0,0,0,0) && c.toBeDepositedOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(248, 248, 114);font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeIssuingBank}}</td>\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">{{c.chequeNumber}}</td>\n                                <td\n                                    *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeDepositedOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\">\n                                    {{c.chequeNumber}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && today.setHours(0,0,0,0) == c.toBeDepositedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeNumber}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && today.setHours(0,0,0,0)  > c.toBeDepositedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeNumber}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && upcoming.setHours(0,0,0,0) >= c.toBeDepositedOn.setHours(0,0,0,0) && c.toBeDepositedOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(248, 248, 114);font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeNumber}}</td>\n\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED' && c.collectedOn!=null\"\n                                    style=\"background-color: lightgray;\" style=\"font-weight: bold;font-size: 16px;\">\n                                    {{c.collectedOn | date}}</td>\n                                <td\n                                    *ngIf=\"c.chequeStatus!='DEPOSITED' && c.collectedOn!=null && c.toBeDepositedOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\">\n                                    {{c.collectedOn | date}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.collectedOn!=null && today.setHours(0,0,0,0) == c.toBeDepositedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.collectedOn | date}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.collectedOn!=null && today.setHours(0,0,0,0)  > c.toBeDepositedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.collectedOn | date}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.collectedOn!=null && upcoming.setHours(0,0,0,0) >= c.toBeDepositedOn.setHours(0,0,0,0) && c.toBeDepositedOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(248, 248, 114);font-weight: bold;font-size: 16px;\">\n                                    {{c.collectedOn | date}}</td>\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED' && c.receivedOn!=null\"\n                                    style=\"background-color: lightgray;\" style=\"font-weight: bold;font-size: 16px;\">\n                                    {{c.receivedOn | date}}</td>\n                                <td\n                                    *ngIf=\"c.chequeStatus!='DEPOSITED' && c.receivedOn!=null && c.toBeDepositedOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\">\n                                    {{c.receivedOn | date}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.receivedOn!=null && today.setHours(0,0,0,0) == c.toBeDepositedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.receivedOn | date}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.receivedOn!=null && today.setHours(0,0,0,0)  > c.toBeDepositedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.receivedOn | date}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && c.receivedOn!=null && upcoming.setHours(0,0,0,0) >= c.toBeDepositedOn.setHours(0,0,0,0) && c.toBeDepositedOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(248, 248, 114);font-weight: bold;font-size: 16px;\">\n                                    {{c.receivedOn | date}}</td>\n\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">{{c.toBeDepositedOn | date}}</td>\n                                <td\n                                    *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeDepositedOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\">\n                                    {{c.toBeDepositedOn | date}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && today.setHours(0,0,0,0) == c.toBeDepositedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.toBeDepositedOn | date}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && today.setHours(0,0,0,0)  > c.toBeDepositedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.toBeDepositedOn | date}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && upcoming.setHours(0,0,0,0) >= c.toBeDepositedOn.setHours(0,0,0,0) && c.toBeDepositedOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(248, 248, 114);font-weight: bold;font-size: 16px;\">\n                                    {{c.toBeDepositedOn | date}}</td>\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">{{c.depositedOn | date}}</td>\n                                <td\n                                    *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeDepositedOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\">\n                                    {{c.depositedOn | date}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && today.setHours(0,0,0,0) == c.toBeDepositedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.depositedOn | date}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && today.setHours(0,0,0,0)  > c.toBeDepositedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.depositedOn | date}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && upcoming.setHours(0,0,0,0) >= c.toBeDepositedOn.setHours(0,0,0,0) && c.toBeDepositedOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(248, 248, 114);font-weight: bold;font-size: 16px;\">\n                                    {{c.depositedOn | date}}</td>\n\n                                <td *ngIf=\"c.chequeStatus=='DEPOSITED'\" style=\"background-color: lightgray;\"\n                                    style=\"font-weight: bold;font-size: 16px;\">{{c.chequeStatus}}</td>\n                                <td\n                                    *ngIf=\"c.chequeStatus!='DEPOSITED'&& c.toBeDepositedOn.setHours(0,0,0,0)>upcoming.setHours(0,0,0,0)\">\n                                    {{c.chequeStatus}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && today.setHours(0,0,0,0) == c.toBeDepositedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: orange;color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeStatus}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && today.setHours(0,0,0,0)  > c.toBeDepositedOn.setHours(0,0,0,0) \"\n                                    style=\"background-color: rgb(243, 56, 56);color:#ffff;font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeStatus}}</td>\n                                <td *ngIf=\"c.chequeStatus!='DEPOSITED' && upcoming.setHours(0,0,0,0) >= c.toBeDepositedOn.setHours(0,0,0,0) && c.toBeDepositedOn.setHours(0,0,0,0) > today.setHours(0,0,0,0) \"\n                                    style=\"background-color:rgb(248, 248, 114);font-weight: bold;font-size: 16px;\">\n                                    {{c.chequeStatus}}</td>\n                            </tr>\n                            <tr *ngIf=\"chequePaymentList && chequePaymentList.length==0\">\n                                <td colspan=\"13\">\n                                    <h4 style=\"color: rgba(244, 67, 54, 0.7) ;\">No Data Found To Display.....</h4>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div class=\"d-flex justify-content-between\">\n                    <div class=\"wrap\">\n                        <pagination-controls id=\"listing_pagination10\" maxSize=\"5\" directionLinks=\"true\"\n                            responsive=\"true\" (pageChange)=\"page10 = $event\">\n                        </pagination-controls>\n                    </div>\n                </div>\n                <div class=\"button-section\">\n                    <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                    <button class=\"btn btn-dark-green btn-lg\" (click)=\"onProceedChequeDeposit()\" data-toggle=\"modal\"\n                        data-target=\"#exampleModalCenter\">Proceed</button>\n                </div>\n\n\n            </div>\n\n            <!-- Modal -->\n            <div class=\"modal fade\" id=\"exampleModalCenter\" tabindex=\"-1\" role=\"dialog\"\n                aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\" data-backdrop=\"false\">\n                <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\n                    <div class=\"modal-content text-center\">\n                        <div class=\"modal-header\">\n                            <h4 class=\"modal-title\" style=\"font-weight: bold;\">Payment By Cheque Deposit </h4>\n                            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"onBack()\"\n                                aria-label=\"Close\">\n                                <span aria-hidden=\"true\">&times;</span>\n                            </button>\n                        </div>\n                        <div class=\"modal-body\">\n                            <div class=\"row\">\n                                <label id=\"importdeposit\">Deposited On </label>\n                                <div class=\"col-sm-12\">\n                                    <div class=\"form-group\">\n                                        <input [owlDateTime]=\"cd\" [owlDateTimeTrigger]=\"cd\"\n                                            class=\"form-control input-vendor\" [(ngModel)]=\"depositedOn\"\n                                            name=\"depositedOn\">\n                                        <owl-date-time #cd pickerType=\"calendar\"></owl-date-time>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"modal-footer\">\n                            <button type=\"button\" class=\"btn btn-default btn-lg\" (click)=\"onBack()\"\n                                data-dismiss=\"modal\">BACK</button>\n                            <button type=\"button\" class=\"btn btn-success btn-lg\"\n                                (click)=\"onConformMultipleChequeDepositSubmit()\" data-dismiss=\"modal\">\n                                PROCEED</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n\n    </section>\n</div>\n\n<!--  Cheque Payment Report  -->\n<div class=\"container-fluid\" *ngIf=\"iterationName == 'Cheque_Payment_Report'\">\n    <section class=\"mb-5\">\n        <!--Card-->\n        <div class=\"card card-cascade narrower body-section\">\n            <div\n                class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n                <div>\n                </div>\n                <h4 href=\"\" class=\"white-text mx-3\">Payment by Cheque ( Report )</h4>\n                <div>\n                </div>\n            </div>\n            <div class=\"card-body\">\n                <div class=\"row\">\n                    <div class=\"col-md-3\">\n                        <div class=\"form-group\">\n                            <select class=\"form-control\" [(ngModel)]=\"cRange\" name=\"#cRange\"\n                                (ngModelChange)=\"onSelectRangeApprCheque()\">\n                                <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                                <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\" *ngIf=\"cCustomDate==true\">\n                        <div class=\"form-group\">\n                            <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" placeholder=\"From\" [(ngModel)]=\"cDate\"\n                                (ngModelChange)=\"onDateChangeApprCheque($event)\" class=\"form-control input-vendor\">\n                            <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\" *ngIf=\"cCustomDate==true\">\n                        <div class=\"form-group\">\n                            <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" placeholder=\"To\" [(ngModel)]=\"cDate1\"\n                                (ngModelChange)=\"onDateChangeApprCheque($event)\" class=\"form-control input-vendor\">\n                            <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <div class=\"form-group\">\n                            <input placeholder=\"Name\" class=\"form-control input-vendor\" [(ngModel)]=\"customerName\"\n                                (input)=\"onApprChequeCustomerName()\">\n\n                        </div>\n                    </div>\n                    <div class=\"col-md-3\">\n                        <div class=\"form-group\">\n                            <input placeholder=\"Cheque Number\" class=\"form-control input-vendor\"\n                                [(ngModel)]=\"chequeNumber\" (input)=\"onApprChequeChequeNumber()\">\n                        </div>\n                    </div>\n                </div>\n                <div class=\"table table-responsive table-striped table-bordered\">\n                    <table class=\"table text-nowrap\">\n                        <thead>\n                            <tr>\n                                <th>Customer Id</th>\n                                <th>Name</th>\n                                <th>Top Up Ref.No</th>\n                                <th>Cheque Date</th>\n                                <th>Cheque Amount </th>\n                                <th>Cheque Issuing Bank</th>\n                                <th>Cheque No </th>\n                                <th>Deposited On </th>\n                                <th>Clearing Date</th>\n                                <th>Status</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let c of chequePaymentList |\n                            paginate: { id: 'listing_pagination11',\n                            itemsPerPage: 15,\n                            currentPage: page11,\n                            totalItems: totalRec }\">\n                                <td>{{c.customerId}}</td>\n                                <td>{{c.customerName}}</td>\n                                <td>{{c.topupRefNo}}</td>\n                                <td>{{c.chequeDate | date}}</td>\n                                <td>{{c.chequeAmount | currency : c.currency }}</td>\n                                <td>{{c.chequeIssuingBank}}</td>\n                                <td>{{c.chequeNumber}}</td>\n                                <td>{{c.depositedOn | date}}</td>\n                                <td>{{c.clearingDate | date}}</td>\n                                <td *ngIf=\"c.status == 'PENDING'\" style=\"color:red;font-weight: bold;\">{{c.status}}</td>\n                                <td *ngIf=\"c.status == 'APPROVED'\" style=\"color:green;font-weight: bold;\">{{c.status}}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td colspan=\"1\">\n                                    <h5 style=\"color: black;font-weight: bold;\"> Total </h5>\n                                </td>\n                                <td colspan=\"3\"></td>\n\n                                <td colspan=\"1\">\n                                    <h5 style=\"color: red;font-weight: bold;\">{{totalChequeAmount | currency : 'INR' }}\n                                    </h5>\n                                </td>\n                                <td colspan=\"5\"></td>\n\n                            </tr>\n\n                            <tr *ngIf=\"chequePaymentList && chequePaymentList.length==0\">\n                                <td colspan=\"13\">\n                                    <h4 style=\"color: rgba(244, 67, 54, 0.7) ;\">No Data Found To Display.....</h4>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div class=\"d-flex justify-content-between\">\n                    <div class=\"wrap\">\n                        <pagination-controls id=\"listing_pagination11\" maxSize=\"5\" directionLinks=\"true\"\n                            responsive=\"true\" (pageChange)=\"page11 = $event\">\n                        </pagination-controls>\n                    </div>\n                </div>\n                <div class=\"button-section\">\n                    <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                </div>\n            </div>\n        </div>\n\n    </section>\n</div>\n\n\n<!-- Bank Statement upload -->\n<div class=\"container-fluid\" *ngIf=\"iterationName =='STATEMENT_UPLOAD'\">\n\n    <div class=\"card card-cascade narrower body-section\">\n        <div\n            class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n            <div>\n            </div>\n            <h4 href=\"\" class=\"white-text mx-3\">Bank Statement Upload </h4>\n            <div>\n            </div>\n        </div>\n        <div class=\"card-body\">\n            <div *ngIf=\"currentFile\" class=\"progress\" style=\"height: 40px;\">\n                <div class=\"progress-bar progress-bar-info progress-bar-striped progress-bar-animated\"\n                    role=\"progressbar\" attr.aria-valuenow=\"{{ progress }}\" aria-valuemin=\"0\" aria-valuemax=\"100\"\n                    [ngStyle]=\"{width: progress + '%' }\">\n                    {{ progress }}%\n                </div>\n            </div>\n            <br>\n            <div class=\"p-3 mb-2 bg-info text-white\" *ngIf=\"message\">{{message}}</div>\n            <div class=\"p-3 mb-2 btn-danger text-white\" *ngIf=\"errmessage\">{{errmessage}}</div>\n            <div class=\"row\">\n                <div class=\"col-md-2\"></div>\n                <div class=\"col-md-3\">\n                    <button class=\"btn btn-default btn-block  btn-lg\">\n                        <input type=\"file\" (change)=\"selectFile($event)\" />\n                    </button>\n                </div>\n                <div class=\"col-md-3\">\n                    <button type=\"button\" class=\"btn btn-success btn-block btn-lg upload\" [disabled]=\"!selectedFiles\"\n                        (click)=\"upload()\">\n                        Upload\n                    </button>\n                </div>\n                <div class=\"col-md-3\">\n                    <button class=\"btn btn-info btn-block upload  btn-lg\" (click)=\"onBackClick()\">Back</button>\n                </div>\n            </div>\n        </div>\n        <br>\n        <div class=\"row\">\n            <div class=\"col-sm-4\"></div>\n            <div class=\"col-sm-4\">\n                <h2>\n                    <a style=\"color: blue;\" (click)=\"getAllBankStatement()\">Bank Statement List</a>\n                </h2>\n\n\n            </div>\n            <div class=\"col-sm-4\"></div>\n        </div>\n\n\n\n    </div>\n</div>\n\n\n\n<div class=\"container-fluid\" *ngIf=\"iterationName == 'category'\">\n\n    <div class=\"card card-cascade narrower body-section\">\n        <div\n            class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n            <div>\n            </div>\n            <h4 href=\"\" class=\"white-text mx-3\">Bank Statement Category</h4>\n            <div>\n            </div>\n        </div>\n        <div class=\"card-body\">\n            <div class=\"row dummy\">\n                <div class=\"col-md-3\">\n                    <div class=\"form-group\">\n                        <select class=\"form-control\" [(ngModel)]=\"bRange\" name=\"#bRange\"\n                            (ngModelChange)=\"onSelectRangeBankStmt()\">\n                            <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                            <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n                        </select>\n                    </div>\n                </div>\n                <div class=\"col-md-2\" *ngIf=\"bCustomDate==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" placeholder=\"From\" [(ngModel)]=\"bDate\"\n                            (ngModelChange)=\"onDateChangeBank($event)\" class=\"form-control\">\n                        <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n                <div class=\"col-md-2\" *ngIf=\"bCustomDate==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" placeholder=\"To\" [(ngModel)]=\"bDate1\"\n                            (ngModelChange)=\"onDateChangeBank($event)\" class=\"form-control\">\n                        <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <select class=\"form-control\" [(ngModel)]=\"type\" name=\"#type\" (ngModelChange)=\"onCreditDebit()\">\n                        <option [ngValue]=\"null\">Select Type</option>\n                        <option>Credit Only</option>\n                        <option>Debit Only</option>\n                    </select>\n                </div>\n\n                <div class=\"col-md-2 hidetrans\">\n                    <div class=\"form-group\">\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input hide1\" type=\"checkbox\" name=\"hideTransaction\"\n                                [(ngModel)]=\"hideTransaction\" (click)=\"onHideMatchedTransaction(hideTransaction)\">\n                            <label class=\"form-check-label hidelabel\" for=\"hideTransaction\">\n                                Hide Matched Transaction\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n\n            <h5 class=\"table-head\" style=\"font-size: x-large;font-weight: bold;color: red;\">Bank Statement</h5>\n            <div class=\"table table-responsive table-striped table-bordered\">\n                <table class=\"table  text-nowrap\">\n                    <thead>\n                        <tr>\n                            <th>Select</th>\n                            <th>Date</th>\n                            <th>Particulars</th>\n                            <th>Cr</th>\n                            <th>Db</th>\n                            <th>Balance </th>\n                            <th>Status</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let b of bankStatementList | paginate: { id: 'listing_pagination6',\n                        itemsPerPage: 5,\n                        currentPage: page6,\n                        totalItems: totalRec }\">\n                            <td *ngIf=\"b.categoryName==null\">\n                                <div class=\"form-check\">\n                                    <input class=\"form-check-input\" type=\"checkbox\" id=idval{{b}}\n                                        name=\"selectedBankStmt\" [(ngModel)]=\"b.selectedBankStmt\">\n                                </div>\n                            </td>\n                            <td *ngIf=\"b.categoryName!=null\">&nbsp;</td>\n                            <td>{{b.createdDate | date}}</td>\n                            <td>{{b.particulars}}</td>\n                            <td>{{b.creditAmount | currency : 'INR'}}</td>\n                            <td *ngIf=\"b.debitAmount!=null\">\n                                {{b.debitAmount | currency : 'INR'}}</td>\n                            <td *ngIf=\"b.debitAmount==null\">-</td>\n                            <td>{{b.balance | currency : 'INR'}}</td>\n                            <td *ngIf=\"b.status==null || b.status == 'PENDING'\">UN-MATCHED</td>\n                            <td *ngIf=\"b.status!=null && b.status == 'APPROVED'\">MATCHED</td>\n                        </tr>\n                        <tr *ngIf=\"bankStatementList && bankStatementList.length ==0\">\n                            <td colspan=\"11\" style=\"color: rgba(244, 67, 54, 0.7) ;\">\n                                <h4>No Data Found to Display.....</h4>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"d-flex justify-content-between\">\n                <div class=\"wrap\">\n                    <pagination-controls id=\"listing_pagination6\" maxSize=\"5\" directionLinks=\"true\" responsive=\"true\"\n                        (pageChange)=\"page6 = $event\">\n                    </pagination-controls>\n                </div>\n            </div>\n\n            <div class=\"col-md-2\">\n                <div class=\"form-group\">\n                    <select class=\"form-control\" [(ngModel)]=\"category\" name=\"#category\"\n                        (ngModelChange)=\"onCategory(c)\">\n                        <option [ngValue]=\"null\">Select Category</option>\n                        <option *ngFor=\"let c of categoryList\" [(ngValue)]=\"c\">{{c.paramName}}</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-default btn-lg\" (click)=\"uploadBankStatement()\"\n                    data-dismiss=\"modal\">BACK</button>\n                <button type=\"button\" class=\"btn btn-success btn-lg\" (click)=\"onSaveCatogory()\" data-dismiss=\"modal\">\n                    Save</button>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n<!-- Aggregator Settlement upload -->\n<div class=\"container-fluid\" *ngIf=\"iterationName =='SETTLEMENT_UPLOAD'\">\n\n    <div class=\"card card-cascade narrower body-section\">\n        <div\n            class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n            <div>\n            </div>\n            <h4 href=\"\" class=\"white-text mx-3\">Aggregator Settlement Upload </h4>\n            <div>\n            </div>\n        </div>\n        <div class=\"card-body\">\n            <div *ngIf=\"currentFile\" class=\"progress\" style=\"height: 40px;\">\n                <div class=\"progress-bar progress-bar-info progress-bar-striped progress-bar-animated\"\n                    role=\"progressbar\" attr.aria-valuenow=\"{{ progress }}\" aria-valuemin=\"0\" aria-valuemax=\"100\"\n                    [ngStyle]=\"{width: progress + '%' }\">\n                    {{ progress }}%\n                </div>\n            </div>\n            <br>\n            <div class=\"p-3 mb-2 bg-info text-white\" *ngIf=\"message\">{{message}}</div>\n            <div class=\"row\">\n                <div class=\"col-md-2\"></div>\n                <div class=\"col-md-3\">\n                    <button class=\"btn btn-default btn-block btn-lg\">\n                        <input type=\"file\" (change)=\"selectFile1($event)\" />\n                    </button>\n                </div>\n                <div class=\"col-md-3\">\n                    <button type=\"button\" class=\"btn btn-success btn-block upload\" [disabled]=\"!selectedFiles\"\n                        (click)=\"uploadSettlement()\">\n                        Upload\n                    </button>\n                </div>\n                <div class=\"col-md-3\">\n                    <button class=\"btn btn-info btn-block upload\" (click)=\"onBackClick()\">Back</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<!-- Reconciliation -->\n<div class=\"container-fluid\" *ngIf=\"iterationName == 'RECONCILIATION'\">\n    <div class=\"card card-cascade narrower body-section\">\n        <div\n            class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n            <div>\n            </div>\n            <h4 href=\"\" class=\"white-text mx-3\">Reconciliation </h4>\n            <div>\n            </div>\n        </div>\n        <div class=\"card-body banrecon\">\n            <div class=\"row dummy\">\n                <div class=\"col-md-2\">\n                    <div class=\"form-group\">\n                        <select class=\"form-control\" [(ngModel)]=\"select\" name=\"#select\" (ngModelChange)=\"onSelect()\">\n                            <option [ngValue]=\"null\">Select</option>\n                            <option *ngFor=\"let s of selectOptions\" [value]=\"s\">{{s}}</option>\n                        </select>\n                    </div>\n                </div>\n                <div class=\"col-md-2\" *ngIf=\"customDate==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" placeholder=\"From\" [(ngModel)]=\"date\"\n                            (ngModelChange)=\"onRecDateChange($event)\" class=\"form-control input-vendor\">\n                        <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n                <div class=\"col-md-2\" *ngIf=\"customDate==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" placeholder=\"To\" [(ngModel)]=\"date1\"\n                            (ngModelChange)=\"onRecDateChange($event)\" class=\"form-control input-vendor\">\n                        <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n                <div class=\"col-md-2\" *ngIf=\"select == 'Year Wise'\">\n                    <div class=\"form-group\">\n                        <select class=\"form-control\" [(ngModel)]=\"year\" name=\"#year\" (ngModelChange)=\"onYearWise()\">\n                            <option [ngValue]=\"null\">Select Year</option>\n                            <option *ngFor=\"let s of yearList\" [value]=\"s\">{{s}}</option>\n                        </select>\n                    </div>\n                </div>\n\n                <div class=\"col-md-2\" *ngIf=\"select == 'Quarter Wise'\">\n                    <div class=\"form-group\">\n                        <select class=\"form-control\" [(ngModel)]=\"quater\" name=\"#quater\"\n                            (ngModelChange)=\"onQuaterWise()\">\n                            <option [ngValue]=\"null\">Select Quarter</option>\n                            <option *ngFor=\"let s of quaterList\" [value]=\"s\">{{s}}</option>\n                        </select>\n                    </div>\n                </div>\n\n                <div class=\"col-md-2\" *ngIf=\"select == 'Month Wise'\">\n                    <div class=\"form-group\">\n                        <select class=\"form-control\" [(ngModel)]=\"month\" name=\"#month\" (ngModelChange)=\"onMonthWise()\">\n                            <option [ngValue]=\"null\">Select Month</option>\n                            <option *ngFor=\"let s of monthList\" [value]=\"s\">{{s}}</option>\n                        </select>\n                    </div>\n                </div>\n\n                <div class=\"col-md-2\">\n                    <div class=\"form-group\">\n                        <select class=\"form-control\" [(ngModel)]=\"status\" name=\"#status\" (ngModelChange)=\"onStatus()\">\n                            <option [ngValue]=\"null\">Select Status</option>\n                            <option *ngFor=\"let s of statusList\" [value]=\"s\">{{s}}</option>\n                        </select>\n                    </div>\n                </div>\n                <div class=\"col-md-2\">\n                    <div class=\"form-group\">\n                        <select class=\"form-control\" [(ngModel)]=\"paymentType\" name=\"#paymentType\"\n                            (ngModelChange)=\"onPaymentType()\">\n                            <option [ngValue]=\"null\">Select Payment Mode</option>\n                            <option *ngFor=\"let s of paymentTypeList\" [value]=\"s\">{{s}}</option>\n                        </select>\n                    </div>\n                </div>\n\n            </div>\n\n            <div class=\"button-section approve\">\n                <label>Total Amount :\n                    &nbsp;&nbsp; <b class=\"head\"\n                        style=\"color: red;font-weight: bold;\">{{transactionTotalAmount | currency : 'INR'}}</b>\n                </label>\n            </div>\n            <h5 class=\"table-head\" style=\"font-size: x-large;font-weight: bold;color:red\">Transaction</h5>\n\n            <div class=\"table table-responsive table-striped table-bordered\">\n                <table class=\"table text-nowrap\">\n                    <thead>\n                        <tr>\n                            <th>Customer Id</th>\n                            <th>Name</th>\n                            <th>Top Up Ref.No</th>\n                            <th>Topup Amount</th>\n                            <th>Payment Mode</th>\n                            <th>Transaction Date</th>\n                            <th>Status</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let p of transaction | \n                        paginate: { id: 'listing_pagination',\n                        itemsPerPage: 10,\n                        currentPage: page,\n                        totalItems: totalRec }\n                        \">\n\n                            <td>{{p.customerId}}</td>\n                            <td>{{p.customerName}}</td>\n                            <td>{{p.topupRefNo}}</td>\n                            <td>{{p.topupAmount | currency :'INR'}}</td>\n                            <td>{{p.paymentType}}</td>\n                            <td>{{p.approvedDate | date}}</td>\n                            <td>{{p.status}}</td>\n                        </tr>\n                        <tr *ngIf=\"transaction && transaction.length ==0\">\n                            <td colspan=\"10\" style=\"color: rgba(244, 67, 54, 0.7) ;\">\n                                <h4>No Data Found to Display.....</h4>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"d-flex justify-content-between\">\n                <div class=\"wrap\">\n                    <pagination-controls id=\"listing_pagination\" maxSize=\"5\" directionLinks=\"true\" responsive=\"true\"\n                        (pageChange)=\"page= $event\">\n                    </pagination-controls>\n                </div>\n            </div>\n            <br>\n            <div class=\"card\">\n                <div class=\"card-body\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-1\"></div>\n                        <div class=\"col-sm-2\" id=\"importhead\">\n                            Opening Balance <p id=\"importbal\">{{openingBalance | currency : 'INR'}}</p>\n                        </div>\n                        <div class=\"col-sm-2\" id=\"importhead\">\n                            Trade Receipt <p id=\"importbal\">{{totalTradeCredit | currency : 'INR'}}</p>\n                        </div>\n                        <div class=\"col-sm-2\" id=\"importhead\">\n                            Non Trade Receipt <p id=\"importbal\">{{totalOtherCredit | currency : 'INR'}}</p>\n                        </div>\n                        <div class=\"col-sm-2\" id=\"importhead\">\n                            Debit <p id=\"importbal\">{{otherDb | currency : 'INR'}}</p>\n                        </div>\n                        <div class=\"col-sm-2\" id=\"importhead\">\n                            Closing Balance<p id=\"importbal\">{{closingBalance | currency : 'INR'}}</p>\n                        </div>\n                        <div class=\"col-sm-1\"></div>\n                    </div>\n                </div>\n            </div>\n            <br>\n            <div class=\"card\">\n                <div class=\"card-body\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-2\"></div>\n                        <div class=\"col-sm-2\" id=\"importhead\">\n                            Bank Name <p id=\"importbal\">{{accountDetails.bankName}}</p>\n                        </div>\n                        <div class=\"col-sm-4\" id=\"importhead\">\n                            Branch Name <p id=\"importbal\">{{accountDetails.branchName}}</p>\n                        </div>\n                        <div class=\"col-sm-2\" id=\"importhead\">\n                            A/c No <p id=\"importbal\">{{accountDetails.accountNumber}}</p>\n                        </div>\n                        <div class=\"col-sm-2\"></div>\n                    </div>\n                </div>\n            </div>\n            <hr>\n\n            <h5 class=\"table-head\" style=\"font-size: x-large;font-weight: bold;color:red\">Bank Statement</h5>\n            <div class=\"table table-responsive table-striped table-bordered\">\n                <table class=\"table text-nowrap\">\n                    <thead>\n                        <tr>\n\n                            <th>Date</th>\n                            <th>Particulars</th>\n                            <th>Cr</th>\n                            <th>Db</th>\n                            <th>Balance </th>\n                            <th>Status</th>\n                            <th>Category</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let b of bankStatementList |\n                        paginate: { id: 'listing_pagination1',\n                        itemsPerPage: 10,\n                        currentPage: page1,\n                        totalItems: totalRec }\n                        \">\n\n                            <td>{{b.createdDate | date}}</td>\n                            <td>{{b.particulars}}</td>\n                            <td>{{b.creditAmount | currency : 'INR'}}</td>\n                            <td *ngIf=\"b.debitAmount!=null\">\n                                {{b.debitAmount | currency : 'INR'}}</td>\n                            <td *ngIf=\"b.debitAmount==null\">-</td>\n                            <td>{{b.balance | currency : 'INR'}}</td>\n                            <td *ngIf=\"b.status==null || b.status == 'PENDING'\">UN-MATCHED</td>\n                            <td *ngIf=\"b.status!=null && b.status == 'APPROVED'\">MATCHED</td>\n                            <td>{{b.categoryName}}</td>\n                        </tr>\n                        <tr *ngIf=\"bankStatementList && bankStatementList.length ==0\">\n                            <td colspan=\"10\" style=\"color: rgba(244, 67, 54, 0.7) ;\">\n                                <h4>No Data Found to Display.....</h4>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"d-flex justify-content-between\">\n                <div class=\"wrap\">\n                    <pagination-controls id=\"listing_pagination1\" maxSize=\"5\" directionLinks=\"true\" responsive=\"true\"\n                        (pageChange)=\"page1= $event\">\n                    </pagination-controls>\n                </div>\n            </div>\n            <div class=\"button-section\">\n                <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n            </div>\n        </div>\n    </div>\n</div>\n\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/content-management/content-management.component.html":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/components/content-management/content-management.component.html ***!
  \***********************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n<app-navbar></app-navbar>\n<div class=\"container-fluid register\">\n\t<div class=\"row\">\n\t\t<div class=\"col-md-12\">\n\t\t\t<ul class=\"nav nav-tabs nav-justified\" id=\"myTab\" role=\"tablist\">\n\t\t\t\t<li class=\"nav-item\">\n\t\t\t\t\t<a class=\"nav-link active\" id=\"product-tab\" data-toggle=\"tab\" href=\"#product\" role=\"tab\"\n\t\t\t\t\t\taria-controls=\"product\" aria-selected=\"true\"> Product Management</a>\n\t\t\t\t</li>\n\t\t\t\t<li class=\"nav-item\">\n\t\t\t\t\t<a class=\"nav-link\" id=\"equipment-tab\" data-toggle=\"tab\" href=\"#equipment\" role=\"tab\"\n\t\t\t\t\t\taria-controls=\"equipment\" aria-selected=\"false\"> Equipment Management</a>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t\t<br>\n\t\t\t<div *ngIf=\"iteration == 'initial'\">\n\t\t\t\t<div class=\"tab-content\">\n\t\t\t\t\t<div class=\"tab-pane fade show active text-align form-new\" id=\"product\" role=\"tabpanel\"\n\t\t\t\t\t\taria-labelledby=\"product-tab\">\n\t\t\t\t\t\t<br>\n\n\t\t\t\t\t\t<section class=\"mb-5\">\n\t\t\t\t\t\t\t<!--Card-->\n\t\t\t\t\t\t\t<div class=\"card card-cascade narrower body-section\">\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclass=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<h4 href=\"\" class=\"white-text mx-3\">Products </h4>\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"card-body\">\n\t\t\t\t\t\t\t\t\t<div class=\"table table-responsive table-striped table-bordered\">\n\t\t\t\t\t\t\t\t\t\t<table class=\"table text-nowrap\">\n\t\t\t\t\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Product Name</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Manufacture Year</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Created Date</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Product Unit</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Product Category</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Action</th>\n\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t\t\t<tr *ngFor=\"let p of products |\n\t\t\t\t\t\t\t\t\t\t\t\tpaginate: { id: 'listing_pagination',\n\t\t\t\t\t\t\t\t\t\t\t\titemsPerPage: 5,\n\t\t\t\t\t\t\t\t\t\t\t\tcurrentPage: page,\n\t\t\t\t\t\t\t\t\t\t\t\ttotalItems: totalRec }\n\t\t\t\t\t\t\t\t\t\t\t\t\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{{p.productName}}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{{p.manufactureYear}}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{{p.createdDate|date: \"dd/MMM/yyyy\"}}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{{p.productUnit.paramName}}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{{p.productCategory.categoryName}}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td style=\"width: 5%; padding: 0 2.75rem;\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<table style=\"width:100%\" class=\"innertable\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<tr style=\"background-color: unset;\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td style=\"padding: unset; width: 10%;border: unset;\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<img src=\"assets/Edit_icon.png\" width=\"30\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theight=\"25\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"editProduct(p.productId)\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>&nbsp;&nbsp;&nbsp;&nbsp;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td style=\"padding: unset; width: 10%;border: unset;\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<img src=\"assets/delete_icon.png\" width=\"30\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theight=\"25\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"openModalWithClass(template)\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ng-template #template>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"modal-header\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h4 class=\"modal-title\">Product Management </h4>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" class=\"close pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taria-label=\"Close\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"modalRef.hide()\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span aria-hidden=\"true\">×</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"modal-body\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h5>Are You Sure You Want to Delete the\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRecord..?</h5>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"modal-footer\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-default\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"modalRef.hide()\">Cancel</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-danger\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"deleteProduct(p.productId)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"modalRef.hide()\">Yes</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ng-template>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<br>\n\t\t\t\t\t\t\t\t\t<div class=\"d-flex justify-content-between\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"wrap\">\n\t\t\t\t\t\t\t\t\t\t\t<pagination-controls id=\"listing_pagination\" maxSize=\"4\"\n\t\t\t\t\t\t\t\t\t\t\t\tdirectionLinks=\"true\" responsive=\"true\" (pageChange)=\"page = $event\">\n\t\t\t\t\t\t\t\t\t\t\t</pagination-controls>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"button-section\">\n\t\t\t\t\t\t\t\t\t\t<button [routerLink]=\"['/dashboard']\"\n\t\t\t\t\t\t\t\t\t\t\tclass=\"btn btn-default btn-lg\">Back</button>\n\t\t\t\t\t\t\t\t\t\t<button (click)=\"addProduct()\" class=\"btn btn-secondary btn-lg\">Add\n\t\t\t\t\t\t\t\t\t\t\tProduct</button>\n\t\t\t\t\t\t\t\t\t\t<button [routerLink]=\"['/dashboard']\"\n\t\t\t\t\t\t\t\t\t\t\tclass=\"btn btn-primary btn-lg\">Dashboard</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"tab-pane fade show text-align form-new\" id=\"equipment\" role=\"tabpanel\"\n\t\t\t\t\t\taria-labelledby=\"equipment-tab\">\n\t\t\t\t\t\t<br>\n\t\t\t\t\t\t<section class=\"mb-5\">\n\t\t\t\t\t\t\t<!--Card-->\n\t\t\t\t\t\t\t<div class=\"card card-cascade narrower body-section\">\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclass=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<h4 href=\"\" class=\"white-text mx-3\">Equipments </h4>\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"card-body\">\n\t\t\t\t\t\t\t\t\t<div class=\"table table-responsive table-striped table-bordered\">\n\t\t\t\t\t\t\t\t\t\t<table class=\"table text-nowrap\">\n\t\t\t\t\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Equipment Maker</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Equipment Name</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Unique Equipment Id</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Description</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Action</th>\n\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t\t\t<tr *ngFor=\"let e of equipments | \n\t\t\t\t\t\t\t\t\t\t\t\t\tpaginate: { id: 'listing_pagination1',\n\t\t\t\t\t\t\t\t\t\t\t\t\titemsPerPage: 4,\n\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentPage: page1,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttotalItems: totalRec }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{{e.equipmentMaker}}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{{e.equipmentName}}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{{e.uniqueEquipmentId}}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{{e.equipmentDesc}}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td style=\"width: 5%; padding: 0 2.75rem;\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<table style=\"width:100%\" class=\"innertable\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<tr style=\"background-color: unset;\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td style=\"padding: unset; width: 10%;border: unset;\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<img src=\"assets/Edit_icon.png\" width=\"30\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theight=\"25\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"editEquipment(e.equipmentId)\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>&nbsp;&nbsp;&nbsp;&nbsp;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td style=\"padding: unset; width: 10%;border: unset;\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<img src=\"assets/delete_icon.png\" width=\"30\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theight=\"25\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"openModalWithClass(template)\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ng-template #template>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"modal-header\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h4 class=\"modal-title\">Equipment Management\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" class=\"close pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taria-label=\"Close\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"modalRef.hide()\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span aria-hidden=\"true\">×</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"modal-body\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h5>Are You Sure You Want to Delete the\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRecord..?</h5>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"modal-footer\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-default\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"modalRef.hide()\">Cancel</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-danger\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"deleteEquipment(e.equipmentId)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"modalRef.hide()\">Yes</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ng-template>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<br>\n\t\t\t\t\t\t\t\t\t<div class=\"d-flex justify-content-between\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"wrap\">\n\t\t\t\t\t\t\t\t\t\t\t<pagination-controls id=\"listing_pagination\" maxSize=\"4\"\n\t\t\t\t\t\t\t\t\t\t\t\tdirectionLinks=\"true\" responsive=\"true\" (pageChange)=\"page = $event\">\n\t\t\t\t\t\t\t\t\t\t\t</pagination-controls>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"button-section\">\n\t\t\t\t\t\t\t\t\t\t<button [routerLink]=\"['/dashboard']\"\n\t\t\t\t\t\t\t\t\t\t\tclass=\"btn btn-default btn-lg\">Back</button>\n\t\t\t\t\t\t\t\t\t\t<button (click)=\"addEquipment()\" class=\"btn btn-secondary btn-lg\">Add New\n\t\t\t\t\t\t\t\t\t\t\tEquipment</button>\n\t\t\t\t\t\t\t\t\t\t<button [routerLink]=\"['/dashboard']\"\n\t\t\t\t\t\t\t\t\t\t\tclass=\"btn btn-primary btn-lg\">Dashboard</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n<!-- add Product -->\n<div class=\"container-fluid\" style=\"padding-right:42px; padding-left:42px\" *ngIf=\"iteration == 'addProduct'\">\n\t<form class=\"form\" class=\"form\" (ngSubmit)=\"f1.form.valid && onSubmit()\" #f1=\"ngForm\">\n\t\t<div class=\"card\">\n\t\t\t<div class=\"view view-cascade gradient-card-header blue-gradient\">\n\t\t\t\t<!-- Title -->\n\t\t\t\t<h4 class=\"card-header-title mb-3\" style=\"color: white;\">Add Product</h4>\n\t\t\t</div>\n\t\t\t<div class=\"card-body vendor\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Product Name</label>\n\t\t\t\t\t\t<input type=\"text\" class=\"form-control input-vendor\" name=\"productName\" required\n\t\t\t\t\t\t\t[(ngModel)]=\"product.productName\" placeholder=\" Enter Product Name\" #productName=\"ngModel\"\n\t\t\t\t\t\t\t[ngClass]=\"{ 'is-invalid': f1.submitted && productName.invalid }\" required />\n\t\t\t\t\t\t<div class=\"invalid-feedback\" *ngIf=\"f1.submitted && productName.invalid\">\n\t\t\t\t\t\t\t<p *ngIf=\"productName.errors.required\">Please Enter Product Name</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Manifacutre Year</label>\n\t\t\t\t\t\t<input class=\"form-control input-vendor\" name=\"manufactureYear\" required\n\t\t\t\t\t\t\t[(ngModel)]=\"product.manufactureYear\" type=\"text\" placeholder=\"Enter Manufacture Year \"\n\t\t\t\t\t\t\t#manufactureYear=\"ngModel\"\n\t\t\t\t\t\t\t[ngClass]=\"{ 'is-invalid': f1.submitted && manufactureYear.invalid }\" required>\n\t\t\t\t\t\t<div class=\"invalid-feedback\" *ngIf=\"f1.submitted && manufactureYear.invalid\">\n\t\t\t\t\t\t\t<p *ngIf=\"manufactureYear.errors.required\">Please Enter Manufacture Year</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Select Category </label>\n\t\t\t\t\t\t<select class=\"form-control\" name=\"productCategory\" [(ngModel)]=\"product.productCategory\"\n\t\t\t\t\t\t\t#productCategory=\"ngModel\"\n\t\t\t\t\t\t\t[ngClass]=\"{ 'is-invalid': f1.submitted && productCategory.invalid }\" required>\n\t\t\t\t\t\t\t<option [ngValue]=\"0\">Select Category</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let c of categories\" [ngValue]=\"c.categoryId\">{{c.categoryDesc}}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t\t<div class=\"invalid-feedback\" *ngIf=\"f1.submitted && productCategory.invalid\">\n\t\t\t\t\t\t\t<p *ngIf=\"productCategory.errors.required\">Please Select Category</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row\" id=\"vendorrow\">\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Select Unit</label>\n\t\t\t\t\t\t<select class=\"form-control\" name=\"productUnit\" [(ngModel)]=\"product.productUnit\"\n\t\t\t\t\t\t\t#productUnit=\"ngModel\" [ngClass]=\"{ 'is-invalid': f1.submitted && productUnit.invalid }\"\n\t\t\t\t\t\t\trequired>\n\t\t\t\t\t\t\t<option [ngValue]=\"0\">Select Unit</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let u of units\" [ngValue]=\"u.paramId\">\n\t\t\t\t\t\t\t\t{{u.paramName}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t\t<div class=\"invalid-feedback\" *ngIf=\"f1.submitted && productUnit.invalid\">\n\t\t\t\t\t\t\t<p *ngIf=\"productUnit.errors.required\">Please Select Unit</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Select Similar Products</label>\n\t\t\t\t\t\t<select class=\"form-control\" name=\"selectedSimilarProductIds\" multiple\n\t\t\t\t\t\t\t[(ngModel)]=\"product.selectedSimilarProductIds\" #selectedSimilarProductIds=\"ngModel\"\n\t\t\t\t\t\t\t[ngClass]=\"{ 'is-invalid': f1.submitted && selectedSimilarProductIds.invalid }\" required>\n\t\t\t\t\t\t\t<option *ngFor=\"let sp of similarProducts\" [ngValue]=\"sp.productId\">\n\t\t\t\t\t\t\t\t{{sp.productName}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t\t<div class=\"invalid-feedback\" *ngIf=\"f1.submitted && selectedSimilarProductIds.invalid\">\n\t\t\t\t\t\t\t<p *ngIf=\"selectedSimilarProductIds.errors.required\">Please Select Similar Products\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br>\n\t\t\t\t<div class=\"row\" style=\"float: right;\">\n\t\t\t\t\t<button (click)=\"onBackClick()\" class=\"btn btn-default btn-lg\" value=\"Login\">Back</button>\n\t\t\t\t\t<button type=\"submit\" value=\"Submit\" class=\"btn btn-success btn-lg\">Save</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</form>\n</div>\n\n<!--     Edit Prodcut  -->\n<div class=\"container-fluid\" style=\"padding-right:42px; padding-left:42px\" *ngIf=\"iteration == 'editProduct'\">\n\t<form class=\"form\" (ngSubmit)=\"onSubmit()\">\n\t\t<div class=\"card\">\n\t\t\t<div class=\"view view-cascade gradient-card-header blue-gradient\">\n\t\t\t\t<!-- Title -->\n\t\t\t\t<h4 class=\"card-header-title mb-3\" style=\"color: white;\">Update Product</h4>\n\t\t\t</div>\n\t\t\t<div class=\"card-body vendor\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Product Name</label>\n\t\t\t\t\t\t<input type=\"text\" class=\"form-control input-vendor\" name=\"productName\" required\n\t\t\t\t\t\t\t#productName=\"ngModel\" [(ngModel)]=\"products.productName\"\n\t\t\t\t\t\t\tplaceholder=\" Enter Product Name\" />\n\t\t\t\t\t\t<div *ngIf=\"productName.invalid && (productName.dirty || productName.touched)\"\n\t\t\t\t\t\t\tclass=\"alert alert-danger\">\n\t\t\t\t\t\t\t<div *ngIf=\"productName.errors.required\">\n\t\t\t\t\t\t\t\tProduct Name is Required.\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Manifacutre Year</label>\n\t\t\t\t\t\t<input class=\"form-control input-vendor\" name=\"manufactureYear\" required\n\t\t\t\t\t\t\t#manufactureYear=\"ngModel\" [(ngModel)]=\"products.manufactureYear\" type=\"text\"\n\t\t\t\t\t\t\tpattern=\"[0-9]*\" minlength=\"4\" maxlength=\"4\" placeholder=\"Enter Manufacture Year \">\n\t\t\t\t\t\t<div *ngIf=\"manufactureYear.invalid && (manufactureYear.dirty || manufactureYear.touched)\"\n\t\t\t\t\t\t\tclass=\"alert alert-danger\">\n\t\t\t\t\t\t\t<div *ngIf=\"manufactureYear.errors.required\">\n\t\t\t\t\t\t\t\tManufacture Year is Required.\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div [hidden]=\"!manufactureYear.hasError('minlength')\">Manufacture Year Should be 4\n\t\t\t\t\t\t\t\tdigit</div>\n\t\t\t\t\t\t\t<div [hidden]=\"!manufactureYear.hasError('pattern')\">Manufacture Year Should be only\n\t\t\t\t\t\t\t\tnumbers</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Select Category </label>\n\t\t\t\t\t\t<select class=\"form-control\" name=\"productCategory\" [(ngModel)]=\"products.productCategory\">\n\t\t\t\t\t\t\t<option *ngFor=\"let c of categories\" [ngValue]=\"c.categoryId\">{{c.categoryDesc}}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row\" id=\"vendorrow\">\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Select Unit</label>\n\t\t\t\t\t\t<select class=\"form-control\" name=\"productUnit\" [(ngModel)]=\"products.productUnit\">\n\t\t\t\t\t\t\t<option *ngFor=\"let u of units\" [ngValue]=\"u.paramId\">\n\t\t\t\t\t\t\t\t{{u.paramName}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Select Similar Products</label>\n\t\t\t\t\t\t<select class=\"form-control\" name=\"selectedSimilarProductIds\" multiple\n\t\t\t\t\t\t\t[(ngModel)]=\"products.selectedSimilarProductIds\">\n\t\t\t\t\t\t\t<option *ngFor=\"let sp of similarProducts\" [ngValue]=\"sp.productId\">\n\t\t\t\t\t\t\t\t{{sp.productName}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br>\n\t\t\t\t<div class=\"row\" style=\"float: right;\">\n\t\t\t\t\t<button (click)=\"onBackClick()\" class=\"btn btn-default btn-lg\" value=\"Login\">Back</button>\n\t\t\t\t\t<button type=\"submit\" value=\"Submit\" class=\"btn btn-success btn-lg\">Update Product</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</form>\n</div>\n\n<!-- Add Equipment -->\n<div class=\"container-fluid\" style=\"padding-right:42px; padding-left:42px\" *ngIf=\"iteration == 'addEquipment'\">\n\t<form class=\"form\" (ngSubmit)=\"f1.form.valid && onSubmit()\" #f1=\"ngForm\">\n\t\t<div class=\"card\">\n\t\t\t<div class=\"view view-cascade gradient-card-header blue-gradient\">\n\t\t\t\t<!-- Title -->\n\t\t\t\t<h4 class=\"card-header-title mb-3\" style=\"color: white;\">Add Equipment</h4>\n\t\t\t</div>\n\t\t\t<div class=\"card-body vendor\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Equipment Maker</label>\n\t\t\t\t\t\t<select class=\"form-control input-vendor\" name=\"#equipmentMaker\"\n\t\t\t\t\t\t\t[(ngModel)]=\"equipments.equipmentMaker\" (change)=\"onChangeMaker()\" #equipmentMaker=\"ngModel\"\n\t\t\t\t\t\t\t[ngClass]=\"{ 'is-invalid': f1.submitted && equipmentMaker.invalid }\" required>\n\t\t\t\t\t\t\t<option [ngValue]=\"null\">Select Maker</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let m of makers\">\n\t\t\t\t\t\t\t\t{{m}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t\t<div class=\"invalid-feedback\" *ngIf=\"f1.submitted && equipmentMaker.invalid\">\n\t\t\t\t\t\t\t<p *ngIf=\"equipmentMaker.errors.required\">Please Select Equipment Maker</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Equipment Name </label>\n\t\t\t\t\t\t<input list=\"browsers\" name=\"equipmentName\" [(ngModel)]=\"equipments.equipmentName\"\n\t\t\t\t\t\t\tclass=\"form-control input-vendor\" placeholder=\"Enter Equipment Name\"\n\t\t\t\t\t\t\t#equipmentName=\"ngModel\" [ngClass]=\"{ 'is-invalid': f1.submitted && equipmentName.invalid }\"\n\t\t\t\t\t\t\trequired>\n\t\t\t\t\t\t<datalist id=\"browsers\">\n\t\t\t\t\t\t\t<option *ngFor=\"let m of names\">\n\t\t\t\t\t\t\t\t{{m}}</option>\n\t\t\t\t\t\t</datalist>\n\t\t\t\t\t\t<div class=\"invalid-feedback\" *ngIf=\"f1.submitted && equipmentName.invalid\">\n\t\t\t\t\t\t\t<p *ngIf=\"equipmentName.errors.required\">Please Select Equipment Name </p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label> Equipment Description </label>\n\t\t\t\t\t\t<input class=\"form-control input-vendor\" name=\"equipmentDesc\" required\n\t\t\t\t\t\t\t[(ngModel)]=\"equipments.equipmentDesc\" type=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"Enter Equipment Description \" #equipmentDesc=\"ngModel\"\n\t\t\t\t\t\t\t[ngClass]=\"{ 'is-invalid': f1.submitted && equipmentDesc.invalid }\">\n\t\t\t\t\t\t<div class=\"invalid-feedback\" *ngIf=\"f1.submitted && equipmentDesc.invalid\">\n\t\t\t\t\t\t\t<p *ngIf=\"equipmentDesc.errors.required\">Please Enter Equipment Description</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<br>\n\t\t\t\t<div class=\"row\" style=\"float: right;\">\n\t\t\t\t\t<button (click)=\"onBackClick()\" class=\"btn btn-default btn-lg\" value=\"Login\">Back</button>\n\t\t\t\t\t<button type=\"submit\" value=\"Submit\" class=\"btn btn-success btn-lg\">Save</button> &nbsp;\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</form>\n</div>\n\n<!-- Edit Equipment -->\n<div class=\"container-fluid\" style=\"padding-right:42px; padding-left:42px\" *ngIf=\"iteration == 'editEquipment'\">\n\t<form class=\"form\" (ngSubmit)=\"f1.form.valid && onSubmit()\" #f1=\"ngForm\">\n\t\t<div class=\"card\">\n\t\t\t<div class=\"view view-cascade gradient-card-header blue-gradient\">\n\t\t\t\t<!-- Title -->\n\t\t\t\t<h4 class=\"card-header-title mb-3\" style=\"color: white;\">Edit Equipment</h4>\n\t\t\t</div>\n\t\t\t<div class=\"card-body vendor\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Equipment Maker</label>\n\t\t\t\t\t\t<input type=\"text\" disabled name=\"equipmentMaker\" class=\"form-control input-vendor\"\n\t\t\t\t\t\t\t[(ngModel)]=\"equipments.equipmentMaker\" placeholder=\"Equipment Maker*\" value=\"\"\n\t\t\t\t\t\t\t#equipmentMaker=\"ngModel\" required />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Equipment Name </label>\n\t\t\t\t\t\t<input type=\"text\" disabled name=\"equipmentName\" class=\"form-control input-vendor\"\n\t\t\t\t\t\t\t[(ngModel)]=\"equipments.equipmentName\" placeholder=\"Equipment Name*\" value=\"\"\n\t\t\t\t\t\t\t#equipmentName=\"ngModel\" required />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label> Equipment Description </label>\n\t\t\t\t\t\t<input class=\"form-control input-vendor\" name=\"equipmentDesc\" required [(ngModel)]=\"equipments.equipmentDesc\"\n\t\t\t\t\t\t\ttype=\"text\" placeholder=\"Enter Equipment Description \" #equipmentDesc=\"ngModel\">\n\t\t\t\t\t\t<div *ngIf=\"equipmentDesc.invalid && (equipmentDesc.dirty || equipmentDesc.touched)\"\n\t\t\t\t\t\t\tclass=\"alert alert-danger\">\n\t\t\t\t\t\t\t<div [hidden]=\"!equipmentDesc.hasError('required')\">Please Enter Equipment\n\t\t\t\t\t\t\t\tDescription\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row\"  id=\"vendorrow\">\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Equipment ID </label>\n\t\t\t\t\t\t<input type=\"text\" disabled name=\"uniqueEquipmentId\" class=\"form-control input-vendor\"\n\t\t\t\t\t\t\t[(ngModel)]=\"equipments.uniqueEquipmentId\" placeholder=\"Equipment ID*\" value=\"\"\n\t\t\t\t\t\t\t#equipmentType=\"ngModel\" required />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br>\n\t\t\t\t<div class=\"row\" style=\"float: right;\">\n\t\t\t\t\t<button (click)=\"onBackClick()\" class=\"btn btn-default btn-lg\" value=\"Login\">Back</button>\n\t\t\t\t\t<button type=\"submit\" value=\"Submit\" class=\"btn btn-success btn-lg\">Update\n\t\t\t\t\t\tEquipment</button>&nbsp;\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</form>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/cooperate/cooperate.component.html":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/components/cooperate/cooperate.component.html ***!
  \*****************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n<div class=\"container-fluid\">\n  <div class=\"row\" *ngIf=\"iteration == 'initial'\">\n    <div class=\"col-md-12\">\n      <div class=\"tab-content\" id=\"myTabContent\">\n        <br>\n        <div class=\"card p-2 mb-5\">\n          <h4 class=\"filter\">Filters</h4>\n          <div class=\"row v1\">\n            <div class=\"col-md-4\">\n              <div class=\"form-group\">\n                <select class=\"form-control\" name=\"region\" [(ngModel)]=\"region\"\n                  (ngModelChange)=\"onSelectRegion(region)\">\n                  <option [ngValue]=\"r\">Select Region</option>\n                  <option *ngFor=\"let r of selectedRegion\" [value]=\"r\">{{r}}</option>\n                </select>\n              </div>\n            </div>\n            <div class=\"col-md-4\">\n              <div class=\"form-group\">\n                <select class=\"form-control\" name=\"stateId\" [(ngModel)]=\"stateId\"\n                  (ngModelChange)=\"onSelectState(stateId)\">\n                  <option [ngValue]=\"s\">Select State</option>\n                  <option *ngFor=\"let s of selectedStates\" [ngValue]=\"s\">{{s}}</option>\n                </select>\n              </div>\n            </div>\n            <div class=\"col-md-4\">\n              <div class=\"form-group\">\n                <select class=\"form-control\" name=\"cityId\" [(ngModel)]=\"cityId\" (ngModelChange)=\"onSelectCity(cityId)\">\n                  <option [ngValue]=\"c\">Select City</option>\n                  <option *ngFor=\"let c of selectedCities\" [value]=\"c\">{{c}}</option>\n                </select>\n              </div>\n            </div>\n          </div>\n        </div>\n        <section class=\"mb-5\">\n          <!--Card-->\n          <div class=\"card card-cascade narrower body-section\">\n            <div\n              class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n              <div>\n              </div>\n              <h4 href=\"\" class=\"white-text mx-3\"> Corporate Management </h4>\n              <div>\n              </div>\n            </div>\n            <div class=\"card-body\">\n              <div class=\"table table-responsive table-striped table-bordered\">\n                <table class=\"table  text-nowrap\">\n                  <thead>\n                    <tr>\n                      <th>Corporate Name</th>\n                      <th>Country</th>\n                      <th>Region</th>\n                      <th>State</th>\n                      <th>City</th>\n                      <th>Action</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr *ngFor=\"let v of corporates | \n\t\t\t\t\t\t\t\t\t\tpaginate: { id: 'listing_pagination',\n\t\t\t\t\t\t\t\t\t\titemsPerPage: 5,\n\t\t\t\t\t\t\t\t\t\tcurrentPage: page,\n\t\t\t\t\t\t\t\t\t\ttotalItems: totalRec }\n\t\t\t\t\t\t\t\t\t\t\">\n                      <td>{{v.organisationName}}</td>\n                      <td *ngIf=\"v.address!=null\">{{v.address.country.countryName}}</td>\n                      <td *ngIf=\"v.address!=null\">{{v.address.state.region}}</td>\n                      <td *ngIf=\"v.address!=null\">{{v.address.state.stateName}}</td>\n                      <td *ngIf=\"v.address!=null\">{{v.address.city.cityName}}</td>\n                      <td *ngIf=\"v.address==null\">&nbsp;</td>\n                      <td *ngIf=\"v.address==null\">&nbsp;</td>\n                      <td *ngIf=\"v.address==null\">&nbsp;</td>\n                      <td *ngIf=\"v.address==null\">&nbsp;</td>\n                      <td style=\"width: 5%; padding: 0 2.75rem;\">\n                        <table style=\"width:100%\" class=\"innertable\">\n                          <tr style=\"background-color: unset;\">\n                            <td style=\"padding: unset; width: 10%;border: unset;\" data-target=\"#exampleModalCenter\">\n                              <img src=\"assets/Edit_icon.png\" width=\"30\" height=\"25\"\n                                (click)=\"editCorporate(v.organisationId)\" />\n                            </td>&nbsp;&nbsp;&nbsp;&nbsp;\n                            <td style=\"padding: unset; width: 10%;border: unset;\">\n                              <img src=\"assets/delete_icon.png\" width=\"30\" height=\"25\"\n                                (click)=\"deleteVendor(v.organisationId)\" />\n                            </td>\n                          </tr>\n                        </table>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n              <br>\n              <div class=\"d-flex justify-content-between\">\n                <div class=\"wrap\">\n                  <pagination-controls id=\"listing_pagination\" maxSize=\"5\" directionLinks=\"true\" responsive=\"true\"\n                    (pageChange)=\"page = $event\">\n                  </pagination-controls>\n                </div>\n              </div>\n              <div class=\"button-section\">\n                <button [routerLink]=\"['/dashboard']\" class=\"btn btn-default btn-lg\">Back</button>\n                <button (click)=\"addCorporate()\" class=\"btn btn-secondary btn-lg\">Add Corporate </button>\n                <button [routerLink]=\"['/dashboard']\" class=\"btn btn-primary btn-lg\">Dashboard</button>\n              </div>\n            </div>\n          </div>\n        </section>\n      </div>\n    </div>\n  </div>\n\n  <!-- Add Corporate -->\n  <div class=\"container-fluid\" style=\"padding-right:42px; padding-left:42px\" *ngIf=\"iteration == 'ADD_CORPORATE'\">\n    <form class=\"form\" (ngSubmit)=\"f.form.valid && onAddCorporate() \" #f=\"ngForm\" #vendorForm>\n      <div class=\"card\">\n        <div class=\"view view-cascade gradient-card-header blue-gradient\">\n\n          <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Add Corporate</h4>\n        </div>\n        <div class=\"card-body vendor\">\n          <div class=\"row\">\n            <div class=\"col-sm-4\">\n              <label>Organisation Name</label>\n              <input type=\"text\" name=\"organisationName\" class=\"form-control input-vendor\"\n                [(ngModel)]=\"corporate.organisationName\" #organisationName=\"ngModel\" placeholder=\"Name *\" value=\"\"\n                [ngClass]=\"{ 'is-invalid': f.submitted && organisationName.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f.submitted && organisationName.invalid\">\n                <p *ngIf=\"organisationName.errors.required\">Please Enter Organisation Name </p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Contact Email</label>\n              <input type=\"text\" class=\"form-control input-vendor\" placeholder=\"Contact Email *\"\n                name=\"organisationEmail\" [(ngModel)]=\"corporate.organisationEmail\" value=\"\"\n                pattern=\"^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$\" #organisationEmail=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f.submitted && organisationEmail.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f.submitted && organisationEmail.invalid\">\n                <p *ngIf=\"organisationEmail.errors.required\">Please Enter Email</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Phone Number</label>\n              <input type=\"text\" name=\"contactNumber\" class=\"form-control input-vendor\"\n                [(ngModel)]=\"corporate.contactNumber\" placeholder=\"Phone Number *\" value=\"\" pattern=\"[0-9]*\"\n                minlength=\"10\" maxlength=\"10\" #contactNumber=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f.submitted && contactNumber.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f.submitted && contactNumber.invalid\">\n                <p *ngIf=\"contactNumber.errors.required\">Please Enter Phone Number </p>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-12\"><label>Address</label></div>\n            <div class=\"col-sm-4\">\n              <input type=\"text\" name=\"addressLine1\" class=\"form-control input-vendor\"\n                [(ngModel)]=\"address.addressLine1\" placeholder=\"Address Line 1*\" value=\"\" #addressLine1=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f.submitted && addressLine1.invalid }\" required />\n\n              <div class=\"invalid-feedback\" *ngIf=\"f.submitted && addressLine1.invalid\">\n                <p *ngIf=\"addressLine1.errors.required\">Please Enter Address Line 1 </p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <input type=\"text\" name=\"addressLine2\" class=\"form-control input-vendor\"\n                [(ngModel)]=\"address.addressLine2\" placeholder=\"Address Line 2*\" value=\"\" #addressLine2=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f.submitted && addressLine2.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f.submitted && addressLine2.invalid\">\n                <p *ngIf=\"addressLine2.errors.required\">Please Enter Address Line 2 </p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <input type=\"text\" name=\"addressLine3\" class=\"form-control input-vendor\"\n                [(ngModel)]=\"address.addressLine3\" placeholder=\"Address Line 3*\" value=\"\" #addressLine3=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f.submitted && addressLine3.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f.submitted && addressLine3.invalid\">\n                <p *ngIf=\"addressLine3.errors.required\">Please Enter Address Line 2</p>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>Country</label>\n              <select class=\"form-control\" name=\"countryId\" [(ngModel)]=\"address.countryId\" (change)=\"onChangeCountry()\"\n                #countryId=\"ngModel\" [ngClass]=\"{ 'is-invalid': f.submitted && countryId.invalid }\" required>\n                <option [ngValue]=\"null\">Select Country</option>\n                <option *ngFor=\"let c of countries\" [ngValue]=\"c.countryId\">{{c.countryName}}</option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f.submitted && countryId.invalid\">\n                <p *ngIf=\"countryId.errors.required\">Please Select Country </p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>State</label>\n              <select class=\"form-control\" name=\"stateId\" [(ngModel)]=\"address.stateId\" (change)=\"onChangeState()\"\n                #stateId=\"ngModel\" [ngClass]=\"{ 'is-invalid': f.submitted && stateId.invalid }\" required>\n                <option [ngValue]=\"null\">Select state</option>\n                <option *ngFor=\"let s of states\" [value]=\"s.stateId\">{{s.stateName}}</option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f.submitted && stateId.invalid\">\n                <p *ngIf=\"stateId.errors.required\">Please Select State </p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>City</label>\n              <select class=\"form-control\" name=\"cityId\" [(ngModel)]=\"address.cityId\" #cityId=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f.submitted && cityId.invalid }\" required>\n                <option [ngValue]=\"null\">Select City</option>\n                <option *ngFor=\"let s of cities\" [value]=\"s.cityId\">{{s.cityName}}</option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f.submitted && cityId.invalid\">\n                <p *ngIf=\"cityId.errors.required\">Please Select City</p>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>Region</label>\n              <input type=\"text\" name=\"region\" class=\"form-control input-vendor\" [(ngModel)]=\"address.region\"\n                placeholder=\"Region*\" value=\"\" #region=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f.submitted && region.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f.submitted && region.invalid\">\n                <p *ngIf=\"region.errors.required\">Please Enter Region</p>\n              </div>\n            </div>\n\n            <div class=\"col-sm-4\">\n              <label>Contact Person</label>\n              <input type=\"text\" name=\"contactPersonName\" class=\"form-control input-vendor\"\n                [(ngModel)]=\"corporate.contactPersonName\" placeholder=\"Contact Person Name *\" value=\"\"\n                #contactPersonName=\"ngModel\" [ngClass]=\"{ 'is-invalid': f.submitted && contactPersonName.invalid }\"\n                required />\n              <div class=\"invalid-feedback\" *ngIf=\"f.submitted && contactPersonName.invalid\">\n                <p *ngIf=\"contactPersonName.errors.required\">Please Enter Contact Person </p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Mobile Number</label>\n              <input type=\"text\" name=\"mobileNumber\" class=\"form-control input-vendor\"\n                [(ngModel)]=\"corporate.mobileNumber\" placeholder=\"Mobile Number *\" value=\"\" pattern=\"[0-9]*\"\n                minlength=\"10\" maxlength=\"10\" #mobileNumber=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f.submitted && mobileNumber.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f.submitted && mobileNumber.invalid\">\n                <p *ngIf=\"mobileNumber.errors.required\">Please Enter Mobile Number </p>\n              </div>\n            </div>\n          </div>\n          <br>\n          <div class=\"table table-striped table-bordered table-responsive\">\n            <table class=\"table text-nowrap\" *ngIf=\"offices?.length > 0\">\n              <thead>\n                <tr>\n                  <th>Office Name</th>\n                  <th>Office Address</th>\n                  <th>Region</th>\n                  <th>State</th>\n                  <th>City</th>\n                  <th>Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let officeView of offices | \n                    paginate: { id: 'listing_pagination',\n                    itemsPerPage: 5,\n                    currentPage: page,\n                    totalItems: totalRec }\n                    \">\n                  <td>{{officeView.officeName}}</td>\n                  <td>{{officeView.officeAddress}}</td>\n                  <td>{{officeView.state.region}}</td>\n                  <td>{{officeView.state.stateName}}</td>\n                  <td>{{officeView.city.cityName}}</td>\n                  <td><img src=\"assets/Edit_icon.png\" width=\"30\" height=\"25\"\n                      (click)=\"editCorporateOffice(officeView)\" />&nbsp;&nbsp;\n                    <img src=\"assets/delete_icon.png\" width=\"30\" height=\"25\"\n                      (click)=\"deleteCorporateOffice(officeView)\" /></td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>Office Name</label>\n              <input type=\"text\" name=\"officeName\" [(ngModel)]=\"office.officeName\" class=\"form-control input-vendor\"\n                #officeName=\"ngModel\" [ngClass]=\"{ 'is-invalid': f.submitted && officeName.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f.submitted && officeName.invalid\">\n                <p *ngIf=\"officeName.errors.required\">Please Enter Office Name </p>\n              </div>\n            </div>\n\n            <div class=\"col-sm-4\">\n              <label>Office Address</label>\n              <input type=\"text\" name=\"officeAddress\" [(ngModel)]=\"office.officeAddress\"\n                class=\"form-control input-vendor\" #officeAddress=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f.submitted && officeAddress.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f.submitted && officeAddress.invalid\">\n                <p *ngIf=\"officeAddress.errors.required\">Please Enter Office Address </p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Select State</label>\n              <select class=\"form-control\" name=\"officeStateId\" [(ngModel)]=\"office.stateId\"\n                (change)=\"onOfficeStateChange(office.stateId)\" #officeStateId=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f.submitted && officeStateId.invalid }\" required>\n                <option [ngValue]=\"null\">Select state</option>\n                <option *ngFor=\"let s of states\" [value]=\"s.stateId\">{{s.stateName}}</option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f.submitted && officeStateId.invalid\">\n                <p *ngIf=\"officeStateId.errors.required\">Please Select State </p>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>Select City</label>\n              <select class=\"form-control\" name=\"officeCityId\" [(ngModel)]=\"office.cityId\"\n                (change)=\"onOfficeCityChange(office.cityId)\" #officeCityId=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f.submitted && cityId.invalid }\" required>\n                <option [ngValue]=\"null\">Select City</option>\n                <option *ngFor=\"let s of officeCities\" [value]=\"s.cityId\">{{s.cityName}}</option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f.submitted && cityId.invalid\">\n                <p *ngIf=\"cityId.errors.required\">Please Select City </p>\n              </div>\n            </div>\n\n            <div class=\"col-sm-4\">\n              <label>Region</label>\n              <input type=\"text\" name=\"officeRegion\" class=\"form-control input-vendor\" [(ngModel)]=\"office.officeRegion\"\n                placeholder=\"Region*\" value=\"\" #officeRegion=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f.submitted && officeRegion.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f.submitted && officeRegion.invalid\">\n                <p *ngIf=\"officeRegion.errors.required\">Please Select Region </p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label></label>\n              <button *ngIf=\"officeEdit==true\" class=\"btn btn-primary btn-block edit btn-lg pull-right\"\n                (click)=\"editOffice()\" type=\"button\" value=\"Submit\">Edit Office</button>\n              <button *ngIf=\"officeEdit==false\" class=\"btn btn-deep-orange pull-right btn-block btn-lg cor1\"\n                (click)=\"addOffice()\" type=\"button\" value=\"Submit\">Add Office</button>\n            </div>\n          </div>\n          <br>\n          <div class=\"row\" style=\"float: right;\">\n            <button (click)=\"onBackClick()\" class=\"btn btn-default btn-lg\" value=\"Login\">Back</button>\n            <button class=\"btn btn-secondary btn-lg\" (click)=\"onAddCorporate()\" type=\"submit\"\n              value=\"Submit\">Add</button>\n            <button class=\"btn btn-success btn-lg\" (click)=\"onCreditManagement()\" type=\"submit\" value=\"Submit\">Credit\n              Management</button>\n          </div>\n        </div>\n      </div>\n    </form>\n  </div>\n\n  <!-- Edit Corporate -->\n  <div class=\"container-fluid\" style=\"padding-right:42px; padding-left:42px\" *ngIf=\"iteration == 'EDIT_CORPORATE'\">\n    <form class=\"needs-validation\" novalidate (ngSubmit)=\"f1.form.valid && updateUser(user)\" #f1=\"ngForm\" #vuserForm1>\n      <div class=\"card\">\n        <div class=\"view view-cascade gradient-card-header blue-gradient\">\n          <!-- Title -->\n          <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Update Corporate</h4>\n        </div>\n        <div class=\"card-body vendor\">\n          <div class=\"row\">\n            <div class=\"col-sm-4\">\n              <label>Organisation Name</label>\n              <input type=\"text\" name=\"organisationName\" class=\"form-control input-vendor\" #organisationName=\"ngModel\"\n                [(ngModel)]=\"corporate.organisationName\" placeholder=\"Name *\" value=\"\" required=\"\" />\n              <div *ngIf=\"organisationName.invalid && (organisationName.dirty || organisationName.touched)\"\n                class=\"alert alert-danger\">\n                <div *ngIf=\"organisationName.errors.required\">\n                  Organisation Name is Required.\n                </div>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label> Email</label>\n              <input type=\"text\" class=\"form-control input-vendor\" placeholder=\"Your Email *\" name=\"organisationEmail\"\n                [(ngModel)]=\"corporate.organisationEmail\" value=\"\"\n                pattern=\"^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$\" #organisationEmail=\"ngModel\" required />\n              <div *ngIf=\"organisationEmail.invalid && (organisationEmail.dirty || organisationEmail.touched)\"\n                class=\"alert alert-danger\">\n                <div *ngIf=\"organisationEmail.hasError('required')\">Email is required</div>\n                <div *ngIf=\"organisationEmail.hasError('pattern')\">Email format should be\n                  <b>singapore@sipl.com</b>\n                </div>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Contact Person</label>\n              <input type=\"text\" name=\"contactPersonName\" class=\"form-control input-vendor\"\n                [(ngModel)]=\"corporate.contactPersonName\" placeholder=\"Contact Person Name *\" value=\"\"\n                #contactPersonName=\"ngModel\" required />\n              <div *ngIf=\"contactPersonName.invalid && (contactPersonName.dirty || contactPersonName.touched)\"\n                class=\"alert alert-danger\">\n                <div *ngIf=\"contactPersonName.errors.required\">\n                  Contact Person Name is Required.\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-12\"><label>Address</label></div>\n            <div class=\"col-sm-4\">\n              <input type=\"text\" name=\"addressLine1\" class=\"form-control input-vendor\"\n                [(ngModel)]=\"address.addressLine1\" placeholder=\"Address Line 1*\" value=\"\" #addressLine1=\"ngModel\"\n                required />\n              <div *ngIf=\"addressLine1.invalid && (addressLine1.dirty || addressLine1.touched)\"\n                class=\"alert alert-danger\">\n                <div *ngIf=\"addressLine1.errors.required\">\n                  Address Line 1 Required.\n                </div>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <input type=\"text\" name=\"addressLine2\" class=\"form-control input-vendor\"\n                [(ngModel)]=\"address.addressLine2\" placeholder=\"Address Line 2*\" value=\"\" #addressLine2=\"ngModel\"\n                required />\n              <div *ngIf=\"addressLine2.invalid && (addressLine2.dirty || addressLine2.touched)\"\n                class=\"alert alert-danger\">\n                <div *ngIf=\"addressLine2.errors.required\">\n                  Address Line 2 Required.\n                </div>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <input type=\"text\" name=\"addressLine3\" class=\"form-control input-vendor\" #addressLine3=\"ngModel\"\n                [(ngModel)]=\"address.addressLine3\" placeholder=\"Address Line 3*\" value=\"\" required />\n              <div *ngIf=\"addressLine3.invalid && (addressLine3.dirty || addressLine3.touched)\"\n                class=\"alert alert-danger\">\n                <div *ngIf=\"addressLine3.errors.required\">\n                  Address Line 3 Required.\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>Country</label>\n              <select disabled class=\"form-control\" name=\"countryId\" [(ngModel)]=\"address.countryId\"\n                (change)=\"onChangeCountry()\">\n                <option>Select Country</option>\n                <option *ngFor=\"let c of countries\" [ngValue]=\"c.countryId\">\n                  {{c.countryName}}</option>\n              </select>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>State</label>\n              <select select class=\"form-control\" name=\"stateId\" [(ngModel)]=\"address.stateId\"\n                (change)=\"onChangeState()\">\n                <option *ngFor=\"let s of states\" [value]=\"s.stateId\">{{s.stateName}}\n                </option>\n              </select>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>City</label>\n              <select select class=\"form-control\" name=\"cityId\" [(ngModel)]=\"address.cityId\">\n                <option *ngFor=\"let s of cities\" [value]=\"s.cityId\">{{s.cityName}}</option>\n              </select>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>Region</label>\n              <input type=\"text\" name=\"region\" class=\"form-control input-vendor\" [(ngModel)]=\"address.region\"\n                #region=\"ngModel\" placeholder=\"Region*\" value=\"\" required />\n              <div *ngIf=\"region.invalid && (region.dirty || region.touched)\" class=\"alert alert-danger\">\n                <div *ngIf=\"region.errors.required\">\n                  Region is Required.\n                </div>\n              </div>\n            </div>\n\n            <div class=\"col-sm-4\">\n              <label>Mobile Number</label>\n              <input type=\"text\" name=\"contactNumber\" class=\"form-control input-vendor\"\n                [(ngModel)]=\"corporate.contactNumber\" placeholder=\"Mobile Number *\" value=\"\" #contactNumber=\"ngModel\"\n                pattern=\"[0-9]*\" minlength=\"10\" maxlength=\"10\" required />\n              <div *ngIf=\"contactNumber.invalid && (contactNumber.dirty || contactNumber.touched)\"\n                class=\"alert alert-danger\">\n                <div *ngIf=\"contactNumber.errors.required\">\n                  Mobile number is Required.\n                </div>\n                <div *ngIf=\"contactNumber.hasError('minlength')\">Mobile should be 10 Digit</div>\n                <div *ngIf=\"contactNumber.hasError('pattern')\">Mobile number should be only numbers\n                </div>\n              </div>\n            </div>\n          </div>\n          <br>\n          <div class=\"table table-striped table-bordered table-responsive\">\n            <table class=\"table text-nowrap\" *ngIf=\"offices?.length > 0\">\n              <thead>\n                <tr>\n                  <th>Office Name</th>\n                  <th>Office Address</th>\n                  <th>Region</th>\n                  <th>State</th>\n                  <th>City</th>\n                  <th>Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let officeView of offices\">\n                  <td>{{officeView.officeName}}</td>\n                  <td>{{officeView.officeAddress}}</td>\n                  <td>{{officeView.state.region}}</td>\n                  <td>{{officeView.state.stateName}}</td>\n                  <td>{{officeView.city.cityName}}</td>\n\n                  <td style=\"width: 5%; padding: 0 2.75rem;\">\n                    <table style=\"width:100%\" class=\"innertable\">\n                      <tr style=\"background-color: unset;\">\n                        <td style=\"padding: unset; width: 10%; border: unset;\">\n                          <img src=\"assets/equipment.webp\" width=\"30\" height=\"25\" (click)=\"viewEquipment(officeView)\" />\n                        </td>&nbsp;&nbsp;\n                        <td style=\"padding: unset; width: 10%; border: unset;\">\n                          <img src=\"assets/Edit_icon.png\" width=\"30\" height=\"25\"\n                            (click)=\"editCorporateOffice(officeView)\" />\n                        </td>\n                        <td style=\"padding: unset; width: 10%; border: unset;\">\n                          <img src=\"assets/delete_icon.png\" width=\"30\" height=\"25\"\n                            (click)=\"deleteCorporateOffice(officeView)\" />\n                        </td>\n                      </tr>\n                    </table>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"form-group\" class=\"pull-right;\" *ngIf=\"showOfficeDiv == false\">\n              <button class=\"btn btn-deep-orange btn-lg\" type=\"submit\" (click)=\"showOfficeEntry()\" value=\"Submit\">Add\n                Office</button>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\" *ngIf=\"showOfficeDiv == true\">\n            <div class=\"col-sm-4\">\n              <label>Office Name</label>\n              <input type=\"text\" name=\"officeName\" [(ngModel)]=\"office.officeName\" class=\"form-control input-vendor\" />\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Office Address</label>\n              <input type=\"text\" name=\"officeAddress\" [(ngModel)]=\"office.officeAddress\"\n                class=\"form-control input-vendor\" />\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Select State</label>\n              <select class=\"form-control\" name=\"officeStateId\" [(ngModel)]=\"office.stateId\"\n                (change)=\"onOfficeStateChange(office.stateId)\" #officeStateId=\"ngModel\">\n                <option [ngValue]=\"null\">Select state</option>\n                <option *ngFor=\"let s of states\" [value]=\"s.stateId\">{{s.stateName}}</option>\n              </select>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\" *ngIf=\"showOfficeDiv == true\">\n            <div class=\"col-sm-4\">\n              <label>Select City</label>\n              <select class=\"form-control input-vendor\" name=\"officeCityId\" [(ngModel)]=\"office.cityId\"\n                (change)=\"onOfficeCityChange(office.cityId)\" #officeCityId=\"ngModel\">\n                <option [ngValue]=\"null\">Select City</option>\n                <option *ngFor=\"let s of officeCities\" [value]=\"s.cityId\">{{s.cityName}}</option>\n              </select>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Region</label>\n              <input type=\"text\" name=\"officeRegion\" class=\"form-control input-vendor\" [(ngModel)]=\"office.officeRegion\"\n                placeholder=\"Region*\" value=\"\" #officeRegion=\"ngModel\" required />\n            </div>\n            <div class=\"col-sm-4\">\n              <button *ngIf=\"officeEdit==true\" class=\"btn btn-primary pull-right btn-block edit btn-lg\"\n                (click)=\"editOffice()\" type=\"button\" value=\"Submit\">Edit Office</button>\n              <button *ngIf=\"officeEdit==false\" class=\"btn btn-deep-orange pull-right btn-block cor btn-lg\"\n                (click)=\"addOffice()\" type=\"button\" value=\"Submit\">Add Office</button>\n            </div>\n          </div>\n          <br>\n          <div class=\"row\" style=\"float: right;\">\n            <button (click)=\"onBackClick()\" class=\"btn btn-default btn-lg\" value=\"Login\">Back</button>\n            <button class=\"btn btn-success btn-lg\" type=\"submit\" (click)=\"onEditCorporate()\"\n              value=\"Submit\">Update</button>\n            <button *ngIf=\"creditApprovedYN==false\" class=\"btn btn-success btn-lg\" type=\"submit\"\n              (click)=\"onCreditManagement()\" value=\"Submit\">Credit Management</button>\n            <button *ngIf=\"creditApprovedYN==true\" class=\"btn btn-primary btn-lg\" type=\"submit\" (click)=\"onShowCredit()\"\n              value=\"Submit\">Show Credit</button>\n          </div>\n        </div>\n      </div>\n    </form>\n  </div>\n\n\n  <div class=\"row\" *ngIf=\"iteration == 'EQUIPMENT_PRODUCT_LIST'\">\n    <div class=\"container-fluid\">\n      <div class=\"card card-cascade narrower body-section\">\n        <div\n          class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n          <div>\n          </div>\n          <h4 href=\"\" class=\"white-text mx-3\">Equipment List </h4>\n          <div>\n          </div>\n        </div>\n        <div class=\"card-body\">\n\n          <div class=\"table table-striped table-bordered table-responsive\">\n            <table class=\"table text-nowrap\">\n              <thead>\n                <tr>\n                  <th>Equipment Maker</th>\n                  <th>Equipment Name</th>\n                  <!--<th>EquipmentId</th>\n                  <th>Launched Year</th>\n                  <th>Product Category</th>-->\n                  <th>Product Name</th>\n                  <th>Serial Number</th>\n                  <th>Primary Mobile No</th>\n                  <th>Link Mobile No</th>\n                  <th>Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let e of equipmentProducts | \n                      paginate: { id: 'listing_pagination1',\n                      itemsPerPage: 5,\n                      currentPage: page1,\n                      totalItems: totalRec }\n                      \">\n\n                  <td>{{e.equipment.equipmentMaker}}</td>\n                  <td>{{e.equipment.equipmentName}}</td>\n                  <!--<td>{{e.equipment.equipmentId}}</td>\n                  <td>{{e.product.manufactureYear}}</td>\n                  <td>{{e.product.productCategory.categoryName}}</td>-->\n                  <td>{{e.product.productName}}</td>\n                  <td>{{e.serialNo}}</td>\n                  <td>{{e.mobileNo}}</td>\n                  <td><select multiple class=\"form-control\" name=\"registeredMobiles\" [(ngModel)]=\"e.linkedMobiles\">\n                    <option [ngValue]=\"null\">Select mobile</option>\n                  <option *ngFor=\"let c of registeredMobileList\" [ngValue]=\"c.registeredMobileId\" >{{c.mobileNo}}</option>\n                </select></td>\n                  <td><button (click)=\"onMobileLink(e)\" class=\"btn btn-default config btn-lg\" value=\"Login\">Update</button></td>\n                </tr>\n              </tbody>\n            </table>\n            <pagination-controls id=\"listing_pagination1\" maxSize=\"5\" directionLinks=\"true\"\n              (pageChange)=\"page1 = $event\">\n            </pagination-controls>\n          </div>\n          <!--<div class=\"col-md-12\" *ngIf=\"sub_iteration=='LINKED_MOBILE'\">\n            <div class=\"table table-responsive table-striped table-bordered\"\n            *ngIf=\"registeredMobileList!=null && registeredMobileList.length>0\">\n            <table class=\"table text-nowrap\">\n              <thead>\n                <tr>\n                  <th>Select</th>\n                  <th>Mobile No</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let e of registeredMobileList  | \n                      paginate: { id: 'listing_pagination',\n                      itemsPerPage: 5,\n                      currentPage: page2,\n                      totalItems: totalRec }, let i=index\n                      \">\n                  <td><input class=\"form-check-input\" type=\"checkbox\" [(ngModel)]=\"e.assignedMobileNo\" id=payval{{e}} name=\"e\"\n                    [value]=\"e\" (change)=\"selectMobile(e)\"></td>\n                  <td>{{e.mobileNo}}</td>\n                </tr>\n              </tbody>\n            </table>\n            <div class=\"col-md-3\">\n            <button (click)=\"onMobileLink(e)\" class=\"btn btn-light config btn-lg\" value=\"Login\">Link</button>\n            </div>\n          </div>\n        </div>-->\n\n          <div class=\"button-section\">\n            <button (click)=\"onBackClick()\" class=\"btn btn-default btn-lg\" value=\"Login\">Back</button>\n            <button type=\"button\" value=\"equipment\" (click)=\"addEquipment()\" class=\"btn btn-secondary btn-lg\">\n              Add Equipment</button>\n            <button type=\"button\" value=\"equipment\" (click)=\"registerMobile()\" class=\"btn btn-deep-orange btn-lg\">\n                Register Mobile</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n\n\n  <div *ngIf=\"iteration == 'EQUIPMENT'\">\n\n    <div class=\"card card-cascade narrower body-section reg\">\n      <div class=\"view view-cascade gradient-card-header blue-gradient\">\n        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Register Equipments</h4>\n      </div>\n      <div class=\"card-body\">\n        <form class=\"form\" (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\">\n          <div class=\"row\">\n            <div class=\"col-lg-4\">\n              <label>Equipment Maker</label>\n              <select class=\"form-control input-vendor\" name=\"#equipmentMaker\" [(ngModel)]=\"equipment.equipmentMaker\"\n                (change)=\"onChangeMaker()\" #equipmentMaker=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f.submitted && equipmentMaker.invalid }\" required>\n                <option [ngValue]=\"null\">Select Maker</option>\n                <option *ngFor=\"let m of makers\">\n                  {{m}}</option>\n              </select>\n              <div *ngIf=\"f.submitted && equipmentMaker.invalid\" class=\"invalid-feedback\">\n                <div *ngIf=\"equipmentMaker.errors.required\">Equipment Maker is required</div>\n              </div>\n            </div>\n\n            <div class=\"col-lg-4\">\n              <label>Equipment Name </label>\n              <select class=\"form-control input-vendor\" name=\"#equipmentName\" [(ngModel)]=\"equipment.equipmentName\"\n                (change)=\"onChangeName()\" #equipmentName=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f.submitted && equipmentName.invalid }\" required>\n                <option [ngValue]=\"null\">Select Name</option>\n                <option *ngFor=\"let n of names\">\n                  {{n}}</option>\n              </select>\n              <div *ngIf=\"f.submitted && equipmentName.invalid\" class=\"invalid-feedback\">\n                <div *ngIf=\"equipmentName.errors.required\">Equipment Name is required</div>\n              </div>\n            </div>\n            <div class=\"col-lg-4\">\n              <label>Equipment Id</label>\n              <select class=\"form-control input-vendor\" name=\"#uniqueEquipmentId\"\n                [(ngModel)]=\"equipment.uniqueEquipmentId\" (change)=\"onChangeId()\" #uniqueEquipmentId=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f.submitted && uniqueEquipmentId.invalid }\" required>\n                <option [ngValue]=\"null\">Select Id</option>\n                <option *ngFor=\"let e of equipments\">\n                  {{e.uniqueEquipmentId}}</option>\n              </select>\n              <div *ngIf=\"f.submitted && uniqueEquipmentId.invalid\" class=\"invalid-feedback\">\n                <div *ngIf=\"uniqueEquipmentId.errors.required\"> Equipment Id is required</div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-lg-4\">\n              <label>Equipment Description </label>\n              <input class=\"form-control input-vendor\" name=\"equipmentDesc\" required\n                [(ngModel)]=\"equipment.equipmentDesc\" type=\"text\" placeholder=\"Enter Equipment Description \"\n                #equipmentDesc=\"ngModel\" [ngClass]=\"{ 'is-invalid': f.submitted && equipmentDesc.invalid }\" required>\n              <div *ngIf=\"f.submitted && equipmentDesc.invalid\" class=\"invalid-feedback\">\n                <div *ngIf=\"equipmentDesc.errors.required\">Equipment is required</div>\n              </div>\n            </div>\n            <div class=\"col-lg-4\">\n              <label>Launched Year</label>\n              <select class=\"form-control input-vendor\" name=\"manufactureYear\" [(ngModel)]=\"product.manufactureYear\"\n                #manufactureYear=\"ngModel\" [ngClass]=\"{ 'is-invalid': f.submitted && manufactureYear.invalid }\"\n                required>\n                <option value=\"\" selected=\"selected\">Select Year</option>\n                <option *ngFor=\"let e of manufacturedYears\">\n                  {{e}}</option>\n              </select>\n              <div *ngIf=\"f.submitted && manufactureYear.invalid\" class=\"invalid-feedback\">\n                <div *ngIf=\"manufactureYear.errors.required\">Launched Year is required</div>\n              </div>\n            </div>\n            <div class=\"col-lg-4\">\n              <label>Product Category </label>\n              <select class=\"form-control\" name=\"productCategory\" (change)=\"onchangeCategory()\"\n                [(ngModel)]=\"product.productCategory\" #productCategory=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f.submitted && productCategory.invalid }\" required>\n                <option [ngValue]=\"null\">Select Category</option>\n                <option *ngFor=\"let c of categories\" [ngValue]=\"c.categoryId\">{{c.categoryDesc}}\n                </option>\n              </select>\n              <div *ngIf=\"f.submitted && productCategory.invalid\" class=\"invalid-feedback\">\n                <div *ngIf=\"productCategory.errors.required\">Product Category is required</div>\n              </div>\n            </div>\n\n          </div>\n\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-lg-4\">\n              <label>Product Name </label>\n              <select class=\"form-control\" name=\"#productId\" [(ngModel)]=\"product.productId\" #productId=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f.submitted && productId.invalid }\" required>\n                <option [ngValue]=\"null\">Select Name</option>\n                <option *ngFor=\"let n of products\" [ngValue]=\"n.productId\">\n                  {{n.productName}}</option>\n              </select>\n              <div *ngIf=\"f.submitted && productId.invalid\" class=\"invalid-feedback\">\n                <div *ngIf=\"productId.errors.required\">Product Name is required</div>\n              </div>\n            </div>\n            <div class=\"col-lg-4\">\n              <label>Preferred access type </label>\n              <select class=\"form-control\" name=\"#accessType\" [(ngModel)]=\"accessType\">\n                <option [ngValue]=\"null\">Select Name</option>\n              </select>\n            </div>\n            <div class=\"col-lg-4\">\n              <label>Serial Number </label>\n              <input type=\"text\" name=\"serialNo\" class=\"form-control input-vendor\" [(ngModel)]=\"serialNo\"\n                placeholder=\"Serial Number*\" #serialNo1=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f.submitted && serialNo1.invalid }\" required />\n              <div *ngIf=\"f.submitted && serialNo1.invalid\" class=\"invalid-feedback\">\n                <div *ngIf=\"serialNo1.errors.required\">Serial Number is required</div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-lg-4\">\n              <label>Mobile Number </label>\n              <input type=\"tel\" name=\"mobileNumber\" class=\"form-control input-vendor\" [(ngModel)]=\"mobileNumber\"\n                placeholder=\"Mobile Number*\" #mobileNumber1=\"ngModel\" pattern=\"[0-9]*\" maxlength=\"12\" minlength=\"10\"\n                [ngClass]=\"{ 'is-invalid': f.submitted && mobileNumber1.invalid }\" required />\n              <div *ngIf=\"f.submitted && mobileNumber1.invalid\" class=\"invalid-feedback\">\n                <div *ngIf=\"mobileNumber1.errors.required\">Mobile Number is required</div>\n                <div *ngIf=\"mobileNumber1.errors.pattern\">Please Enter Valid Mobile Number</div>\n                <div *ngIf=\"mobileNumber1.errors.minlength\">Mobile Number Should be 10 Digit</div>\n              </div>\n            </div>\n            \n            <div class=\"col-md-8\">\n              <div class=\"row\">\n                <!--<div class=\"col-sm-1\">\n                  <div class=\"form-group\">\n                    <i class=\"fa fa-plus\" aria-hidden=\"true\" style=\"font-size: 46px;margin-top: 36px;\"\n                      (click)=\"addAddress()\"></i>\n                  </div>\n              \n                </div>\n                -->\n              <!--  <section id=\"variableInputs\" *ngFor=\"let address of addresses; let i = index;\">\n                  <div class=\"col-sm-11\">\n                   \n                    <div class=\"form-group\">\n                      <input type=\"tel\" name=\"mobileNumber\" class=\"form-control input-vendor\"\n                        [(ngModel)]=\"address.address\" name=\"address_{{address.id}}\" #mobileNumber1=\"ngModel\"\n                        placeholder=\"Mobile Number*\" value=\"\" required pattern=\"[0-9]*\"\n                        [ngClass]=\"{ 'is-invalid': f.submitted && mobileNumber1.invalid }\" minlength=\"10\"\n                        maxlength=\"10\" pattern=\"[0-9]*\" />\n                      <div *ngIf=\"f.submitted && mobileNumber1.invalid\" class=\"invalid-feedback\">\n                        <div *ngIf=\"mobileNumber1.errors.required\">Mobile Number is required</div>\n                        <div *ngIf=\"mobileNumber1.errors.pattern\">Enter Valid Mobile Number</div>\n                      </div>\n                    </div>\n                  </div>\n                </section>\n                <i class=\"fa fa-minus\" aria-hidden=\"true\" style=\"font-size: 46px;margin-top: 36px;color:red\"\n                  (click)=\"removeAddress(i)\"></i>\n              -->\n              </div>\n            </div>\n          </div>\n        \n          <div class=\"button-section\">\n            <button (click)=\"onBackClick()\" class=\"btn btn-default btn-lg\" value=\"back\">Back</button>\n            <button type=\"submit\" (click)=\"submitEquipment()\" class=\"btn btn-success btn-lg\">Submit</button>\n          </div>\n        </form>\n\n      </div>\n    </div>\n\n  </div>\n\n\n\n  <div class=\"container-fluid\" style=\"padding-right:42px; padding-left:42px\" *ngIf=\"iteration =='Premium_Member'\">\n    <form name=\"form\" (ngSubmit)=\"f.form.valid && onApprove()\" #f=\"ngForm\">\n      <div class=\"card\">\n        <div class=\"view view-cascade gradient-card-header blue-gradient\">\n          <!-- Title -->\n          <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Credit Limit</h4>\n        </div>\n        <div class=\"card-body vendor\">\n          <div class=\"row\">\n            <div class=\"col-sm-4\">\n              <label>Organisation Name</label>\n              <input readonly class=\"form-control input-vendor\" [(ngModel)]=\"creditLimitManagement.organisationName\"\n                name=\"organisationName\" #organisationName=\"ngModel\" #organisationName=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f.submitted && organisationName.invalid }\" required>\n              <div *ngIf=\"f.submitted && organisationName.invalid\" class=\"invalid-feedback\">\n                <div *ngIf=\"organisationName.errors.required\">Organisation Name is required</div>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Enter Credit Limit</label>\n              <input type=\"text\" class=\"form-control input-vendor\" [(ngModel)]=\"creditLimitManagement.approvedAmount\"\n                name=\"approvedAmount\" #approvedAmount=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f.submitted && approvedAmount.invalid }\" required >\n                <div *ngIf=\"f.submitted && approvedAmount.invalid\" class=\"invalid-feedback\">\n                  <div *ngIf=\"approvedAmount.errors.required\">Credit Limit is required</div>\n                </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Enter No. Of Days</label>\n              <input type=\"text\" class=\"form-control input-vendor\" [(ngModel)]=\"creditLimitManagement.days\" name=\"days\" #days=\"ngModel\"\n              [ngClass]=\"{ 'is-invalid': f.submitted && days.invalid }\" required>\n              <div *ngIf=\"f.submitted && days.invalid\" class=\"invalid-feedback\">\n                <div *ngIf=\"days.errors.required\">No of Days is required</div>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>Rate of Interest(Per Day) %</label>\n              <input type=\"text\" class=\"form-control input-vendor\" [(ngModel)]=\"creditLimitManagement.rateOfInterest\"\n                name=\"rateOfInterest\" #rateOfInterest=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f.submitted && rateOfInterest.invalid }\" required >\n                <div *ngIf=\"f.submitted && rateOfInterest.invalid\" class=\"invalid-feedback\">\n                  <div *ngIf=\"rateOfInterest.errors.required\">Rate of Interest(Per Day) is required</div>\n                </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Processing Charges % </label>\n              <input type=\"text\" class=\"form-control input-vendor\" [(ngModel)]=\"creditLimitManagement.processingCharges\"\n                name=\"processingCharges\" #processingCharges=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f.submitted && processingCharges.invalid }\" required >\n                <div *ngIf=\"f.submitted && processingCharges.invalid\" class=\"invalid-feedback\">\n                  <div *ngIf=\"processingCharges.errors.required\">Processing Charge % is required</div>\n                </div>\n            </div>\n          </div>\n          <div class=\"row\" style=\"float: right;\">\n            <button class=\"btn btn-default btn-lg\" data-dismiss=\"modal\" (click)=\"onBack()\">Back</button>\n            <button class=\"btn btn-success btn-lg\" data-dismiss=\"modal\" type=\"submit\">Approve</button>\n          </div>\n        </div>\n      </div>\n    </form>\n  </div>\n  <!-- show premium membership -->\n  <div *ngIf=\"iteration =='Show_Premium_Member'\">\n    <div class=\"card addproduct\">\n      <div class=\"view view-cascade gradient-card-header blue-gradient\">\n        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Credit Limit</h4>\n      </div>\n      <div class=\"card-body\">\n        <div class=\"row\">\n\n          <div class=\"col-8 col-md-3 col-sm-3\">\n            <label class=\"preorderlabel\">Organisation Name :</label>\n          </div>\n          <div class=\"col-4 col-md-3 col-sm-3\">\n            <label class=\"preorderlabel\">{{creditLimitManagement.organisationName}}</label>\n          </div>\n\n\n          <div class=\"col-8 col-md-3 col-sm-3\">\n            <label class=\"preorderlabel\">Credit Limit :</label>\n          </div>\n          <div class=\"col-4 col-md-3 col-sm-3\">\n            <div class=\"form-group\">\n              <label class=\"preorderlabel\">{{creditLimitManagement.approvedAmount}}</label>\n            </div>\n          </div>\n        </div>\n\n        <hr class=\"my-0\">\n        <div class=\"row\">\n          <div class=\"col-8 col-md-3 col-sm-3\">\n            <label class=\"preorderlabel\"> No. Of Days :</label>\n          </div>\n          <div class=\"col-4 col-md-3 col-sm-3\">\n            <div class=\"form-group\">\n              <label class=\"preorderlabel\">{{creditLimitManagement.days}}</label>\n            </div>\n          </div>\n          <div class=\"col-8 col-md-3 col-sm-3\">\n            <label class=\"preorderlabel\">Rate of Interest(Per Day) % :</label>\n          </div>\n          <div class=\"col-4 col-md-3 col-sm-3\">\n            <div class=\"form-group\">\n              <label class=\"preorderlabel\">{{creditLimitManagement.rateOfInterest}}</label>\n            </div>\n          </div>\n        </div>\n\n        <hr class=\"my-0\">\n        <div class=\"row\">\n          <div class=\"col-8 col-md-3 col-sm-3\">\n            <label class=\"preorderlabel\">Processing Charges % :</label>\n          </div>\n          <div class=\"col-4 col-md-3 col-sm-3\">\n            <div class=\"form-group\">\n              <label class=\"preorderlabel\">{{creditLimitManagement.processingCharges}}</label>\n            </div>\n          </div>\n        </div>\n        <hr class=\"my-0\">\n        <div class=\"button-section\">\n          <button class=\"btn btn-light\" data-dismiss=\"modal\" (click)=\"onBack1()\">Back</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"container\" *ngIf=\"iteration == 'REGISTERED_MOBILE'\">\n  <div class=\"row\">\n    <div class=\"col-md-3\"></div>\n    <div class=\"col-md-6\">\n      <div class=\"card card-cascade none\">\n        <h5 class=\"card-header gradient-card-header blue-gradient white-text text-center py-4\">\n          <strong>Mobile Registration</strong>\n        </h5>\n        <div class=\"card-body\">\n          <div class=\"table table-responsive table-striped table-bordered\"\n            *ngIf=\"registeredMobileList!=null && registeredMobileList.length>0\">\n            <table class=\"table text-nowrap\">\n              <thead>\n                <tr>\n                  <th>SL. No.</th>\n                  <th>Mobile No</th>\n                  <th>Verified</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let e of registeredMobileList  | \n                      paginate: { id: 'listing_pagination',\n                      itemsPerPage: 5,\n                      currentPage: page2,\n                      totalItems: totalRec }, let i=index\n                      \">\n                  <td>{{i+1}}</td>\n                  <td>{{e.mobileNo}}</td>\n                  <td>{{e.verified}}</td>\n                </tr>\n              </tbody>\n            </table>\n\n          </div>\n          <form class=\"text-center border border-light p-5\" name=\"form\" (ngSubmit)=\"f.form.valid && onSaveMobile()\"\n            #f=\"ngForm\">\n            <div>\n              <label>Enter Mobile No </label>\n              <div class=\"form-group\">\n                <input class=\"form-control input-vendor\" name=\"mobileNo\" [(ngModel)]=\"mobileNo\" type=\"text\"\n                  #userName=\"ngModel\" placeholder=\"Enter Mobile No\" required>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-md-6\">\n                <div>\n                  <button (click)=\"onBack1()\" class=\"btn btn-default config btn-lg\" value=\"Login\">Back</button>\n                </div>\n              </div>\n              <div class=\"col-md-6\">\n                <button class=\"btn btn-success config btn-lg btn-block\" style=\"margin-top: 6px;\">Validate</button>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n      <div class=\"col-md-3\"></div>\n    </div>\n  </div>\n</div>\n\n\n<div class=\"container\" *ngIf=\"iteration == 'MOBILE_OTP'\">\n  <div class=\"row\">\n    <div class=\"col-md-3\"></div>\n    <div class=\"col-md-6\">\n      <div class=\"card card-cascade none\" >\n        <h5 class=\"card-header gradient-card-header blue-gradient white-text text-center py-4\">\n          <strong> Mobile Registration - Mobile No Verification</strong>\n        </h5>\n        <div class=\"card-body otp\">\n          <form class=\"form\" role=\"form\" #saveuser (ngSubmit)=\"continue(otp)\" autocomplete=\"off\">\n            <em>We have sent you the one time password to the entered Mobile Number {{mobileNo}}, please\n              enter in below,</em>\n            <br /><br />\n            <div class=\"form-group row\">\n              <div class=\"col-lg-8\">\n                <input class=\"form-control input-vendor\" name=\"otp\" [(ngModel)]=\"otp\" type=\"text\"\n                  placeholder=\"Enter OTP\" required>\n              </div>\n            </div>\n\n\n            <div class=\"row bt\">\n              <div class=\"col-lg-6\">\n                <button type=\"button\" (click)=\"onResendOtp()\" class=\"btn btn-deep-orange btn-block btn-lg\">Resend\n                  OTP</button>\n              </div>\n              <div class=\"col-lg-6\">\n                <button type=\"button\" (click)=\"onNextClickValidateOtp()\"\n                  class=\"btn btn-success btn-block btn-lg\">Proceed</button>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/dashboard/dashboard.component.html":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/components/dashboard/dashboard.component.html ***!
  \*****************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n\n\n<div class=\"container register\" *ngIf=\"iteration == 'initial'\">\n    <div class=\"row\" *ngIf=\"role=='ROLE_ADMIN'\">\n        <div class=\"col-6 col-md-4\">\n            <div class=\"card card-cascade\" [routerLink]=\"['/user']\">\n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\">User Management<br></h4>\n                </div>\n                <div class=\"card-body card-body-cascade text-center \">\n                    <i class=\"fas fa-user-plus\" style=\"font-size:83px;color:#fd5adafa\"></i>\n\n                </div>\n            </div>\n        </div>\n\n        <div class=\"col-6 col-md-4\">\n            <div class=\"card card-cascade\" [routerLink]=\"['/vendor']\">\n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Vendor Management</h4>\n                </div>\n                <div class=\"card-body card-body-cascade text-center \">\n                    <i class=\"fas fa-users\" style=\"font-size:90px;color:#f59d31fa\"></i>\n\n                </div>\n            </div>\n        </div>\n\n        <div class=\"col-6 col-md-4\">\n            <div class=\"card card-cascade\" [routerLink]=\"['/warehouse']\">\n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Warehouse Management</h4>\n                </div>\n                <div class=\"card-body card-body-cascade text-center \">\n                    <i class=\"fas fa-warehouse\" style=\"font-size:80px;color:#ef4848\"></i>\n                </div>\n            </div>\n\n        </div>\n\n        <div class=\"col-6 col-md-4\">\n            <div class=\"card card-cascade\" [routerLink]=\"['/co-operate']\">\n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Corporate Management</h4>\n                </div>\n                <div class=\"card-body card-body-cascade text-center \">\n                    <i class=\"fas fa-user-shield\" style=\"font-size:83px;color:#36c067fa\"></i>\n                </div>\n            </div>\n\n        </div>\n\n        <div class=\"col-6 col-md-4\">\n            <div class=\"card card-cascade\" [routerLink]=\"['/content']\">\n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Content Management</h4>\n                </div>\n                <div class=\"card-body card-body-cascade text-center \">\n                    <i class=\"fab fa-dropbox\" style=\"font-size:83px;color:#17c2aafa\"></i>\n                </div>\n            </div>\n\n        </div>\n\n        <div class=\"col-6 col-md-4\">\n            <div class=\"card card-cascade\" [routerLink]=\"['/reconil']\">\n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Reconciliation</h4>\n                </div>\n                <div class=\"card-body card-body-cascade text-center \">\n                    <i class=\"fas fa-balance-scale\" style=\"font-size:83px;color:#c668e5fa\"></i>\n                </div>\n            </div>\n\n        </div>\n\n        <div class=\"col-6 col-md-4\">\n            <div class=\"card card-cascade\" [routerLink]=\"['/price']\">\n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Price and Management</h4>\n                </div>\n                <div class=\"card-body card-body-cascade text-center \">\n                    <i class=\"fa fa-money\" style=\"font-size:83px;color:#2e78e7fa\"></i>\n                </div>\n            </div>\n\n        </div>\n\n        <div class=\"col-6 col-md-4\">\n            <div class=\"card card-cascade\" [routerLink]=\"['/rewardmang']\">\n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Reward Management</h4>\n                </div>\n                <div class=\"card-body card-body-cascade text-center \">\n                    <i class=\"fas fa-award\" style=\"font-size:83px;color:#b1ce10fa\"></i>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"col-6 col-md-4\">\n            <div class=\"card card-cascade\" [routerLink]=\"['/adminpay']\">\n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Payment</h4>\n                </div>\n                <div class=\"card-body card-body-cascade text-center \">\n                    <i class=\"fab fa-amazon-pay\" style=\"font-size:83px;color:#e3b227fa\"></i>\n                </div>\n            </div>\n\n        </div>\n    </div>\n\n\n    <!-- vendor user managment start form here -->\n    <div class=\"row\" *ngIf=\"role=='ROLE_VENDOR_USER'\">\n        <div class=\"col-6 col-md-4\">\n            <div class=\"card card-cascade\" [routerLink]=\"['../paymanage']\">\n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Price Management</h4>\n                </div>\n                <div class=\"card-body card-body-cascade text-center \">\n                    <i class=\"fa fa-money\" style=\"font-size:83px;color:#2e78e7fa\"></i>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"col-6 col-md-4\">\n     \n            <div class=\"card card-cascade\" [routerLink]=\"['../re']\">\n              \n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                   \n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\"> Reconciliation</h4>\n                </div>\n           \n                <div class=\"card-body card-body-cascade text-center \">\n                    <i class=\"fa fa-balance-scale\" style=\"font-size:83px;color:#c668e5fa\"></i>\n\n                </div>\n            </div>\n \n        </div>\n        <div class=\"col-6 col-md-4\">\n      \n            <div class=\"card card-cascade\" [routerLink]=\"['/vieworder']\">\n               \n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n            \n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\"> View All Orders</h4>\n                </div>\n        \n                <div class=\"card-body card-body-cascade text-center \">\n                    <i class=\"fas fa-tasks\" style=\"font-size:83px;color:#f18719fa\"></i>\n\n                </div>\n            </div>\n          \n        </div>\n\n        <div class=\"col-6 col-md-4\">\n         \n            <div class=\"card card-cascade\" [routerLink]=\"['/reportgen']\">\n           \n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n      \n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\"> Report Generation</h4>\n                </div>\n                \n                <div class=\"card-body card-body-cascade text-center \">\n                    <i class=\"fa fa-bar-chart\" style=\"font-size:83px;color:#0a7176\"></i>\n\n                </div>\n            </div>\n       \n        </div>\n        \n        <div class=\"col-6 col-md-4\">\n         \n            <div class=\"card card-cascade\" [routerLink]=\"['/vendorpayment']\">\n           \n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n      \n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\"> Admin Payment</h4>\n                </div>\n                \n                <div class=\"card-body card-body-cascade text-center \">\n                    <i class=\"fab fa-amazon-pay\" style=\"font-size:83px;color:#e3b227fa\"></i>\n\n                </div>\n            </div>\n       \n        </div>\n\n    </div>\n\n    <!--WAREHOUSE user starts-->\n    <div class=\"row\" *ngIf=\"role=='ROLE_WAREHOUSE_USER'\">\n\n        <div class=\"col-6 col-md-4\">\n      \n            <div class=\"card card-cascade\" [routerLink]=\"['/processorder']\">\n            \n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n               \n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\"> Order Processing</h4>\n                </div>\n              \n                <div class=\"card-body card-body-cascade text-center \">\n                    <i class=\"fa fa-clock-o\" style=\"font-size:83px;color:#ff4141fa\"></i>\n\n                </div>\n            </div>\n           \n        </div>\n\n        <div class=\"col-6 col-md-4\">\n           \n            <div class=\"card card-cascade\" [routerLink]=\"['/ware-report']\">\n              \n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                \n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\"> Reports</h4>\n                </div>\n       \n                <div class=\"card-body card-body-cascade text-center \">\n                    <i class=\"fa fa-bar-chart\" style=\"font-size:83px;color:#0a7176\"></i>\n\n                </div>\n            </div>\n        \n        </div>\n\n        <div class=\"col-6 col-md-4\">\n         \n            <div class=\"card card-cascade\" [routerLink]=\"['/process-order']\">\n          \n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n            \n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\"> View all Proccesed Order</h4>\n                </div>\n             \n                <div class=\"card-body card-body-cascade text-center \">\n                    <i class=\"fas fa-tasks\" style=\"font-size:83px;color:#f18719fa\"></i>\n\n                </div>\n            </div>\n     \n        </div>\n\n        <div class=\"col-6 col-md-4\">\n           \n            <div class=\"card card-cascade\" [routerLink]=\"['/ware-reconcil']\">\n            \n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n               \n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\"> Reconciliation</h4>\n                </div>\n               \n                <div class=\"card-body card-body-cascade text-center \">\n                    <i class=\"fa fa-balance-scale\" style=\"font-size:83px;color:#c668e5fa\"></i>\n                </div>\n            </div>\n      \n        </div>\n    </div>\n\n    <!-- End User -->\n    <div class=\"row\" *ngIf=\"role=='ROLE_USER'\">\n        \n        <div class=\"col-6 col-md-4\">\n     \n            <div class=\"card card-cascade\" [routerLink]=\"['/pre-order']\">\n            \n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                 \n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Pre-Order<br></h4>\n                </div>\n             \n                <div class=\"card-body card-body-cascade text-center \">\n                    <i class=\"fa fa-cart-plus\" style=\"font-size:104px;color:#ff9109fa\"></i>\n                </div>\n            </div>\n          \n        </div>\n        <div class=\"col-6 col-md-4\">\n           \n            <div class=\"card card-cascade\" [routerLink]=\"['/orderuser']\">\n              \n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n           \n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Order</h4>\n                </div>\n              \n                <div class=\"card-body card-body-cascade text-center\">\n                    <i class=\"fa fa-shopping-basket\" style=\"font-size:86px;color:#8e46c4\"></i>\n                </div>\n            </div>\n        \n        </div>\n        <div class=\"col-6 col-md-4\">\n         \n            <div class=\"card card-cascade\" [routerLink]=\"['/wallet']\">\n            \n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                  \n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Wallet and Rewards </h4>\n                </div>\n             \n                <div class=\"card-body card-body-cascade text-center\">\n                    <i class=\"fas fa-envelope-open-text\" style=\"font-size:93px;color:darkgreen\"></i>\n\n                </div>\n            </div>\n        \n        </div>\n        <div class=\"col-6 col-md-4\">\n           \n            <div class=\"card card-cascade\" [routerLink]=\"['#']\">\n               \n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                  \n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Reports</h4>\n                </div>\n                \n                <div class=\"card-body card-body-cascade text-center\">\n                    <i class=\"fas fa-chart-bar\" style=\"font-size:104px;color:#0a7176\"></i>\n                </div>\n            </div>\n           \n        </div>\n\n\n        <div class=\"col-6 col-md-4\">\n            \n            <div class=\"card card-cascade\" [routerLink]=\"['/offeruser']\">\n               \n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n               \n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Offers</h4>\n                </div>\n              \n                <div class=\"card-body card-body-cascade text-center\">\n                    <i class=\"fa fa-gift\" style=\"font-size:104px;color:red\"></i>\n\n                </div>\n            </div>\n          \n        </div>\n        <div class=\"col-6 col-md-4\">\n          \n            <div class=\"card card-cascade\" [routerLink]=\"['#']\">\n                \n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                 \n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Budgeting and Planing</h4>\n                </div>\n             \n                <div class=\"card-body card-body-cascade text-center\">\n                    <i class=\"fa fa-fax\" style=\"font-size:88px;color:#2365f9\"></i>\n                </div>\n            </div>\n           \n        </div>\n    </div>\n\n    <!-- Corporate User -->\n    <div class=\"row\" *ngIf=\"role=='ROLE_CORPORATE_USER'\">\n        <div class=\"col-6 col-md-4\">\n         \n            <div class=\"card card-cascade\" [routerLink]=\"['/pre-order']\">\n          \n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                   \n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Pre-Order</h4>\n                </div>\n           \n                <div class=\"card-body card-body-cascade text-center\">\n                    <i class=\"fa fa-cart-plus\" style=\"font-size:104px;color:#ff9109fa\"></i>\n\n                </div>\n            </div>\n       \n        </div>\n\n        <div class=\"col-6 col-md-4\">\n        \n            <div class=\"card card-cascade\" [routerLink]=\"['/orderuser']\">\n           \n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n              \n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Order</h4>\n                </div>\n              \n                <div class=\"card-body card-body-cascade text-center\">\n                    <i class=\"fa fa-shopping-basket\" style=\"font-size:86px;color:#8e46c4\"></i>\n\n                </div>\n            </div>\n           \n        </div>\n        <div class=\"col-6 col-md-4\" *ngIf=\"user.userType=='CORPORATE_SUPERVISOR'\">\n  \n            <div class=\"card card-cascade\" [routerLink]=\"['/wallet']\">\n               \n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n               \n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Wallet and Rewards</h4>\n                </div>\n            \n                <div class=\"card-body card-body-cascade text-center\">\n                    <i class=\"fas fa-envelope-open-text\" style=\"font-size:93px;color:darkgreen\"></i>\n\n                </div>\n            </div>\n        \n        </div>\n        <div class=\"col-6 col-md-4\">\n          \n            <div class=\"card card-cascade\" [routerLink]=\"['#']\">\n                \n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n              \n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Reports</h4>\n                </div>\n        \n                <div class=\"card-body card-body-cascade text-center\">\n                    <i class=\"fas fa-chart-bar\" style=\"font-size:104px;color:#0a7176\"></i>\n\n                </div>\n            </div>\n       \n        </div>\n        <div class=\"col-6 col-md-4\">\n         \n            <div class=\"card card-cascade\" [routerLink]=\"['/offeruser']\">\n             \n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                 \n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Offers</h4>\n                </div>\n              \n                <div class=\"card-body card-body-cascade text-center\">\n                    <i class=\"fa fa-gift\" style=\"font-size:104px;color:red\"></i>\n\n                </div>\n            </div>\n        \n        </div>\n        <div class=\"col-6 col-md-4\">\n       \n            <div class=\"card card-cascade\" [routerLink]=\"['#']\">\n              \n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n             \n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\"> Budgeting and Planing</h4>\n                </div>\n              \n                <div class=\"card-body card-body-cascade text-center\">\n                    <i class=\"fa fa-fax\" style=\"font-size:88px;color:#2365f9\"></i>\n\n                </div>\n            </div>\n         \n        </div>\n    </div>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/editalert/editalert.component.html":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/components/editalert/editalert.component.html ***!
  \*****************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n<div class=\"container-fluid\" style=\"padding-right:42px; padding-left:42px\">\n    <!-- Card -->\n    <div class=\"card card-cascade\">\n        <div class=\"view view-cascade gradient-card-header blue-gradient\">\n            <!-- Title -->\n            <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Edit Alert Management</h4>\n        </div>\n        <!-- Card content -->\n        <div class=\"card-body card-body-cascade \">\n            <form class=\"form\" role=\"form\" #savealert (ngSubmit)=\"saveAlert(saveAlert)\" autocomplete=\"off\">\n                <div class=\"row\">\n                    <div class=\"col-md-4\">\n                        <label>Event </label>\n                        <div class=\"form-group\">\n                            <select name=\"alertEvent\" [(ngModel)]=\"alert.selectedAlertEvent\" class=\"form-control\"\n                                required>\n                                <option *ngFor=\"let event of events\" [value]=\"event.eventName\">\n                                    {{event.eventName}}\n                                </option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <label>Role </label>\n                        <div class=\"form-group\">\n                            <select name=\"role\" [(ngModel)]=\"alert.selectedUserRole\n                            \" class=\"form-control inpu-vendor\" required>\n                                <option *ngFor=\"let role of roles\" [value]=\"role.roleName\">\n                                    {{role.roleName}}\n                                </option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <label>Alert Name</label>\n                        <div class=\"form-group\">\n                            <input class=\"form-control input-vendor\" name=\"alertName\" [(ngModel)]=\"alert.alertName\"\n                                type=\"text\" placeholder=\"Enter Alert Name\" required>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"row\">\n                    <div class=\"col-md-4\">\n                        <label>Alert Send Via </label>\n                        <div class=\"form-group\">\n                            <select name=\"sendVia\" [(ngModel)]=\"sendVia\" class=\"form-control\" required>\n                                <option *ngFor=\"let notify of notifyTypes\" [value]=\"notify.paramName\">\n                                    {{notify.paramDesc}}\n                                </option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <label>Remarks</label>\n                        <div class=\"form-group\">\n                            <input name=\"sendVia\" class=\"form-control input-vendor\" [(ngModel)]=\"alert.remarks\"\n                                type=\"text\" placeholder=\"Enter Remarks\" required>\n                        </div>\n                    </div>\n                </div>\n                <br>\n                <div class=\"button-section\">\n                    <button [routerLink]=\"['/viewAllAlerts']\" class=\"btn btn-default btn-lg\">Back</button>\n                    <button type=\"button\" (click)=\"updateAlert()\" class=\"btn btn-success btn-lg\">Update\n                        Alert</button>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/editprofile/editprofile.component.html":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/components/editprofile/editprofile.component.html ***!
  \*********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n\n<div class=\"container-fluid\">\n  <div *ngIf=\"iteration=='MENU'\">\n    <div class=\"row\">\n      <div class=\"col-md-3\"></div>\n      <div class=\"col-6 col-md-3\">\n        <div class=\"card card-cascade\" (click)=\"basicInfo()\" *ngIf=\"name=='editProfile'\">\n          <div class=\"view view-cascade gradient-card-header blue-gradient\">\n            <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Edit Basic Information</h4>\n          </div>\n          <div class=\"card-body card-body-cascade text-center \">\n            <i class=\"fa fa-pencil-square-o\" style=\"font-size:88px;color:#c2920a\"></i>\n\n          </div>\n        </div>\n      </div>\n\n      <div class=\"col-6 col-md-3\">\n        <div class=\"card card-cascade\" (click)=\"changePassword()\" *ngIf=\"name=='editProfile'\">\n          <div class=\"view view-cascade gradient-card-header blue-gradient\">\n            <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Change Password</h4>\n          </div>\n          <div class=\"card-body card-body-cascade text-center \">\n            <i class=\"fa fa-key\" style=\"font-size:88px;color:#fd033d\"></i>\n\n          </div>\n        </div>\n      </div>\n\n    </div>\n    <div class=\"row\">\n      <div class=\"col-6 col-md-2\"></div>\n      <div class=\"col-6 col-md-3\" *ngIf=\"role=='ROLE_USER' && name=='equipmentlinking'\">\n        <div class=\"card card-cascade\" (click)=\"equipmentLink()\">\n          <div class=\"view view-cascade gradient-card-header blue-gradient\">\n            <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Equipment Product Linking</h4>\n          </div>\n          <div class=\"card-body card-body-cascade text-center \">\n            <!-- <img class=\"card-img-top\" src=\"assets/equp.png\" style=\"width: 120px;height:100px\"> -->\n            <i class=\"fa fa-link\" style=\"font-size:88px;color:#ffd400\"></i>\n\n          </div>\n        </div>\n      </div>\n      <div class=\"col-6 col-md-3\" *ngIf=\"role=='ROLE_USER' && name=='equipmentlinking'\">\n        <div class=\"card card-cascade\" (click)=\"registerMobile()\">\n          <div class=\"view view-cascade gradient-card-header blue-gradient\">\n            <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Register Mobile Number</h4>\n          </div>\n          <div class=\"card-body card-body-cascade text-center \">\n            <!-- <img class=\"card-img-top\" src=\"assets/equp.png\" style=\"width: 120px;height:100px\"> -->\n            <i class=\"fa fa-link\" style=\"font-size:88px;color:#ffd400\"></i>\n\n          </div>\n        </div>\n      </div>\n      <div class=\"col-6 col-md-3\" *ngIf=\"role=='ROLE_USER' && name=='equipmentlinking'\">\n        <div class=\"card card-cascade\" (click)=\"equipmentMobileLink()\">\n          <div class=\"view view-cascade gradient-card-header blue-gradient\">\n            <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Equipment Mobile Linking</h4>\n          </div>\n          <div class=\"card-body card-body-cascade text-center \">\n            <i class=\"fa fa-link\" style=\"font-size:88px;color:#ffd400\"></i>\n         </div>\n        </div>\n      </div>\n\n    </div>\n    <div class=\"row\">\n      <div class=\"col-6 col-md-3\"></div>\n      <div class=\"col-6 col-md-3\" *ngIf=\"role=='ROLE_ADMIN' && name=='configuration'\">\n        <div class=\"card card-cascade\" (click)=\"Configuration()\">\n          <div class=\"view view-cascade gradient-card-header blue-gradient\">\n            <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Configuration</h4>\n          </div>\n          <div class=\"card-body card-body-cascade text-center \">\n            <i class=\"fas fa-sliders-h\" style=\"font-size:88px;color:#f10ce0\"></i>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\" *ngIf=\"name=='configuration' || name == 'equipmentlinking'\">\n      <div class=\"col-md-3\"></div>\n      <div class=\"col-md-3\">\n        <div class=\"button-section\">\n          <button class=\"btn btn-primary btn-lg\" [routerLink]=\"['/dashboard']\">Dashboard</button>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\" *ngIf=\"name=='editProfile'\">\n      <div class=\"col-md-3\"></div>\n      <div class=\"col-md-3\"></div>\n      <div class=\"col-md-3\">\n        <div class=\"button-section\">\n          <button class=\"btn btn-primary btn-lg\" [routerLink]=\"['/dashboard']\">Dashboard</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div *ngIf=\"iteration=='BASIC_INFO'\" class=\"container-fluid\" style=\"padding-right:42px; padding-left:42px\">\n\n  <div class=\"card\">\n    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n      <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Edit User</h4>\n    </div>\n    <div class=\"card-body\">\n      <form class=\"form\" (ngSubmit)=\"f.form.valid && updateUser()\" #f=\"ngForm\">\n        <div class=\"row\">\n          <div class=\"col-lg-4\">\n            <label>User Name </label>\n            <div class=\"form-group\">\n              <input class=\"form-control input-vendor\" name=\"userName\" [(ngModel)]=\"user.userName\" type=\"text\"\n                #userName=\"ngModel\" placeholder=\"Enter User Name\" required>\n              <div *ngIf=\"userName.invalid && (userName.dirty || userName.touched)\" class=\"alert alert-danger\">\n                <div [hidden]=\"!userName.hasError('required')\">User Name Required</div>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-lg-4\">\n            <label>First Name </label>\n            <div class=\"form-group\">\n              <input class=\"form-control input-vendor\" name=\"firstName\" [(ngModel)]=\"user.firstName\" type=\"text\"\n                #firstName=\"ngModel\" placeholder=\"Enter First Name\" required>\n              <div *ngIf=\"firstName.invalid && (firstName.dirty || firstName.touched)\" class=\"alert alert-danger\">\n                <div [hidden]=\"!firstName.hasError('required')\">First Name Required</div>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-lg-4\">\n            <label>Last Name </label>\n            <div class=\"form-group\">\n              <input class=\"form-control input-vendor\" name=\"lastName\" [(ngModel)]=\"user.lastName\" type=\"text\"\n                #lastName=\"ngModel\" placeholder=\"Enter Last Name\" required>\n              <div *ngIf=\"lastName.invalid && (lastName.dirty || lastName.touched)\" class=\"alert alert-danger\">\n                <div [hidden]=\"!lastName.hasError('required')\">Last Name Required</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <!-- row ends -->\n\n        <div class=\"row\">\n          <div class=\"col-lg-4\">\n            <label>E-Mail Id </label>\n            <div class=\"form-group\">\n              <input class=\"form-control input-vendor\" name=\"email\" [(ngModel)]=\"user.email\" type=\"text\"\n                pattern=\"^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$\" #email=\"ngModel\" placeholder=\"Enter Email Id\"\n                required>\n              <div *ngIf=\"email.invalid && (email.dirty || email.touched)\" class=\"alert alert-danger\">\n                <div *ngIf=\"email.hasError('required')\">Email is required</div>\n                <div *ngIf=\"email.hasError('pattern')\">Email format should be\n                  <b>singapore@sipl.com</b>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-lg-4\">\n            <label>Mobile Number </label>\n            <div class=\"form-group\">\n              <input class=\"form-control input-vendor\" name=\"mobileNumber\" [(ngModel)]=\"user.mobileNumber\" type=\"tel\"\n                pattern=\"[0-9]*\" minlength=\"10\" maxlength=\"10\" #mobileNumber=\"ngModel\" placeholder=\"Enter Mobile Number\"\n                required #mobileNumber=\"ngModel\" [ngClass]=\"{ 'is-invalid': f.submitted && mobileNumber.invalid }\"\n                >\n              <div *ngIf=\"f.submitted && mobileNumber.invalid\" class=\"invalid-feedback\">\n                <div *ngIf=\"mobileNumber.errors.required\">Mobile Number is required</div>\n                <div *ngIf=\"mobileNumber.errors.minlength\">Enter Valid Mobile Number</div>\n                <div *ngIf=\"mobileNumber.errors.pattern\">Enter Valid Mobile Number</div>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-lg-4\">\n            <label>Country </label>\n            <div class=\"form-group\">\n              <select disabled class=\"form-control\" name=\"countryId\" [(ngModel)]=\"user.address.countryId\"\n                #countryId=\"ngModel\" (change)=\"onChangeCountry()\">\n                <option [ngValue]=\"null\">Select Country</option>\n                <option *ngFor=\"let c of countries\" [ngValue]=\"c.countryId\">{{c.countryName}}</option>\n              </select>\n              <div *ngIf=\"countryId.invalid && (countryId.dirty || countryId.touched)\" class=\"alert alert-danger\">\n                <div [hidden]=\"!countryId.hasError('required')\">Select Country </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n\n        <!-- row start -->\n        <div class=\"row\">\n          <div class=\"col-lg-4\">\n            <label>State </label>\n            <div class=\"form-group\">\n              <select class=\"form-control\" name=\"stateId\" [(ngModel)]=\"user.address.stateId\" #stateId=\"ngModel\"\n                (change)=\"onChangeState()\" [ngModelOptions]=\"{standalone: true}\">\n                <option [ngValue]=\"null\">Select state</option>\n                <option *ngFor=\"let s of states\" [value]=\"s.stateId\">{{s.stateName}}</option>\n              </select>\n              <div *ngIf=\"stateId.invalid && (stateId.dirty || stateId.touched)\" class=\"alert alert-danger\">\n                <div [hidden]=\"!stateId.hasError('required')\">Select State</div>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-lg-4\">\n            <label>City </label>\n            <div class=\"form-group \">\n              <select class=\"form-control\" name=\"cityId\" [(ngModel)]=\"user.address.cityId\"\n                [ngModelOptions]=\"{standalone: true}\">\n                <option value=\"0\">Select City</option>\n                <option *ngFor=\"let s of cities\" [value]=\"s.cityId\">{{s.cityName}}</option>\n              </select>\n            </div>\n          </div>\n          <div class=\"col-lg-4\">\n            <label>Region </label>\n            <div class=\"form-group\">\n              <input name=\"region\" class=\"form-control input-vendor\" [(ngModel)]=\"user.address.region\" type=\"text\"\n                #region=\"ngModel\" placeholder=\"Enter Region\" required>\n              <div *ngIf=\"region.invalid && (region.dirty || region.touched)\" class=\"alert alert-danger\">\n                <div *ngIf=\"region.errors.required\">\n                  Region Required.\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"form-group\" style=\"float: right;\" *ngIf=\"role=='ROLE_USER'\">\n          <button (click)=\"onBackClick1()\" class=\"btn btn-default btn-lg\" type=\"button\">Back</button>\n          <button type=\"sumbit\" class=\"btn btn-primary btn-lg\">Update User</button>\n          <button (click)=\"onClickMembership()\" class=\"btn btn-success btn-lg\">Premium Member</button>\n        </div>\n\n        <div class=\"form-group\" style=\"float: right;\" *ngIf=\"role!='ROLE_USER'\">\n          <button (click)=\"onBackClick1()\" class=\"btn btn-default btn-lg\" type=\"button\">Back</button>\n          <button type=\"submit\"  class=\"btn btn-success btn-lg\">Update User</button>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>\n<br>\n\n\n<div *ngIf=\"iteration=='CHANGE_PASSWORD'\" class=\"container\">\n  <div class=\"row justify-content-center align-items-center\">\n    <div class=\"mx-auto col-sm-9\">\n      <div class=\"card card card-cascade narrower body-section\">\n\n        <h5 class=\"card-header gradient-card-header blue-gradient white-text text-center py-4\">\n          <strong>Change Password</strong>\n        </h5>\n        <div class=\"card-body reg\">\n          <form class=\"form\" role=\"form\" (ngSubmit)=\"f.form.valid && resetPassword()\" #f=\"ngForm\">\n            <div class=\"form-group row\">\n              <label class=\"col-lg-4 col-form-label form-control-label\">User Name </label>\n              <div class=\"col-lg-8\">\n                {{user.userName}}\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <label class=\"col-lg-4 col-form-label form-control-label\">Email </label>\n              <div class=\"col-lg-8\">\n                {{user.email}}\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <label class=\"col-lg-4 col-form-label form-control-label\">New Password </label>\n              <div class=\"col-lg-8\">\n                <div class=\"form-group\">\n                  <input class=\"form-control input-vendor\" name=\"password\" [(ngModel)]=\"password\" type=\"password\"\n                    placeholder=\"Password\" #password1=\"ngModel\"\n                    [ngClass]=\"{ 'is-invalid': f.submitted && password1.invalid }\" required minlength=\"6\" />\n                  <div *ngIf=\"f.submitted && password1.invalid\" class=\"invalid-feedback\">\n                    <div *ngIf=\"password1.errors.required\">Password is required</div>\n                    <div *ngIf=\"password1.errors.minlength\">Password must be at least 6 characters</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <label class=\"col-lg-4 col-form-label form-control-label\">Re-Type New Password </label>\n              <div class=\"col-lg-8\">\n                <div class=\"form-group\">\n                  <input class=\"form-control input-vendor\" name=\"retypePassword\" [(ngModel)]=\"retypePassword\"\n                    type=\"password\" placeholder=\"Re-Type Password\" #retypePassword1=\"ngModel\"\n                    [ngClass]=\"{ 'is-invalid': f.submitted && retypePassword1.invalid }\" required />\n                  <div *ngIf=\"f.submitted && retypePassword1.invalid\" class=\"invalid-feedback\">\n                    <div *ngIf=\"retypePassword1.errors.required\">Retype Password is required</div>\n                    <div *ngIf=\"retypePassword1.errors.mustMatch\">Passwords must match</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"text-center\">\n\n            </div>\n            <div class=\"row\">\n              <div class=\"col-md-3\"></div>\n              <div class=\"col-md-4\" *ngIf=\"role=='ROLE_USER'\">\n                <button (click)=\"onBackClick1()\" class=\"btn btn-default btn-lg btn-block\">Back</button>\n              </div>\n              <div class=\"col-md-4\" *ngIf=\"role!=='ROLE_USER'\">\n                <button (click)=\"onBackClick1()\" class=\"btn btn-default btn-lg btn-block\">Back</button>\n              </div>\n\n              <div class=\"col-md-5\">\n                <button type=\"submit\" class=\"btn btn-primary btn-block btn-lg\">Change Password</button>\n              </div>\n\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<br>\n\n<div *ngIf=\"iteration=='premium'\" class=\"container-fluid\" style=\"padding-right:42px; padding-left:42px\">\n  <div class=\"card\">\n    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n      <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Premium Membership</h4>\n    </div>\n    <div class=\"card-body\">\n      <form name=\"form\" (ngSubmit)=\"f.form.valid && onApplyForMembership()\" #f=\"ngForm\">\n        <div class=\"row\">\n          <div class=\"col-lg-4\">\n            <label>Occupation</label>\n            <div class=\"form-group\">\n              <input type=\"text\" class=\"form-control input-vendor\" name=\"occuption\" placeholder=\"Enter Occupation\"\n                [(ngModel)]=\"user.occuption\" #occuption=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f.submitted && occuption.invalid }\" required>\n              <div *ngIf=\"f.submitted && occuption.invalid\" class=\"invalid-feedback\">\n                <div *ngIf=\"occuption.errors.required\">Occupation required</div>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-lg-4\">\n            <label>Monthly Income</label>\n            <div class=\"form-group\">\n              <input type=\"text\" class=\"form-control input-vendor\" name=\"monthlyIncome\"\n                placeholder=\"Enter Monthly Income\" [(ngModel)]=\"user.monthlyIncome\" #monthlyIncome=\"ngModel\"\n                pattern=\"['0-9',{/^\\d+\\.\\d{2}$/}]*\" [ngClass]=\"{ 'is-invalid': f.submitted && monthlyIncome.invalid }\"\n                required>\n              <div *ngIf=\"f.submitted && monthlyIncome.invalid\" class=\"invalid-feedback\">\n                <div *ngIf=\"monthlyIncome.errors.required\">Monthly Income is required</div>\n                <div *ngIf=\"monthlyIncome.errors.pattern\">Only numbers Allowed</div>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-lg-4\">\n            <label>Organization Name</label>\n            <div class=\"form-group\">\n              <input type=\"text\" class=\"form-control input-vendor\" name=\"organizationName\"\n                placeholder=\"Enter Organization Name\" [(ngModel)]=\"user.organizationName\" #organizationName=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f.submitted && organizationName.invalid }\" required>\n              <div *ngIf=\"f.submitted && organizationName.invalid\" class=\"invalid-feedback\">\n                <div *ngIf=\"organizationName.errors.required\"> Organization Name required</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\" style=\"float: right;\">\n          <button (click)=\"onBackClick1()\" class=\"btn btn-default  btn-lg\">Back</button>\n          <button class=\"btn btn-success  btn-lg\" type=\"submit\">APPLY FOR\n            MEMBERSHIP</button>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>\n\n\n<div class=\"container\" *ngIf=\"iteration=='premiumMembership'\">\n\n  <div class=\"card card-cascade narrower body-section\">\n    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n      <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Premium Membership</h4>\n    </div>\n    <!-- Card content -->\n    <div class=\"card-body card-body-cascade\">\n      <form name=\"form\" (ngSubmit)=\"f.form.valid && apply()\" #f=\"ngForm\">\n        <h4 style=\"font-weight: bold;\">\n          Customer Id &nbsp;&nbsp; <b class=\"color\">{{creditLimitManagement.uniqueUserId}}</b>\n        </h4>\n        <br>\n        <div class=\"row\" *ngIf=\"creditLimitManagement.createdDate==null\">\n          <div class=\"col-lg-2\"></div>\n          <div class=\"col-lg-4\">\n            <label>Enter Credit amount to be Requsted</label>\n            <div class=\"form-group\">\n              <input class=\"form-control input-vendor\" name=\"requestedAmount\" pattern=\"^[1-9]\\d*$\" min=\"1\"\n                oninput=\"validity.valid||(value='');\" [(ngModel)]=\"creditLimitManagement.requestedAmount\" type=\"number\"\n                #requestedAmount=\"ngModel\" placeholder=\"Enter Amount\" #requestedAmount=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f.submitted && requestedAmount.invalid }\" required>\n              <div *ngIf=\"f.submitted && requestedAmount.invalid\" class=\"invalid-feedback\">\n                <div *ngIf=\"requestedAmount.errors.required\"> Credit amount to be requsted required</div>\n                <div *ngIf=\"requestedAmount.errors.pattern\"> Enter Amount should Greater than Zero </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-lg-4\">\n            <button type=\"submit\" class=\"btn btn-success btn-lg btn-block req\">REQUEST CREDIT</button>\n          </div>\n        </div>\n\n        <div class=\"row\" *ngIf=\"creditLimitManagement.createdDate!=null\">\n          <div class=\"col-lg-3\"></div>\n          <div class=\"col-lg-3\" style=\"font-weight: bold; font-size: larger;\">\n            <label>Requested amount : &nbsp;\n              <b class=\"request\" style=\"color: red;\">{{creditLimitManagement.requestedAmount}}\n              </b>\n            </label>\n          </div>\n          <div *ngIf=\"creditLimitManagement.approvedYn==true\" class=\"col-lg-3\"\n            style=\"font-weight: bold; font-size: larger;\">\n            <label>Approved amount : &nbsp;&nbsp;\n              <b class=\"request\" style=\"color: green;\">{{creditLimitManagement.approvedAmount}}\n              </b>\n            </label>\n          </div>\n\n          <div *ngIf=\"creditLimitManagement.approvedYn==false || creditLimitManagement.approvedYn==null\"\n            class=\"col-lg-4\" style=\"font-weight: bold; font-size: larger;\">\n            <label>Status : &nbsp;<b style=\"color: red;\">Not Approved</b></label>\n          </div>\n\n        </div>\n      </form>\n      <div class=\"button-section\">\n        <button type=\"button\" (click)=\"onBack()\" class=\"btn btn-default btn-lg\">Back</button>\n      </div>\n    </div>\n  </div>\n</div>\n\n\n<div class=\"container-fluid\" *ngIf=\"iteration == 'EQUIPMENT_LINKING'\">\n  <div class=\"card card-cascade none\">\n    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n      <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Register Equipments</h4>\n    </div>\n    <div class=\"card-body card-body-cascade\">\n      <ul class=\"nav nav-tabs nav-justified\" id=\"myTab\" role=\"tablist\">\n        <li class=\"nav-item\">\n          <a class=\"nav-link active\" id=\"eq1-tab\" data-toggle=\"tab\" href=\"#eq1\" role=\"tab\" aria-controls=\"eq1\"\n            aria-selected=\"true\"> EQ1</a>\n        </li>\n        <li class=\"nav-item\">\n          <a class=\"nav-link\" id=\"eq2-tab\" data-toggle=\"tab\" href=\"#eq2\" role=\"tab\" aria-controls=\"eq2\"\n            aria-selected=\"false\">EQ2</a>\n        </li>\n        <li class=\"nav-item\">\n          <a class=\"nav-link\" id=\"eq3-tab\" data-toggle=\"tab\" href=\"#eq3\" role=\"tab\" aria-controls=\"eq3\"\n            aria-selected=\"false\"> EQ3</a>\n        </li>\n        <li class=\"nav-item\">\n          <a class=\"nav-link\" id=\"eq4-tab\" data-toggle=\"tab\" href=\"#eq4\" role=\"tab\" aria-controls=\"eq4\"\n            aria-selected=\"false\">EQ4</a>\n        </li>\n        <li class=\"nav-item\">\n          <a class=\"nav-link\" id=\"eq5-tab\" data-toggle=\"tab\" href=\"#eq5\" role=\"tab\" aria-controls=\"eq5\"\n            aria-selected=\"false\">EQ5</a>\n        </li>\n      </ul>\n      <div class=\"tab-content\" id=\"myTabContent\">\n        <div class=\"tab-pane fade show active text-align form-new\" id=\"eq1\" role=\"tabpanel\" aria-labelledby=\"eq1-tab\">\n          <div class=\"card-body\">\n            <form name=\"form\" (ngSubmit)=\"f.form.valid && submitEquipment()\" #f=\"ngForm\">\n              <div class=\"row\">\n                <div class=\"col-md-4\">\n                  <label>Equipment Maker</label>\n                  <div class=\"form-group\">\n                    <select class=\"form-control input-vendor\" name=\"#equipmentMaker\"\n                      [(ngModel)]=\"equipment.equipmentMaker\" (change)=\"onChangeMaker()\" #equipmentMaker=\"ngModel\"\n                      [ngClass]=\"{ 'is-invalid': f.submitted && equipmentMaker.invalid }\" required>\n                      <option [ngValue]=\"null\">Select Maker</option>\n                      <option *ngFor=\"let m of makers\">\n                        {{m}}</option>\n                    </select>\n                    <div *ngIf=\"f.submitted && equipmentMaker.invalid\" class=\"invalid-feedback\">\n                      <div *ngIf=\"equipmentMaker.errors.required\">Equipment Maker is required</div>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"col-md-4\">\n                  <label>Equipment Name</label>\n                  <div class=\"form-group\">\n                    <select class=\"form-control input-vendor\" name=\"#equipmentName\"\n                      [(ngModel)]=\"equipment.equipmentName\" (change)=\"onChangeName()\" #equipmentName=\"ngModel\"\n                      [ngClass]=\"{ 'is-invalid': f.submitted && equipmentMaker.invalid }\" required>\n                      <option [ngValue]=\"null\">Select Name</option>\n                      <option *ngFor=\"let n of names\">\n                        {{n}}</option>\n                    </select>\n                    <div *ngIf=\"f.submitted && equipmentName.invalid\" class=\"invalid-feedback\">\n                      <div *ngIf=\"equipmentName.errors.required\">Equipment Name is required</div>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"col-md-4\">\n                  <label>Equipment Id</label>\n                  <div class=\"form-group\">\n                    <select class=\"form-control input-vendor\" name=\"#uniqueEquipmentId\"\n                      [(ngModel)]=\"equipment.uniqueEquipmentId\" (change)=\"onChangeId()\" #uniqueEquipmentId=\"ngModel\"\n                      [ngClass]=\"{ 'is-invalid': f.submitted && uniqueEquipmentId.invalid }\" required>\n                      <option [ngValue]=\"null\">Select Id</option>\n                      <option *ngFor=\"let e of equipments\">\n                        {{e.uniqueEquipmentId}}</option>\n                    </select>\n                    <div *ngIf=\"f.submitted && uniqueEquipmentId.invalid\" class=\"invalid-feedback\">\n                      <div *ngIf=\"uniqueEquipmentId.errors.required\">Equipment Id is required</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"row\">\n                <div class=\"col-md-4\">\n                  <label class=\"basicinforamtion\">Equipment Description</label>\n                  <div class=\"form-group\">\n                    <input class=\"form-control input-vendor\" name=\"equipmentDesc\" required\n                      [(ngModel)]=\"equipment.equipmentDesc\" type=\"text\" placeholder=\"Enter Equipment Description \"\n                      #equipmentDesc=\"ngModel\" [ngClass]=\"{ 'is-invalid': f.submitted && equipmentDesc.invalid }\"\n                      required [ngClass]=\"{ 'is-invalid': f.submitted && equipmentDesc.invalid }\" required>\n                    <div *ngIf=\"f.submitted && equipmentDesc.invalid\" class=\"invalid-feedback\">\n                      <div *ngIf=\"equipmentDesc.errors.required\">Equipment Description is required</div>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"col-md-4\">\n                  <label>Launched Year</label>\n                  <div class=\"form-group\">\n                    <select class=\"form-control input-vendor\" name=\"manufactureYear\"\n                      [(ngModel)]=\"product.manufactureYear\" #manufactureYear=\"ngModel\"\n                      [ngClass]=\"{ 'is-invalid': f.submitted && manufactureYear.invalid }\" required>\n                      <option value=\"\" selected=\"selected\">Select Year</option>\n                      <option *ngFor=\"let e of manufacturedYears\">\n                        {{e}}</option>\n                    </select>\n                    <div *ngIf=\"f.submitted && manufactureYear.invalid\" class=\"invalid-feedback\">\n                      <div *ngIf=\"manufactureYear.errors.required\"> Launched Year is required</div>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"col-md-4\">\n                  <label>Product Category</label>\n                  <div class=\"form-group\">\n                    <select class=\"form-control input-vendor\" name=\"productCategory\" (change)=\"onchangeCategory()\"\n                      [(ngModel)]=\"product.productCategory\" #productCategory=\"ngModel\"\n                      [ngClass]=\"{ 'is-invalid': f.submitted && productCategory.invalid }\" required>\n                      <option [ngValue]=\"null\">Select Category</option>\n                      <option *ngFor=\"let c of categories\" [ngValue]=\"c.categoryId\">\n                        {{c.categoryDesc}}\n                      </option>\n                    </select>\n                    <div *ngIf=\"f.submitted && productCategory.invalid\" class=\"invalid-feedback\">\n                      <div *ngIf=\"productCategory.errors.required\">Product Category is required</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"row\">\n                <div class=\"col-md-4\">\n                  <label>Product Name</label>\n                  <div class=\"form-group\">\n                    <select class=\"form-control input-vendor\" name=\"#productId\" [(ngModel)]=\"product.productId\"\n                      #productId=\"ngModel\" [ngClass]=\"{ 'is-invalid': f.submitted && productId.invalid }\" required>\n                      <option [ngValue]=\"null\">Select Name</option>\n                      <option *ngFor=\"let n of products\" [ngValue]=\"n.productId\">\n                        {{n.productName}}</option>\n                    </select>\n                    <div *ngIf=\"f.submitted && productId.invalid\" class=\"invalid-feedback\">\n                      <div *ngIf=\"productId.errors.required\">Product Category is required</div>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"col-md-4\">\n                  <label>Prefered access type</label>\n                  <div class=\"form-group\">\n                    <select class=\"form-control\" name=\"accessType\" [(ngModel)]=\"accessType\" #accessType1=\"ngModel\"\n                      required>\n                      <option [ngValue]=\"null\">Select Name</option>\n                    </select>\n                  </div>\n                </div>\n                <div class=\"col-md-4\">\n                  <label>Serial Number</label>\n                  <div class=\"form-group\">\n                    <input type=\"text\" name=\"serialNo\" class=\"form-control input-vendor\" [(ngModel)]=\"serialNo\"\n                      placeholder=\"Serial Number*\" value=\"\" #serialNo1=\"ngModel\" required\n                      [ngClass]=\"{ 'is-invalid': f.submitted && serialNo1.invalid }\" />\n                    <div *ngIf=\"f.submitted && serialNo1.invalid\" class=\"invalid-feedback\">\n                      <div *ngIf=\"serialNo1.errors.required\">Serial Number is required</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"row\">\n                <div class=\"col-md-4\">\n                  <label>Mobile Number</label>\n                  <div class=\"form-group\">\n                    <input type=\"tel\" name=\"mobileNumber\" class=\"form-control input-vendor\" [(ngModel)]=\"mobileNumber\"\n                      #mobileNumber1=\"ngModel\" placeholder=\"Mobile Number*\" value=\"\" required pattern=\"[0-9]*\"\n                      [ngClass]=\"{ 'is-invalid': f.submitted && mobileNumber1.invalid }\" minlength=\"10\" maxlength=\"10\"\n                      pattern=\"[0-9]*\" />\n                    <div *ngIf=\"f.submitted && mobileNumber1.invalid\" class=\"invalid-feedback\">\n                      <div *ngIf=\"mobileNumber1.errors.required\">Mobile Number is required</div>\n                      <div *ngIf=\"mobileNumber1.errors.pattern\">Enter Valid Mobile Number</div>\n                    </div>\n                  </div>\n                </div>\n                <!--\n                <div class=\"col-md-8\">\n                  <div class=\"row\">\n                    <div class=\"col-sm-1\">\n                      <div class=\"form-group\">\n                        <i class=\"fa fa-plus\" aria-hidden=\"true\" style=\"font-size: 46px;margin-top: 36px;\"\n                          (click)=\"addAddress()\"></i>\n                      </div>\n\n                    </div>\n                    <section id=\"variableInputs\" *ngFor=\"let address of addresses; let i = index;\">\n                      <div class=\"col-sm-11\">\n\n                        <div class=\"form-group\">\n                          <input type=\"tel\" name=\"mobileNumber\" class=\"form-control input-vendor\"\n                            [(ngModel)]=\"address.address\" name=\"address_{{address.id}}\" #mobileNumber1=\"ngModel\"\n                            placeholder=\"Mobile Number*\" value=\"\" required pattern=\"[0-9]*\"\n                            [ngClass]=\"{ 'is-invalid': f.submitted && mobileNumber1.invalid }\" minlength=\"10\"\n                            maxlength=\"10\" pattern=\"[0-9]*\" />\n                          <div *ngIf=\"f.submitted && mobileNumber1.invalid\" class=\"invalid-feedback\">\n                            <div *ngIf=\"mobileNumber1.errors.required\">Mobile Number is required</div>\n                            <div *ngIf=\"mobileNumber1.errors.pattern\">Enter Valid Mobile Number</div>\n                          </div>\n                        </div>\n                      </div>\n                    </section>\n                    <i class=\"fa fa-minus\" aria-hidden=\"true\" style=\"font-size: 46px;margin-top: 36px;color:red\"\n                      (click)=\"removeAddress(i)\"></i>\n                  </div>\n                </div>\n              -->\n              </div>\n              <div class=\"button-section\">\n                <button (click)=\"onBackEquipment()\" type=\"button\" class=\"btn btn-default btn-lg\">Back</button>\n                <button type=\"submit\" class=\"btn btn-success btn-lg\">Submit</button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"container registration-content\" *ngIf=\"iteration == 'ORDER_CONF'\">\n  <div class=\"row\">\n    <div class=\"col-md-4\">\n      <div class=\"card card-cascade\" (click)=\"onOrderConfigClick()\">\n        <div class=\"view view-cascade gradient-card-header blue-gradient\">\n          <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Order Configure<br></h4>\n        </div>\n        <div class=\"card-body card-body-cascade text-center \">\n          <i class=\"fas fa-cogs\" style=\"font-size:88px;color:#1b83ab\"></i>\n\n        </div>\n      </div>\n    </div>\n    <div class=\"col-md-4\">\n      <div class=\"card card-cascade\" [routerLink]=\"['/alert']\">\n        <div class=\"view view-cascade gradient-card-header blue-gradient\">\n          <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Alert Management<br></h4>\n        </div>\n        <div class=\"card-body card-body-cascade text-center\">\n          <i class=\"fas fa-bell\" style=\"font-size:88px;color:#ff6f1b\"></i>\n\n        </div>\n      </div>\n    </div>\n    <div class=\"col-md-4\">\n      <div class=\"card card-cascade\" (click)=\"onBankTransfer()\">\n        <div class=\"view view-cascade gradient-card-header blue-gradient\">\n          <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Capture Bank Details<br></h4>\n        </div>\n        <div class=\"card-body card-body-cascade text-center \">\n          <i class=\"fa fa-camera\" style=\"font-size:88px;color:#dc3545\"></i>\n\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"button-section\">\n    <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick1()\">Back</button>\n  </div>\n</div>\n\n\n\n<div class=\"container\" *ngIf=\"iteration == 'Order_Configure'\">\n  <div class=\"row\">\n    <div class=\"col-md-3\"></div>\n    <div class=\"col-md-6\">\n      <div class=\"card card-cascade none\">\n        <h5 class=\"card-header gradient-card-header blue-gradient white-text text-center py-4\">\n          <strong>Order Configure</strong>\n        </h5>\n        <form class=\"text-center border border-light p-5\" name=\"form\" (ngSubmit)=\"f.form.valid && onSave()\" #f=\"ngForm\">\n          <div>\n            <div class=\"form-group\">\n              <select class=\"form-control\" name=\"orderConfig\" [(ngModel)]=\"orderConfig\" #orderConfig1=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f.submitted && orderConfig1.invalid }\" required>\n                <option [ngValue]=\"v\">Select Type</option>\n                <option *ngFor=\"let v of configList\" [ngValue]=\"v.paramId\">\n                  {{v.paramName}}</option>\n              </select>\n              <div *ngIf=\"f.submitted && orderConfig1.invalid\" class=\"invalid-feedback\">\n                <div *ngIf=\"orderConfig1.errors.required\">Please Select Order Configure Type</div>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-md-6\">\n              <div>\n                <button (click)=\"onBackOrder()\" class=\"btn btn-default config btn-lg\" value=\"Login\">Back</button>\n              </div>\n            </div>\n            <div class=\"col-md-6\">\n              <button class=\"btn btn-success config btn-lg btn-block\" style=\"margin-top: 6px;\">Save</button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n    <div class=\"col-md-3\"></div>\n  </div>\n</div>\n\n<!-- Bank Transfer setting -->\n<div class=\"container\" *ngIf=\"iteration=='BANK_TRANFER'\">\n  <div class=\"row\">\n    <div class=\"col-md-2\"></div>\n    <div class=\"col-md-8\">\n      <div class=\"card card-cascade none\">\n        <h5 class=\"card-header gradient-card-header blue-gradient white-text text-center py-4\">\n          <strong>Bank details for Payment</strong>\n        </h5><br>\n        <form>\n          <div class=\"form-group row\">\n            <label class=\"col-sm-3 col-form-label\">Account Name</label>\n            <div class=\"col-sm-7\">\n              <input type=\"text\" class=\"form-control\" placeholder=\"Account Name\">\n            </div>\n          </div>\n          <div class=\"form-group row\">\n            <label class=\"col-sm-3 col-form-label\">Bank</label>\n            <div class=\"col-sm-7\">\n              <input type=\"text\" class=\"form-control\" placeholder=\"Enter Bank\">\n            </div>\n          </div>\n          <div class=\"form-group row\">\n            <label class=\"col-sm-3 col-form-label\">Branch</label>\n            <div class=\"col-sm-7\">\n              <input type=\"text\" class=\"form-control\" placeholder=\"Enter Branch\">\n            </div>\n          </div>\n          <div class=\"form-group row\">\n            <label class=\"col-sm-3 col-form-label\">Account Number</label>\n            <div class=\"col-sm-7\">\n              <input type=\"text\" class=\"form-control\" placeholder=\"Enter Account Number\">\n            </div>\n          </div>\n          <div class=\"form-group row\">\n            <label class=\"col-sm-3 col-form-label\">IFSC Code</label>\n            <div class=\"col-sm-7\">\n              <input type=\"text\" class=\"form-control\" placeholder=\"Enter  IFSC Code\">\n            </div>\n          </div>\n          <div class=\"form-group row\">\n            <label class=\"col-sm-3 col-form-label\"></label>\n            <div class=\"col-sm-7\">\n              <div class=\"row\">\n                <div class=\"col-sm-6\">\n                  <button class=\"btn btn-default btn-block btn-lg\" (click)=\"onBackCapture()\">Back</button>\n\n                </div>\n                <div class=\"col-sm-6\">\n                  <button class=\"btn btn-success btn-block btn-lg\" (click)=\"onSubmit()\">Submit</button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n    <div class=\"col-md-2\"></div>\n  </div>\n</div>\n<!--Equipment mobile linnking-->\n<div class=\"container\" *ngIf=\"iteration == 'REGISTERED_MOBILE'\">\n  <div class=\"row\">\n    <div class=\"col-md-3\"></div>\n    <div class=\"col-md-6\">\n      <div class=\"card card-cascade none\">\n        <h5 class=\"card-header gradient-card-header blue-gradient white-text text-center py-4\">\n          <strong>Mobile Registration</strong>\n        </h5>\n        <div class=\"card-body\">\n          <div class=\"table table-responsive table-striped table-bordered\"\n            *ngIf=\"registeredMobileList!=null && registeredMobileList.length>0\">\n            <table class=\"table text-nowrap\">\n              <thead>\n                <tr>\n                  <th>SL. No.</th>\n                  <th>Mobile No</th>\n                  <th>Verified</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let e of registeredMobileList  | \n                      paginate: { id: 'listing_pagination',\n                      itemsPerPage: 5,\n                      currentPage: page2,\n                      totalItems: totalRec }, let i=index\n                      \">\n                  <td>{{i+1}}</td>\n                  <td>{{e.mobileNo}}</td>\n                  <td>{{e.verified}}</td>\n                </tr>\n              </tbody>\n            </table>\n\n          </div>\n          <form class=\"text-center border border-light p-5\" name=\"form\" (ngSubmit)=\"f.form.valid && onSaveMobile()\"\n            #f=\"ngForm\">\n            <div>\n              <label>Register Mobile No </label>\n              <div class=\"form-group\">\n                <input class=\"form-control input-vendor\" name=\"mobileNo\" [(ngModel)]=\"mobileNo\" type=\"text\"\n                  #userName=\"ngModel\" placeholder=\"Enter Mobile No\" required>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-md-6\">\n                <div>\n                  <button (click)=\"onBackEquipment()\" class=\"btn btn-default config btn-lg\" value=\"Login\">Back</button>\n                </div>\n              </div>\n              <div class=\"col-md-6\">\n                <button class=\"btn btn-success config btn-lg btn-block\" style=\"margin-top: 6px;\">Validate</button>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n      <div class=\"col-md-3\"></div>\n    </div>\n  </div>\n</div>\n\n<div class=\"container\" *ngIf=\"iteration == 'MOBILE_OTP'\">\n  <div class=\"row\">\n    <div class=\"col-md-3\"></div>\n    <div class=\"col-md-6\">\n      <div class=\"card card-cascade none\" >\n        <h5 class=\"card-header gradient-card-header blue-gradient white-text text-center py-4\">\n          <strong> Mobile Registration - Mobile No Verification</strong>\n        </h5>\n        <div class=\"card-body otp\">\n          <form class=\"form\" role=\"form\" #saveuser (ngSubmit)=\"continue(user)\" autocomplete=\"off\">\n            <em>We have sent you the one time password to the entered Mobile Number {{mobileNo}}, please\n              enter in below,</em>\n            <br /><br />\n            <div class=\"form-group row\">\n              <div class=\"col-lg-8\">\n                <input class=\"form-control input-vendor\" name=\"otp\" [(ngModel)]=\"user.otp\" type=\"text\"\n                  placeholder=\"Enter OTP\" required>\n              </div>\n            </div>\n\n\n            <div class=\"row bt\">\n              <div class=\"col-lg-6\">\n                <button type=\"button\" (click)=\"onResendOtp()\" class=\"btn btn-deep-orange btn-block btn-lg\">Resend\n                  OTP</button>\n              </div>\n              <div class=\"col-lg-6\">\n                <button type=\"button\" (click)=\"onNextClickValidateOtp()\"\n                  class=\"btn btn-success btn-block btn-lg\">Proceed</button>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"container\" *ngIf=\"iteration == 'EQUIPMENT_MOBILE_LINK'\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div class=\"card card-cascade none\">\n        <h5 class=\"card-header gradient-card-header blue-gradient white-text text-center py-4\">\n          <strong>Equipment Mobile Linking</strong>\n        </h5>\n        <div class=\"card-body\">\n          <div class=\"table table-responsive table-striped table-bordered\"\n            *ngIf=\"equipmentsLinking!=null && equipmentsLinking.length>0\">\n            <table class=\"table text-nowrap\">\n              <thead>\n                <tr>\n                  <th>SL. No.</th>\n                  <th>Equipment name</th>\n                  <th>Serial No</th>\n                  <th>Primary Mobile No</th>\n                  <th>Link Mobile No</th>\n                  <th>Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let e of equipmentsLinking  | \n                      paginate: { id: 'listing_pagination',\n                      itemsPerPage: 5,\n                      currentPage: page2,\n                      totalItems: totalRec }, let i=index\n                      \">\n                  <td>{{i+1}}</td>\n                  <td>{{e.equipment.equipmentName}}</td>\n                  <td>{{e.serialNo}}</td>\n                  <td>{{e.mobileNo}}</td>\n                  <td><select multiple class=\"form-control\" name=\"registeredMobiles\" [(ngModel)]=\"e.linkedMobiles\">\n                    <option [ngValue]=\"null\">Select mobile</option>\n                  <option *ngFor=\"let c of registeredMobileList\" [ngValue]=\"c.registeredMobileId\" >{{c.mobileNo}}</option>\n                </select></td>\n                  <td><button (click)=\"onMobileLink(e)\" class=\"btn btn-default config btn-lg\" value=\"Login\">Update</button></td>\n                </tr>\n              </tbody>\n            </table>\n\n          </div>\n        </div>\n      </div>\n      \n      \n      <div class=\"row\">\n        <div class=\"col-md-3\">\n          <div>\n            <button (click)=\"onBackEquipment()\" class=\"btn btn-default config btn-lg\" value=\"Login\">Back</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/forgotpassword/forgotpassword.component.html":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/components/forgotpassword/forgotpassword.component.html ***!
  \***************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<div class=\"container\" *ngIf=\"iteration == 1\">\n    <div class=\"row\">\n        <div class=\"col-md-3\"></div>\n        <div class=\"col-md-6\">\n            <div class=\"card\">\n                <h5 class=\"card-header gradient-card-header blue-gradient white-text text-center py-4\">\n                    <strong>Forgot Password</strong>\n                </h5>\n                <form class=\"text-center border border-light p-5\" role=\"form\" [formGroup]=\"forgotForm\"\n                    autocomplete=\"off\">\n                    <div class=\"form-group\">\n                        <input class=\"form-control input-vendor\" type=\"text\" formControlName=\"email\" name=\"email\"\n                            [(ngModel)]=\"user.email\" placeholder=\"Enter E-mail address\" uniqueEmail\n                            [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\">\n                        <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f.email.errors.required\">Email is required</div>\n                            <div *ngIf=\"f.email.errors.emailNotExists\">Email does not exists</div>\n                        </div>\n                    </div>\n                    <button type=\"button\" class=\"btn btn-success btn-lg btn-block\"\n                        (click)=\"onNextClickGenerateOtp()\">Submit</button><br>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n<div class=\"container\" *ngIf=\"iteration == 2\">\n    <div class=\"card\">\n        <h5 class=\"card-header gradient-card-header blue-gradient white-text text-center py-4\">\n            <strong> Forgot Password - Verification</strong>\n        </h5>\n        <div class=\"card-body otp\">\n            <form class=\"form\" role=\"form\" #saveuser (ngSubmit)=\"continue(user)\" autocomplete=\"off\">\n                <em id=\"importem\">We have sent you the one time password to your registered {{mobileNo}} Mobile\n                    Number, please\n                    enter in below,</em>\n                <br /><br />\n                <div class=\"form-group row\">\n                    <div class=\"col-lg-2\"></div>\n                    <div class=\"col-lg-8\">\n                        <input class=\"form-control input-vendor\" name=\"otp\" [(ngModel)]=\"user.otp\" type=\"text\"\n                            placeholder=\"Enter OTP\" required>\n                    </div>\n                </div>\n\n\n                <div class=\"row bt\">\n                    <div class=\"col-lg-2\"></div>\n                    <div class=\"col-lg-4\">\n                        <button type=\"button\" (click)=\"onResendOtp()\"\n                            class=\"btn btn-deep-orange btn-block btn-lg\">Resend OTP</button>\n                    </div>\n                    <div class=\"col-lg-4\">\n                        <button type=\"button\" (click)=\"onNextClickValidateOtp()\"\n                            class=\"btn btn-success btn-block btn-lg\">Proceed</button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>\n\n<div class=\"container\" *ngIf=\"iteration == 3\">\n    <div class=\"row\">\n        <div class=\"col-md-3\"></div>\n        <div class=\"col-md-6\">\n            <div class=\"card\">\n                <h5 class=\"card-header gradient-card-header blue-gradient white-text text-center py-4\">\n                    <strong>Forgot Password</strong>\n                </h5>\n                <form class=\"text-center border border-light p-5\" autocomplete=\"off\">\n                    <div class=\"form-group\">\n                        <div>\n                            <span class=\"form-control\"> <b style=\"font-size: 17px;color: #e3381c;\">Email</b> - <b style=\"font-size: 17px;color: #e3381c;\"><b style=\"font-size: 17px;color: #e3381c;\"></b>{{user.email}}</b></span>\n                            <br />\n                        </div>\n\n                        <input class=\"form-control input-vendor\" type=\"password\" name=\"password\" [(ngModel)]=\"password\"\n                            placeholder=\"Enter Password\"><br>\n                        <input class=\"form-control input-vendor\" type=\"password\" name=\"password\"\n                            [(ngModel)]=\"retypePassword\" placeholder=\"Re type Password\">\n                    </div>\n                    <button type=\"button\" class=\"btn btn-success btn-lg btn-block\"\n                        (click)=\"resetPassword()\">Submit</button><br>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class=\"container\" *ngIf=\"iteration == 4\">\n    <div class=\"row\">\n        <div class=\"col-md-3\"></div>\n        <div class=\"col-md-6\">\n            <div class=\"card\">\n                <h5 class=\"card-header gradient-card-header blue-gradient white-text text-center py-4\">\n                    <strong>Forgot Password</strong>\n                </h5>\n                <br />\n                <h6 id=\"importh6\">Password Changed successfully!! </h6>\n                <br />\n                <button type=\"button\" class=\"btn btn-success btn-lg\"\n                    [routerLink]=\"['/login']\">Login</button><br>\n            </div>\n        </div>\n    </div>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/generatealertevent/generatealertevent.component.html":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/components/generatealertevent/generatealertevent.component.html ***!
  \***********************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n<div class=\"container py-3\">\n    <div class=\"row\">\n        <div class=\"col-md-2\"></div>\n        <div class=\"col-md-8\">\n            <div class=\"card\">\n                <h5 class=\"card-header gradient-card-header blue-gradient white-text text-center py-4\">\n                    <strong>Alert Event Management</strong>\n                </h5>\n                <br>\n                <form class=\"text-center border border-light p-5\" role=\"form\" [formGroup]=\"eventsaveform\" #saveevent\n                    (ngSubmit)=\"saveAlertEvent(saveAlert)\" autocomplete=\"off\">\n                    <div class=\"formGroup\">\n                        <input class=\"form-control input-vendor\" formControlName=\"eventName\" type=\"text\"\n                            placeholder=\"Enter Event Name\" [ngClass]=\"{ 'is-invalid': submitted && f.eventName.errors }\"\n                            pattern=\"^[A-Za-z ]+$\" >\n                        <div *ngIf=\"submitted && f.eventName.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f.eventName.errors.required\">Please Enter Event Name</div>\n                            <div *ngIf=\"f.eventName.errors.pattern\">Numbers Not Allowed</div>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-6\">\n                            <button [routerLink]=\"['/showEventsList']\"\n                            class=\"btn btn-default btn-lg btn-block my-4\">Back</button>\n                     \n                        </div>\n                        <div class=\"col-md-6\">\n                            <button type=\"button\" (click)=\"createAlertEvent()\"\n                            class=\"btn btn-success btn-lg btn-block my-4\">Generate\n                            Event</button>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        </div>\n        <div class=\"col-md-3\"></div>\n    </div>\n\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/genratealert/genratealert.component.html":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/components/genratealert/genratealert.component.html ***!
  \***********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n<div class=\"container-fluid\" style=\"padding-right:42px; padding-left:42px\">\n    <!-- Card -->\n    <div class=\"card card-cascade\">\n        <div class=\"view view-cascade gradient-card-header blue-gradient\">\n            <!-- Title -->\n            <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Alert Management</h4>\n        </div>\n        <!-- Card content -->\n        <div class=\"card-body card-body-cascade\">\n            <form name=\"form\" (ngSubmit)=\"f.form.valid && createAlert()\" #f=\"ngForm\" autocomplete=\"off\">\n                <!-- row start -->\n                <div class=\"row\">\n                    <div class=\"col-lg-4\">\n                        <label>Event</label>\n                        <div class=\"form-group\">\n                            <select name=\"alertEvent\" [(ngModel)]=\"alert.selectedAlertEvent\"\n                                class=\"form-control input-vendor\" #selectedAlertEvent=\"ngModel\"\n                                [ngClass]=\"{ 'is-invalid': f.submitted && selectedAlertEvent.invalid }\" required>\n                                <option [ngValue]=\"null\">Select Event</option>\n                                <option *ngFor=\"let event of events\" [value]=\"event.eventName\">\n                                    {{event.eventName}}\n                                </option>\n                            </select>\n                            <div *ngIf=\"f.submitted && selectedAlertEvent.invalid\" class=\"invalid-feedback\">\n                                <div *ngIf=\"selectedAlertEvent.errors.required\">Please Select Event</div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"col-lg-4\">\n                        <label>Role </label>\n                        <div class=\"form-group\">\n                            <select name=\"role\" [(ngModel)]=\"alert.selectedUserRole\" class=\"form-control input-vendor\"\n                                #selectedUserRole=\"ngModel\"\n                                [ngClass]=\"{ 'is-invalid': f.submitted && selectedUserRole.invalid }\" required>\n                                <option [ngValue]=\"null\">Select Role</option>\n                                <option *ngFor=\"let role of roles\" [value]=\"role.roleName\">\n                                    {{role.roleName}}\n                                </option>\n                            </select>\n                            <div *ngIf=\"f.submitted && selectedUserRole.invalid\" class=\"invalid-feedback\">\n                                <div *ngIf=\"selectedUserRole.errors.required\">Please Select Role</div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"col-lg-4\">\n                        <label>Alert Name </label>\n                        <div class=\"form-group\">\n                            <input class=\"form-control input-vendor\" name=\"alertName\" [(ngModel)]=\"alert.alertName\"\n                                type=\"text\" placeholder=\"Enter Alert Name\" #alertName=\"ngModel\"\n                                [ngClass]=\"{ 'is-invalid': f.submitted && alertName.invalid }\" required>\n                            <div *ngIf=\"f.submitted && alertName.invalid\" class=\"invalid-feedback\">\n                                <div *ngIf=\"alertName.errors.required\">Please Enter Alert Name</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"row\">\n                    <div class=\"col-lg-4\">\n                        <label>Alert Send Via </label>\n                        <div class=\"form-group \">\n                            <select name=\"sendVia\" [(ngModel)]=\"alert.sendVia\" class=\"form-control input-vendor\" #sendVia=\"ngModel\"\n                                [ngClass]=\"{ 'is-invalid': f.submitted && sendVia.invalid }\" required>\n                                <option [ngValue]=\"null\">Select Alert Send Via </option>\n                                <option *ngFor=\"let notify of notifyTypes\" [value]=\"notify.paramName\">\n                                    {{notify.paramDesc}}\n                                </option>\n                            </select>\n                            <div *ngIf=\"f.submitted && sendVia.invalid\" class=\"invalid-feedback\">\n                                <div *ngIf=\"sendVia.errors.required\">Please Select Alert Send Via</div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"col-lg-4\">\n                        <label>Remarks </label>\n                        <div class=\"form-group\">\n                            <input name=\"sendVia1\" class=\"form-control input-vendor\" [(ngModel)]=\"alert.remarks\"\n                                type=\"text\" placeholder=\"Enter Remarks\" #remarks=\"ngModel\"\n                                [ngClass]=\"{ 'is-invalid': f.submitted && remarks.invalid }\" required>\n                            <div *ngIf=\"f.submitted && remarks.invalid\" class=\"invalid-feedback\">\n                                <div *ngIf=\"remarks.errors.required\">Please Enter Remars</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <br>\n                <div class=\"form-group\" style=\"float: right;\">\n                    <button [routerLink]=\"['/alert']\" class=\"btn btn-default btn-lg\">Back</button>\n                    <button type=\"submit\" class=\"btn btn-success btn-lg\">Generate Alert</button>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/navbar/navbar.component.html":
/*!***********************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/components/navbar/navbar.component.html ***!
  \***********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<nav *ngIf=\"nav.visible\">\n  <nav class=\"navbar fixed-top navbar-expand-lg  navbar-dark primary-color\">\n    <img src=\"assets/smallerLogo.png\" width=\"160\" height=\"50\" [routerLink]=\"['/dashboard']\" id=\"importimg\" />\n    <div class=\"modal fade\" id=\"navBarModel\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"navBarModelTitle\"\n      aria-hidden=\"true\">\n      <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 class=\"modal-title\" id=\"exampleModalLongTitle\">Online Store </h5>\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <div class=\"modal-body\">\n            <button [routerLink]=\"['/editprofile']\" (click)=\"editProfile()\" class=\"btn btn-primary\"\n              data-dismiss=\"navBarModel\">Edit Profile</button>&nbsp;&nbsp;\n            <button class=\"btn btn-primary\" type=\"button\" (click)=\"logout()\" data-dismiss=\"navBarModel\">Logout\n            </button>&nbsp;&nbsp;\n          </div>\n          <div class=\"userid\">\n\n          </div>\n        </div>\n      </div>\n    </div>\n    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\"\n      aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n\n    <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <ul class=\"navbar-nav mr-auto\" id=\"importul\">\n\n        <li class=\"nav-item dropdown\">\n          <a class=\"nav-link\" data-toggle=\"dropdown\" href=\"#\">\n            <i class=\"fa fa-bars\" style=\"font-size:36px;color:white\"></i>\n          </a>\n          <div class=\"dropdown-menu dropdown-menu-lg dropdown-menu-left\" style=\"margin-top: 17px;\">\n            <span class=\"dropdown-item dropdown-header\" (click)=\"onEditProfile()\">Edit Profile</span>\n            <span class=\"dropdown-item dropdown-header\" (click)=\"onConfig()\" *ngIf=\"role=='ROLE_ADMIN'\">Configure</span>\n            <span class=\"dropdown-item dropdown-header\" (click)=\"onequipmentclick()\" *ngIf=\"role=='ROLE_USER'\">Equipment\n              Linking</span>\n            <span class=\"dropdown-item dropdown-header\" [routerLink]=\"['/dashboard']\">Dashboard</span>\n\n          </div>\n        </li>\n        <li id=\"importreward\">\n          <i   *ngIf=\"role=='ROLE_ADMIN'\" class=\"fa fa-trophy\" style=\"font-size:60px;color:#f3ae12 ;position: absolute;left: 16.5rem;\n          top: 0.2rem;\"></i>\n          <i  *ngIf=\"role=='ROLE_USER'\" class=\"fa fa-trophy\" style=\"font-size:60px;color:#f3ae12 ;position: absolute;left: 16.5rem;\n             top: 0.2rem;\"></i>\n          <i *ngIf=\"role=='ROLE_WAREHOUSE_USER'\" class=\"fa fa-trophy\" style=\"font-size:60px;color:#f3ae12 ;position: absolute;left: 16.5rem;\n                top: 0.2rem;\"></i>\n          <i *ngIf=\"role=='ROLE_VENDOR_USER'\"class=\"fa fa-trophy\" style=\"font-size:60px;color:#f3ae12 ;position: absolute;left: 16.5rem;\n                   top: 0.2rem;\"></i>\n          <i  *ngIf=\"role=='ROLE_CORPORATE_USER'\" class=\"fa fa-trophy\" style=\"font-size:60px;color:#f3ae12 ;position: absolute;left: 16.5rem;\n  top: 0.2rem;\"></i>\n        </li>\n      </ul>\n      <ul class=\"navbar-nav m1-auto\">\n        <li class=\"nav-item dropdown\">\n          <a class=\"nav-link\" data-toggle=\"dropdown\" href=\"#\">\n            <i class=\"far fa-bell\" style=\"font-size:24px\"></i>\n            <span class=\"badge badge-warning navbar-badge\" *ngIf=\"notifications\">{{notifications1.length}}</span>\n          </a>\n          <div class=\"dropdown-menu dropdown-menu-lg dropdown-menu-right\"\n            style=\"left: inherit; right: -11px;top: 63px;margin-top: 17px;margin-top: 17px;\">\n            <span class=\"dropdown-item dropdown-header\" *ngIf=\"notifications\">{{notifications1.length}}\n              Notifications</span>\n\n            <div *ngFor=\"let notification of notifications\">\n              <div class=\"dropdown-divider\"></div>\n              <a class=\"dropdown-item\" (click)=\"onClickNotification(notification)\">\n                <i class=\"fas fa-envelope mr-2\"></i> {{notification.notificationMessage}}\n              </a>\n              <div class=\"dropdown-divider\"></div>\n            </div>\n\n            <a (click)=\"showAllNotification()\" class=\"dropdown-item dropdown-footer\"\n              *ngIf=\"notifications1?.length > 3\">See All\n              Notifications</a>\n          </div>\n        </li>\n      </ul>&nbsp;\n      <form class=\"form-inline my-2 my-lg-0\">\n        <output style=\"color: navy; font-size: medium;\">\n          <strong style=\"color: white;font-size: 1.5rem;\">Welcome </strong>&nbsp;&nbsp;\n          <strong style=\"color: night-fade-gradient; font-size: medium;\"\n            *ngIf=\"userName\">{{userName | uppercase}}</strong>&nbsp;&nbsp;&nbsp;&nbsp;\n          <strong class=\"userid\" style=\"color: night-fade-gradient; font-size: medium;\" *ngIf=\"uniqueUserId\">Customer Id\n            : {{uniqueUserId}}</strong>\n        </output>&nbsp;&nbsp;&nbsp;\n        <i class=\"fas fa-power-off fa-3x red-text pr-3\" width=\"60\" height=\"50\" (click)=\"logout()\"></i>\n      </form>\n    </div>\n  </nav>\n</nav>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/notification/notification.component.html":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/components/notification/notification.component.html ***!
  \***********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n<div class=\"container importct\" *ngIf=\"iteration=='TOPUP_SUCCESS'\">\n    <form name=\"form\" (ngSubmit)=\"f.form.valid && onTopUp()\" #f=\"ngForm\">\n        <div class=\"row\">\n            <div class=\"col-sm-3\"></div>\n            <div class=\"col-sm-6\" id=\"wallet-1\">\n                <div class=\"card\" id=\"import\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient imp\">\n                        Wallet \n                    </div><br>\n                    <p class=\"import-text\">Thank you for your payment. Top Up Successful!</p>\n                    <div class=\"row\" *ngIf=\"walletDetails.customerId!=null\">\n                        <div class=\"col-sm-6\"> Customer ID </div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{walletDetails.customerId}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Previous Balance </div>\n                        <div class=\"col-sm-6\" id=\"importname\" *ngIf=\"walletDetails.availableBalance!=0\">\n                            {{walletDetails.availableBalance - walletDetails.topupAmount |currency : walletDetails.walletCurrency}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Current Balance</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{walletDetails.availableBalance |currency: walletDetails.walletCurrency}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Topup Amount</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{walletDetails.topupAmount |currency : walletDetails.walletCurrency}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Topup Date</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{walletDetails.topupDate | date}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">Payment Mode</div>\n                        <div class=\"col-sm-6\" id=\"importname\">\n                            {{walletDetails.paymentType}}\n                        </div>\n                    </div>\n                    <hr />\n                    <div class=\"row\">\n                        <div class=\"col-sm-9\"></div>\n                        <div class=\"button-section\">\n                            <button class=\"btn btn-primary btn-lg\" [routerLink]=\"['/dashboard']\">Dashboard</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    </form>\n</div>\n\n<!-- Wallet Amount Mismatch -->\n<div class=\"container\" *ngIf=\"iteration=='TOPUP_SUCCESS_MISMATCH'\">\n    <div class=\"card card-cascade narrower body-section\">\n        <div\n            class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n            <div>\n            </div>\n            <h4 href=\"\" class=\"white-text mx-3\">Wallet Amount Mismatch </h4>\n            <div>\n            </div>\n        </div>\n        <div class=\"card-body\">\n            <h3 style=\"color: green; font-weight: bold;\">There is a mismatch in the transfer amount. Please see the\n                details below</h3>\n            <br>\n            <hr>\n            <div class=\"text-center\">\n                <label>Customer Id : &nbsp;&nbsp;<b class=\"color\">{{walletDetails.customerId}}</b></label>\n            </div>\n            <hr>\n            <div class=\"row notes\">\n                <div class=\"col-md-2 col-6\">\n                    <label>Top up Amount :</label>\n                </div>\n                <div class=\"col-md-2 col-6\">\n                    <label class=\"color\">{{walletDetails.topupAmount |currency : walletDetails.walletCurrency}}</label>\n                </div>\n\n                <div class=\"col-md-2 col-6\">\n                    <label>Top Up Date :</label>\n                </div>\n                <div class=\"col-md-2 col-6\">\n                    <label class=\"color\">{{walletDetails.topupDate | date}}</label>\n                </div>\n\n                <div class=\"col-md-2 col-6\">\n                    <label>Transfer Amount :</label>\n                </div>\n                <div class=\"col-md-2 col-6\">\n                    <label class=\"color\">\n                        {{walletDetails.approvedAmount | currency : walletDetails.walletCurrency}}</label>\n                </div>\n\n                <div class=\"col-md-2 col-6\">\n                    <label>Difference :</label>\n                </div>\n                <div class=\"col-md-2 col-6\">\n                    <label\n                        class=\"color\">{{walletDetails.topupAmount - walletDetails.approvedAmount | currency : walletDetails.walletCurrency}}</label>\n                </div>\n\n                <div class=\"col-md-2 col-6\">\n                    <label>Current Balance :</label>\n                </div>\n                <div class=\"col-md-2 col-6\">\n                    <label class=\"color\">\n                        {{walletDetails.walletBalance | currency : walletDetails.walletCurrency}}</label>\n                </div>\n                <div class=\"col-md-2 col-6\"></div>\n                <div class=\"col-md-2 col-6\"></div>\n            </div>\n            <div class=\"row notes\">\n                <div class=\"col-md-4 col-6\">\n                    <label>Your Wallet has been topped up for :</label>\n                </div>\n                <div class=\"col-md-2 col-6\">\n                    <label\n                        class=\"color\">{{walletDetails.approvedAmount | currency : walletDetails.walletCurrency}}</label>\n                </div>\n            </div>\n            <hr>\n            <div class=\"button-section\">\n                <button class=\"btn btn-primary\" [routerLink]=\"['/dashboard']\">Dashboard</button>\n            </div>\n        </div>\n    </div>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/offers/offers.component.html":
/*!***********************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/components/offers/offers.component.html ***!
  \***********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n<!-- Team -->\n<section id=\"team\" class=\"pb-5\">\n    <div class=\"container\" *ngIf=\"paginator == 1\">\n        <h3>OFFERS</h3><br>\n        <div class=\"row\">\n            <!-- Team member -->\n            <div class=\"col-xs-12 col-sm-6 col-md-4\">\n\n                <div class=\"mainflip\">\n                    <div class=\"frontside\">\n                        <div class=\"card \">\n                            <div class=\"card-body text-center\">\n                                <h4 class=\"card-title\">5% <br>Disscount </h4>\n                                <p class=\"card-text\">On Products <br> Worth Rs.100 <br> Or More</p>\n                                <h4>Offer Code:</h4>\n                                <h2>DIS05</h2>\n                                <p class=\"card-text\">Expires In 15 Days</p>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n\n            </div>\n            <!-- ./Team member -->\n            <!-- Team member -->\n            <div class=\"col-xs-12 col-sm-6 col-md-4\">\n\n                <div class=\"mainflip\">\n                    <div class=\"frontside\">\n                        <div class=\"card\">\n                            <div class=\"card-body text-center\">\n                                <h4 class=\"card-title\">20% <br>Disscount </h4>\n                            \n                                <p class=\"card-text\">On Products <br> Worth Rs.3500 <br> Or More</p>\n                               \n                                <h4>Offer Code:</h4>\n                                <h2>DIS20</h2>\n                                <p class=\"card-text\">Expires In 15 Days</p>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n\n            </div>\n            <!-- ./Team member -->\n            <!-- Team member -->\n            <div class=\"col-xs-12 col-sm-6 col-md-4\">\n                <div class=\"mainflip\">\n                    <div class=\"frontside\">\n                        <div class=\"card\">\n                            <div class=\"card-body text-center\">\n                                <h4 class=\"card-title\">15% <br>Disscount </h4>\n                                <p class=\"card-text\">On Products <br> Worth Rs.100 <br> Or More</p>\n                                <h4>Offer Code:</h4>\n                                <h2>DIS20</h2>\n                                <p class=\"card-text\">Expires In 15 Days</p>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n\n            </div>\n        </div><br><br>\n        <div class=\" button-section\">\n            <button [routerLink]=\"['/dashboard']\" class=\"btn btn-default\">Back</button>\n            <button class=\"btn btn-primary\" (click)=\"onAddClick()\">Add Offers</button>&nbsp;&nbsp;\n            <button [routerLink]=\"['/dashboard']\" class=\"btn btn-primary\">Dashboard</button>\n        </div>\n    </div>\n\n</section>\n<!-- Team -->\n\n<!-- Add Offers -->\n<div class=\"container\" *ngIf=\"paginator== 2\">\n    <!-- form user info -->\n    <div class=\"card addproduct\">\n        <div class=\"card-header\">\n            <h4 class=\"mb-0\">Add Offers </h4>\n        </div>\n        <div class=\"card-body\">\n            <form>\n                <!-- row start -->\n                <div class=\"row\">\n                    <div class=\"col-lg-2\">\n                        <label>Select User Catagory :</label>\n                    </div>\n                    <div class=\"col-lg-4\">\n                        <div class=\"form-group\">\n                            <select class=\"form-control\">\n                                <option selected>Select User Category</option>\n                                <option value=\"1\">All</option>\n                                <option value=\"2\">Bronze</option>\n                                <option value=\"3\">Silver</option>\n                                <option value=\"3\">Gold</option>\n                                <option value=\"3\">Platinum</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"col-lg-2\">\n                        <label>Select Area :</label>\n                    </div>\n                    <div class=\"col-lg-4\">\n                        <div class=\"form-group\">\n                            <select class=\"form-control\">\n                                <option selected>Select Area</option>\n                                <option value=\"1\">India</option>\n                                <option value=\"2\">Singapore</option>\n                                <option value=\"3\">US</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!-- row ends -->\n\n                <!-- row start -->\n                <div class=\"row\">\n                    <div class=\"col-lg-2\">\n                        <label>Time Expiry :</label>\n                    </div>\n                    <div class=\"col-lg-4\">\n                        <div class=\"form-group\">\n                            <select class=\"form-control\">\n                                <option selected>Time Expiry</option>\n                                <option value=\"1\">Karnataka</option>\n                                <option value=\"2\">Andra</option>\n                                <option value=\"3\">Telengana</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"col-lg-2\">\n                        <label>Select Type Of Offer :</label>\n                    </div>\n                    <div class=\"col-lg-4\">\n                        <div class=\"form-group\">\n                            <select class=\"form-control\">\n                                <option selected>Type Of Offer</option>\n                                <option value=\"1\">Disccount</option>\n                                <option value=\"2\">Cashback</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!-- row ends -->\n                <!-- row start -->\n                <div class=\"row\">\n                    <div class=\"col-lg-2\">\n                        <label>Type Of Product Included :</label>\n                    </div>\n                    <div class=\"col-lg-4\">\n                        <div class=\"form-group\">\n                            <select class=\"form-control\">\n                                <option selected>Type Of Product Included</option>\n                                <option value=\"1\">Spares</option>\n                                <option value=\"2\">Consumables</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"col-lg-2\">\n                        <label>Product Included :</label>\n                    </div>\n                    <div class=\"col-lg-4\">\n                        <div class=\"form-group\">\n                            <select class=\"form-control\">\n                                <option selected> Product Included</option>\n                                <option value=\"1\">All</option>\n                                <option value=\"2\">Product 1</option>\n                                <option value=\"2\">Product 2</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <!-- row ends -->\n                <div class=\"form-group\" style=\"float: right;\">\n                    <button (click)=\"onAddBackClick()\" class=\"btn btn-default\" value=\"Login\">Back</button>\n                    <button  (click)=\"onAdd()\" class=\"btn btn-primary\" type=\"submit\"\n                        value=\"Add\">Add</button>&nbsp;\n                </div>\n            </form>\n        </div>\n    </div>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/onetimepassword/onetimepassword.component.html":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/components/onetimepassword/onetimepassword.component.html ***!
  \*****************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<!-- one time password -->\n<div class=\"container oneTime\">\n  <div class=\"row\">\n    <div class=\"col-md-3\"></div>\n    <div class=\"col-md-6\">\n      <div class=\"card\">\n        <h5 class=\"card-header gradient-card-header blue-gradient white-text text-center py-4\">\n          <strong>Enter One Time Password</strong>\n        </h5>\n        <div class=\"head\">\n          <em>We have sent you the one time password to your registered {{mobileNo}} Mobile\n            Number, please\n            enter in below,</em>\n        </div>\n        <form class=\"text-center border border-light p-5\" action=\"#!\" [formGroup]=\"angForm\" novalidate>\n          <div class=\"form-group\">\n            <input [(ngModel)]=\"otp\" type=\"password\" name=\"otp\" class=\"form-control input-vendor\" placeholder=\"OTP\"\n              formControlName=\"otp\" autofocus>\n            <div\n              *ngIf=\"angForm.controls['otp'].invalid && (angForm.controls['otp'].dirty || angForm.controls['otp'].touched)\"\n              class=\"alert alert-danger\">\n              <div *ngIf=\"angForm.controls['otp'].errors.required\">\n                OTP required.\n              </div>\n              <div *ngIf=\"angForm.controls['otp'].errors.OtpInvalid\">\n                Invalid OTP.\n              </div>\n            </div>\n          </div>\n          <button type=\"button\" class=\"btn btn-success btn-lg btn-block\" (click)=\"onSubmit()\">Submit</button><br>\n          <button type=\"button\" class=\"btn btn-deep-orange btn-lg btn-block\" (click)=\"onResendOtp()\">Resend OTP</button>\n\n        </form>\n      </div>\n    </div>\n  </div>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/pricemanagement/pricemanagement.component.html":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/components/pricemanagement/pricemanagement.component.html ***!
  \*****************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\r\n<div class=\"card price1\" *ngIf=\"iteration == 'initial'\">\r\n\t<div\r\n\t\tclass=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\r\n\t\t<div>\r\n\t\t</div>\r\n\t\t<h4 href=\"\" class=\"white-text mx-3\">Price and Offer Management </h4>\r\n\t\t<div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div>\r\n\t\t<div class=\"container price2\">\r\n\t\t\t<div class=\"row\">\r\n\t\t\t\t<div class=\"col-6 col-md-4\">\r\n\t\t\t\t\t<!-- Card -->\r\n\t\t\t\t\t<div class=\"card card-cascade\" (click)=\"userPrices()\">\r\n\t\t\t\t\t\t<!-- Card image -->\r\n\t\t\t\t\t\t<div class=\"view view-cascade gradient-card-header blue-gradient\">\r\n\t\t\t\t\t\t\t<!-- Title -->\r\n\t\t\t\t\t\t\t<h4 class=\"card-header-title mb-3\" style=\"color: white;\"> User Price Capture</h4>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<!-- Card content -->\r\n\t\t\t\t\t\t<div class=\"card-body card-body-cascade text-center \">\r\n\t\t\t\t\t\t\t<img class=\"card-img-top\" src=\"assets/userprice.png\" style=\"width: 120px;height:100px\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- Card -->\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"col-6 col-md-4\">\r\n\t\t\t\t\t<!-- Card -->\r\n\t\t\t\t\t<div class=\"card card-cascade\" (click)=\"vendorProductPrice()\">\r\n\t\t\t\t\t\t<!-- Card image -->\r\n\t\t\t\t\t\t<div class=\"view view-cascade gradient-card-header blue-gradient\">\r\n\t\t\t\t\t\t\t<!-- Title -->\r\n\t\t\t\t\t\t\t<h4 class=\"card-header-title mb-3\" style=\"color: white;\">Vendor Product Price</h4>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<!-- Card content -->\r\n\t\t\t\t\t\t<div class=\"card-body card-body-cascade text-center \">\r\n\t\t\t\t\t\t\t<img class=\"card-img-top\" src=\"assets/productprice.png\" style=\"width: 120px;height:100px\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- Card -->\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"col-6 col-md-4\">\r\n\t\t\t\t\t<!-- Card -->\r\n\t\t\t\t\t<div class=\"card card-cascade\" [routerLink]=\"['/offer']\">\r\n\t\t\t\t\t\t<!-- Card image -->\r\n\t\t\t\t\t\t<div class=\"view view-cascade gradient-card-header blue-gradient\">\r\n\t\t\t\t\t\t\t<!-- Title -->\r\n\t\t\t\t\t\t\t<h4 class=\"card-header-title mb-3\" style=\"color: white;\">Offers</h4>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<!-- Card content -->\r\n\t\t\t\t\t\t<div class=\"card-body card-body-cascade text-center \">\r\n\t\t\t\t\t\t\t<img class=\"card-img-top\" src=\"assets/priceoffer.png\" style=\"width: 120px;height:100px\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- Card -->\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<br>\r\n\t\t\t<div class=\"button-section\">\r\n\t\t\t\t<button class=\"btn btn-primary btn-lg\" [routerLink]=\"['/dashboard']\">Dashboard</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n<div class=\"card user\" *ngIf=\"iteration == 'userPrices'\">\r\n\t<div\r\n\t\tclass=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\r\n\t\t<div>\r\n\t\t</div>\r\n\t\t<h4 href=\"\" class=\"white-text mx-3\"> User Price Capture </h4>\r\n\t\t<div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div class=\"container user1\">\r\n\t\t<div class=\"row\">\r\n\t\t\t<div class=\" col-md-6\">\r\n\t\t\t\t<!-- Card -->\r\n\t\t\t\t<div class=\"card card-cascade\" (click)=\"marginAndCancellationCharges()\">\r\n\t\t\t\t\t<!-- Card image -->\r\n\t\t\t\t\t<div class=\"view view-cascade gradient-card-header blue-gradient\">\r\n\t\t\t\t\t\t<!-- Title -->\r\n\t\t\t\t\t\t<h4 class=\"card-header-title mb-3\" style=\"color: white;\">Margin and Cancellation Charges</h4>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- Card content -->\r\n\t\t\t\t\t<div class=\"card-body card-body-cascade text-center \">\r\n\t\t\t\t\t\t<img class=\"card-img-top\" src=\"assets/margincancel.png\" style=\"width: 120px;height:100px\">\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<!-- Card -->\r\n\t\t\t</div>\r\n\t\t\t<div class=\" col-md-6\">\r\n\t\t\t\t<!-- Card -->\r\n\t\t\t\t<div class=\"card card-cascade\" (click)=\"preOrdrClick()\">\r\n\t\t\t\t\t<!-- Card image -->\r\n\t\t\t\t\t<div class=\"view view-cascade gradient-card-header blue-gradient\">\r\n\t\t\t\t\t\t<!-- Title -->\r\n\t\t\t\t\t\t<h4 class=\"card-header-title mb-3\" style=\"color: white;\">Pre-Order and Order Price</h4>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- Card content -->\r\n\t\t\t\t\t<div class=\"card-body card-body-cascade text-center \">\r\n\t\t\t\t\t\t<img class=\"card-img-top\" src=\"assets/preandorder.png\" style=\"width: 120px;height:100px\">\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<!-- Card -->\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div class=\"button-section\">\r\n\t\t\t<button type=\"button\" class=\"btn btn-default btn-lg\" (click)=\"onBackClick2()\">Back</button>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n\r\n\r\n<div *ngIf=\"iteration == 'vendorProductPrice'\">\r\n\t<div class=\"container-fluid\">\r\n\t\t<section class=\"mb-5\">\r\n\t\t\t<!--Card-->\r\n\t\t\t<div class=\"card card-cascade narrower body-section\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<h4 href=\"\" class=\"white-text mx-3\">Vendor Product Price </h4>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"card-body\">\r\n\t\t\t\t\t<div class=\"row\">\r\n\t\t\t\t\t\t<div class=\"col-sm-12\">\r\n\t\t\t\t\t\t\t<label>Set Date and Time </label>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"row\">\r\n\t\t\t\t\t\t<div class=\"col-lg-3\">\r\n\t\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t\t<input placeholder=\"Date Time:\" [(ngModel)]=\"dateTime\" [owlDateTimeTrigger]=\"dt\"\r\n\t\t\t\t\t\t\t\t\t[owlDateTime]=\"dt\" [min]=\"min\" class=\"form-control input-vendor\"\r\n\t\t\t\t\t\t\t\t\t(ngModelChange)=\"onChangeDate($event)\">\r\n\t\t\t\t\t\t\t\t<owl-date-time #dt></owl-date-time>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-lg-3\">\r\n\t\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t\t<select class=\"form-control\" name=\"vendorTypeId\"\r\n\t\t\t\t\t\t\t\t\t[(ngModel)]=\"vendorProductPriceManagement.vendorTypeId\"\r\n\t\t\t\t\t\t\t\t\t(change)=\"onChangeVendorType()\" #vendorTypeId=\"ngModel\" required>\r\n\t\t\t\t\t\t\t\t\t<option value=\"0\">Select Vendor Type</option>\r\n\t\t\t\t\t\t\t\t\t<option *ngFor=\"let t of types\" [ngValue]=\"t.paramId\">{{t.paramName}}</option>\r\n\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t\t<div *ngIf=\"vendorTypeId.invalid && (vendorTypeId.dirty || vendorTypeId.touched)\"\r\n\t\t\t\t\t\t\t\t\tclass=\"alert alert-danger\">\r\n\t\t\t\t\t\t\t\t\t<div [hidden]=\"!vendorTypeId.hasError('required')\">Select Vendor Type</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-lg-3\">\r\n\t\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t\t<select class=\"form-control\" name=\"vendorId\"\r\n\t\t\t\t\t\t\t\t\t[(ngModel)]=\"vendorProductPriceManagement.vendorId\" #vendorId=\"ngModel\"\r\n\t\t\t\t\t\t\t\t\t(change)=\"onChangeVendor()\">\r\n\t\t\t\t\t\t\t\t\t<option value=\"0\">Select Vendor</option>\r\n\t\t\t\t\t\t\t\t\t<option *ngFor=\"let v of masterOrganisationList\" [ngValue]=\"v.organisationId\">\r\n\t\t\t\t\t\t\t\t\t\t{{v.organisationName}}</option>\r\n\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t\t<div *ngIf=\"vendorId.invalid && (vendorId.dirty || vendorId.touched)\"\r\n\t\t\t\t\t\t\t\t\tclass=\"alert alert-danger\">\r\n\t\t\t\t\t\t\t\t\t<div [hidden]=\"!vendorId.hasError('required')\">Select Vendor Type</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-lg-3\">\r\n\t\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t\t<select class=\"form-control\" name=\"productId\"\r\n\t\t\t\t\t\t\t\t\t[(ngModel)]=\"vendorProductPriceManagement.productId\" #productId=\"ngModel\" required\r\n\t\t\t\t\t\t\t\t\t(change)=\"onChangeProduct()\">\r\n\t\t\t\t\t\t\t\t\t<option [ngValue]=\"0\">Select Product</option>\r\n\t\t\t\t\t\t\t\t\t<option *ngFor=\"let p of masterProductsList\" [ngValue]=\"p.productId\">\r\n\t\t\t\t\t\t\t\t\t\t{{p.productName}}</option>\r\n\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<hr>\r\n\t\t\t\t\t<div class=\"row\">\r\n\t\t\t\t\t\t<div class=\"col-md-3\">\r\n\t\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t\t<select class=\"form-control\" name=\"countryId\" disabled\r\n\t\t\t\t\t\t\t\t\t[(ngModel)]=\"vendorProductPriceManagement.countryId\" #countryId=\"ngModel\" required>\r\n\t\t\t\t\t\t\t\t\t<option [ngValue]=\"null\">Select Country</option>\r\n\t\t\t\t\t\t\t\t\t<option *ngFor=\"let c of countries\" [ngValue]=\"c.countryId\">\r\n\t\t\t\t\t\t\t\t\t\t{{c.countryName}}</option>\r\n\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\">\r\n\t\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t\t<select select class=\"form-control\" name=\"region\"\r\n\t\t\t\t\t\t\t\t\t[(ngModel)]=\"vendorProductPriceManagement.region\" (ngModelChange)=\"onChangeFilter()\"\r\n\t\t\t\t\t\t\t\t\t#region=\"ngModel\" required>\r\n\t\t\t\t\t\t\t\t\t<option [ngValue]=\"r\">Select Region</option>\r\n\t\t\t\t\t\t\t\t\t<option *ngFor=\"let r of selectedRegions\" [value]=\"r\">{{r}}\r\n\t\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\">\r\n\t\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t\t<select select class=\"form-control\" name=\"stateName\"\r\n\t\t\t\t\t\t\t\t\t[(ngModel)]=\"vendorProductPriceManagement.stateName\"\r\n\t\t\t\t\t\t\t\t\t(ngModelChange)=\"onChangeFilter()\" #stateName=\"ngModel\" required>\r\n\t\t\t\t\t\t\t\t\t<option [ngValue]=\"s\">Select State</option>\r\n\t\t\t\t\t\t\t\t\t<option *ngFor=\"let s of selectedStates\" [value]=\"s\">{{s}}\r\n\t\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\">\r\n\t\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t\t<select class=\"form-control\" name=\"cityName\"\r\n\t\t\t\t\t\t\t\t\t[(ngModel)]=\"vendorProductPriceManagement.cityName\"\r\n\t\t\t\t\t\t\t\t\t(ngModelChange)=\"onChangeFilter()\" #cityName=\"ngModel\" required>\r\n\t\t\t\t\t\t\t\t\t<option [ngValue]=\"c\">Select City</option>\r\n\t\t\t\t\t\t\t\t\t<option *ngFor=\"let c of selectedCities\" [value]=\"c\">{{c}}</option>\r\n\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-3\">\r\n\t\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t\t<select class=\"form-control\" name=\"warehouseName\"\r\n\t\t\t\t\t\t\t\t\t[(ngModel)]=\"vendorProductPriceManagement.warehouseName\"\r\n\t\t\t\t\t\t\t\t\t(ngModelChange)=\"onChangeFilter()\">\r\n\t\t\t\t\t\t\t\t\t<option [ngValue]=\"w\">Select Warehouse</option>\r\n\t\t\t\t\t\t\t\t\t<option *ngFor=\"let w of selectedWarehouse\" [ngValue]=\"w\">\r\n\t\t\t\t\t\t\t\t\t\t{{w}}</option>\r\n\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<hr>\r\n\t\t\t\t\t<div class=\"row\">\r\n\t\t\t\t\t\t<div class=\"col-lg-4\">\r\n\t\t\t\t\t\t\t<input type=\"text\" name=\"price\" class=\"form-control input-vendor\" placeholder=\"price\" value=\"\"\r\n\t\t\t\t\t\t\t\trequired=\"\" [(ngModel)]=\"price\" />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-lg-5\">\r\n\t\t\t\t\t\t\t<button (click)=\"setForAll()\" type=\"button\" class=\"btn btn-block btn-lg btn-primary cor1\">Apply For\r\n\t\t\t\t\t\t\t\tAll</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t\t<!--Card-->\r\n\t\t<div class=\"card card-cascade narrower body-section\" *ngIf=\"newVendorProductPriceManagementList != null\">\r\n\t\t\t<div class=\"card-body\">\r\n\t\t\t\t<div class=\"table table-responsive table-striped table-bordered\">\r\n\t\t\t\t\t<table class=\"table text-nowrap\">\r\n\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th>Warehouse Name</th>\r\n\t\t\t\t\t\t\t\t<th>Country</th>\r\n\t\t\t\t\t\t\t\t<th>Region</th>\r\n\t\t\t\t\t\t\t\t<th>State</th>\r\n\t\t\t\t\t\t\t\t<th>City</th>\r\n\t\t\t\t\t\t\t\t<td>Date</td>\r\n\t\t\t\t\t\t\t\t<th>Product Unit</th>\r\n\t\t\t\t\t\t\t\t<th>Product Price</th>\r\n\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t<tr *ngFor=\"let v of newVendorProductPriceManagementList\">\r\n\t\t\t\t\t\t\t\t<td>{{v.warehouseName}}</td>\r\n\t\t\t\t\t\t\t\t<td>{{v.countryName}}</td>\r\n\t\t\t\t\t\t\t\t<td>{{v.region}}</td>\r\n\t\t\t\t\t\t\t\t<td>{{v.stateName}}</td>\r\n\t\t\t\t\t\t\t\t<td>{{v.cityName}}</td>\r\n\t\t\t\t\t\t\t\t<td>{{v.priceDateAndTime | date}}</td>\r\n\t\t\t\t\t\t\t\t<td>{{v.masterProducts.productUnit.paramName}}</td>\r\n\t\t\t\t\t\t\t\t<td><input type=\"text\" name=\"price\" class=\"form-control\" placeholder=\"priceValue\"\r\n\t\t\t\t\t\t\t\t\t\tvalue=\"\" required=\"\" [(ngModel)]=\"v.priceValue\" /></td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"button-section\">\r\n\t\t\t\t\t<button (click)=\"save()\" type=\"button\" class=\"btn btn-success btn-lg\">Save Price</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div class=\"button-section\">\r\n\t\t\t<button class=\"btn btn-default btn-lg\" type=\"button\" (click)=\"onBackClick()\">Back</button>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n\r\n\r\n\r\n<div class=\"container-fluid\" style=\"padding-right:42px; padding-left:42px\"\r\n\t*ngIf=\"iteration == 'marginAndCancellationCharges'\">\r\n\t<form class=\"form\" (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\" #vendorForm>\r\n\t\t<div class=\"card\">\r\n\t\t\t<div class=\"view view-cascade gradient-card-header blue-gradient\">\r\n\t\t\t\t<!-- Title -->\r\n\t\t\t\t<h4 class=\"card-header-title mb-3\" style=\"color: white;\">Margin And Cancellation Charges</h4>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"card-body vendor\">\r\n\t\t\t\t<div class=\"row\">\r\n\t\t\t\t\t<div class=\"col-sm-12\">\r\n\t\t\t\t\t\t<label>Set Date And Time</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"row\">\r\n\t\t\t\t\t<div class=\"col-sm-3\">\r\n\t\t\t\t\t\t<input placeholder=\"Date Time:\" [(ngModel)]=\"dateForMargin\" name=\"dateForMargin\"\r\n\t\t\t\t\t\t\t[owlDateTimeTrigger]=\"dt\" [owlDateTime]=\"dt\" [min]=\"min\" class=\"form-control input-vendor\"\r\n\t\t\t\t\t\t\t(ngModelChange)=\"onChangeDateForMargin($event)\">\r\n\t\t\t\t\t\t<owl-date-time #dt></owl-date-time>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"col-sm-3\">\r\n\t\t\t\t\t\t<select class=\"form-control\" name=\"masterProducts\" [(ngModel)]=\"masterProducts\"\r\n\t\t\t\t\t\t\t(change)=\"onChangeProductForMargin()\">\r\n\t\t\t\t\t\t\t<option value=\"0\">Select Product</option>\r\n\t\t\t\t\t\t\t<option *ngFor=\"let p of productsList\" [ngValue]=\"p.productId\">{{p.productName}}\r\n\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<!-- 1 -->\r\n\t\t<div *ngIf=\"preOrderMarginAndCancellationCharges != null\" id=\"margincard\">\r\n\t\t\t<div class=\"card\">\r\n\t\t\t\t<div class=\"card-body vendor\">\r\n\t\t\t\t\t<div class=\"row\">\r\n\t\t\t\t\t\t<div class=\"col-sm-6\">\r\n\t\t\t\t\t\t\t<label>Margin</label>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-sm-6\">\r\n\t\t\t\t\t\t\t<label>Admin Charges</label>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"row\">\r\n\t\t\t\t\t\t<div class=\"col-sm-3\">\r\n\t\t\t\t\t\t\t<input type=\"text\" name=\"margin\" class=\"form-control input-vendor\" placeholder=\"margin\"\r\n\t\t\t\t\t\t\t\tvalue=\"\" required=\"\" [(ngModel)]=\"preOrderMarginAndCancellationCharges.margin\" />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-sm-3\">\r\n\t\t\t\t\t\t\t<select class=\"form-control\" name=\"marginIn\"\r\n\t\t\t\t\t\t\t\t[(ngModel)]=\"preOrderMarginAndCancellationCharges.marginIn\">\r\n\t\t\t\t\t\t\t\t<option value=\"0\">Select Type</option>\r\n\t\t\t\t\t\t\t\t<option *ngFor=\"let v of valueTypes\" [ngValue]=\"v.paramName\">{{v.paramName}}\r\n\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-sm-3\">\r\n\t\t\t\t\t\t\t<input type=\"text\" name=\"cancellationAdmin\" class=\"form-control input-vendor\"\r\n\t\t\t\t\t\t\t\tplaceholder=\"Cancellation Charges on Admin\" value=\"\" required=\"\"\r\n\t\t\t\t\t\t\t\t[(ngModel)]=\"preOrderMarginAndCancellationCharges.cancellationAdmin\" />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-sm-3\">\r\n\t\t\t\t\t\t\t<select class=\"form-control\" name=\"cancellationAdminIn\"\r\n\t\t\t\t\t\t\t\t[(ngModel)]=\"preOrderMarginAndCancellationCharges.cancellationAdminIn\">\r\n\t\t\t\t\t\t\t\t<option value=\"0\">Select Type</option>\r\n\t\t\t\t\t\t\t\t<option *ngFor=\"let v of valueTypes\" [ngValue]=\"v.paramName\">{{v.paramName}}\r\n\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"row\" id=\"vendorrow\">\r\n\t\t\t\t\t\t<div class=\"col-sm-3\">\r\n\t\t\t\t\t\t\t<label>Cancellation Charges (%)</label>\r\n\t\t\t\t\t\t\t<input type=\"text\" name=\"cancellationOnMargin\" class=\"form-control input-vendor\"\r\n\t\t\t\t\t\t\t\tplaceholder=\"Cancellation Charges on Margin\" value=\"\" required=\"\"\r\n\t\t\t\t\t\t\t\t[(ngModel)]=\"preOrderMarginAndCancellationCharges.cancellationOnMargin\" />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"row\" style=\"float: right;\" id=\"vendorrow\">\r\n\t\t\t\t\t\t<div class=\"button-section\">\r\n\t\t\t\t\t\t\t<button (click)=\"onBackClick3()\" class=\"btn btn-default btn-lg\" value=\"Login\">Back</button>\r\n\t\t\t\t\t\t\t<button class=\"btn btn-success btn-lg\"\r\n\t\t\t\t\t\t\t\t(click)=\"saveMarginAndCancellationCharges()\">Save</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<!-- 2 -->\r\n\t\t<div *ngIf=\"preOrderMarginAndCancellationCharges1 != null\" id=\"margincard\">\r\n\t\t\t<div class=\"card\">\r\n\t\t\t\t<div class=\"card-body vendor\">\r\n\t\t\t\t\t<div class=\"row\">\r\n\t\t\t\t\t\t<div class=\"col-sm-6\">\r\n\t\t\t\t\t\t\t<label>Margin</label>\r\n\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-sm-6\">\r\n\t\t\t\t\t\t\t<label>Admin Charges</label>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"row\" id=\"vendorrow\">\r\n\t\t\t\t\t\t<div class=\"col-sm-3\">\r\n\t\t\t\t\t\t\t<input type=\"text\" name=\"margin\" class=\"form-control input-vendor\" placeholder=\"margin\"\r\n\t\t\t\t\t\t\t\tvalue=\"\" required=\"\" [(ngModel)]=\"preOrderMarginAndCancellationCharges1.margin\" />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-sm-3\">\r\n\t\t\t\t\t\t\t<select class=\"form-control\" name=\"marginIn\"\r\n\t\t\t\t\t\t\t\t[(ngModel)]=\"preOrderMarginAndCancellationCharges1.marginIn\">\r\n\t\t\t\t\t\t\t\t<option value=\"0\">Select Type</option>\r\n\t\t\t\t\t\t\t\t<option *ngFor=\"let v of valueTypes\" [ngValue]=\"v.paramName\">{{v.paramName}}\r\n\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-sm-3\">\r\n\t\t\t\t\t\t\t<input type=\"text\" name=\"cancellationAdmin\" class=\"form-control input-vendor\"\r\n\t\t\t\t\t\t\t\tplaceholder=\"Cancellation Charges on Admin\" value=\"\" required=\"\"\r\n\t\t\t\t\t\t\t\t[(ngModel)]=\"preOrderMarginAndCancellationCharges1.cancellationAdmin\" />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-sm-3\">\r\n\t\t\t\t\t\t\t<select class=\"form-control input-vendor\" name=\"cancellationAdminIn\"\r\n\t\t\t\t\t\t\t\t[(ngModel)]=\"preOrderMarginAndCancellationCharges1.cancellationAdminIn\">\r\n\t\t\t\t\t\t\t\t<option value=\"0\">Select Type</option>\r\n\t\t\t\t\t\t\t\t<option *ngFor=\"let v of valueTypes\" [ngValue]=\"v.paramName\">{{v.paramName}}\r\n\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"row\" id=\"vendorrow\">\r\n\t\t\t\t\t\t<div class=\"col-sm-3\">\r\n\t\t\t\t\t\t\t<label>Cancellation Charges (%)</label>\r\n\t\t\t\t\t\t\t<input type=\"text\" name=\"cancellationOnMargin\" class=\"form-control input-vendor\"\r\n\t\t\t\t\t\t\t\tplaceholder=\"Cancellation Charges on Margin\" value=\"\" required=\"\"\r\n\t\t\t\t\t\t\t\t[(ngModel)]=\"preOrderMarginAndCancellationCharges1.cancellationOnMargin\" />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"row\" style=\"float: right;\" id=\"vendorrow\">\r\n\t\t\t\t\t\t<div class=\"button-section\">\r\n\t\t\t\t\t\t\t<button (click)=\"onBackClick3()\" class=\"btn btn-default btn-lg\" value=\"Login\">Back</button>\r\n\t\t\t\t\t\t\t<button class=\"btn btn-success btn-lg\"\r\n\t\t\t\t\t\t\t\t(click)=\"saveMarginAndCancellationCharges()\">Update</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</form>\r\n</div>\r\n\r\n\r\n<!-- Pre-Order & Order Price -->\r\n<div class=\"container-fluid\" *ngIf=\"iteration == 'userProductPrice1'\">\r\n\t<section class=\"mb-5\">\r\n\t\t<!--Card-->\r\n\t\t<div class=\"card card-cascade narrower body-section\">\r\n\t\t\t<div\r\n\t\t\t\tclass=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\r\n\t\t\t\t<div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<h4 href=\"\" class=\"white-text mx-3\">Pre-Order & Order Price </h4>\r\n\t\t\t\t<div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"card-body\">\r\n\t\t\t\t<div class=\"row\">\r\n\t\t\t\t\t<div class=\"col-sm-12\">\r\n\t\t\t\t\t\t<label>Set Date and Time </label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"row\">\r\n\t\t\t\t\t<div class=\"col-lg-2\">\r\n\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t<input placeholder=\"Date Time:\" [(ngModel)]=\"dateTime\" [owlDateTimeTrigger]=\"dt\"\r\n\t\t\t\t\t\t\t\t[owlDateTime]=\"dt\" [min]=\"min\" class=\"form-control input-vendor\"\r\n\t\t\t\t\t\t\t\t(ngModelChange)=\"onChangeDate1($event)\">\r\n\t\t\t\t\t\t\t<owl-date-time #dt></owl-date-time>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"col-lg-2\">\r\n\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t<select class=\"form-control\" name=\"productId\" [(ngModel)]=\"productId\"\r\n\t\t\t\t\t\t\t\t(change)=\"onChangeMasterProduct()\">\r\n\t\t\t\t\t\t\t\t<option value=\"0\">Select Product</option>\r\n\t\t\t\t\t\t\t\t<option *ngFor=\"let p of productsList\" [ngValue]=\"p.productId\">{{p.productName}}\r\n\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"col-lg-2\">\r\n\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t<select class=\"form-control\" name=\"region\" [(ngModel)]=\"region\"\r\n\t\t\t\t\t\t\t\t(change)=\"onChangeFilter1()\">\r\n\t\t\t\t\t\t\t\t<option [ngValue]=\"r\">Select Region</option>\r\n\t\t\t\t\t\t\t\t<option *ngFor=\"let r of selectedRegions1\" [ngValue]=\"r\">{{r}}</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"col-lg-2\">\r\n\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t<select class=\"form-control\" name=\"stateName\" [(ngModel)]=\"stateName\"\r\n\t\t\t\t\t\t\t\t(change)=\"onChangeFilter1()\">\r\n\t\t\t\t\t\t\t\t<option [ngValue]=\"s\">Select State</option>\r\n\t\t\t\t\t\t\t\t<option *ngFor=\"let s of selectedStates1\" [ngValue]=\"s\">{{s}}</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"col-md-2\">\r\n\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t<select class=\"form-control\" name=\"cityName\" [(ngModel)]=\"cityName\"\r\n\t\t\t\t\t\t\t\t(change)=\"onChangeFilter1()\">\r\n\t\t\t\t\t\t\t\t<option value=\"-1\">Select City</option>\r\n\t\t\t\t\t\t\t\t<option *ngFor=\"let c of selectedCities1\" [ngValue]=\"c\">{{c}}</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"col-md-2\">\r\n\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t<select class=\"form-control\" name=\"warehouseName\" [(ngModel)]=\"warehouseName\"\r\n\t\t\t\t\t\t\t\t(change)=\"onChangeFilter1()\">\r\n\t\t\t\t\t\t\t\t<option value=\"-1\">Select Warehouse</option>\r\n\t\t\t\t\t\t\t\t<option *ngFor=\"let w of selectedWarehouse1\" [ngValue]=\"w\">{{w}}</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<hr>\r\n\t\t\t\t<div class=\"row\">\r\n\t\t\t\t\t<div class=\"col-md-4\">\r\n\t\t\t\t\t\t<label>Order Price </label>\r\n\t\t\t\t\t\t<div class=\"input-group\">\r\n\t\t\t\t\t\t\t<input type=\"text\" name=\"orderPrice\" placeholder=\"  Order Price  \" value=\"\" required=\"\"\r\n\t\t\t\t\t\t\t\t[(ngModel)]=\"userProductPriceManagement.orderPrice\" class=\"form-control input-vendor\" />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"col-md-4\">\r\n\t\t\t\t\t\t<label>Pre-Order Price </label>\r\n\t\t\t\t\t\t<div class=\"input-group\">\r\n\t\t\t\t\t\t\t<input type=\"text\" name=\"preOrderP\" class=\"form-control input-vendor\"\r\n\t\t\t\t\t\t\t\tplaceholder=\"pre-order Price\" value=\"\" required=\"\" [(ngModel)]=\"preOrderP\" />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"col-md-4\">\r\n\t\t\t\t\t\t<button class=\"btn btn-primary btn-block btn-lg cor\"\r\n\t\t\t\t\t\t\t(click)=\"setForAllPreOrder()\">Apply</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</section>\r\n\t<!--Card-->\r\n\t<div class=\"card card-cascade narrower body-section\">\r\n\t\t<div class=\"card-body\">\r\n\t\t\t<div class=\"table table-responsive table-striped table-bordered\">\r\n\t\t\t\t<table class=\"table  text-nowrap\">\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>Month,Year</th>\r\n\t\t\t\t\t\t\t<th>Pre-Order Price (Rs.)</th>\r\n\t\t\t\t\t\t</tr>\r\n\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t<tr *ngFor=\"let pre of preOrderPriceManagementList; let i=index;\">\r\n\t\t\t\t\t\t\t<td *ngIf=\"i%4==0\">\r\n\t\t\t\t\t\t\t\t{{preOrderPriceManagementList[i].month}},{{preOrderPriceManagementList[i].year}}</td>\r\n\t\t\t\t\t\t\t<td *ngIf=\"i%4==0\">\r\n\t\t\t\t\t\t\t\t<input type=\"text\" name=\"preOrderPrice\" placeholder=\"Pre Order Price\" value=\"\"\r\n\t\t\t\t\t\t\t\t\trequired=\"\" [(ngModel)]=\"preOrderPriceManagementList[i].preOrderPrice\"\r\n\t\t\t\t\t\t\t\t\tclass=\"form-control head\" />\r\n\t\t\t\t\t\t\t</td>\r\n\r\n\t\t\t\t\t\t\t<td *ngIf=\"i%4==0\">\r\n\t\t\t\t\t\t\t\t{{preOrderPriceManagementList[i+1].month}},{{preOrderPriceManagementList[i+1].year}}\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t<td *ngIf=\"i%4==0\">\r\n\t\t\t\t\t\t\t\t<input type=\"text\" name=\"preOrderPrice\" placeholder=\"Pre Order Price\" value=\"\"\r\n\t\t\t\t\t\t\t\t\trequired=\"\" [(ngModel)]=\"preOrderPriceManagementList[i+1].preOrderPrice\"\r\n\t\t\t\t\t\t\t\t\tclass=\"form-control head\" />\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t<td *ngIf=\"i%4==0\">\r\n\t\t\t\t\t\t\t\t{{preOrderPriceManagementList[i+2].month}},{{preOrderPriceManagementList[i+2].year}}\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t<td *ngIf=\"i%4==0\">\r\n\t\t\t\t\t\t\t\t<input type=\"text\" name=\"preOrderPrice\" placeholder=\"Pre Order Price\" value=\"\"\r\n\t\t\t\t\t\t\t\t\trequired=\"\" [(ngModel)]=\"preOrderPriceManagementList[i+2].preOrderPrice\"\r\n\t\t\t\t\t\t\t\t\tclass=\"form-control head\" />\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t<td *ngIf=\"i%4==0\">\r\n\t\t\t\t\t\t\t\t{{preOrderPriceManagementList[i+3].month}},{{preOrderPriceManagementList[i+3].year}}\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t<td *ngIf=\"i%4==0\">\r\n\t\t\t\t\t\t\t\t<input type=\"text\" name=\"preOrderPrice\" placeholder=\"Pre Order Price\" value=\"\"\r\n\t\t\t\t\t\t\t\t\trequired=\"\" [(ngModel)]=\"preOrderPriceManagementList[i+3].preOrderPrice\"\r\n\t\t\t\t\t\t\t\t\tclass=\"form-control head\" />\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t<td *ngIf=\"i%4==0\">\r\n\t\t\t\t\t\t\t\t{{preOrderPriceManagementList[i+3].month}},{{preOrderPriceManagementList[i+3].year}}\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t<td *ngIf=\"i%4==0\">\r\n\t\t\t\t\t\t\t\t<input type=\"text\" name=\"preOrderPrice\" placeholder=\"Pre Order Price\" value=\"\"\r\n\t\t\t\t\t\t\t\t\trequired=\"\" [(ngModel)]=\"preOrderPriceManagementList[i+3].preOrderPrice\"\r\n\t\t\t\t\t\t\t\t\tclass=\"form-control head\" />\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"button-section\">\r\n\t\t\t\t<button (click)=\"onBackClick3()\" class=\"btn btn-default btn-lg\" value=\"Login\">Back</button>\r\n\t\t\t\t<button (click)=\"saveUserPrice()\" type=\"button\" class=\"btn btn-success btn-lg\">Save Price</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/reconciliation/reconciliation.component.html":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/components/reconciliation/reconciliation.component.html ***!
  \***************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n<div class=\"card recon\" *ngIf=\"iteration == 'initial'\">\n    <div\n        class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n        <div>\n        </div>\n        <h4 href=\"\" class=\"white-text mx-3\">Reconciliation </h4>\n        <div>\n        </div>\n    </div>\n    <div class=\"container recon2\">\n        <br>\n        <div class=\"row\">\n            <div class=\"col-6 col-md-4\">\n                <!-- Card -->\n                <div class=\"card card-cascade\" (click)=\"vendorrecon()\">\n                    <!-- Card image -->\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <!-- Title -->\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Vendor Reconciliation</h4>\n                    </div>\n                    <!-- Card content -->\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <img class=\"card-img-top\" src=\"assets/vendorre.png\" style=\"width: 120px;height:100px\">\n                    </div>\n                </div>\n                <!-- Card -->\n            </div>\n            <div class=\"col-6 col-md-4\">\n                <!-- Card -->\n                <div class=\"card card-cascade\" (click)=\"enduserreconciliation()\">\n                    <!-- Card image -->\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <!-- Title -->\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">End-User Reconciliation</h4>\n                    </div>\n                    <!-- Card content -->\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <img class=\"card-img-top\" src=\"assets/enduserre.png\" style=\"width: 120px;height:100px\">\n                    </div>\n                </div>\n                <!-- Card -->\n            </div>\n\n            <div class=\"col-6 col-md-4\">\n                <!-- Card -->\n                <div class=\"card card-cascade\" (click)=\"corporateuserreconciliation()\">\n                    <!-- Card image -->\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <!-- Title -->\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Corporate User Reconciliation</h4>\n                    </div>\n                    <!-- Card content -->\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <img class=\"card-img-top\" src=\"assets/corporate.png\" style=\"width: 120px;height:100px\">\n                    </div>\n                </div>\n                <!-- Card -->\n            </div>\n\n        </div>\n        <br>\n        <div class=\"button-section\">\n            <button class=\"btn btn-primary btn-lg\" [routerLink]=\"['/dashboard']\">Dashboard</button>\n        </div>\n    </div>\n</div>\n\n\n<!-- Account Summary -->\n<div class=\"container-fluid\" *ngIf=\"iteration == 'accountSummary'\">\n    <div class=\"row\">\n        \n        <div class=\"col-sm-12\" id=\"importcol\">\n            <section class=\"mb-5\">\n                <!--Card-->\n                <div class=\"card\">\n                    <div class=\"card-header view view-cascade gradient-card-header blue-gradient imp1\">\n                        Reconciliation - Account Summary\n                    </div><br>\n                    <div class=\"row v1\">\n                        <div class=\"col-md-3\">\n                            <div class=\"form-group\">\n                                <select class=\"form-control\" [(ngModel)]=\"vendorName\" name=\"#vendorName\"\n                                    (ngModelChange)=\"onRecSelectVendor(selected)\">\n                                    <option [ngValue]=\"v\">Select Vendor</option>\n                                    <option *ngFor=\"let v of vendors\" [value]=\"v\">{{v}}</option>\n                                </select>\n                            </div>\n                        </div>\n                        <div class=\"col-md-3\">\n                            <div class=\"form-group\">\n                                <select class=\"form-control\" [(ngModel)]=\"range\" name=\"#range\"\n                                    (ngModelChange)=\"onSelectRangeForVendor(selected)\">\n                                    <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                                    <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n            \n                                </select>\n                            </div>\n                        </div>\n                        <div class=\"col-md-3\" *ngIf=\"customDate==true\">\n                            <div class=\"form-group\">\n                                <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" [(ngModel)]=\"date\" placeholder=\"From\"\n                                    class=\"form-control input-vendor\" (ngModelChange)=\"onDateChangeForVendorRecon($event)\">\n                                <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                            </div>\n                        </div>\n                        <div class=\"col-md-3\" *ngIf=\"customDate==true\">\n                            <div class=\"form-group\">\n                                <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" [(ngModel)]=\"date1\" placeholder=\"To\"\n                                    class=\"form-control input-vendor\" (ngModelChange)=\"onDateChangeForVendorRecon($event)\">\n                                <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"card-body\">\n                        <div class=\"table table-responsive table-striped table-bordered\">\n                            <table class=\"table text-nowrap\">\n                                <thead>\n                                    <tr>\n                                        <th>Date</th>\n                                        <th>Vendor Name</th>\n                                        <th>Description</th>\n                                        <th>IN</th>\n                                        <th>OUT</th>\n                                        <th>Balance</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr *ngFor=\"let a of accountSummaryFilteredList | \n                                    paginate: { id: 'listing_pagination',\n                                    itemsPerPage: 6,\n                                    currentPage: page,\n                                    totalItems: totalRec }\">\n                                         <td>{{a.transactionDate | date}}</td>\n                                         <td>{{a.vendorName}}</td>\n                                        <td> {{a.transactionDescription}}</td>\n                                        <td *ngIf=\"a.inAmount!=0\">{{a.inAmount |currency:a.transactionCurrency}}</td>\n                                        <td *ngIf=\"a.inAmount==0\">-</td>\n                                        <td *ngIf=\"a.outAmount!=0\">\n                                            {{a.outAmount | currency:a.transactionCurrency}}\n                                        </td>\n                                        <td *ngIf=\"a.outAmount==0\">-</td>\n                                        <td>{{a.availableBalance | currency:a.transactionCurrency}}</td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                        <br>\n                        <div class=\"d-flex justify-content-between\">\n                            <div class=\"wrap\">\n                                <pagination-controls id=\"listing_pagination\" maxSize=\"4\" directionLinks=\"true\"\n                                    (pageChange)=\"page = $event\">\n                                </pagination-controls>\n                            </div>\n                        </div>\n                        \n                        <div class=\"button-section\">\n                            <button type=\"button\" *ngIf=\"referer=='account'\" [routerLink]=\"['/adminVendorpayment']\"\n                            class=\"btn btn-default btn-lg\">Back</button>\n                            <button type=\"submit\" [routerLink]=\"['/dashboard']\"\n                                class=\"btn btn-primary btn-lg\">Dashboard</button>\n                            <button class=\"btn btn-deep-orange btn-lg\" (click)=\"deliveryReport()\">Delivery Report</button>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        </div>\n    </div>\n</div>\n\n<div class=\"container-fluid\" *ngIf=\"iteration == 'vendorreconciliation'\">\n    <div class=\"card p-2 mb-5\">\n        <h4 class=\"filter\">Filters</h4>\n        <div class=\"row v1\">\n            <div class=\"col-md-3\">\n                <div class=\"form-group\">\n                    <select class=\"form-control\" [(ngModel)]=\"vendorName\" name=\"#vendorName\"\n                        (ngModelChange)=\"onSelectVendor(selected)\">\n                        <option [ngValue]=\"v\">Select Vendor</option>\n                        <option *ngFor=\"let v of vendors\" [value]=\"v\">{{v}}</option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"col-md-3\">\n                <div class=\"form-group\">\n                    <select class=\"form-control\" [(ngModel)]=\"range\" name=\"#range\"\n                        (ngModelChange)=\"onSelectRangeForVendor(selected)\">\n                        <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                        <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n\n                    </select>\n                </div>\n            </div>\n            <div class=\"col-md-3\" *ngIf=\"customDate==true\">\n                <div class=\"form-group\">\n                    <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" [(ngModel)]=\"date\" placeholder=\"From\"\n                        class=\"form-control input-vendor\" (ngModelChange)=\"onDateChangeForVendorRecon($event)\">\n                    <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                </div>\n            </div>\n            <div class=\"col-md-3\" *ngIf=\"customDate==true\">\n                <div class=\"form-group\">\n                    <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" [(ngModel)]=\"date1\" placeholder=\"To\"\n                        class=\"form-control input-vendor\" (ngModelChange)=\"onDateChangeForVendorRecon($event)\">\n                    <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <section class=\"mb-5\">\n        <!--Card-->\n        <div class=\"card card-cascade narrower body-section\">\n            <div\n                class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n                <div>\n                </div>\n                <h4 href=\"\" class=\"white-text mx-3\">Vendor Reconciliation</h4>\n                <div>\n                </div>\n            </div>\n            <div class=\"card-body\">\n                <div class=\"table table-responsive table-striped table-bordered\">\n                    <table class=\"table text-nowrap\">\n                        <thead>\n                            <tr>\n                                <th>Order Ref Number </th>\n                                <th>Delivery Date</th>\n                                <th>Warehouse Name</th>\n                                <th>Ordered Product</th>\n                                <th>Delivered Product</th>\n                                <th>Quantity</th>\n                                <th>Price</th>\n                                <th>Total Value</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let v of reconciliation  | \n                            paginate: { id: 'listing_pagination',\n                            itemsPerPage: 5,\n                            currentPage: page,\n                            totalItems: totalRec }\n                            \">\n                                <td>{{v?.orderRefNumber}}</td>\n                                <td>{{v?.deliveryDate | date}}</td>\n                                <td>{{v?.warehouse.warehouseName}}</td>\n                                <td>{{v?.orderedProduct}}</td>\n                                <td>{{v?.deliveredProduct}}</td>\n                                <td>{{v?.orderedQuantity}} {{v.productUnit}}</td>\n                                <td>{{v?.vendorProductPrice |currency: v.currency}} / {{v.productUnit}}</td>\n                                <td>{{v?.totalAmount |currency : v.currency}}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <br>\n                <div class=\"d-flex justify-content-between\">\n                    <div class=\"wrap\">\n                        <pagination-controls id=\"listing_pagination\" maxSize=\"4\" directionLinks=\"true\" responsive=\"true\"\n                            (pageChange)=\"page = $event\">\n                        </pagination-controls>\n                    </div>\n                </div>\n                <div class=\"button-section\">\n                    <button class=\"btn btn-default btn-lg\" (click)=\"onVendorBack()\">Back</button>&nbsp;\n                </div>\n            </div>\n        </div>\n    </section>\n</div>\n\n\n<div class=\"container-fluid\" *ngIf=\"iteration == 'end'\">\n    <br>\n    <div class=\"card p-2 mb-5\">\n        <h4 class=\"filter\">Filters</h4>\n        <div class=\"row v1\">\n            <div class=\"col-md-3\">\n                <div class=\"form-group\">\n                    <select class=\"form-control\" [(ngModel)]=\"region\" name=\"#region\"\n                        (ngModelChange)=\"onRegion(selected)\">\n                        <option [ngValue]=\"null\">Select Region</option>\n                        <option *ngFor=\"let r of regionList\" [value]=\"r\">{{r}}</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"col-md-3\">\n                <div class=\"form-group\">\n                    <select class=\"form-control\" [(ngModel)]=\"state\" name=\"#state\" (ngModelChange)=\"onState(selected)\">\n                        <option [ngValue]=\"null\">Select State</option>\n                        <option *ngFor=\"let s of stateList\" [value]=\"s\">{{s}}</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"col-md-3\">\n                <div class=\"form-group\">\n                    <select class=\"form-control\" [(ngModel)]=\"city\" name=\"#city\" (ngModelChange)=\"onCity(selected)\">\n                        <option [ngValue]=\"null\">Select City</option>\n                        <option *ngFor=\"let c of cityList\" [value]=\"c\">{{c}}</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"col-md-3\">\n                <div class=\"form-group\">\n                    <select class=\"form-control\" [(ngModel)]=\"customerId\" name=\"#customerId\"\n                        (ngModelChange)=\"onCustomerId(selected)\">\n                        <option [ngValue]=\"null\">Select Customer Id</option>\n                        <option *ngFor=\"let u of uniqueUserIdList\" [value]=\"u\">{{u}}</option>\n                    </select>\n                </div>\n            </div>\n\n        </div>\n\n        <div class=\"row v1\">\n            <div class=\"col-md-3\">\n                <div class=\"form-group\">\n                    <select class=\"form-control\" [(ngModel)]=\"range\" name=\"#range\"\n                        (ngModelChange)=\"onSelectRangeForEndUserRecon()\">\n                        <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                        <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"col-md-3\" *ngIf=\"customDate==true\">\n                <div class=\"form-group\">\n                    <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" placeholder=\"From\"\n                        class=\"form-control input-vendor\" (ngModelChange)=\"onDateChangeForEndUserRecon($event)\"\n                        [(ngModel)]=\"date\">\n                    <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                </div>\n            </div>\n            <div class=\"col-md-3\" *ngIf=\"customDate==true\">\n                <div class=\"form-group\">\n                    <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" placeholder=\"To\" [(ngModel)]=\"date1\"\n                        (ngModelChange)=\"onDateChangeForEndUserRecon($event)\" class=\"form-control input-vendor\">\n                    <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                </div>\n            </div>\n        </div>\n    </div><br>\n\n    <section class=\"mb-5\">\n        <!--Card-->\n        <div class=\"card card-cascade narrower body-section\">\n            <div\n                class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n                <div>\n                </div>\n                <h4 href=\"\" class=\"white-text mx-3\">End-User Reconciliation </h4>\n                <div>\n                </div>\n            </div>\n            <div class=\"card-body\">\n                <div class=\"table table-responsive table-striped table-bordered\">\n                    <table class=\"table text-nowrap\">\n                        <thead>\n                            <tr>\n                                <th>Date </th>\n                                <th>Discription</th>\n                                <th>In</th>\n                                <th>Out</th>\n                                <th>Available Balance</th>\n                                <th>Wallet Balance</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let e of accountSummaryList  | \n                            paginate: { id: 'listing_pagination1',\n                            itemsPerPage: 5,\n                            currentPage: page1,\n                            totalItems: totalRec }\n                            \">\n                                <td>{{e?.transactionDate |date}}</td>\n                                <td>{{e?.transactionDesc}}</td>\n                                <td *ngIf=\"e.inAmount==0\">-</td>\n                                <td *ngIf=\"e.inAmount!=0\">{{e?.inAmount |currency : e.transactionCurrency}}</td>\n                                <td *ngIf=\"e.outAmount==0\">-</td>\n                                <td *ngIf=\"e.outAmount!=0\">{{e?.outAmount |currency : e.transactionCurrency}}</td>\n                                <td>{{e?.availableBalance |currency : e.transactionCurrency}}</td>\n                                <td>{{e?.walletBalance |currency : e.transactionCurrency}}</td>\n                            </tr>\n\n                        </tbody>\n                    </table>\n\n                </div>\n                <br>\n                <div class=\"d-flex justify-content-between\">\n                    <div class=\"wrap\">\n                        <pagination-controls id=\"listing_pagination1\" maxSize=\"4\" directionLinks=\"true\"\n                            responsive=\"true\" (pageChange)=\"page1 = $event\">\n                        </pagination-controls>\n                    </div>\n                </div>\n                <div class=\"button-section\">\n                    <button class=\"btn btn-default btn-lg recon1\" (click)=\"onEnduserBack()\">Back</button>\n                </div>\n            </div>\n        </div>\n    </section>\n</div>\n\n<div class=\"container-fluid\" *ngIf=\"iteration == 'corporate'\">\n    <br>\n    <div class=\"card p-2 mb-5\">\n        <h4 class=\"filter\">Filters</h4>\n        <div class=\"row v1\">\n            <div class=\"col-md-2\">\n                <div class=\"form-group\">\n                    <select class=\"form-control\" [(ngModel)]=\"region\" name=\"#region\"\n                        (ngModelChange)=\"onRegion(selected)\">\n                        <option [ngValue]=\"null\">Select Region</option>\n                        <option *ngFor=\"let r of regionList\" [value]=\"r\">{{r}}</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"col-md-2\">\n                <div class=\"form-group\">\n                    <select class=\"form-control\" [(ngModel)]=\"state\" name=\"#state\" (ngModelChange)=\"onState(selected)\">\n                        <option [ngValue]=\"null\">Select State</option>\n                        <option *ngFor=\"let s of stateList\" [value]=\"s\">{{s}}</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"col-md-2\">\n                <div class=\"form-group\">\n                    <select class=\"form-control\" [(ngModel)]=\"city\" name=\"#city\" (ngModelChange)=\"onCity(selected)\">\n                        <option [ngValue]=\"null\">Select City</option>\n                        <option *ngFor=\"let c of cityList\" [value]=\"c\">{{c}}</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"col-md-2\">\n                <div class=\"form-group\">\n                    <select class=\"form-control\" [(ngModel)]=\"office\" name=\"#office\"\n                        (ngModelChange)=\"onOffice(selected)\">\n                        <option [ngValue]=\"null\">Select Office</option>\n                        <option *ngFor=\"let o of officeList\" [value]=\"o\">{{o}}</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"col-md-2\">\n                <div class=\"form-group\">\n                    <select class=\"form-control\" [(ngModel)]=\"customerId\" name=\"#customerId\"\n                        (ngModelChange)=\"onCustomerId(selected)\">\n                        <option [ngValue]=\"null\">Select Customer Id</option>\n                        <option *ngFor=\"let u of uniqueUserIdList\" [value]=\"u\">{{u}}</option>\n                    </select>\n                </div>\n            </div>\n\n        </div>\n\n        <div class=\"row v1\">\n            <div class=\"col-md-2\">\n                <div class=\"form-group\">\n                    <select class=\"form-control\" [(ngModel)]=\"range\" name=\"#range\"\n                        (ngModelChange)=\"onSelectRangeForEndUserRecon()\">\n                        <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                        <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"col-md-2\" *ngIf=\"customDate==true\">\n                <div class=\"form-group\">\n                    <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" placeholder=\"From\"\n                        class=\"form-control input-vendor\" (ngModelChange)=\"onDateChangeForEndUserRecon($event)\"\n                        [(ngModel)]=\"date\">\n                    <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                </div>\n            </div>\n            <div class=\"col-md-2\" *ngIf=\"customDate==true\">\n                <div class=\"form-group\">\n                    <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" placeholder=\"To\" [(ngModel)]=\"date1\"\n                        (ngModelChange)=\"onDateChangeForEndUserRecon($event)\" class=\"form-control input-vendor\">\n                    <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                </div>\n            </div>\n        </div>\n    </div><br>\n\n    <section class=\"mb-5\">\n        <!--Card-->\n        <div class=\"card card-cascade narrower body-section\">\n            <div\n                class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n                <div>\n                </div>\n                <h4 href=\"\" class=\"white-text mx-3\">Corporate-User Reconciliation </h4>\n                <div>\n                </div>\n            </div>\n            <div class=\"card-body\">\n                <div class=\"table table-responsive table-striped table-bordered\">\n                    <table class=\"table text-nowrap\">\n                        <thead>\n                            <tr>\n                                <th>Corporate User Id</th>\n                                <th>User Name</th>\n                                <th>Region</th>\n                                <th>State</th>\n                                <th>City</th>\n                                <th>Office</th>\n                                <th>Date </th>\n                                <th>Discription</th>\n                                <th>In</th>\n                                <th>Out</th>\n                                <th>Available Balance</th>\n                                <th>Wallet Balance</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let e of accountSummaryList  | \n                            paginate: { id: 'listing_pagination',\n                            itemsPerPage: 5,\n                            currentPage: page2,\n                            totalItems: totalRec }\n                            \">\n                                <td>{{e.user.uniqueUserId}}</td>\n                                <td>{{e.user.firstName}}{{e.user.lastName}}</td>\n                                <td>{{e.user.region}}</td>\n                                <td>{{e.user.state}}</td>\n                                <td>{{e.user.city}}</td>\n                                <td>{{e.user.officeName}}</td>\n                                <td>{{e?.transactionDate |date}}</td>\n                                <td>{{e?.transactionDesc}}</td>\n                                <td *ngIf=\"e.inAmount==0\">-</td>\n                                <td *ngIf=\"e.inAmount!=0\">{{e?.inAmount |currency : e.transactionCurrency}}</td>\n                                <td *ngIf=\"e.outAmount==0\">-</td>\n                                <td *ngIf=\"e.outAmount!=0\">{{e?.outAmount |currency : e.transactionCurrency}}</td>\n                                <td>{{e?.availableBalance |currency : e.transactionCurrency}}</td>\n                                <td>{{e?.walletBalance |currency : e.transactionCurrency}}</td>\n                            </tr>\n\n                        </tbody>\n                    </table>\n\n                </div>\n                <br>\n                <div class=\"d-flex justify-content-between\">\n                    <div class=\"wrap\">\n                        <pagination-controls id=\"listing_pagination\" maxSize=\"4\" directionLinks=\"true\" responsive=\"true\"\n                            (pageChange)=\"page2 = $event\">\n                        </pagination-controls>\n                    </div>\n                </div>\n                <div class=\"button-section\">\n                    <button class=\"btn btn-default btn-lg recon1\" (click)=\"onEnduserBack()\">Back</button>\n                </div>\n            </div>\n        </div>\n    </section>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/rewardmanagement/rewardmanagement.component.html":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/components/rewardmanagement/rewardmanagement.component.html ***!
  \*******************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n<div class=\"container\" *ngIf=\"iterationName ==1\">\n  <div class=\"row\">\n    <div class=\"col-6 col-md-5\">\n      <div class=\"card card-cascade\" (click)=\"onRewardConfig()\">\n        <div class=\"view view-cascade gradient-card-header blue-gradient\">\n          <h4 class=\"card-header-title mb-3\" style=\"color: white;\"> Reward Configuration<br></h4>\n        </div>\n        <div class=\"card-body card-body-cascade text-center \">\n          <i class=\"fas fa-cogs\" style=\"font-size:88px;color:#2365f9\"></i>\n\n        </div>\n      </div>\n    </div>\n    <div class=\"col-6 col-md-5\">\n      <div class=\"card card-cascade\" (click)=\"onUserReward()\">\n        <div class=\"view view-cascade gradient-card-header blue-gradient\">\n          <h4 class=\"card-header-title mb-3\" style=\"color: white;\"> User Reward</h4>\n        </div>\n        <div class=\"card-body card-body-cascade text-center \">\n          <i class=\"fas fa-gift\" style=\"font-size:88px;color:red\"></i>\n\n        </div>\n      </div>\n    </div>\n  </div>\n  <br>\n  <div class=\"row\">\n    <div class=\"col-6 col-md-5\"></div>\n    <div class=\"col-6 col-md-5\">\n      <div class=\"button-section\">\n        <button class=\"btn btn-primary btn-lg\" [routerLink]=\"['/dashboard']\">Dashboard</button>\n      </div>\n    </div>\n  </div>\n</div>\n<!--User Reward  -->\n\n<div class=\"container-fluid\" *ngIf=\"iterationName == 2\">\n  <div class=\"card card-cascade narrower body-section\">\n    <div\n      class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n      <div>\n      </div>\n      <h4 href=\"\" class=\"white-text mx-3\">Reward Configuration</h4>\n      <div>\n      </div>\n    </div>\n    <div class=\"card-body\">\n      <!-- <h3 style=\"text-align: center;\">Reward Configuration</h3><br> -->\n      <div class=\"row\">\n        <div class=\"col-sm-12\">\n          <ul class=\"nav nav-tabs nav-justified\" id=\"myTab\" role=\"tablist\">\n            <li class=\"nav-item\">\n              <a class=\"nav-link active\" id=\"individual-tab\" data-toggle=\"tab\" href=\"#individual\" role=\"tab\"\n                aria-controls=\"individual\" aria-selected=\"true\"> Individual</a>\n            </li>\n            <li class=\"nav-item\">\n              <a class=\"nav-link\" id=\"corporate-tab\" data-toggle=\"tab\" href=\"#corporate\" role=\"tab\"\n                aria-controls=\"corporate\" aria-selected=\"false\"> Corporate</a>\n            </li>\n          </ul>\n        </div>\n      </div>\n      <div class=\"tab-content\" id=\"myTabContent\">\n        <div class=\"tab-pane fade show active text-align form-new\" id=\"individual\" role=\"tabpanel\"\n          aria-labelledby=\"individual-tab\">\n          <div class=\"table table-striped table-bordered table-responsive\">\n            <table class=\"table text-nowrap\">\n              <thead>\n                <tr>\n                  <th>Category</th>\n                  <th>Lower Limit</th>\n                  <th>Upper Limit</th>\n                  <th>Points</th>\n                  <th>Value per Points</th>\n                  <th>Acrion</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let rc of individualRewardConfigurationList\">\n                  <td>{{rc.criteriaName}}</td>\n                  <td>{{rc.lowerLimit}}</td>\n                  <td>{{rc.upperlimit}}</td>\n                  <td>{{rc.points}}</td>\n                  <td>{{rc.valuePerPoint}}</td>\n                  <td style=\"width: 5%; padding: 0 2.75rem;\">\n                    <table style=\"width:100%\" class=\"innertable\">\n                      <tr style=\"background-color: unset;\">\n                        <td style=\"padding: unset; width: 10%; border: unset;\">\n                          <img src=\"assets/Edit_icon.png\" width=\"30\" height=\"25\" (click)=\"editRewardConfig(rc)\" />\n                        </td>&nbsp;&nbsp;&nbsp;&nbsp;\n                        <td style=\"padding: unset; width: 10%; border: unset;\">\n                          <img src=\"assets/delete_icon.png\" width=\"30\" height=\"25\"\n                            (click)=\"openModalWithClass(template)\" />\n                        </td>\n                        <ng-template #template>\n                          <div class=\"modal-header\">\n                            <h4 class=\"modal-title\">Individual Reward</h4>\n                            <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\" (click)=\"modalRef.hide()\">\n                              <span aria-hidden=\"true\">×</span>\n                            </button>\n                          </div>\n                          <div class=\"modal-body\">\n                            <h5>Are You Sure You Want to Delete the Record..?</h5>\n                          </div>\n                          <div class=\"modal-footer\">\n                            <button type=\"button\" class=\"btn btn-default\" (click)=\"modalRef.hide()\">Cancel</button>\n                            <button type=\"button\" class=\"btn btn-danger\" (click)=\"deleteRewardConfig(rc.rewardConfigId)\"\n                              (click)=\"modalRef.hide()\">Yes</button>\n                          </div>\n                        </ng-template>\n                      </tr>\n                    </table>\n                  </td>\n                </tr>\n\n              </tbody>\n            </table>\n          </div>\n        </div>\n        <div class=\"tab-pane fade show text-align form-new\" id=\"corporate\" role=\"tabpanel\"\n          aria-labelledby=\"corporate-tab\">\n          <div class=\"table table-striped table-bordered table-responsive\">\n            <table class=\"table text-nowrap\">\n              <thead>\n                <tr>\n                  <th>Category</th>\n                  <th>Lower Limit</th>\n                  <th>Upper Limit</th>\n                  <th>Points</th>\n                  <th>Value per Points</th>\n                  <th>Acrion</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let cr of corporateRewardConfigurationList\">\n                  <td>{{cr.criteriaName}}</td>\n                  <td>{{cr.lowerLimit}}</td>\n                  <td>{{cr.upperlimit}}</td>\n                  <td>{{cr.points}}</td>\n                  <td>{{cr.valuePerPoint}}</td>\n                  <td style=\"width: 5%; padding: 0 2.75rem;\">\n                    <table style=\"width:100%\" class=\"innertable\">\n                      <tr style=\"background-color: unset;\">\n                        <td style=\"padding: unset; width: 10%; border: unset;\">\n                          <img src=\"assets/Edit_icon.png\" width=\"30\" height=\"25\" (click)=\"editRewardConfig(cr)\" />\n                        </td>&nbsp;&nbsp;&nbsp;&nbsp;\n                        <td style=\"padding: unset; width: 10%; border: unset;\">\n                          <img src=\"assets/delete_icon.png\" width=\"30\" height=\"25\"\n                            (click)=\"openModalWithClass(template)\" />\n                        </td>\n                        <ng-template #template>\n                          <div class=\"modal-header\">\n                            <h4 class=\"modal-title\">Corporate Reward</h4>\n                            <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\" (click)=\"modalRef.hide()\">\n                              <span aria-hidden=\"true\">×</span>\n                            </button>\n                          </div>\n                          <div class=\"modal-body\">\n                            <h5>Are You Sure You Want to Delete the Record..?</h5>\n                          </div>\n                          <div class=\"modal-footer\">\n                            <button type=\"button\" class=\"btn btn-default\" (click)=\"modalRef.hide()\">Cancel</button>\n                            <button type=\"button\" class=\"btn btn-danger\" (click)=\"deleteRewardConfig(cr.rewardConfigId)\"\n                              (click)=\"modalRef.hide()\">Yes</button>\n                          </div>\n                        </ng-template>\n                      </tr>\n                    </table>\n                  </td>\n                </tr>\n\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"button-section\">\n        <button (click)=\"onBackClick()\" class=\"btn btn-default btn-lg\">Back</button>&nbsp;&nbsp;\n        <button (click)=\"addRewardsConfiguration()\" class=\"btn btn-success btn-lg\">Add Reward\n          Configuration</button>&nbsp;&nbsp;\n        <button [routerLink]=\"['/dashboard']\" class=\"btn btn-primary btn-lg\">Dashboard</button>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"container-fluid\" style=\"padding-right:42px; padding-left:42px\" *ngIf=\"iterationName ==3\">\n  <form class=\"form\" (ngSubmit)=\"onAddRewardsConfiguration()\" #f=\"ngForm\">\n    <div class=\"card\">\n      <div class=\"view view-cascade gradient-card-header blue-gradient\">\n        <!-- Title -->\n        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Add Reward</h4>\n      </div>\n      <div class=\"card-body vendor\">\n        <div class=\"row\">\n          <div class=\"col-sm-4\">\n            <label>User Type</label>\n            <select class=\"form-control\" name=\"userType\" [(ngModel)]=\"rewardconfig.userType\" #userType=\"ngModel\"\n              required #userType=\"ngModel\" [ngClass]=\"{ 'is-invalid': f.submitted && userType.invalid }\">\n              <option [ngValue]=\"-1\">Select User Type</option>\n              <option *ngFor=\"let u of userTypes\" [ngValue]=\"u.paramId\">\n                {{u.paramName}}</option>\n            </select>\n            <div *ngIf=\"f.submitted && userType.invalid\" class=\"invalid-feedback\">\n              <div *ngIf=\"userType.errors.required\">Title is required</div>\n            </div>\n          </div>\n          <div class=\"col-sm-4\">\n            <label>Category</label>\n            <div class=\"form-group\">\n              <select class=\"form-control\" name=\"category\" [(ngModel)]=\"rewardconfig.criteria\" #criteria=\"ngModel\"\n                required [ngClass]=\"{ 'is-invalid': f.submitted && criteria.invalid }\">\n                <option [ngValue]=\"-1\">Select Category</option>\n                <option *ngFor=\"let r of rewardCategories\" [ngValue]=\"r.paramId\">\n                  {{r.paramName}}</option>\n              </select>\n              <div *ngIf=\"f.submitted && criteria.invalid\" class=\"invalid-feedback\">\n                <div *ngIf=\"criteria.errors.required\">Category is required</div>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-sm-4\">\n            <label>Lower Limit</label>\n            <input type=\"text\" name=\"lowerLimit\" [(ngModel)]=\"rewardconfig.lowerLimit\" #lowerLimit=\"ngModel\"\n              class=\"form-control input-vendor\" required\n              [ngClass]=\"{ 'is-invalid': f.submitted && lowerLimit.invalid }\" />\n            <div *ngIf=\"f.submitted && lowerLimit.invalid\" class=\"invalid-feedback\">\n              <div *ngIf=\"lowerLimit.errors.required\">Lower Limit is required</div>\n            </div>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-sm-4\">\n            <label>Points</label>\n            <input type=\"text\" name=\"points\" [(ngModel)]=\"rewardconfig.points\" #points=\"ngModel\"\n              class=\"form-control input-vendor\" required [ngClass]=\"{ 'is-invalid': f.submitted && points.invalid }\" />\n            <div *ngIf=\"f.submitted && points.invalid\" class=\"invalid-feedback\">\n              <div *ngIf=\"points.errors.required\">Points is required</div>\n            </div>\n          </div>\n          <div class=\"col-sm-4\">\n            <label>Value per points</label>\n            <input type=\"text\" name=\"valuePerPoint\" [(ngModel)]=\"rewardconfig.valuePerPoint\" #valuePerPoint=\"ngModel\"\n              class=\"form-control input-vendor\" required\n              [ngClass]=\"{ 'is-invalid': f.submitted && valuePerPoint.invalid }\" />\n            <div *ngIf=\"f.submitted && valuePerPoint.invalid\" class=\"invalid-feedback\">\n              <div *ngIf=\"valuePerPoint.errors.required\">Value Per Points is required</div>\n            </div>\n          </div>\n        </div>\n        <br>\n        <div class=\"row\" style=\"float: right;\">\n          <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n          <button class=\"btn btn-primary btn-lg\" [routerLink]=\"['/dashboard']\">Dashboard</button>\n          <button type=\"submit\" class=\"btn btn-success btn-lg\">\n            Save</button>\n        </div>\n      </div>\n    </div>\n  </form>\n\n  <div class=\"button-section\">\n\n  </div>\n</div>\n\n<!-- user reward details -->\n<div class=\"container-fluid\" *ngIf=\"iterationName == 4\">\n  <section class=\"mb-5\">\n    <div class=\"card card-cascade narrower body-section\">\n      <div\n        class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n        <div>\n        </div>\n        <h4 href=\"\" class=\"white-text mx-3\">User Reward Details</h4>\n        <div>\n        </div>\n      </div>\n      <div class=\"card-body\">\n        <div class=\"form-group row\">\n          <div class=\"col-md-3\">\n            <div class=\"form-group\">\n              <input type=\"text\" class=\"form-control input-vendor\" placeholder=\"Enter Minimum Order Value\" autofocus>\n            </div>\n          </div>\n          <div class=\"col-md-3\">\n            <div class=\"form-group\">\n              <select class=\"form-control\">\n                <option [ngValue]=\"v\">Select User Type</option>\n                <option>Individual</option>\n                <option>Corporate</option>\n              </select>\n            </div>\n          </div>\n        </div>\n        <div class=\"table table-striped table-bordered table-responsive\">\n          <table class=\"table text-nowrap\">\n            <thead>\n              <tr>\n                <th>Customer</th>\n                <th>Earned Points</th>\n                <th>Redeem Points</th>\n                <th>Lapsed Points</th>\n                <th>Available Points</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr *ngFor=\"let ur of userRewarpoints\">\n                <td><a (click)=\"onuserLink(ur.userRewardPointId)\">{{ur.userName}}({{ur.uniqueUserId}})</a></td>\n                <td>{{ur.totalRewardPoints}}</td>\n                <td>{{ur.totalRedeemPoints}}</td>\n                <td>{{ur.lapsedPoints}}</td>\n                <td>{{ur.availablePoints}}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        <br>\n        <div class=\"d-flex justify-content-between\">\n          <div class=\"wrap\">\n            <pagination-controls id=\"listing_pagination\" maxSize=\"4\" directionLinks=\"true\" (pageChange)=\"page = $event\">\n            </pagination-controls>\n          </div>\n        </div>\n        <div class=\"button-section\">\n          <button [routerLink]=\"['/dashboard']\" class=\"btn btn-default btn-lg\">BACK</button>\n        </div>\n      </div>\n    </div>\n  </section>\n</div>\n\n\n<div class=\"container\" *ngIf=\"iterationName == 5\">\n  <h3>User Reward Details</h3><br>\n  <div class=\"card-body filter\">\n    <div class=\"form-group row\">\n      <div class=\"col-md-12\">\n        <div class=\"col-md-6\">Customer Id : {{userRewardInfo.uniqueUserId}} </div>\n        <div class=\"col-md-6\">Earned Points : {{userRewardInfo.totalRewardPoints}}</div>\n        <div class=\"col-md-3\">Lapsed Points : {{userRewardInfo.lapsedPoints}}</div>\n        <div class=\"col-md-3\">Redeemed Points : {{userRewardInfo.totalRedeemPoints}}</div>\n        <div class=\"col-md-3\">Available Points : {{userRewardInfo.availablePoints}}</div>\n        <div class=\"col-md-3\">Category : {{userRewardInfo.categoryString}}</div>\n      </div>\n      <div class=\"col-md-3\">\n        <div class=\"form-group\">\n          <select class=\"form-control\" [(ngModel)]=\"range\" name=\"#range\"\n            (ngModelChange)=\"onSelectRangeForRewardPoints(selected)\">\n            <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n            <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n\n          </select>\n        </div>\n      </div>\n      <div class=\"col-md-3\" *ngIf=\"customDate==true\">\n        <div class=\"form-group\">\n          <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" [(ngModel)]=\"date\" placeholder=\"From\"\n            class=\"form-control input-vendor\" (ngModelChange)=\"onDateChangeForRewardPointHistory($event)\">\n          <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n        </div>\n      </div>\n      <div class=\"col-md-3\" *ngIf=\"customDate==true\">\n        <div class=\"form-group\">\n          <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" [(ngModel)]=\"date1\" placeholder=\"To\"\n            class=\"form-control input-vendor\" (ngModelChange)=\"onDateChangeForRewardPointHistory($event)\">\n          <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n        </div>\n      </div>\n    </div>\n  </div>\n  <section class=\"mb-5\">\n    <div class=\"card card-cascade narrower body-section\">\n      <div\n        class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n        <div>\n        </div>\n        <h4 href=\"\" class=\"white-text mx-3\">User Reward Point History</h4>\n        <div>\n        </div>\n      </div>\n      <div class=\"card-body\">\n\n        <div class=\"table table-striped table-bordered table-responsive\">\n          <table class=\"table text-nowrap\">\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Description</th>\n                <th>Amount Spent</th>\n                <th>Rewarded Points</th>\n                <th>Redeemed Points</th>\n                <th>Lapsed Points</th>\n                <th>Available Points</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr *ngFor=\"let rh of rewardPointHistoryList\">\n                <td>{{rh.updatedDate | date : shortDate}}</td>\n                <td>{{rh.description}}</td>\n                <td>{{rh.orderAmount}}</td>\n                <td>{{rh.earnedPoint}}</td>\n                <td>{{rh.redeemPoint}}</td>\n                <td>{{rh.lapsedPoint}}</td>\n                <td>{{rh.availablePoint}}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        <br>\n        <div class=\"d-flex justify-content-between\">\n          <div class=\"wrap\">\n            <pagination-controls id=\"listing_pagination\" maxSize=\"4\" directionLinks=\"true\" (pageChange)=\"page = $event\">\n            </pagination-controls>\n          </div>\n        </div>\n        <div class=\"button-section\">\n          <button [routerLink]=\"['/dashboard']\" class=\"btn btn-default btn-lg\">BACK</button>\n        </div>\n      </div>\n    </div>\n  </section>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/showeventslist/showeventslist.component.html":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/components/showeventslist/showeventslist.component.html ***!
  \***************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n\n<div class=\"container-fluid register\">\n  <section class=\"mb-5\">\n    <!--Card-->\n    <div class=\"card card-cascade narrower body-section\">\n      <div\n        class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n        <div>\n        </div>\n        <h4 href=\"\" class=\"white-text mx-3\">All Alert Events</h4>\n        <div>\n        </div>\n      </div>\n      <div class=\"card-body\">\n        <div class=\"table table-striped table-bordered table-responsive\">\n          <table class=\"table text-nowrap\">\n            <thead>\n              <tr>\n                <th>Event Id</th>\n                <th>Event Name</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr *ngFor=\"let e of events  | \n              paginate: { id: 'listing_pagination',\n              itemsPerPage: 5,\n              currentPage: page,\n              totalItems: totalRec }\n              \">\n                <td>{{e.eventId}}</td>\n                <td>{{e.eventName}}</td>\n                <td style=\"width: 5%; padding: 0 2.75rem;\">\n                  <table style=\"width:100%\" class=\"innertable\">\n                    <tr style=\"background-color: unset;\">\n                      <td style=\"padding: unset; width: 10%; border: unset;\">\n                        <img src=\"assets/Edit_icon.png\" width=\"30\" height=\"25\" (click)=\"logout()\" />\n                      </td>&nbsp;&nbsp;\n                      <td style=\"padding: unset; width: 10%; border: unset;\" >\n                        <img src=\"assets/delete_icon.png\" width=\"30\" height=\"25\"\n                          (click)=\"openModalWithClass(template)\" />\n                      </td>\n                      <ng-template #template>\n                        <div class=\"modal-header\">\n                          <h4 class=\"modal-title\">All Alert Events </h4>\n                          <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\" (click)=\"modalRef.hide()\">\n                            <span aria-hidden=\"true\">×</span>\n                          </button>\n                        </div>\n                        <div class=\"modal-body\">\n                          <h5>Are You Sure You Want to Delete the Record..?</h5>\n                        </div>\n                        <div class=\"modal-footer\">\n                          <button type=\"button\" class=\"btn btn-default\" (click)=\"modalRef.hide()\">Cancel</button>\n                          <button type=\"button\" class=\"btn btn-danger\" (click)=\"deleteEvent(e.eventId)\"\n                            (click)=\"modalRef.hide()\">Yes</button>\n                        </div>\n                      </ng-template>\n                    </tr>\n                  </table>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        <br>\n        <div class=\"d-flex justify-content-between\">\n          <div class=\"wrap\">\n            <pagination-controls id=\"listing_pagination\" maxSize=\"4\" directionLinks=\"true\" (pageChange)=\"page = $event\">\n            </pagination-controls>\n          </div>\n        </div>\n        <div class=\"button-section\">\n          <button [routerLink]=\"['/dashboard']\" class=\"btn btn-default btn-lg\">Back</button>\n          <button [routerLink]=\"['/generateAlertEvent']\" class=\"btn btn-secondary btn-lg\">Create New\n            Event</button>\n          <button [routerLink]=\"['/dashboard']\" class=\"btn btn-primary btn-lg\">Dashboard</button>\n        </div>\n      </div>\n    </div>\n  </section>\n</div>\n<div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/usermanagment/usermanagment.component.html":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/components/usermanagment/usermanagment.component.html ***!
  \*************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n\n<div class=\"container-fluid register\">\n  <div class=\"row\" *ngIf=\"iterationName == 'SHOW_ALL_USERS'\">\n    <div class=\"col-md-12\">\n      <ul class=\"nav nav-tabs nav-justified\" id=\"myTab\" role=\"tablist\">\n        <li class=\"nav-item\">\n          <a class=\"nav-link active\" id=\"home-tab\" data-toggle=\"tab\" href=\"#home\" role=\"tab\" aria-controls=\"home\"\n            aria-selected=\"activatevendortab\" (click)=\"selecttab(1)\"> Vendor User</a>\n        </li>\n        <li class=\"nav-item\">\n          <a class=\"nav-link\" id=\"profile-tab\" data-toggle=\"tab\" href=\"#profile\" role=\"tab\" aria-controls=\"profile\"\n            aria-selected=\"warehousetab\" (click)=\"selecttab(2)\"> Warehouse User</a>\n        </li>\n        <li class=\"nav-item\">\n          <a class=\"nav-link\" id=\"profile1-tab\" data-toggle=\"tab\" href=\"#profile1\" role=\"tab\" aria-controls=\"profile1\"\n            aria-selected=\"endusertab\" (click)=\"selecttab(3)\"> End User</a>\n        </li>\n        <li class=\"nav-item\">\n          <a class=\"nav-link\" id=\"corporate-tab\" data-toggle=\"tab\" href=\"#corporate\" role=\"tab\"\n            aria-controls=\"corporate\" aria-selected=\"corporateusertab\" (click)=\"selecttab(4)\"> Corporate User</a>\n        </li>\n      </ul>\n\n\n      <!-- Vendor User Start -->\n      <div class=\"tab-content\" id=\"myTabContent\">\n        <div class=\"tab-pane fade show active text-align form-new\" id=\"home\" role=\"tabpanel\" aria-labelledby=\"home-tab\">\n          <br>\n          <div class=\"card p-2 mb-5\">\n            <h4 class=\"filter\">Filters</h4>\n            <div class=\"row v1\">\n              <div class=\"col-md-3\">\n                <div class=\"form-group\">\n                  <select class=\"form-control\" name=\"vendor\" [(ngModel)]=\"vendor\"\n                    (ngModelChange)=\"onSelectVendorForVendorUser()\">\n                    <option [ngValue]=\"v\">Select Vendor</option>\n                    <option *ngFor=\"let v of selectedVendorForVendorUser\" [value]=\"v\">{{v}}</option>\n                  </select>\n                </div>\n              </div>\n              <div class=\"col-md-3\">\n                <div class=\"form-group\">\n                  <select class=\"form-control\" name=\"v_region\" [(ngModel)]=\"v_region\"\n                    (ngModelChange)=\"onSelectRegionForVendorUser()\">\n                    <option [ngValue]=\"r\">Select Region</option>\n                    <option *ngFor=\"let r of selectedRegionForVendorUser\" [value]=\"r\">{{r}}</option>\n                  </select>\n                </div>\n              </div>\n              <div class=\"col-md-3\">\n                <div class=\"form-group\">\n                  <select class=\"form-control\" name=\"v_state\" [(ngModel)]=\"v_state\"\n                    (ngModelChange)=\"onSelectStateForVendorUser()\">\n                    <option [ngValue]=\"s\">Select State</option>\n                    <option *ngFor=\"let s of selectedStatesForVendorUser\" [value]=\"s\">{{s}}</option>\n                  </select>\n                </div>\n              </div>\n              <div class=\"col-md-3\">\n                <div class=\"form-group\">\n                  <select class=\"form-control\" name=\"v_city\" [(ngModel)]=\"v_city\"\n                    (ngModelChange)=\"onSelectCityForVendorUser()\">\n                    <option [ngValue]=\"c\">Select City</option>\n                    <option *ngFor=\"let c of selectedCitiesForVendorUser\" [value]=\"c\">{{c}}</option>\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n          <section class=\"mb-5\">\n            <!--Card-->\n            <div class=\"card card-cascade narrower body-section\">\n              <div\n                class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n                <div>\n                </div>\n                <h4 href=\"\" class=\"white-text mx-3\">Vendor User </h4>\n                <div>\n                </div>\n              </div>\n              <div class=\"card-body\">\n                <div class=\"table table-striped table-bordered table-responsive\">\n                  <table class=\"table text-nowrap\">\n                    <thead>\n                      <tr>\n                        <th>Vendor User Id</th>\n                        <th>User Name</th>\n                        <th>Vendor Name</th>\n                        <th>Country</th>\n                        <th>Region</th>\n                        <th>State</th>\n                        <th>City</th>\n                        <th>Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr *ngFor=\"let vul of vendorUserList  | \n                      paginate: { id: 'listing_pagination',\n                      itemsPerPage: 5,\n                      currentPage: page,\n                      totalItems: totalRec }\n                      \">\n                        <td><a class=\"link\" (click)=\"onShowUser(vul)\" data-toggle=\"modal\"\n                            data-target=\"#exampleModalCenter\">{{vul.uniqueUserId}}</a></td>\n                        <td>{{vul.userName}}</td>\n                        <td *ngIf=\"vul.masterOrganisation!=null\">{{vul.masterOrganisation.organisationName}}</td>\n                        <td *ngIf=\"vul.masterOrganisation==null\">&nbsp;</td>\n                        <td>{{vul.address.country.countryName}}</td>\n                        <td>{{vul.address.state.region}}</td>\n                        <td>{{vul.address.state.stateName}}</td>\n                        <td>{{vul.address.city.cityName}}</td>\n                        <td style=\"width: 5%; padding: 0 2.75rem;\">\n                          <table style=\"width:100%\" class=\"innertable\">\n                            <tr style=\"background-color: unset;\">\n                              <td style=\"padding: unset; width: 10%; border: unset;\">\n                                <img src=\"assets/Edit_icon.png\" width=\"30\" height=\"25\"\n                                  (click)=\"editUserFromList(vul)\" />\n                              </td>&nbsp;&nbsp;&nbsp;&nbsp;\n                              <td style=\"padding: unset; width: 10%; border: unset;\">\n                                <img src=\"assets/delete_icon.png\" width=\"30\" height=\"25\"\n                                  (click)=\"openModalWithClass(template)\" />\n                              </td>\n                              <ng-template #template>\n                                <div class=\"modal-header\">\n                                  <h4 class=\"modal-title\">Vendor User</h4>\n                                  <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\"\n                                    (click)=\"modalRef.hide()\">\n                                    <span aria-hidden=\"true\">×</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                  <h5>Are You Sure You Want to Delete the Record..?</h5>\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-default\"\n                                    (click)=\"modalRef.hide()\">Cancel</button>\n                                  <button type=\"button\" class=\"btn btn-danger\" (click)=\"deleteUser(vul.userId)\"\n                                    (click)=\"modalRef.hide()\">Yes</button>\n                                </div>\n                              </ng-template>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      <tr *ngIf=\"vendorUserList && vendorUserList.length==0\">\n                        <td colspan=\"8\">\n                          <h4 style=\"color: royalblue;\">\n                            No Data Found To Display....\n                          </h4>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                <br>\n                <div class=\"d-flex justify-content-between\">\n                  <div class=\"wrap\">\n                    <pagination-controls id=\"listing_pagination\" maxSize=\"4\" directionLinks=\"true\"\n                      (pageChange)=\"page = $event\">\n                    </pagination-controls>\n                  </div>\n                </div>\n                <div class=\"button-section\">\n                  <button [routerLink]=\"['/dashboard']\" class=\"btn btn-default btn-lg\">Back</button>\n                  <button (click)=\"addVendorUser()\" class=\"btn btn-secondary btn-lg\">Add Vendor User</button>\n                  <button [routerLink]=\"['/dashboard']\" class=\"btn btn-primary btn-lg\">Dashboard</button>\n                </div>\n              </div>\n            </div>\n          </section>\n        </div>\n\n        <!-- Warehouse User Starts -->\n        <div class=\"tab-pane fade show text-align form-new\" id=\"profile\" role=\"tabpanel\" aria-labelledby=\"profile-tab\">\n          <br>\n          <div class=\"card p-2 mb-5\">\n            <h4 class=\"filter\">Filters</h4>\n            <div class=\"row v1\">\n              <div class=\"col-md-3\">\n                <div class=\"form-group\">\n                  <select class=\"form-control\" name=\"w_vendor\" [(ngModel)]=\"w_vendor\"\n                    (ngModelChange)=\"onSelectVendorForWarehouseUser()\">\n                    <option [ngValue]=\"v\">Select Vendor</option>\n                    <option *ngFor=\"let v of selectedVendorForWarehouseUser\" [value]=\"v\">{{v}}</option>\n                  </select>\n                </div>\n              </div>\n              <div class=\"col-md-3\">\n                <div class=\"form-group\">\n                  <select class=\"form-control\" name=\"w_region\" [(ngModel)]=\"w_region\"\n                    (ngModelChange)=\"onSelectRegionForWarehouseUser()\">\n                    <option [ngValue]=\"r\">Select Region</option>\n                    <option *ngFor=\"let r of selectedRegionForWarehouseUser\" [value]=\"r\">{{r}}</option>\n                  </select>\n                </div>\n              </div>\n              <div class=\"col-md-3\">\n                <div class=\"form-group\">\n                  <select class=\"form-control\" name=\"w_state\" [(ngModel)]=\"w_state\"\n                    (ngModelChange)=\"onSelectStateForWarehouseUser()\">\n                    <option [ngValue]=\"s\">Select State</option>\n                    <option *ngFor=\"let s of selectedStatesForWarehouseUser\" [value]=\"s\">{{s}}</option>\n                  </select>\n                </div>\n              </div>\n              <div class=\"col-md-3\">\n                <div class=\"form-group\">\n                  <select class=\"form-control\" name=\"w_city\" [(ngModel)]=\"w_city\"\n                    (ngModelChange)=\"onSelectCityForWarehouseUser()\">\n                    <option [ngValue]=\"c\">Select City</option>\n                    <option *ngFor=\"let c of selectedCitiesForWarehouseUser\" [value]=\"c\">{{c}}</option>\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n          <section class=\"mb-5\">\n            <!--Card-->\n            <div class=\"card card-cascade narrower body-section\">\n              <div\n                class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n                <div>\n                </div>\n                <h4 href=\"\" class=\"white-text mx-3\">Warehouse User </h4>\n                <div>\n                </div>\n              </div>\n              <div class=\"card-body\">\n                <div class=\"table table-responsive table-striped table-bordered\">\n                  <table class=\"table text-nowrap\">\n                    <thead>\n                      <tr>\n                        <th>Warehouse User Id</th>\n                        <th>User Name</th>\n                        <th>Vendor Name</th>\n                        <th>Country</th>\n                        <th>Region</th>\n                        <th>State</th>\n                        <th>City</th>\n                        <th>Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr *ngFor=\"let vul1 of warehouseUserList  | \n                      paginate: { id: 'listing_pagination1',\n                      itemsPerPage: 5,\n                      currentPage: page1,\n                      totalItems: totalRec }\n                      \">\n                        <td><a class=\"link\" (click)=\"onShowUser(vul1)\" data-toggle=\"modal\"\n                            data-target=\"#exampleModalCenter\">{{vul1.uniqueUserId}}</a></td>\n                        <td>{{vul1.userName}}</td>\n                        <td *ngIf=\"vul1.masterOrganisation!=null\">{{vul1.masterOrganisation.organisationName}}</td>\n                        <td *ngIf=\"vul1.masterOrganisation==null\">&nbsp;</td>\n                        <td>{{vul1.address.country.countryName}}</td>\n                        <td>{{vul1.address.state.region}}</td>\n                        <td>{{vul1.address.state.stateName}}</td>\n                        <td>{{vul1.address.city.cityName}}</td>\n                        <td style=\"width: 5%; padding: 0 2.75rem;\">\n                          <table style=\"width:100%\" class=\"innertable\">\n                            <tr style=\"background-color: unset;\">\n                              <td style=\"padding: unset; width: 10%;border: unset;\">\n                                <img src=\"assets/Edit_icon.png\" width=\"30\" height=\"25\"\n                                  (click)=\"editUserFromList(vul1)\" />\n                              </td>&nbsp;&nbsp;&nbsp;&nbsp;\n                              <td style=\"padding: unset; width: 10%;border: unset;\">\n                                <img src=\"assets/delete_icon.png\" width=\"30\" height=\"25\"\n                                  (click)=\"openModalWithClass(template)\" />\n                              </td>\n                              <ng-template #template>\n                                <div class=\"modal-header\">\n                                  <h4 class=\"modal-title\">Warehouse User</h4>\n                                  <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\"\n                                    (click)=\"modalRef.hide()\">\n                                    <span aria-hidden=\"true\">×</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                  <h5>Are You Sure You Want to Delete the Record..?</h5>\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-default\"\n                                    (click)=\"modalRef.hide()\">Cancel</button>\n                                  <button type=\"button\" class=\"btn btn-danger\" (click)=\"deleteUser(vul1.userId)\"\n                                    (click)=\"modalRef.hide()\">Yes</button>\n                                </div>\n                              </ng-template>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      <tr *ngIf=\"warehouseUserList && warehouseUserList.length==0\">\n                        <td colspan=\"8\">\n                          <h4 style=\"color: royalblue;\">\n                            No Data Found To Display....\n                          </h4>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                <br>\n                <div class=\"d-flex justify-content-between\">\n                  <div class=\"wrap\">\n                    <pagination-controls id=\"listing_pagination1\" maxSize=\"5\" directionLinks=\"true\" responsive=\"true\"\n                      (pageChange)=\"page1 = $event\">\n                    </pagination-controls>\n                  </div>\n                </div>\n                <div class=\"button-section\">\n                  <button [routerLink]=\"['/dashboard']\" class=\"btn btn-default btn-lg\">Back</button>\n                  <button (click)=\"addWarehouseUser()\" class=\"btn btn-secondary btn-lg\">Add Warehouse\n                    User</button>&nbsp;&nbsp;\n                  <button [routerLink]=\"['/dashboard']\" class=\"btn btn-primary btn-lg\">Dashboard</button>\n                </div>\n              </div>\n            </div>\n          </section>\n        </div>\n\n        <!--End User Starts  -->\n        <div class=\"tab-pane fade show text-align form-new\" id=\"profile1\" role=\"tabpanel\"\n          aria-labelledby=\"profile1-tab\">\n          <br>\n          <div class=\"card p-2 mb-5\">\n            <h4 class=\"filter\">Filters</h4>\n            <div class=\"row v1\">\n              <div class=\"col-md-4\">\n                <div class=\"form-group\">\n                  <select class=\"form-control\" name=\"e_region\" [(ngModel)]=\"e_region\"\n                    (ngModelChange)=\"onSelectRegionForEndUser()\">\n                    <option [ngValue]=\"r\">Select Region</option>\n                    <option *ngFor=\"let r of selectedRegionForEndUser\" [value]=\"r\">{{r}}</option>\n                  </select>\n                </div>\n              </div>\n              <div class=\"col-md-4\">\n                <div class=\"form-group\">\n                  <select class=\"form-control\" name=\"e_state\" [(ngModel)]=\"e_state\"\n                    (ngModelChange)=\"onSelectStateForEndUser()\">\n                    <option [ngValue]=\"s\">Select State</option>\n                    <option *ngFor=\"let s of selectedStatesForEndUser\" [value]=\"s\">{{s}}</option>\n                  </select>\n                </div>\n              </div>\n              <div class=\"col-md-4\">\n                <div class=\"form-group\">\n                  <select class=\"form-control\" name=\"e_city\" [(ngModel)]=\"e_city\"\n                    (ngModelChange)=\"onSelectCityForEndUser()\">\n                    <option [ngValue]=\"c\">Select City</option>\n                    <option *ngFor=\"let c of selectedCitiesForEndUser\" [value]=\"c\">{{c}}</option>\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n          <section class=\"mb-5\">\n            <!--Card-->\n            <div class=\"card card-cascade narrower body-section\">\n              <div\n                class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n                <div>\n                </div>\n                <h4 href=\"\" class=\"white-text mx-3\">End User </h4>\n                <div>\n                </div>\n              </div>\n              <div class=\"card-body \">\n                <div class=\"table table-responsive table-striped table-bordered\">\n                  <table class=\"table text-nowrap\">\n                    <thead>\n                      <tr>\n                        <th>Unique User Id</th>\n                        <th>User Name</th>\n                        <th>Country</th>\n                        <th>Region</th>\n                        <th>State</th>\n                        <th>City</th>\n                        <th>Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr r *ngFor=\"let vul2 of endUserList  | \n                      paginate: { id: 'listing_pagination2',\n                      itemsPerPage: 5,\n                      currentPage: page2,\n                      totalItems: totalRec }\">\n                        <td><a class=\"link\" (click)=\"onShowUser(vul2)\" data-toggle=\"modal\"\n                            data-target=\"#exampleModalCenter\">{{vul2.uniqueUserId}}</a></td>\n                        <td>{{vul2.userName}}</td>\n                        <td>{{vul2.address.country.countryName}}</td>\n                        <td>{{vul2.address.state.region}}</td>\n                        <td>{{vul2.address.state.stateName}}</td>\n                        <td>{{vul2.address.city.cityName}}</td>\n                        <td style=\"width: 5%; padding: 0 2.75rem;\">\n                          <table style=\"width:100%\" class=\"innertable\">\n                            <tr style=\"background-color: unset;\">\n                              <td style=\"padding: unset; width: 10%; border: unset;\">\n                                <img src=\"assets/Edit_icon.png\" width=\"30\" height=\"25\"\n                                  (click)=\"editUserFromList(vul2)\" /> </td>&nbsp;&nbsp;&nbsp;&nbsp;\n                              <td style=\"padding: unset; width: 10%;border: unset;\">\n                                <img src=\"assets/delete_icon.png\" width=\"30\" height=\"25\"\n                                  (click)=\"openModalWithClass(template)\" />\n                              </td>\n                              <ng-template #template>\n                                <div class=\"modal-header\">\n                                  <h4 class=\"modal-title\">End User</h4>\n                                  <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\"\n                                    (click)=\"modalRef.hide()\">\n                                    <span aria-hidden=\"true\">×</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                  <h5>Are You Sure You Want to Delete the Record..?</h5>\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-default\"\n                                    (click)=\"modalRef.hide()\">Cancel</button>\n                                  <button type=\"button\" class=\"btn btn-danger\" (click)=\"deleteUser(vul2.userId)\"\n                                    (click)=\"modalRef.hide()\">Yes</button>\n                                </div>\n                              </ng-template>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      <tr *ngIf=\"endUserList && endUserList.length==0\">\n                        <td colspan=\"8\">\n                          <h4 style=\"color: royalblue;\">\n                            No Data Found To Display....\n                          </h4>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                <br>\n                <div class=\"d-flex justify-content-between\">\n                  <div class=\"wrap\">\n                    <pagination-controls id=\"listing_pagination2\" maxSize=\"5\" directionLinks=\"true\" responsive=\"true\"\n                      (pageChange)=\"page2 = $event\">\n                    </pagination-controls>\n                  </div>\n                </div>\n                <div class=\"button-section\">\n                  <button [routerLink]=\"['/dashboard']\" class=\"btn btn-default btn-lg\">Back</button>\n                  <button (click)=\"onCredit()\" class=\"btn btn-success btn-lg\">Credit Limit Managment</button>\n                  <button [routerLink]=\"['/dashboard']\" class=\"btn btn-primary btn-lg\">Dashboard</button>\n                </div>\n              </div>\n            </div>\n          </section>\n        </div>\n\n        <!-- Corporate User Starts -->\n        <div class=\"tab-pane fade show text-align form-new\" id=\"corporate\" role=\"tabpanel\"\n          aria-labelledby=\"corporate-tab\">\n          <br>\n          <div class=\"card p-2 mb-5\">\n            <h4 class=\"filter\">Filters</h4>\n            <div class=\"row v1\">\n              <div class=\"col-md-3\">\n                <div class=\"form-group\">\n                  <select class=\"form-control\" name=\"c_region\" [(ngModel)]=\"c_region\"\n                    (ngModelChange)=\"onSelectRegionForCorporateUser()\">\n                    <option [ngValue]=\"r\">Select Region</option>\n                    <option *ngFor=\"let r of selectedRegionForCorporateUser\" [value]=\"r\">{{r}}</option>\n                  </select>\n                </div>\n              </div>\n              <div class=\"col-md-3\">\n                <div class=\"form-group\">\n                  <select class=\"form-control\" name=\"c_state\" [(ngModel)]=\"c_state\"\n                    (ngModelChange)=\"onSelectStateForCorporateUser()\">\n                    <option [ngValue]=\"s\">Select State</option>\n                    <option *ngFor=\"let s of selectedStatesForCorporateUser\" [value]=\"s\">{{s}}</option>\n                  </select>\n                </div>\n              </div>\n              <div class=\"col-md-3\">\n                <div class=\"form-group\">\n                  <select class=\"form-control\" name=\"c_city\" [(ngModel)]=\"c_city\"\n                    (ngModelChange)=\"onSelectCityForCorporateUser()\">\n                    <option [ngValue]=\"c\">Select City</option>\n                    <option *ngFor=\"let c of selectedCitiesForCorporateUser\" [value]=\"c\">{{c}}</option>\n                  </select>\n                </div>\n              </div>\n              <div class=\"col-md-3\">\n                <div class=\"form-group\">\n                  <select class=\"form-control\" name=\"userType\" [(ngModel)]=\"userType\"\n                    (ngModelChange)=\"onSelectUserType()\">\n                    <option [ngValue]=\"t\">Select User Type</option>\n                    <option *ngFor=\"let t of selectedUserTypes\" [value]=\"t\">{{t}}</option>\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n          <section class=\"mb-5\">\n            <!--Card-->\n            <div class=\"card card-cascade narrower body-section\">\n              <div\n                class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n                <div>\n                </div>\n                <h4 href=\"\" class=\"white-text mx-3\">Corporate User </h4>\n                <div>\n                </div>\n              </div>\n              <div class=\"card-body\">\n                <div class=\"table table-responsive table-striped table-bordered\">\n                  <table class=\"table text-nowrap\">\n                    <thead>\n                      <tr>\n                        <th>Unique User Id</th>\n                        <th>User Email ID</th>\n                        <th>Corporate Name</th>\n                        <th>Country</th>\n                        <th>Region</th>\n                        <th>State</th>\n                        <th>City</th>\n                        <th>User Type</th>\n                        <th>Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr *ngFor=\"let vul2 of corporateUserList  | \n                      paginate: { id: 'listing_pagination3',\n                      itemsPerPage: 5,\n                      currentPage: page3,\n                      totalItems: totalRec }\">\n                        <td><a class=\"link\" data-toggle=\"modal\" data-target=\"#exampleModalCenter\"\n                            (click)=\"onShowUser(vul2)\">{{vul2.uniqueUserId}}</a></td>\n                        <td>{{vul2.userName}}</td>\n                        <td>{{vul2.masterOrganisation.organisationName}}</td>\n                        <td>{{vul2.address.country.countryName}}</td>\n                        <td>{{vul2.address.state.region}}</td>\n                        <td>{{vul2.address.state.stateName}}</td>\n                        <td>{{vul2.address.city.cityName}}</td>\n                        <td>{{vul2.userType}}</td>\n                        <td style=\"width: 5%; padding: 0 2.75rem;\">\n                          <table style=\"width:100%\" class=\"innertable\">\n                            <tr style=\"background-color: unset;\">\n                              <td style=\"padding: unset; width: 10%; border: unset;\">\n                                <img src=\"assets/Edit_icon.png\" width=\"30\" height=\"25\"\n                                  (click)=\"editUserFromList(vul2)\" />\n                              </td>&nbsp;&nbsp;&nbsp;&nbsp;\n                              <td style=\"padding: unset; width: 10%;border: unset;\">\n                                <img src=\"assets/delete_icon.png\" width=\"30\" height=\"25\"\n                                  (click)=\"openModalWithClass(template)\" />\n                              </td>\n                              <ng-template #template>\n                                <div class=\"modal-header\">\n                                  <h4 class=\"modal-title\">Corporate User</h4>\n                                  <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\"\n                                    (click)=\"modalRef.hide()\">\n                                    <span aria-hidden=\"true\">×</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                  <h5>Are You Sure You Want to Delete the Record..?</h5>\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-default\"\n                                    (click)=\"modalRef.hide()\">Cancel</button>\n                                  <button type=\"button\" class=\"btn btn-danger\" (click)=\"deleteUser(vul2.userId)\"\n                                    (click)=\"modalRef.hide()\">Yes</button>\n                                </div>\n                              </ng-template>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                      <tr *ngIf=\"corporateUserList && corporateUserList.length==0\">\n                        <td colspan=\"8\">\n                          <h4 style=\"color: royalblue;\">\n                            No Data Found To Display....\n                          </h4>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                <br>\n                <div class=\"d-flex justify-content-between\">\n                  <div class=\"wrap\">\n                    <pagination-controls id=\"listing_pagination3\" maxSize=\"5\" directionLinks=\"true\" responsive=\"true\"\n                      (pageChange)=\"page3 = $event\">\n                    </pagination-controls>\n                  </div>\n                </div>\n                <div class=\"button-section\">\n                  <button [routerLink]=\"['/dashboard']\" class=\"btn btn-default btn-lg\">Back</button>\n                  <button (click)=\"addCorporateUser()\" class=\"btn btn-secondary btn-lg\">Add Corporate User</button>\n                  <button [routerLink]=\"['/dashboard']\" class=\"btn btn-primary btn-lg\">Dashboard</button>\n                </div>\n              </div>\n            </div>\n          </section>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n\n  <!-- Add New Corporate -->\n\n  <div class=\"container-fluid\" style=\"padding-right:42px; padding-left:42px\" class=\"form\"\n    *ngIf=\"iterationName == 'ADD_CORPORATE_USER'\">\n    <form class=\"form\" (ngSubmit)=\"f1.form.valid && onAddCorporateUser()\" #f1=\"ngForm\" #vendorForm1>\n      <div class=\"card\">\n        <div class=\"view view-cascade gradient-card-header blue-gradient\">\n          <!-- Title -->\n          <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Add New Corporate User</h4>\n        </div>\n        <div class=\"card-body vendor\">\n          <div class=\"row\">\n            <div class=\"col-sm-4\">\n              <label>Corporate</label>\n              <select class=\"form-control\" name=\"organisation\" [(ngModel)]=\"user.organisationId\"\n                #organisationId=\"ngModel\" [ngClass]=\"{ 'is-invalid': f1.submitted && organisationId.invalid }\" required\n                (change)=\"onChangeCorporate()\">\n                <option [ngValue]=\"null\">Select Corporate</option>\n                <option *ngFor=\"let v of corporates\" [ngValue]=\"v.organisationId\">\n                  {{v.organisationName}}</option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && organisationId.invalid\">\n                <p *ngIf=\"organisationId.errors.required\">Please Select Corporate</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>User Type</label>\n              <div class=\"form-group\">\n                <select class=\"form-control\" name=\"userType\" [(ngModel)]=\"user.userType\" #userType=\"ngModel\"\n                  [ngClass]=\"{ 'is-invalid': f1.submitted && userType.invalid }\" required>\n                  <option [ngValue]=\"null\" selected=\"selected\">Select User Type</option>\n                  <option value=\"CORPORATE_SUPERVISOR\">Supervisor</option>\n                  <option value=\"CORPORATE_USER\">Normal User</option>\n                </select>\n                <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && userType.invalid\">\n                  <p *ngIf=\"userType.errors.required\">Please Select User Type</p>\n                </div>\n              </div>\n            </div>\n            <div class=\"col-sm-4\" *ngIf=\"user.userType=='CORPORATE_SUPERVISOR'\">\n              <label>Select</label>\n              <select class=\"form-control\" name=\"type\" [(ngModel)]=\"user.corporateAccess\" #type=\"ngModel\"\n                (change)=\"onChangeCorporateAccess()\" required>\n                <option [ngValue]=\"null\">Select </option>\n                <option *ngFor=\"let s of supervisorTypes\" [value]=\"s\">{{s}}</option>\n              </select>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Region</label>\n              <select select class=\"form-control\" name=\"corporateRegion\" [(ngModel)]=\"user.corporateRegion\"\n                (change)=\"onChangeRegion()\" #corporateRegion=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && corporateRegion.invalid }\" required>\n                <option [ngValue]=\"null\">Select Region</option>\n                <option *ngFor=\"let r of regions\" [value]=\"r\">{{r}}\n                </option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && corporateRegion.invalid\">\n                <p *ngIf=\"corporateRegion.errors.required\">Please Select Region</p>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>State </label>\n              <select select class=\"form-control\" name=\"stateId\" [(ngModel)]=\"user.corporateStateId\"\n                (change)=\"onChangeCorporateState()\" #stateId=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && stateId.invalid }\" required>\n                <option [ngValue]=\"null\">Select State</option>\n                <option *ngFor=\"let s of corporateStates\" [value]=\"s.stateId\">{{s.stateName}}\n                </option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && stateId.invalid\">\n                <p *ngIf=\"stateId.errors.required\">Please Select State</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>City </label>\n              <select select class=\"form-control\" name=\"corporateCityId\" (change)=\"onChangeCorporateCity()\"\n                [(ngModel)]=\"user.corporateCityId\" #corporateCityId=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && corporateCityId.invalid }\" required>\n                <option [ngValue]=\"null\">Select City</option>\n                <option *ngFor=\"let c of corporateCities\" [value]=\"c.cityId\">{{c.cityName}}\n                </option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && corporateCityId.invalid\">\n                <p *ngIf=\"corporateCityId.errors.required\">Please Select City</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Office</label>\n              <select select class=\"form-control\" name=\"officeIId\" [(ngModel)]=\"user.officeId\" #officeId=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && officeId.invalid }\" required>\n                <option [ngValue]=\"null\">Select Office</option>\n                <option *ngFor=\"let o of corporateOffices\" [value]=\"o.officeId\">{{o.officeName}}\n                </option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && officeId.invalid\">\n                <p *ngIf=\"officeId.errors.required\">Please Select Office</p>\n              </div>\n            </div>\n          </div>\n          <hr />\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>First Name</label>\n              <input type=\"text\" name=\"firstName\" class=\"form-control input-vendor\" [(ngModel)]=\"user.firstName\"\n                placeholder=\"User First Name *\" value=\"\" #firstName=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && firstName.invalid }\" pattern=\"[a-zA-Z][a-zA-Z ]+\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && firstName.invalid\">\n                <p *ngIf=\"firstName.errors.required\">Please Enter First Name</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Last Name</label>\n              <input type=\"text\" name=\"lastName\" class=\"form-control input-vendor\" [(ngModel)]=\"user.lastName\"\n                placeholder=\"User Last Name *\" value=\"\" pattern=\"[a-zA-Z][a-zA-Z ]+\" #lastName=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && lastName.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && lastName.invalid\">\n                <p *ngIf=\"lastName.errors.required\">Please Enter Last Name</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Email</label>\n              <input type=\"text\" name=\"email\" class=\"form-control input-vendor\" [(ngModel)]=\"user.email\"\n                placeholder=\"Email Id*\" value=\"\" pattern=\"^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$\"\n                #email=\"ngModel\" [ngClass]=\"{ 'is-invalid': f1.submitted && email.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && email.invalid\">\n                <p *ngIf=\"email.errors.required\">Please Enter Email</p>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-12\"><label>Address</label></div>\n            <div class=\"col-sm-4\">\n\n              <input type=\"text\" name=\"addressLine1\" class=\"form-control input-vendor\"\n                [(ngModel)]=\"address.addressLine1\" placeholder=\"Address Line 1*\" value=\"\" #addressLine1=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && addressLine1.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && addressLine1.invalid\">\n                <p *ngIf=\"addressLine1.errors.required\">Please Enter Address Line 1</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <input type=\"text\" name=\"addressLine2\" class=\"form-control input-vendor\"\n                [(ngModel)]=\"address.addressLine2\" placeholder=\"Address Line 2*\" value=\"\" #addressLine2=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && addressLine2.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && addressLine2.invalid\">\n                <p *ngIf=\"addressLine2.errors.required\">Please Enter Address Line 2</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <input type=\"text\" name=\"addressLine3\" class=\"form-control input-vendor\"\n                [(ngModel)]=\"address.addressLine3\" placeholder=\"Address Line 3*\" value=\"\" #addressLine3=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && addressLine3.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && addressLine3.invalid\">\n                <p *ngIf=\"addressLine3.errors.required\">Please Enter Address Line 3</p>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>Country</label>\n              <select class=\"form-control\" name=\"countryId\" [(ngModel)]=\"address.countryId\" (change)=\"onChangeCountry()\"\n                #countryId=\"ngModel\" [ngClass]=\"{ 'is-invalid': f1.submitted && countryId.invalid }\" required>\n                <option [ngValue]=\"null\">Select Country</option>\n                <option *ngFor=\"let c of countries\" [ngValue]=\"c.countryId\">{{c.countryName}}\n                </option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && countryId.invalid\">\n                <p *ngIf=\"countryId.errors.required\">Please Select Country</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>State</label>\n              <select select class=\"form-control\" name=\"stateId\" [(ngModel)]=\"address.stateId\"\n                (change)=\"onChangeState()\" #stateId=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && stateId.invalid }\" required>\n                <option [ngValue]=\"null\">Select state</option>\n                <option *ngFor=\"let s of states\" [value]=\"s.stateId\">{{s.stateName}}</option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && stateId.invalid\">\n                <p *ngIf=\"stateId.errors.required\">Please Select State</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>City</label>\n              <select class=\"form-control\" name=\"cityId\" [(ngModel)]=\"address.cityId\" #cityId=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && cityId.invalid }\" required>\n                <option [ngValue]=\"null\">Select City</option>\n                <option *ngFor=\"let s of cities\" [value]=\"s.cityId\">{{s.cityName}}</option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && cityId.invalid\">\n                <p *ngIf=\"cityId.errors.required\">Please Select City</p>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>Region</label>\n              <div class=\"form-group\">\n                <input type=\"text\" name=\"region\" class=\"form-control input-vendor\" [(ngModel)]=\"address.region\"\n                  placeholder=\"Region*\" value=\"\" #region=\"ngModel\"\n                  [ngClass]=\"{ 'is-invalid': f1.submitted && region.invalid }\" required />\n                <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && region.invalid\">\n                  <p *ngIf=\"region.errors.required\">Please Select Region</p>\n                </div>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Mobile Number </label>\n              <input type=\"tel\" name=\"mobileNumber\" class=\"form-control input-vendor\" [(ngModel)]=\"user.mobileNumber\"\n                placeholder=\"MobileNumber *\" value=\"\" #mobileNumber=\"ngModel\" pattern=\"^((\\\\+91-?)|0)?[0-9]{10}$\"\n                minlength=\"10\" maxlength=\"10\" [ngClass]=\"{ 'is-invalid': f1.submitted && mobileNumber.invalid }\"\n                required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && mobileNumber.invalid\">\n                <p *ngIf=\"mobileNumber.errors.required\">Please Enter Mobile Number</p>\n                <p *ngIf=\"mobileNumber.errors.pattern\"> Enter Valid Mobile Number</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>User Name</label>\n              <input type=\"text\" name=\"userName\" class=\"form-control input-vendor\" [(ngModel)]=\"user.userName\"\n                placeholder=\"User Name *\" value=\"\" #userName=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && userName.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && userName.invalid\">\n                <p *ngIf=\"userName.errors.required\">Please Enter Username</p>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>Password</label>\n              <input type=\"password\" name=\"password\" class=\"form-control input-vendor\" [(ngModel)]=\"user.password\"\n                placeholder=\"Enter Password *\" value=\"\" #password=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && password.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && password.invalid\">\n                <p *ngIf=\"password.errors.required\">Please Enter Password</p>\n              </div>\n            </div>\n          </div>\n          <br>\n          <div class=\"row\" style=\"float: right;\">\n            <button (click)=\"onBackClick()\" class=\"btn btn-default btn-lg\" value=\"back\">Back</button>\n            <button type=\"submit\" value=\"Submit\" (click)=\"onAddCorporateUser()\" class=\"btn btn-success btn-lg\"\n              [disabled]=\"!vendorForm1\">\n              Save</button>\n          </div>\n        </div>\n      </div>\n    </form>\n  </div>\n\n  <!-- Edit Corporate User -->\n  <div class=\"container-fluid\" style=\"padding-right:42px; padding-left:42px\" class=\"form\"\n    *ngIf=\"iterationName == 'EDIT_CORPORATE_USER'\">\n    <form class=\"form\" (ngSubmit)=\"f1.form.valid \" #f1=\"ngForm\" #vendorForm1>\n      <div class=\"card\">\n        <div class=\"view view-cascade gradient-card-header blue-gradient\">\n          <!-- Title -->\n          <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Edit Corporate User</h4>\n        </div>\n        <div class=\"card-body vendor\">\n          <div class=\"row\">\n            <div class=\"col-sm-4\">\n              <label>Corporate</label>\n              <select class=\"form-control\" name=\"organisation\" [(ngModel)]=\"user.organisationId\"\n                (change)=\"onChangeCorporate()\" #organisationId=\"ngModel\" required>\n                <option [ngValue]=\"null\">Select Corporate</option>\n                <option *ngFor=\"let v of corporates\" [ngValue]=\"v.organisationId\">\n                  {{v.organisationName}}</option>\n              </select>\n              <div *ngIf=\"organisationId.invalid && (organisationId.dirty || organisationId.touched)\"\n                class=\"alert alert-danger\">\n                <div [hidden]=\"!organisationId.hasError('required')\">Please Select Corporates</div>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>User Type</label>\n              <div class=\"form-group\">\n                <select class=\"form-control\" name=\"userType\" [(ngModel)]=\"user.userType\" #userType=\"ngModel\" required>\n                  <option [ngValue]=\"null\" selected=\"selected\">Select User Type</option>\n                  <option value=\"CORPORATE_SUPERVISOR\">Supervisor</option>\n                  <option value=\"CORPORATE_USER\">Normal User</option>\n                </select>\n                <div *ngIf=\"userType.invalid && (userType.dirty || userType.touched)\" class=\"alert alert-danger\">\n                  <div [hidden]=\"!userType.hasError('required')\">Please Select User type</div>\n                </div>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Select</label>\n              <select class=\"form-control\" name=\"type\" [(ngModel)]=\"user.corporateAccess\" #type=\"ngModel\"\n                (change)=\"onChangeCorporateAccess()\" required>\n                <option [ngValue]=\"null\">Select </option>\n                <option *ngFor=\"let s of supervisorTypes\" [value]=\"s\">{{s}}</option>\n              </select>\n            </div>\n\n          </div>\n\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>Region</label>\n              <select select class=\"form-control\" name=\"corporateRegion\" [(ngModel)]=\"user.corporateRegion\"\n                (change)=\"onChangeRegion()\" #corporateRegion=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && corporateRegion.invalid }\" required>\n                <option [ngValue]=\"null\">Select Region</option>\n                <option *ngFor=\"let r of regions\" [value]=\"r\">{{r}}\n                </option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && corporateRegion.invalid\">\n                <p *ngIf=\"corporateRegion.errors.required\">Please Select Region</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>State </label>\n              <select select class=\"form-control\" name=\"stateId\" [(ngModel)]=\"user.corporateStateId\"\n                (change)=\"onChangeCorporateState()\" #stateId=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && stateId.invalid }\" required>\n                <option [ngValue]=\"null\">Select State</option>\n                <option *ngFor=\"let s of corporateStates\" [value]=\"s.stateId\">{{s.stateName}}\n                </option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && stateId.invalid\">\n                <p *ngIf=\"stateId.errors.required\">Please Select State</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>City </label>\n              <select select class=\"form-control\" name=\"corporateCityId\" (change)=\"onChangeCorporateCity()\"\n                [(ngModel)]=\"user.corporateCityId\" #corporateCityId=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && corporateCityId.invalid }\" required>\n                <option [ngValue]=\"null\">Select City</option>\n                <option *ngFor=\"let c of corporateCities\" [value]=\"c.cityId\">{{c.cityName}}\n                </option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && corporateCityId.invalid\">\n                <p *ngIf=\"corporateCityId.errors.required\">Please Select City</p>\n              </div>\n            </div>\n\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>Office</label>\n              <select select class=\"form-control\" name=\"officeIId\" [(ngModel)]=\"user.officeId\" #officeId=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && officeId.invalid }\" required>\n                <option [ngValue]=\"null\">Select Office</option>\n                <option *ngFor=\"let o of corporateOffices\" [value]=\"o.officeId\">{{o.officeName}}\n                </option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && officeId.invalid\">\n                <p *ngIf=\"officeId.errors.required\">Please Select Office</p>\n              </div>\n            </div>\n          </div>\n          <hr />\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>First Name</label>\n              <input type=\"text\" name=\"firstName\" class=\"form-control input-vendor\" [(ngModel)]=\"user.firstName\"\n                placeholder=\"User First Name *\" value=\"\" #firstName=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && firstName.invalid }\" pattern=\"[a-zA-Z][a-zA-Z ]+\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && firstName.invalid\">\n                <p *ngIf=\"firstName.errors.required\">Please Enter First Name</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Last Name</label>\n              <input type=\"text\" name=\"lastName\" class=\"form-control input-vendor\" [(ngModel)]=\"user.lastName\"\n                placeholder=\"User Last Name *\" value=\"\" pattern=\"[a-zA-Z][a-zA-Z ]+\" #lastName=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && lastName.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && lastName.invalid\">\n                <p *ngIf=\"lastName.errors.required\">Please Enter Last Name</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Email</label>\n              <input type=\"text\" name=\"email\" class=\"form-control input-vendor\" [(ngModel)]=\"user.email\"\n                placeholder=\"Email Id*\" value=\"\" pattern=\"^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$\"\n                #email=\"ngModel\" [ngClass]=\"{ 'is-invalid': f1.submitted && email.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && email.invalid\">\n                <p *ngIf=\"email.errors.required\">Please Enter Email</p>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-12\"><label>Address</label></div>\n            <div class=\"col-sm-4\">\n\n              <input type=\"text\" name=\"addressLine1\" class=\"form-control input-vendor\"\n                [(ngModel)]=\"address.addressLine1\" placeholder=\"Address Line 1*\" value=\"\" #addressLine1=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && addressLine1.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && addressLine1.invalid\">\n                <p *ngIf=\"addressLine1.errors.required\">Please Enter Address Line 1</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <input type=\"text\" name=\"addressLine2\" class=\"form-control input-vendor\"\n                [(ngModel)]=\"address.addressLine2\" placeholder=\"Address Line 2*\" value=\"\" #addressLine2=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && addressLine2.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && addressLine2.invalid\">\n                <p *ngIf=\"addressLine2.errors.required\">Please Enter Address Line 2</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <input type=\"text\" name=\"addressLine3\" class=\"form-control input-vendor\"\n                [(ngModel)]=\"address.addressLine3\" placeholder=\"Address Line 3*\" value=\"\" #addressLine3=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && addressLine3.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && addressLine3.invalid\">\n                <p *ngIf=\"addressLine3.errors.required\">Please Enter Address Line 3</p>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>Country</label>\n              <select class=\"form-control\" name=\"countryId\" [(ngModel)]=\"address.countryId\" (change)=\"onChangeCountry()\"\n                #countryId=\"ngModel\" [ngClass]=\"{ 'is-invalid': f1.submitted && countryId.invalid }\" required>\n                <option [ngValue]=\"null\">Select Country</option>\n                <option *ngFor=\"let c of countries\" [ngValue]=\"c.countryId\">{{c.countryName}}\n                </option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && countryId.invalid\">\n                <p *ngIf=\"countryId.errors.required\">Please Select Country</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>State</label>\n              <select select class=\"form-control\" name=\"stateId\" [(ngModel)]=\"address.stateId\"\n                (change)=\"onChangeState()\" #stateId=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && stateId.invalid }\" required>\n                <option [ngValue]=\"null\">Select state</option>\n                <option *ngFor=\"let s of states\" [value]=\"s.stateId\">{{s.stateName}}</option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && stateId.invalid\">\n                <p *ngIf=\"stateId.errors.required\">Please Select State</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>City</label>\n              <select class=\"form-control\" name=\"cityId\" [(ngModel)]=\"address.cityId\" #cityId=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && cityId.invalid }\" required>\n                <option [ngValue]=\"null\">Select City</option>\n                <option *ngFor=\"let s of cities\" [value]=\"s.cityId\">{{s.cityName}}</option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && cityId.invalid\">\n                <p *ngIf=\"cityId.errors.required\">Please Select City</p>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>Region</label>\n              <input type=\"text\" name=\"region\" class=\"form-control input-vendor\" [(ngModel)]=\"address.region\"\n                placeholder=\"Region*\" value=\"\" #region=\"ngModel\" required />\n              <div *ngIf=\"region.invalid && (addressLine3.dirty || region.touched)\" class=\"alert alert-danger\">\n                <div [hidden]=\"!region.hasError('required')\">Required Region</div>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Mobile Number </label>\n              <input type=\"text\" name=\"mobileNumber\" class=\"form-control input-vendor\" [(ngModel)]=\"user.mobileNumber\"\n                placeholder=\"MobileNumber *\" value=\"\" #mobileNumber=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && mobileNumber.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && mobileNumber.invalid\">\n                <p *ngIf=\"mobileNumber.errors.required\">Please Enter Mobile Number</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>User Name</label>\n              <input type=\"text\" name=\"userName\" class=\"form-control input-vendor\" [(ngModel)]=\"user.userName\"\n                placeholder=\"User Name *\" value=\"\" #userName=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && userName.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && userName.invalid\">\n                <p *ngIf=\"userName.errors.required\">Please Enter Username</p>\n              </div>\n            </div>\n\n          </div>\n          <br>\n          <div class=\"row\" style=\"float: right;\">\n            <button (click)=\"onBackClick()\" class=\"btn btn-default btn-lg\" value=\"back\">Back</button>\n            <button type=\"submit\" value=\"Submit\" (click)=\"updateUser()\" class=\"btn btn-success btn-lg\"\n              [disabled]=\"!vendorForm1\">\n              Update</button>\n          </div>\n        </div>\n      </div>\n    </form>\n  </div>\n\n  <div *ngIf=\"iterationName == 'SHOW_USER_INFO'\">\n    <!-- Modal -->\n    <div class=\"modal fade\" id=\"exampleModalCenter\" tabindex=\"-1\" role=\"dialog\"\n      aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\" data-backdrop=\"false\">\n      <div class=\"modal-dialog modal-dialog-centered modal-fluid\" role=\"document\">\n        <div class=\"modal-content\">\n          <div\n            class=\"modal-header view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n            <h4 class=\"modal-title w-100 white-text mx-3\" id=\"myModalLabel\">Selected User Information</h4>\n            <button type=\"button\" class=\"close white-text mx-3\" data-dismiss=\"modal\" aria-label=\"Close\"\n              (click)=\"onBackSelected()\">\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <div class=\"modal-body\">\n            <div class=\"row\">\n              <div class=\"col-5 col-md-2\">\n                <label>User ID :</label>\n              </div>\n              <div class=\"col-7 col-md-2\">\n                <label class=\"select\">{{user.uniqueUserId}}</label>\n              </div>\n              <div class=\"col-5 col-md-2\">\n                <label>Email Id :</label>\n              </div>\n              <div class=\"col-7 col-md-2\">\n                <label class=\"select\">{{user.email}}</label>\n              </div>\n              <div class=\"col-5 col-md-2\">\n                <label>User Name:</label>\n              </div>\n              <div class=\"col-7 col-md-2\">\n                <label class=\"select\"> {{user.userName}}</label>\n              </div>\n            </div>\n            <hr class=\"mb-0\">\n\n            <div class=\"row\">\n              <div class=\"col-5 col-md-2\">\n                <label>Mobile No: </label>\n              </div>\n              <div class=\"col-7 col-md-2\">\n                <label class=\"select\">{{user.mobileNumber}}</label>\n              </div>\n              <div class=\"col-5 col-md-2\">\n                <label>Country :</label>\n              </div>\n              <div class=\"col-7 col-md-2\">\n                <label class=\"select\">{{user.address.country.countryName}}</label>\n              </div>\n              <div class=\"col-5 col-md-2\">\n                <label>State: </label>\n              </div>\n              <div class=\"col-7 col-md-2\">\n                <label class=\"select\">{{user.address.state.stateName}}</label>\n              </div>\n            </div>\n            <hr class=\"mb-0\">\n            <div class=\"row\">\n              <div class=\"col-5 col-md-2\">\n                <label>State: </label>\n              </div>\n              <div class=\"col-7 col-md-2\">\n                <label class=\"select\">{{user.address.state.stateName}}</label>\n              </div>\n              <div class=\"col-5 col-md-2\">\n                <label>City: </label>\n              </div>\n              <div class=\"col-7 col-md-2\">\n                <label class=\"select\">{{user.address.city.cityName}} </label>\n              </div>\n              <div class=\"col-5 col-md-2\">\n                <label>Region: </label>\n              </div>\n              <div class=\"col-7 col-md-2\">\n                <label class=\"select\">{{user.address.region}}</label>\n              </div>\n            </div>\n          </div>\n          <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-default btn-lg\" data-dismiss=\"modal\"\n              (click)=\"onBackSelected()\">Back</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n  <!-- Edit End User-->\n  <div class=\"container-fluid\" style=\"padding-right:42px; padding-left:42px\" class=\"form\"\n    *ngIf=\"iterationName =='EDIT_USER_SHOW_ALL_USERS'\">\n    <form class=\"form\" role=\"form\" #updateuser (ngSubmit)=\"updateUser(user)\" autocomplete=\"off\">\n      <div class=\"card\">\n        <div class=\"view view-cascade gradient-card-header blue-gradient\">\n          <!-- Title -->\n          <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Edit User</h4>\n        </div>\n        <div class=\"card-body vendor\">\n          <div class=\"row\">\n            <div class=\"col-sm-4\">\n              <label>User Name</label>\n              <input class=\"form-control input-vendor\" name=\"userName\" [(ngModel)]=\"user.userName\" type=\"text\"\n                #userName=\"ngModel\" placeholder=\"Enter User Name\" required>\n              <div *ngIf=\"userName.invalid && (userName.dirty || userName.touched)\" class=\"alert alert-danger\">\n                <div [hidden]=\"!userName.hasError('required')\">User Name Required</div>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>First Name</label>\n              <input class=\"form-control input-vendor\" name=\"firstName\" [(ngModel)]=\"user.firstName\" type=\"text\"\n                #firstName=\"ngModel\" placeholder=\"Enter First Name\" required>\n              <div *ngIf=\"firstName.invalid && (firstName.dirty || firstName.touched)\" class=\"alert alert-danger\">\n                <div [hidden]=\"!firstName.hasError('required')\">First Name Required</div>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Last Name</label>\n              <input class=\"form-control input-vendor\" name=\"lastName\" [(ngModel)]=\"user.lastName\" type=\"text\"\n                #lastName=\"ngModel\" placeholder=\"Enter Last Name\" required>\n              <div *ngIf=\"lastName.invalid && (lastName.dirty || lastName.touched)\" class=\"alert alert-danger\">\n                <div [hidden]=\"!lastName.hasError('required')\">Last Name Required</div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>Email</label>\n              <input class=\"form-control input-vendor\" name=\"email\" [(ngModel)]=\"user.email\" type=\"text\"\n                pattern=\"^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$\" #email=\"ngModel\" placeholder=\"Enter Email Id\"\n                required>\n              <div *ngIf=\"email.invalid && (email.dirty || email.touched)\" class=\"alert alert-danger\">\n                <div *ngIf=\"email.hasError('required')\">Email is required</div>\n                <div *ngIf=\"email.hasError('pattern')\">Email format should be\n                  <b>singapore@sipl.com</b>\n                </div>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Mobile Number </label>\n              <input class=\"form-control input-vendor\" name=\"mobileNumber\" [(ngModel)]=\"user.mobileNumber\" type=\"text\"\n                pattern=\"[0-9]*\" minlength=\"10\" maxlength=\"10\" #mobileNumber=\"ngModel\" placeholder=\"Enter Mobile Number\"\n                required>\n              <div *ngIf=\"mobileNumber.invalid && (mobileNumber.dirty || mobileNumber.touched)\"\n                class=\"alert alert-danger\">\n                <div *ngIf=\"mobileNumber.errors.required\">\n                  Mobile number is Required.\n                </div>\n                <div *ngIf=\"mobileNumber.hasError('minlength')\">Mobile should be 10 Digit</div>\n                <div *ngIf=\"mobileNumber.hasError('pattern')\">Mobile number should be only numbers\n                </div>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Region</label>\n              <input name=\"region\" class=\"form-control input-vendor\" [(ngModel)]=\"user.address.region\" type=\"text\"\n                #region=\"ngModel\" placeholder=\"Enter Region\" required>\n              <div *ngIf=\"region.invalid && (region.dirty || region.touched)\" class=\"alert alert-danger\">\n                <div *ngIf=\"region.errors.required\">\n                  Region Required.\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>Country</label>\n              <select class=\"form-control\" name=\"countryId\" [(ngModel)]=\"user.address.countryId\" #countryId=\"ngModel\"\n                (change)=\"onChangeCountry()\">\n                <option [ngValue]=\"null\">Select Country</option>\n                <option *ngFor=\"let c of countries\" [ngValue]=\"c.countryId\">{{c.countryName}}</option>\n              </select>\n              <div *ngIf=\"countryId.invalid && (countryId.dirty || countryId.touched)\" class=\"alert alert-danger\">\n                <div [hidden]=\"!countryId.hasError('required')\">Select Country </div>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>State</label>\n              <select class=\"form-control\" name=\"stateId\" [(ngModel)]=\"user.address.stateId\" #stateId=\"ngModel\"\n                (change)=\"onChangeState()\" [ngModelOptions]=\"{standalone: true}\">\n                <option [ngValue]=\"null\">Select state</option>\n                <option *ngFor=\"let s of states\" [value]=\"s.stateId\">{{s.stateName}}</option>\n              </select>\n              <div *ngIf=\"stateId.invalid && (stateId.dirty || stateId.touched)\" class=\"alert alert-danger\">\n                <div [hidden]=\"!stateId.hasError('required')\">Select State</div>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>City</label>\n              <select class=\"form-control\" name=\"cityId\" [(ngModel)]=\"user.address.cityId\"\n                [ngModelOptions]=\"{standalone: true}\">\n                <option value=\"0\">Select City</option>\n                <option *ngFor=\"let s of cities\" [value]=\"s.cityId\">{{s.cityName}}</option>\n              </select>\n            </div>\n          </div>\n          <br>\n          <div class=\"row\" style=\"float: right;\">\n            <button (click)=\"onBackClick()\" class=\"btn btn-default btn-lg\">Back</button>\n            <button type=\"button\" (click)=\"updateUser()\" class=\"btn btn-success btn-lg\">Update</button>\n          </div>\n        </div>\n      </div>\n    </form>\n  </div>\n\n\n  <!-- Add new Warehouse User-->\n  <div class=\"container-fluid\" style=\"padding-right:42px; padding-left:42px\"\n    *ngIf=\"iterationName == 'ADD_WAREHOUSE_USER'\">\n    <form class=\"form\" (ngSubmit)=\"f1.form.valid && onAddWarehouseUser()\" #f1=\"ngForm\" #wuserForm1>\n      <div class=\"card\">\n        <div class=\"view view-cascade gradient-card-header blue-gradient\">\n\n          <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Add New Warehouse User</h4>\n        </div>\n        <div class=\"card-body vendor\">\n          <div class=\"row\">\n            <div class=\"col-sm-4\">\n              <label>Vendor Type</label>\n              <select class=\"form-control\" name=\"vendorTypeId\" [(ngModel)]=\"user.vendorTypeId\"\n                (ngModelChange)=\"onChangeVendorType()\" #vendorTypeId=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && vendorTypeId.invalid }\" required>\n                <option [ngValue]=\"0\">Select Vendor Type </option>\n                <option *ngFor=\"let t of types\" [ngValue]=\"t.paramId\">{{t.paramName}}</option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && vendorTypeId.invalid\">\n                <p *ngIf=\"vendorTypeId.errors.required\">Please Select Warehouse</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Vendor</label>\n              <select class=\"form-control\" name=\"vendorId\" [(ngModel)]=\"user.vendorId\" (change)=\"onChangeVendor()\"\n                #vendorId=\"ngModel\" [ngClass]=\"{ 'is-invalid': f1.submitted && vendorId.invalid }\" required>\n                <option [ngValue]=\"0\">Select Vendor</option>\n                <option *ngFor=\"let v of masterOrganisationList\" [ngValue]=\"v.organisationId\">\n                  {{v.organisationName}}</option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && vendorId.invalid\">\n                <p *ngIf=\"vendorId.errors.required\">Please Select Vendor </p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Warehouse</label>\n              <select class=\"form-control\" name=\"warehouseId\" [(ngModel)]=\"user.warehouseId\" #warehouseId=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && warehouseId.invalid }\" required>\n                <option [ngValue]=\"w\">Select Warehouse </option>\n                <option *ngFor=\"let w of warehouseList\" [ngValue]=\"w.warehouseId\">\n                  {{w.warehouseName}}\n                </option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && warehouseId.invalid\">\n                <p *ngIf=\"warehouseId.errors.required\">Please Select Warehouse</p>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>First Name</label>\n              <input type=\"text\" name=\"firstName\" class=\"form-control input-vendor\" [(ngModel)]=\"user.firstName\"\n                placeholder=\"User First Name *\" value=\"\" #firstName=\"ngModel\" pattern=\"[a-zA-Z][a-zA-Z ]+\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && firstName.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && firstName.invalid\">\n                <p *ngIf=\"firstName.errors.required\">Please Enter First Name </p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Last Name </label>\n              <input type=\"text\" name=\"lastName\" class=\"form-control input-vendor\" [(ngModel)]=\"user.lastName\"\n                placeholder=\"User Last Name *\" value=\"\" #lastName=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && lastName.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && lastName.invalid\">\n                <p *ngIf=\"lastName.errors.required\">Please Enter Last Name </p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Eamil Id</label>\n              <input type=\"text\" name=\"email\" class=\"form-control input-vendor\" [(ngModel)]=\"user.email\"\n                placeholder=\"Email Id*\" value=\"\" #email=\"ngModel\"\n                pattern=\"^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && email.invalid }\" required />\n\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && email.invalid\">\n                <p *ngIf=\"email.errors.required\">Please Enter Email </p>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-12\"><label>Address</label></div>\n            <div class=\"col-sm-4\">\n\n              <input type=\"text\" name=\"addressLine1\" class=\"form-control input-vendor\"\n                [(ngModel)]=\"address.addressLine1\" placeholder=\"Address Line 1*\" value=\"\" #addressLine1=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && addressLine1.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && addressLine1.invalid\">\n                <p *ngIf=\"addressLine1.errors.required\">Please Enter Address Line 1</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <input type=\"text\" name=\"addressLine2\" class=\"form-control input-vendor\"\n                [(ngModel)]=\"address.addressLine2\" placeholder=\"Address Line 2*\" value=\"\" #addressLine2=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && addressLine2.invalid }\" required>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && addressLine2.invalid\">\n                <p *ngIf=\"addressLine2.errors.required\">Please Enter Address Line 2</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <input type=\"text\" name=\"addressLine3\" class=\"form-control input-vendor\"\n                [(ngModel)]=\"address.addressLine3\" placeholder=\"Address Line 3*\" value=\"\" #addressLine3=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && addressLine3.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && addressLine3.invalid\">\n                <p *ngIf=\"addressLine3.errors.required\">Please Enter Address Line 3</p>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>Country</label>\n              <select class=\"form-control\" name=\"countryId\" [(ngModel)]=\"address.countryId\" (change)=\"onChangeCountry()\"\n                #countryId=\"ngModel\" [ngClass]=\"{ 'is-invalid': f1.submitted && countryId.invalid }\" required>\n                <option [ngValue]=\"c\">Select Country</option>\n                <option *ngFor=\"let c of countries\" [ngValue]=\"c.countryId\">\n                  {{c.countryName}}</option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && countryId.invalid\">\n                <p *ngIf=\"countryId.errors.required\">Please Select Country </p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>State </label>\n              <select class=\"form-control\" name=\"stateId\" [(ngModel)]=\"address.stateId\" (change)=\"onChangeState()\"\n                #stateId=\"ngModel\" [ngClass]=\"{ 'is-invalid': f1.submitted && stateId.invalid }\" required>\n                <option [ngValue]=\"s\">Select state</option>\n                <option *ngFor=\"let s of states\" [value]=\"s.stateId\">{{s.stateName}}\n                </option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && stateId.invalid\">\n                <p *ngIf=\"stateId.errors.required\">Please Select State </p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>City</label>\n              <select class=\"form-control\" name=\"cityId\" [(ngModel)]=\"address.cityId\" #cityId=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && cityId.invalid }\" required>\n                <option [ngValue]=\"s\">Select City</option>\n                <option *ngFor=\"let s of cities\" [value]=\"s.cityId\">{{s.cityName}}</option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && cityId.invalid\">\n                <p *ngIf=\"cityId.errors.required\">Please Select City </p>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>Region</label>\n              <input type=\"text\" name=\"region\" class=\"form-control  input-vendor\" [(ngModel)]=\"address.region\"\n                placeholder=\"Region*\" value=\"\" #region=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && region.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && region.invalid\">\n                <p *ngIf=\"region.errors.required\">Please Enter Region</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Mobile Number </label>\n              <input type=\"tel\" name=\"mobileNumber\" class=\"form-control input-vendor\" [(ngModel)]=\"user.mobileNumber\"\n                placeholder=\"Mobile Number *\" value=\"\" pattern=\"^((\\\\+91-?)|0)?[0-9]{10}$\" maxlength=\"10\"\n                #mobileNumber=\"ngModel\" [ngClass]=\"{ 'is-invalid': f1.submitted && mobileNumber.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && mobileNumber.invalid\">\n                <p *ngIf=\"mobileNumber.errors.required\">Please Enter Mobile Number</p>\n                <p *ngIf=\"mobileNumber.errors.pattern\">Please Enter Mobile Number</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>User Name</label>\n              <input type=\"text\" name=\"userName\" class=\"form-control input-vendor\" [(ngModel)]=\"user.userName\"\n                placeholder=\"User Name *\" value=\"\" #userName=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && userName.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && userName.invalid\">\n                <p *ngIf=\"userName.errors.required\">Please Enter Username </p>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>Password</label>\n              <input type=\"password\" name=\"password\" class=\"form-control input-vendor\" [(ngModel)]=\"user.password\"\n                placeholder=\"Enter Password *\" value=\"\" #password=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && password.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && password.invalid\">\n                <p *ngIf=\"password.errors.required\">Please Enter Password</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n\n            </div>\n            <div class=\"col-sm-4\">\n\n            </div>\n          </div>\n          <div class=\"row\" style=\"float: right;\">\n            <button (click)=\"onBackClick()\" class=\"btn btn-default btn-lg\" value=\"Login\">Back</button>&nbsp;\n            <button type=\"submit\" (click)=\"onAddWarehouseUser()\" class=\"btn btn-success btn-lg\"\n              [disabled]=\"!wuserForm1\">\n              Save</button>\n          </div>\n        </div>\n      </div>\n    </form>\n  </div>\n\n  <!-- Edit Warehouse User-->\n  <div class=\"container-fluid\" style=\"padding-right:42px; padding-left:42px\"\n    *ngIf=\"iterationName == 'EDIT_WAREHOUSE_USER'\">\n    <form class=\"form\" (ngSubmit)=\"f1.form.valid && onAddWarehouseUser()\" #f1=\"ngForm\" #wuserForm1>\n      <div class=\"card\">\n        <div class=\"view view-cascade gradient-card-header blue-gradient\">\n          \\\n          <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Edit Warehouse User</h4>\n        </div>\n        <div class=\"card-body vendor\">\n          <div class=\"row\">\n            <div class=\"col-sm-4\">\n              <label>Vendor Type</label>\n              <select disabled class=\"form-control\" name=\"vendorTypeId\" [(ngModel)]=\"user.vendorTypeId\"\n                (change)=\"onChangeVendorType()\" #vendorTypeId=\"ngModel\" required>\n                <option *ngFor=\"let t of types\" [ngValue]=\"t.paramId\">{{t.paramName}}</option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && vendorTypeId.invalid\">\n                <p *ngIf=\"vendorTypeId.errors.required\">Please Select Warehouse</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Vendor</label>\n              <select disabled class=\"form-control\" name=\"vendorId\" [(ngModel)]=\"user.vendorId\"\n                (change)=\"onChangeVendor()\" #vendorId=\"ngModel\" required>\n                <option [ngValue]=\"null\">Select Vendor</option>\n                <option *ngFor=\"let v of masterOrganisationList\" [ngValue]=\"v.organisationId\">\n                  {{v.organisationName}}</option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && vendorId.invalid\">\n                <p *ngIf=\"vendorId.errors.required\">Please Select Vendor </p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Warehouse</label>\n              <select class=\"form-control\" name=\"selectedWarehouseIds\" [(ngModel)]=\"user.selectedWarehouseIds\"\n                #selectedWarehouseIds=\"ngModel\" required>\n                <option *ngFor=\"let w of warehouseList\" [ngValue]=\"w.warehouseId\">\n                  {{w.warehouseName}}</option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && warehouseId.invalid\">\n                <p *ngIf=\"warehouseId.errors.required\">Please Select Warehouse</p>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>First Name</label>\n              <input type=\"text\" name=\"firstName\" class=\"form-control input-vendor\" [(ngModel)]=\"user.firstName\"\n                placeholder=\"User First Name *\" value=\"\" #firstName=\"ngModel\" pattern=\"[a-zA-Z][a-zA-Z ]+\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && firstName.invalid\">\n                <p *ngIf=\"firstName.errors.required\">Please Enter First Name </p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Last Name </label>\n              <input type=\"text\" name=\"lastName\" class=\"form-control input-vendor\" [(ngModel)]=\"user.lastName\"\n                placeholder=\"User Last Name *\" value=\"\" #lastName=\"ngModel\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && lastName.invalid\">\n                <p *ngIf=\"lastName.errors.required\">Please Enter Last Name </p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Eamil Id</label>\n              <input type=\"text\" name=\"email\" class=\"form-control input-vendor\" [(ngModel)]=\"user.email\"\n                placeholder=\"Email Id*\" value=\"\" #email=\"ngModel\"\n                pattern=\"^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$\" required />\n\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && email.invalid\">\n                <p *ngIf=\"email.errors.required\">Please Enter Email </p>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-12\"><label>Address</label></div>\n            <div class=\"col-sm-4\">\n\n              <input type=\"text\" name=\"addressLine1\" class=\"form-control input-vendor\"\n                [(ngModel)]=\"address.addressLine1\" placeholder=\"Address Line 1*\" value=\"\" #addressLine1=\"ngModel\"\n                required />\n            </div>\n            <div class=\"col-sm-4\">\n              <input type=\"text\" name=\"addressLine2\" class=\"form-control input-vendor\"\n                [(ngModel)]=\"address.addressLine2\" placeholder=\"Address Line 2*\" value=\"\" #addressLine2=\"ngModel\"\n                required>\n            </div>\n            <div class=\"col-sm-4\">\n              <input type=\"text\" name=\"addressLine3\" class=\"form-control input-vendor\"\n                [(ngModel)]=\"address.addressLine3\" placeholder=\"Address Line 3*\" value=\"\" #addressLine3=\"ngModel\"\n                required />\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>Country</label>\n              <select disabled class=\"form-control\" name=\"countryId\" [(ngModel)]=\"address.countryId\"\n                (change)=\"onChangeCountry()\" #countryId=\"ngModel\" required>\n                <option [ngValue]=\"null\">Select Country</option>\n                <option *ngFor=\"let c of countries\" [ngValue]=\"c.countryId\">\n                  {{c.countryName}}</option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && countryId.invalid\">\n                <p *ngIf=\"countryId.errors.required\">Please Select Country </p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>State </label>\n              <select class=\"form-control\" name=\"stateId\" [(ngModel)]=\"address.stateId\" (change)=\"onChangeState()\"\n                #stateId=\"ngModel\" required>\n                <option [ngValue]=\"null\">Select state</option>\n                <option *ngFor=\"let s of states\" [value]=\"s.stateId\">{{s.stateName}}\n                </option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && stateId.invalid\">\n                <p *ngIf=\"stateId.errors.required\">Please Select State </p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>City</label>\n              <select class=\"form-control\" name=\"cityId\" [(ngModel)]=\"address.cityId\" #cityId=\"ngModel\" required>\n                <option [ngValue]=\"null\">Select City</option>\n                <option *ngFor=\"let s of cities\" [value]=\"s.cityId\">{{s.cityName}}</option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && cityId.invalid\">\n                <p *ngIf=\"cityId.errors.required\">Please Select City </p>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>Region</label>\n              <input type=\"text\" name=\"region\" class=\"form-control input-vendor\" [(ngModel)]=\"address.region\"\n                placeholder=\"Region*\" value=\"\" #region=\"ngModel\" required />\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Mobile Number </label>\n              <input type=\"text\" name=\"mobileNumber\" class=\"form-control input-vendor\" [(ngModel)]=\"user.mobileNumber\"\n                placeholder=\"Mobile Number *\" value=\"\" pattern=\"[0-9]*\" minlength=\"10\" maxlength=\"10\"\n                #mobileNumber=\"ngModel\" required />\n            </div>\n\n          </div>\n\n          <div class=\"row\" style=\"float: right;\">\n            <button (click)=\"onBackClick()\" class=\"btn btn-default btn-lg\" value=\"Login\">Back</button>&nbsp;\n            <button type=\"button\" (click)=\"updateUser()\" class=\"btn btn-success btn-lg\">Update</button>\n          </div>\n        </div>\n      </div>\n    </form>\n  </div>\n\n  <!-- Add new Vendor User-->\n  <div class=\"container-fluid\" style=\"padding-right:42px; padding-left:42px\" *ngIf=\"iterationName == 'ADD_VENDOR_USER'\">\n    <form class=\"needs-validation\" novalidate (ngSubmit)=\"f1.form.valid && onAddVendorUser()\" #f1=\"ngForm\" #vuserForm1>\n      <div class=\"card\">\n        <div class=\"view view-cascade gradient-card-header blue-gradient\">\n          <!-- Title -->\n          <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Add New Vendor User</h4>\n        </div>\n        <div class=\"card-body vendor\">\n          <div class=\"row\">\n            <div class=\"col-sm-4\">\n              <label>Vendor</label>\n              <select class=\"form-control input-vendor\" name=\"organisation\" [(ngModel)]=\"user.organisationId\"\n                #organisationId=\"ngModel\" [ngClass]=\"{ 'is-invalid': f1.submitted && organisationId.invalid }\" required>\n                <option [ngValue]=\"v\">Select Vendor</option>\n                <option *ngFor=\"let v of masterOrganisationList\" [ngValue]=\"v.organisationId\">\n                  {{v.organisationName}}</option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && organisationId.invalid\">\n                <p *ngIf=\"organisationId.errors.required\"> Country is Required</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>First Name</label>\n              <input type=\"text\" name=\"firstName\" class=\"form-control input-vendor\" [(ngModel)]=\"user.firstName\"\n                placeholder=\"User First Name *\" #firstName=\"ngModel\" pattern=\"[a-zA-Z][a-zA-Z ]+\" maxlength=\"45\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && firstName.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && firstName.invalid\">\n                <p *ngIf=\"firstName.errors.required\"> First Name is Required</p>\n                <p *ngIf=\"firstName.errors.pattern\"> Numbers Not Allowed</p>\n                <p *ngIf=\"firstName.errors.maxlength\"> Only 45 charectors Allowed</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Last Name</label>\n              <input type=\"text\" name=\"lastName\" class=\"form-control input-vendor\" [(ngModel)]=\"user.lastName\"\n                placeholder=\"User Last Name *\" value=\"\" pattern=\"[a-zA-Z][a-zA-Z ]+\" #lastName=\"ngModel\" maxlength=\"45\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && lastName.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && lastName.invalid\">\n                <p *ngIf=\"lastName.errors.required\"> Last Name is Required</p>\n                <p *ngIf=\"lastName.errors.pattern\"> Numbers Not Allowed</p>\n\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>Email</label>\n              <input type=\"text\" name=\"email\" class=\"form-control input-vendor\" [(ngModel)]=\"user.email\"\n                placeholder=\"Email Id*\" value=\"\" pattern=\"^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$\"\n                #email=\"ngModel\" [ngClass]=\"{ 'is-invalid': f1.submitted && email.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && email.invalid\">\n                <p *ngIf=\"email.errors.required\"> Email is Required</p>\n                <p *ngIf=\"email.errors.pattern\"> Email Valid Email Id </p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Mobile Number </label>\n              <input type=\"tel\" name=\"mobileNumber\" class=\"form-control input-vendor\" [(ngModel)]=\"user.mobileNumber\"\n                placeholder=\"Mobile Number *\" value=\"\" pattern=\"^((\\\\+91-?)|0)?[0-9]{10}$\" maxlength=\"10\"\n                #mobileNumber=\"ngModel\" [ngClass]=\"{ 'is-invalid': f1.submitted && mobileNumber.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && mobileNumber.invalid\">\n                <p *ngIf=\"mobileNumber.errors.required\"> Mobile Number is Required</p>\n                <p *ngIf=\"mobileNumber.errors.pattern\">Enter the Valid Mobile Number</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>User Name</label>\n              <input type=\"text\" name=\"userName\" class=\"form-control input-vendor\" [(ngModel)]=\"user.userName\"\n                placeholder=\"User Name *\" value=\"\" #userName=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && userName.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && userName.invalid\">\n                <p *ngIf=\"userName.errors.required\"> User Name is Required</p>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-12\"><label>Address</label></div>\n            <div class=\"col-sm-4\">\n              <input type=\"text\" name=\"addressLine1\" class=\"form-control input-vendor\"\n                [(ngModel)]=\"address.addressLine1\" placeholder=\"Address Line 1*\" value=\"\" #addressLine1=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && addressLine1.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && addressLine1.invalid\">\n                <p *ngIf=\"addressLine1.errors.required\"> Address Line 1 is Required</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <input type=\"text\" name=\"addressLine2\" class=\"form-control input-vendor\"\n                [(ngModel)]=\"address.addressLine2\" placeholder=\"Address Line 2*\" value=\"\" #addressLine2=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && addressLine2.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && addressLine2.invalid\">\n                <p *ngIf=\"addressLine2.errors.required\"> Address Line 2 is Required</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <input type=\"text\" name=\"addressLine3\" class=\"form-control input-vendor\"\n                [(ngModel)]=\"address.addressLine3\" placeholder=\"Address Line 3*\" value=\"\" #addressLine3=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && addressLine3.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && addressLine3.invalid\">\n                <p *ngIf=\"addressLine3.errors.required\"> Address Line 3 is Required</p>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>Country</label>\n              <select class=\"form-control\" name=\"countryId\" [(ngModel)]=\"address.countryId\" (change)=\"onChangeCountry()\"\n                #countryId=\"ngModel\" [ngClass]=\"{ 'is-invalid': f1.submitted && countryId.invalid }\" required>\n                <option [ngValue]=\"c\">Select Country</option>\n                <option *ngFor=\"let c of countries\" [ngValue]=\"c.countryId\">{{c.countryName}}\n                </option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && countryId.invalid\">\n                <p *ngIf=\"countryId.errors.required\"> Country is Required</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>State</label>\n              <select select class=\"form-control\" name=\"stateId\" [(ngModel)]=\"address.stateId\"\n                (change)=\"onChangeState()\" #stateId=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && stateId.invalid }\" required>\n                <option [ngValue]=\"s\">Select state</option>\n                <option *ngFor=\"let s of states\" [value]=\"s.stateId\">{{s.stateName}}</option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && stateId.invalid\">\n                <p *ngIf=\"stateId.errors.required\"> State is Required</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>City</label>\n              <select class=\"form-control\" name=\"cityId\" [(ngModel)]=\"address.cityId\" #cityId=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && cityId.invalid }\" required>\n                <option [ngValue]=\"s\">Select City</option>\n                <option *ngFor=\"let s of cities\" [value]=\"s.cityId\">{{s.cityName}}</option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && cityId.invalid\">\n                <p *ngIf=\"cityId.errors.required\"> City is Required</p>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>Region</label>\n              <input type=\"text\" name=\"region\" class=\"form-control input-vendor input-vendor\"\n                [(ngModel)]=\"address.region\" placeholder=\"Region*\" value=\"\" #region=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && addressLine3.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && region.invalid\">\n                <p *ngIf=\"region.errors.required\"> Region is Required</p>\n              </div>\n            </div>\n\n            <div class=\"col-sm-4\">\n              <label>Password</label>\n              <input type=\"password\" name=\"password\" class=\"form-control input-vendor\" [(ngModel)]=\"user.password\"\n                placeholder=\"Enter Password *\" value=\"\" #password=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && userName.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && password.invalid\">\n                <p *ngIf=\"password.errors.required\"> Password is Required</p>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"row\" style=\"float: right;\">\n            <button (click)=\"onBackClick()\" class=\"btn btn-default btn-lg\" value=\"Login\">Back</button>\n            <button type=\"submit\" class=\"btn btn-success btn-lg\" [disabled]=\"!vuserForm1\">\n              Save</button>\n          </div>\n        </div>\n      </div>\n    </form>\n  </div>\n\n  <!--  Edit Vendor User -->\n  <div class=\"container-fluid\" style=\"padding-right:42px; padding-left:42px\" class=\"form\"\n    *ngIf=\"iterationName == 'EDIT_VENDOR_USER'\">\n    <form class=\"needs-validation\" novalidate (ngSubmit)=\"f1.form.valid && updateUser()\" #f1=\"ngForm\" #vuserForm1>\n      <div class=\"card\">\n        <div class=\"view view-cascade gradient-card-header blue-gradient\">\n          <!-- Title -->\n          <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Edit Vendor User</h4>\n        </div>\n        <div class=\"card-body vendor\">\n          <div class=\"row\">\n            <div class=\"col-sm-4\">\n              <label>Vendor</label>\n              <select disabled class=\"form-control\" name=\"organisation\" [(ngModel)]=\"user.organisationId\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && organisationId.invalid }\" required>\n                <option *ngFor=\"let v of vendors\" [ngValue]=\"v.organisationId\">\n                  {{v.organisationName}}</option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && organisationId.invalid\">\n                <p *ngIf=\"organisationId.errors.required\">Please Select Vendor</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>First Name</label>\n              <input type=\"text\" name=\"firstName\" class=\"form-control input-vendor\" [(ngModel)]=\"user.firstName\"\n                placeholder=\"User First Name *\" value=\"\" #firstName=\"ngModel\" pattern=\"[a-zA-Z][a-zA-Z ]+\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && firstName.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && firstName.invalid\">\n                <p *ngIf=\"firstName.errors.required\"> First name is Required.</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Last Name</label>\n              <input type=\"text\" name=\"lastName\" class=\"form-control input-vendor\" [(ngModel)]=\"user.lastName\"\n                placeholder=\"User Last Name *\" value=\"\" pattern=\"[a-zA-Z][a-zA-Z ]+\" #lastName=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && lastName.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && lastName.invalid\">\n                <p *ngIf=\"lastName.errors.required\">Last Name is required</p>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-12\"><label>Address</label></div>\n            <div class=\"col-sm-4\">\n\n              <input type=\"text\" name=\"addressLine1\" class=\"form-control input-vendor\"\n                [(ngModel)]=\"address.addressLine1\" placeholder=\"Address Line 1*\" value=\"\" #addressLine1=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && addressLine1.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && addressLine1.invalid\">\n                <p *ngIf=\"addressLine1.errors.required\">Address Line 1 is required</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <input type=\"text\" name=\"addressLine2\" class=\"form-control input-vendor\"\n                [(ngModel)]=\"address.addressLine2\" placeholder=\"Address Line 2*\" value=\"\" #addressLine2=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && addressLine2.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && addressLine2.invalid\">\n                <p *ngIf=\"addressLine2.errors.required\">Address Line 2 is required</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <input type=\"text\" name=\"addressLine3\" class=\"form-control input-vendor\"\n                [(ngModel)]=\"address.addressLine3\" placeholder=\"Address Line 3*\" value=\"\" #addressLine3=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && addressLine3.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && addressLine3.invalid\">\n                <p *ngIf=\"addressLine3.errors.required\">Address Line 3 is required</p>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>Email</label>\n              <input type=\"text\" name=\"email\" class=\"form-control input-vendor\" [(ngModel)]=\"user.email\"\n                placeholder=\"Email Id*\" value=\"\" pattern=\"^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$\"\n                #email=\"ngModel\" [ngClass]=\"{ 'is-invalid': f1.submitted && email.invalid }\" required />\n\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && email.invalid\">\n                <p *ngIf=\"email.errors.required\"> Email is Required.</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Mobile Number </label>\n              <input type=\"text\" name=\"mobileNumber\" class=\"form-control input-vendor\" [(ngModel)]=\"user.mobileNumber\"\n                placeholder=\"Mobile Number *\" value=\"\" pattern=\"[0-9]*\" minlength=\"10\" maxlength=\"10\"\n                #mobileNumber=\"ngModel\" [ngClass]=\"{ 'is-invalid': f1.submitted && mobileNumber.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && mobileNumber.invalid\">\n                <p *ngIf=\"mobileNumber.errors.required\"> Mobile number is Required.</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>Region</label>\n              <input type=\"text\" name=\"region\" class=\"form-control input-vendor input-vendor\"\n                [(ngModel)]=\"address.region\" placeholder=\"Region*\" value=\"\" #region=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && addressLine3.invalid }\" required />\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && region.invalid\">\n                <p *ngIf=\"region.errors.required\">Region is required</p>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"row\" id=\"vendorrow\">\n            <div class=\"col-sm-4\">\n              <label>Country</label>\n              <select class=\"form-control\" name=\"countryId\" [(ngModel)]=\"address.countryId\" (change)=\"onChangeCountry()\"\n                #countryId=\"ngModel\" [ngClass]=\"{ 'is-invalid': f1.submitted && countryId.invalid }\" required>\n                <option [ngValue]=\"null\">Select Country</option>\n                <option *ngFor=\"let c of countries\" [ngValue]=\"c.countryId\">{{c.countryName}}\n                </option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && countryId.invalid\">\n                <p *ngIf=\"countryId.errors.required\">Please Select the Country</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>State</label>\n              <select select class=\"form-control\" name=\"stateId\" [(ngModel)]=\"address.stateId\"\n                (change)=\"onChangeState()\" #stateId=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && stateId.invalid }\" required>\n                <option [ngValue]=\"null\">Select state</option>\n                <option *ngFor=\"let s of states\" [value]=\"s.stateId\">{{s.stateName}}</option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && stateId.invalid\">\n                <p *ngIf=\"stateId.errors.required\">Please Select the State</p>\n              </div>\n            </div>\n            <div class=\"col-sm-4\">\n              <label>City</label>\n              <select class=\"form-control\" name=\"cityId\" [(ngModel)]=\"address.cityId\" #cityId=\"ngModel\"\n                [ngClass]=\"{ 'is-invalid': f1.submitted && cityId.invalid }\" required>\n                <option [ngValue]=\"null\">Select City</option>\n                <option *ngFor=\"let s of cities\" [value]=\"s.cityId\">{{s.cityName}}</option>\n              </select>\n              <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && cityId.invalid\">\n                <p *ngIf=\"cityId.errors.required\">Please Select the City</p>\n              </div>\n            </div>\n          </div>\n\n          <br>\n          <div class=\"row\" style=\"float: right;\">\n            <button (click)=\"onBackClick()\" class=\"btn btn-default btn-lg\" value=\"Login\">Back</button>&nbsp;\n            <button type=\"submit\" class=\"btn btn-success btn-lg\">Update</button>\n          </div>\n        </div>\n      </div>\n    </form>\n  </div>\n\n\n  <div class=\"container-fluid\" *ngIf=\"iterationName == 'Premium_Members_List'\">\n    <div class=\"card-body\"></div>\n    <section class=\"mb-5\">\n      <!--Card-->\n      <div class=\"card card-cascade narrower body-section\">\n        <div\n          class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n          <div>\n          </div>\n          <h4 class=\"white-text mx-3\">Premium Members List</h4>\n          <div>\n          </div>\n        </div>\n        <div class=\"card-body\">\n          <div class=\"table table-striped table-bordered table-responsive\">\n            <table class=\"table text-nowrap\">\n              <thead>\n                <tr>\n                  <th>Customer Id</th>\n                  <th>Customer Name</th>\n                  <th>Country</th>\n                  <th>City</th>\n                  <th>Requested Amount</th>\n                  <th>Allocated Credit Limit</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let c of premiumMembersList  | \n                                paginate: { id: 'listing_pagination',\n                                itemsPerPage: 5,\n                                currentPage: page,\n                                totalItems: totalRec }\n                                \">\n                  <td><a class=\"link\" (click)=\"onShowPremiumUser(c)\" tooltip=\"Click To View Premium Membership Summary\"\n                      data-toggle=\"modal\" data-target=\"#exampleModalCenter\">{{c.uniqueUserId}}</a></td>\n                  <td>{{c.userName}}</td>\n                  <td>{{c.countryName}}</td>\n                  <td>{{c.cityName}}</td>\n                  <td>{{c.requestedAmount | currency : c.currency}}</td>\n                  <td>{{c.approvedAmount  | currency : c.currency}}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <br>\n          <div class=\"d-flex justify-content-between\">\n            <div class=\"wrap\">\n              <pagination-controls id=\"listing_pagination\" maxSize=\"4\" directionLinks=\"true\"\n                (pageChange)=\"page = $event\">\n              </pagination-controls>\n            </div>\n          </div>\n          <div class=\"button-section\">\n            <button (click)=\"onCreditBack()\" class=\"btn btn-default btn-lg\">Back</button>\n            <button (click)=\"onManageRequest()\" class=\"btn btn-secondary btn-lg\">Manage Requests</button>&nbsp;&nbsp;\n          </div>\n        </div>\n      </div>\n    </section>\n    <br>\n  </div>\n  <br>\n\n  <!-- premium Membership -->\n  <div class=\"container-fluid\" *ngIf=\"iterationName == 'Requested_Premium_Members_List'\">\n    <div class=\"card-body\">\n      <section class=\"mb-5\">\n        <!--Card-->\n        <div class=\"card card-cascade narrower body-section premium\">\n          <div\n            class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n            <div>\n            </div>\n            <h4 href=\"\" class=\"white-text mx-3\">Premimum Members Requests </h4>\n            <div>\n            </div>\n          </div>\n          <div class=\"card-body\">\n            <div class=\"table table-responsive table-striped table-bordered\">\n              <table class=\"table text-nowrap\">\n                <thead>\n                  <tr>\n                    <th>Customer Id</th>\n                    <th>Customer Name</th>\n                    <th>Country</th>\n                    <th>City</th>\n                    <th>Requested Amount</th>\n                    <th>Action</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr *ngFor=\"let c of premiumMembershipRequestedList  | \n                              paginate: { id: 'listing_pagination',\n                              itemsPerPage: 5,\n                              currentPage: page,\n                              totalItems: totalRec }\n                              \">\n                    <td><a href=\"\" class=\"inactiveLink\">{{c.uniqueUserId}}</a></td>\n                    <td>{{c.userName}}</td>\n                    <td>{{c.countryName}}</td>\n                    <td>{{c.cityName}}</td>\n                    <td>{{c.requestedAmount|currency:c.currency}}</td>\n                    <td style=\"width: 5%; padding: 0 2.75rem;\">\n                      <table style=\"width:100%\">\n                        <tr style=\"background-color: unset;\">\n                          <td style=\"padding: unset; width: 10%;border: unset;\">\n                            <button type=\"button\" class=\"btn btn-success\" (click)=\"onAccept(c)\" data-toggle=\"modal\"\n                              data-target=\"#fullHeightModalRight\">Accept</button>\n                          </td>\n                          <td style=\"padding: unset; width: 10%;border: unset;\">\n                            <button type=\"button\" class=\"btn btn-danger\">Reject</button>\n                          </td>\n                        </tr>\n                      </table>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n            <br>\n            <div class=\"d-flex justify-content-between\">\n              <div class=\"wrap\">\n                <pagination-controls id=\"listing_pagination\" maxSize=\"4\" directionLinks=\"true\"\n                  (pageChange)=\"page = $event\">\n                </pagination-controls>\n              </div>\n            </div>\n            <div class=\"button-section\">\n              <button (click)=\"onReqPremiumBack()\" class=\"btn btn-default btn-lg\">Back</button>&nbsp;&nbsp;\n            </div>\n          </div>\n        </div>\n      </section>\n      <br>\n    </div>\n  </div>\n\n  <div class=\"container\" *ngIf=\"iterationName =='Premium_Member'\">\n    <!-- Full Height Modal Right -->\n    <div class=\"modal fade top\" id=\"fullHeightModalRight\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\"\n      aria-hidden=\"true\" data-backdrop=\"false\">\n      <!-- Add class .modal-full-height and then add class .modal-right (or other classes from list above) to set a position to the modal -->\n      <div class=\"modal-dialog modal-full-height modal-top\" role=\"document\">\n        <div class=\"modal-content\">\n          <div\n            class=\"modal-header view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n            <h4 class=\"modal-title w-100 white-text mx-3\" id=\"myModalLabel\">Premimum Member</h4>\n            <button type=\"button\" class=\"close white-text mx-3\" data-dismiss=\"modal\" aria-label=\"Close\"\n              (click)=\"onBack()\">\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <div class=\"modal-body premium\">\n            <form name=\"form\" (ngSubmit)=\"f.form.valid && onConfirm()\" #f=\"ngForm\">\n              <!-- <div class=\"card\"> -->\n              <div class=\"row\">\n                <div class=\"col-6 col-md-2\">\n                  <label class=\"preorderlabel\">Customer Id </label>\n                </div>\n                <div class=\"col-6  col-md-2\">\n                  <label class=\"color\">{{creditLimitManagement.uniqueUserId}}</label>\n                </div>\n                <div class=\"col-6 col-md-2\">\n                  <label class=\"preorderlabel\">User Name </label>\n                </div>\n                <div class=\"col-6 col-md-2\">\n                  <label class=\"color\">{{creditLimitManagement.userName}}</label>\n                </div>\n                <div class=\"col-6 col-md-2\">\n                  <label class=\"preorderlabel\">Requested Amount </label>\n                </div>\n                <div class=\"col-6 col-md-2\">\n                  <label\n                    class=\"color\">{{creditLimitManagement.requestedAmount | currency : creditLimitManagement.currency}}</label>\n                </div>\n              </div>\n              <hr>\n              <div class=\"row\">\n                <div class=\"col-6 col-md-2\">\n                  <label class=\"preorderlabel\">Enter Approve Amount </label>\n                </div>\n                <div class=\"col-6 col-md-2\">\n                  <div class=\"form-group\">\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"creditLimitManagement.approvedAmount\"\n                      placeholder=\"Enter Approve Amount\" name=\"approvedAmount\" #approvedAmount=\"ngModel\"\n                      pattern=\"['0-9',{/^\\d+\\.\\d{2}$/}]*\"\n                      [ngClass]=\"{ 'is-invalid': f.submitted && approvedAmount.invalid }\" required>\n                    <div *ngIf=\"f.submitted && approvedAmount.invalid\" class=\"invalid-feedback\">\n                      <div *ngIf=\"approvedAmount.errors.required\">Please Enter Approve Amount</div>\n                      <div *ngIf=\"approvedAmount.errors.pattern\">Approve Amount should be in Numbers</div>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"col-6 col-md-2\">\n                  <label class=\"preorderlabel\">Enter No. Of Days </label>\n                </div>\n                <div class=\"col-6 col-md-2\">\n                  <div class=\"form-group\">\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"creditLimitManagement.days\" name=\"days\"\n                      placeholder=\"Enter No. Of Days\" #days=\"ngModel\"\n                      [ngClass]=\"{ 'is-invalid': f.submitted && days.invalid }\" pattern=\"[0-9]*\" required>\n                    <div *ngIf=\"f.submitted && days.invalid\" class=\"invalid-feedback\">\n                      <div *ngIf=\"days.errors.required\">Please Enter No. Of Days</div>\n                      <div *ngIf=\"days.errors.pattern\">Alphabets Not Allowed</div>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"col-6 col-md-2\">\n                  <label class=\"preorderlabel\">Rate of Interest(Per Day) % </label>\n                </div>\n                <div class=\"col-6 col-md-2\">\n                  <div class=\"form-group\">\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"creditLimitManagement.rateOfInterest\"\n                      placeholder=\"Enter Rate of Interest(Per Day) %\" name=\"rateOfInterest\" #rateOfInterest=\"ngModel\"\n                      pattern=\"[0-9,{/^\\d+\\.\\d{2}$/}]*\"\n                      [ngClass]=\"{ 'is-invalid': f.submitted && rateOfInterest.invalid }\" required>\n                    <div *ngIf=\"f.submitted && rateOfInterest.invalid\" class=\"invalid-feedback\">\n                      <div *ngIf=\"rateOfInterest.errors.required\">Rate of Interest(Per Day) % required</div>\n                      <div *ngIf=\"rateOfInterest.errors.pattern\">Alphabets Not Allowed</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <hr>\n              <div class=\"row\">\n                <div class=\"col-6 col-md-2\">\n                  <label class=\"preorderlabel\">Processing Charges % </label>\n                </div>\n                <div class=\"col-6 col-md-2\">\n                  <div class=\"form-group\">\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"creditLimitManagement.processingCharges\"\n                      placeholder=\"Enter Processing Charges\" name=\"processingCharges\" #processingCharges=\"ngModel\"\n                      [ngClass]=\"{ 'is-invalid': f.submitted && processingCharges.invalid }\"\n                      pattern=\"[0-9,{/^\\d+\\.\\d{2}$/}]*\" required>\n                    <div *ngIf=\"f.submitted && processingCharges.invalid\" class=\"invalid-feedback\">\n                      <div *ngIf=\"processingCharges.errors.required\">Processing Charges % required</div>\n                      <div *ngIf=\"processingCharges.errors.pattern\">Alphabets Not Allowed</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <hr>\n              <div class=\"button-section\">\n                <button class=\"btn btn-default btn-lg\" data-dismiss=\"modal\" (click)=\"onBack()\">Back</button>\n                <button type=\"submit\" class=\"btn btn-success btn-lg\">Confirm</button>\n              </div>\n              <!-- </div> -->\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- Full Height Modal Right -->\n  </div>\n\n\n  <div *ngIf=\"iterationName =='SHOW_PREMIUM_USER_INFO'\">\n    <!-- Modal -->\n    <div class=\"modal fade\" id=\"exampleModalCenter\" tabindex=\"-1\" role=\"dialog\"\n      aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\" data-backdrop=\"false\">\n      <div class=\"modal-dialog modal-dialog-centered modal-fluid\" role=\"document\">\n        <div class=\"modal-content\">\n          <div\n            class=\"modal-header view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n            <h4 class=\"modal-title w-100 white-text mx-3\" id=\"myModalLabel\">Premium Member Summary</h4>\n            <button type=\"button\" class=\"close white-text mx-3\" data-dismiss=\"modal\" aria-label=\"Close\"\n              (click)=\"onBack1()\">\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <div class=\"modal-body\">\n            <div class=\"row\">\n              <div class=\"col-6 col-md-2 col-sm-3\">\n                <label class=\"preorderlabel\">Customer Id : </label>\n              </div>\n              <div class=\"col-6  col-md-2 col-sm-3\">\n                <label class=\"select\">{{creditLimitManagement.uniqueUserId}}</label>\n              </div>\n              <div class=\"col-6 col-md-2 col-sm-3\">\n                <label class=\"preorderlabel\">User Name :</label>\n              </div>\n              <div class=\"col-6 col-md-2 col-sm-3\">\n                <label class=\"select\">{{creditLimitManagement.userName}}</label>\n              </div>\n              <div class=\"col-6 col-md-2 col-sm-3\">\n                <label class=\"preorderlabel\">Requested Amount : </label>\n              </div>\n              <div class=\"col-6 col-md-2 col-sm-3\">\n                <label\n                  class=\"select\">{{creditLimitManagement.requestedAmount | currency : creditLimitManagement.currency}}</label>\n              </div>\n            </div>\n            <hr class=\"my-0\">\n            <div class=\"row\">\n              <div class=\"col-6 col-md-2 col-sm-3\">\n                <label class=\"preorderlabel\"> Approve Amount : </label>\n              </div>\n              <div class=\"col-6 col-md-2 col-sm-3\">\n                <div class=\"form-group\">\n                  <label class=\"select\">\n                    {{creditLimitManagement.approvedAmount | currency : creditLimitManagement.currency}}</label>\n                </div>\n              </div>\n              <div class=\"col-6 col-md-2 col-sm-3\">\n                <label class=\"preorderlabel\"> No. Of Days : </label>\n              </div>\n              <div class=\"col-6 col-md-2 col-sm-3\">\n                <div class=\"form-group\">\n                  <label class=\"select\">{{creditLimitManagement.days}}</label>\n                </div>\n              </div>\n              <div class=\"col-6 col-md-2 col-sm-3\">\n                <label class=\"preorderlabel\">Rate of Interest(Per Day) % : </label>\n              </div>\n              <div class=\"col-6 col-md-2 col-sm-3\">\n                <div class=\"form-group\">\n                  <label class=\"select\">{{creditLimitManagement.rateOfInterest}}</label>\n                </div>\n              </div>\n            </div>\n            <hr class=\"my-0\">\n            <div class=\"row\">\n              <div class=\"col-6 col-md-2 col-sm-3\">\n                <label class=\"preorderlabel\">Processing Charges % : </label>\n              </div>\n              <div class=\"col-6 col-md-2 col-sm-3\">\n                <div class=\"form-group\">\n                  <label class=\"select\">{{creditLimitManagement.processingCharges}}</label>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"modal-footer\">\n            <button class=\"btn btn-default\" data-dismiss=\"modal\" (click)=\"onBack1()\">Back</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/vendormanagement/vendormanagement.component.html":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/components/vendormanagement/vendormanagement.component.html ***!
  \*******************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n<div class=\"container-fluid register\">\n\t<div class=\"row\">\n\t\t<div class=\"col-md-12\">\n\t\t\t<div *ngIf=\"iteration == 'initial'\">\n\t\t\t\t<div class=\"tab-content\" id=\"myTabContent\">\n\t\t\t\t\t<div class=\"tab-pane fade show active text-align form-new\" id=\"product\" role=\"tabpanel\"\n\t\t\t\t\t\taria-labelledby=\"product-tab\">\n\t\t\t\t\t\t<br>\n\t\t\t\t\t\t<div class=\"card p-2 mb-5\">\n\t\t\t\t\t\t\t<h4 class=\"filter\">Filters</h4>\n\t\t\t\t\t\t\t<div class=\"row v1\">\n\t\t\t\t\t\t\t\t<div class=\"col-md-4\">\n\t\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t<select class=\"form-control\" name=\"region\" [(ngModel)]=\"region\"\n\t\t\t\t\t\t\t\t\t\t\t(ngModelChange)=\"onSelectRegion(region)\">\n\t\t\t\t\t\t\t\t\t\t\t<option [ngValue]=\"r\">Select Region</option>\n\t\t\t\t\t\t\t\t\t\t\t<option *ngFor=\"let r of selectedRegion\" [value]=\"r\">{{r}}</option>\n\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"col-md-4\">\n\t\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t<select class=\"form-control\" name=\"stateId\" [(ngModel)]=\"stateId\"\n\t\t\t\t\t\t\t\t\t\t\t(ngModelChange)=\"onSelectState(stateId)\">\n\t\t\t\t\t\t\t\t\t\t\t<option [ngValue]=\"s\">Select State</option>\n\t\t\t\t\t\t\t\t\t\t\t<option *ngFor=\"let s of selectedStates\" [ngValue]=\"s\">{{s}}</option>\n\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"col-md-4\">\n\t\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t<select class=\"form-control\" name=\"cityId\" [(ngModel)]=\"cityId\"\n\t\t\t\t\t\t\t\t\t\t\t(ngModelChange)=\"onSelectCity(cityId)\">\n\t\t\t\t\t\t\t\t\t\t\t<option [ngValue]=\"c\">Select City</option>\n\t\t\t\t\t\t\t\t\t\t\t<option *ngFor=\"let c of selectedCities\" [value]=\"c\">{{c}}</option>\n\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<section class=\"mb-5\">\n\t\t\t\t\t\t\t<!--Card-->\n\t\t\t\t\t\t\t<div class=\"card card-cascade narrower body-section\">\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclass=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<h4 href=\"\" class=\"white-text mx-3\">Vendor List</h4>\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"card-body\">\n\n\t\t\t\t\t\t\t\t\t<div class=\"table table-responsive  table-striped table-bordered\">\n\t\t\t\t\t\t\t\t\t\t<table class=\"table text-nowrap\">\n\t\t\t\t\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Vendor Id</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Vendor Name</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Country</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Region</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>State</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>City</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Action</th>\n\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t\t\t<tr *ngFor=\"let v of vendors | \n\t\t\t\t\t\t\t\t\t\tpaginate: { id: 'listing_pagination',\n\t\t\t\t\t\t\t\t\t\titemsPerPage: 5,\n\t\t\t\t\t\t\t\t\t\tcurrentPage: page,\n\t\t\t\t\t\t\t\t\t\ttotalItems: totalRec }\n\t\t\t\t\t\t\t\t\t\t\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{{v.organisationRefNo}}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{{v.organisationName}}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{{v.address.country.countryName}}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{{v.address.state.region}}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{{v.address.state.stateName}}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{{v.address.city.cityName}}</td>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td style=\"width: 5%; padding: 0 2.75rem;\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<table style=\"width:100%\" class=\"innertable\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<tr style=\"background-color: unset;\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td style=\"padding: unset; width: 10%; border: unset;\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<img src=\"assets/Edit_icon.png\" width=\"30\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theight=\"25\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"editVendor(v.organisationId)\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>&nbsp;&nbsp;&nbsp;&nbsp;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td style=\"padding: unset; width: 10%; border: unset;\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<img src=\"assets/delete_icon.png\" width=\"30\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theight=\"25\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"openModalWithClass(template)\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ng-template #template>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"modal-header\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h4 class=\"modal-title\">Vendor User</h4>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" class=\"close pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taria-label=\"Close\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"modalRef.hide()\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span aria-hidden=\"true\">×</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"modal-body\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h5>Are You Sure You Want to Delete the\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRecord..?</h5>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"modal-footer\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-default\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"modalRef.hide()\">Cancel</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-danger\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"deleteVendor(v.organisationId)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"modalRef.hide()\">Yes</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ng-template>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<br>\n\t\t\t\t\t\t\t\t\t<div class=\"d-flex justify-content-between\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"wrap\">\n\t\t\t\t\t\t\t\t\t\t\t<pagination-controls id=\"listing_pagination\" maxSize=\"4\"\n\t\t\t\t\t\t\t\t\t\t\t\tdirectionLinks=\"true\" responsive=\"true\" (pageChange)=\"page = $event\">\n\t\t\t\t\t\t\t\t\t\t\t</pagination-controls>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"button-section\">\n\t\t\t\t\t\t\t\t\t\t<button [routerLink]=\"['/dashboard']\"\n\t\t\t\t\t\t\t\t\t\t\tclass=\"btn btn-default btn-lg\">Back</button>\n\t\t\t\t\t\t\t\t\t\t<button (click)=\"addVendor()\" class=\"btn btn-secondary btn-lg\">Add New Vendor\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t<button (click)=\"viewOrderProcessingList()\" class=\"btn btn-success btn-lg\">Delivered Order</button>\n\t\t\t\t\t\t\t\t\t\t<button [routerLink]=\"['/adminVendorpayment']\" class=\"btn btn-yellow btn-lg\">Vendor Payment</button>\n\t\t\t\t\t\t\t\t\t\t<!--<button (click)=\"pendingPayments()\" class=\"btn btn-danger btn-lg\">Peding Vendor Payment</button>-->\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n\n<!-- Add Vendor -->\n\n<div class=\"container-fluid\" style=\"padding-right:42px; padding-left:42px\" *ngIf=\"iteration == 'addVendor'\">\n\t<form name=\"form\" (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\">\n\t\t<div class=\"card\">\n\t\t\t<div class=\"view view-cascade gradient-card-header blue-gradient\">\n\t\t\t\t<!-- Title -->\n\t\t\t\t<h4 class=\"card-header-title mb-3\" style=\"color: white;\">Add Vendor </h4>\n\t\t\t</div>\n\t\t\t<div class=\"card-body vendor\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Vendor Type</label>\n\t\t\t\t\t\t<select class=\"form-control\" name=\"organisationType\" [(ngModel)]=\"vendor.organisationType\"\n\t\t\t\t\t\t\t#organisationType=\"ngModel\"\n\t\t\t\t\t\t\t[ngClass]=\"{ 'is-invalid': f.submitted && organisationType.invalid }\" required>\n\t\t\t\t\t\t\t<option [ngValue]=\"t\">Select Vendor Type</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let t of types\" [ngValue]=\"t.paramId\">{{t.paramName}}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t\t<div *ngIf=\"f.submitted && organisationType.invalid\" class=\"invalid-feedback\">\n\t\t\t\t\t\t\t<div *ngIf=\"organisationType.errors.required\">Vendor Type is required</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Organisation Name</label>\n\t\t\t\t\t\t<input type=\"text\" name=\"organisationName\" class=\"form-control input-vendor\"\n\t\t\t\t\t\t\t[(ngModel)]=\"vendor.organisationName\" placeholder=\"Name *\" value=\"\"\n\t\t\t\t\t\t\t#organisationName=\"ngModel\"\n\t\t\t\t\t\t\t[ngClass]=\"{ 'is-invalid': f.submitted && organisationName.invalid }\" required />\n\t\t\t\t\t\t<div *ngIf=\"f.submitted && organisationName.invalid\" class=\"invalid-feedback\">\n\t\t\t\t\t\t\t<div *ngIf=\"organisationName.errors.required\">Organisation Name is required</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Email</label>\n\t\t\t\t\t\t<input type=\"text\" class=\"form-control input-vendor\" placeholder=\"Your Email *\"\n\t\t\t\t\t\t\tname=\"organisationEmail\" [(ngModel)]=\"vendor.organisationEmail\" value=\"\"\n\t\t\t\t\t\t\tpattern=\"^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$\" #organisationEmail=\"ngModel\"\n\t\t\t\t\t\t\t[ngClass]=\"{ 'is-invalid': f.submitted && organisationEmail.invalid }\" required />\n\t\t\t\t\t\t<div *ngIf=\"f.submitted && organisationEmail.invalid\" class=\"invalid-feedback\">\n\t\t\t\t\t\t\t<div *ngIf=\"organisationEmail.errors.required\">Email Id is required</div>\n\t\t\t\t\t\t\t<div *ngIf=\"organisationEmail.errors.pattern\">Enter Valid Email Id</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"row\" id=\"vendorrow\">\n\t\t\t\t\t<div class=\"col-sm-12\"><label>Address</label></div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<input type=\"text\" name=\"addressLine1\" class=\"form-control input-vendor\" #addressLine1=\"ngModel\"\n\t\t\t\t\t\t\t[(ngModel)]=\"address.addressLine1\" placeholder=\"Address Line 1*\" value=\"\"\n\t\t\t\t\t\t\t[ngClass]=\"{'is-invalid': f.submitted && addressLine1.invalid}\" required />\n\t\t\t\t\t\t<div *ngIf=\"f.submitted && addressLine1.invalid\" class=\"invalid-feedback\">\n\t\t\t\t\t\t\t<div *ngIf=\"addressLine1.errors.required\">Address is required</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<input type=\"text\" name=\"addressLine2\" class=\"form-control input-vendor\" #addressLine2=\"ngModel\"\n\t\t\t\t\t\t\t[(ngModel)]=\"address.addressLine2\" placeholder=\"Address Line 2*\" value=\"\"\n\t\t\t\t\t\t\t[ngClass]=\"{'is-invalid': f.submitted && addressLine2.invalid}\" required />\n\t\t\t\t\t\t<div *ngIf=\"f.submitted && addressLine2.invalid\" class=\"invalid-feedback\">\n\t\t\t\t\t\t\t<div *ngIf=\"addressLine2.errors.required\">Address is required</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<input type=\"text\" name=\"addressLine3\" class=\"form-control input-vendor\"\n\t\t\t\t\t\t\t[(ngModel)]=\"address.addressLine3\" placeholder=\"Address Line 3*\" value=\"\"\n\t\t\t\t\t\t\t#addressLine3=\"ngModel\" [ngClass]=\"{'is-invalid': f.submitted && addressLine3.invalid}\"\n\t\t\t\t\t\t\trequired />\n\t\t\t\t\t\t<div *ngIf=\"f.submitted && addressLine3.invalid\" class=\"invalid-feedback\">\n\t\t\t\t\t\t\t<div *ngIf=\"addressLine3.errors.required\">Address is required</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row\" id=\"vendorrow\">\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Country</label>\n\t\t\t\t\t\t<select class=\"form-control\" name=\"countryId\" [(ngModel)]=\"address.countryId\"\n\t\t\t\t\t\t\t(change)=\"onChangeCountry()\" #countryId=\"ngModel\" #countryId=\"ngModel\"\n\t\t\t\t\t\t\t[ngClass]=\"{ 'is-invalid': f.submitted && countryId.invalid }\" required>\n\t\t\t\t\t\t\t<option [ngValue]=\"null\">Select Country</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let c of countries\" [ngValue]=\"c.countryId\">\n\t\t\t\t\t\t\t\t{{c.countryName}}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t\t<div *ngIf=\"f.submitted && countryId.invalid\" class=\"invalid-feedback\">\n\t\t\t\t\t\t\t<div *ngIf=\"countryId.errors.required\">Country is required</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>State</label>\n\t\t\t\t\t\t<select class=\"form-control\" name=\"stateId\" [(ngModel)]=\"address.stateId\"\n\t\t\t\t\t\t\t(change)=\"onChangeState()\" #stateId=\"ngModel\" #stateId=\"ngModel\"\n\t\t\t\t\t\t\t[ngClass]=\"{ 'is-invalid': f.submitted && stateId.invalid }\" required>\n\t\t\t\t\t\t\t<option [ngValue]=\"null\">Select state</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let s of states\" [value]=\"s.stateId\">{{s.stateName}}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t\t<div *ngIf=\"f.submitted && stateId.invalid\" class=\"invalid-feedback\">\n\t\t\t\t\t\t\t<div *ngIf=\"stateId.errors.required\">State is required</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>City</label>\n\t\t\t\t\t\t<select class=\"form-control\" name=\"cityId\" [(ngModel)]=\"address.cityId\" #cityId=\"ngModel\"\n\t\t\t\t\t\t\t#cityId=\"ngModel\" [ngClass]=\"{ 'is-invalid': f.submitted && cityId.invalid }\" required>\n\t\t\t\t\t\t\t<option [ngValue]=\"null\">Select City</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let s of cities\" [value]=\"s.cityId\">{{s.cityName}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t\t<div *ngIf=\"f.submitted && cityId.invalid\" class=\"invalid-feedback\">\n\t\t\t\t\t\t\t<div *ngIf=\"cityId.errors.required\">City is required</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row\" id=\"vendorrow\">\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Region</label>\n\t\t\t\t\t\t<input type=\"text\" name=\"region\" class=\"form-control input-vendor\" [(ngModel)]=\"address.region\"\n\t\t\t\t\t\t\tplaceholder=\"Region*\" value=\"\" #region=\"ngModel\" #region=\"ngModel\"\n\t\t\t\t\t\t\t[ngClass]=\"{ 'is-invalid': f.submitted && region.invalid }\" required />\n\t\t\t\t\t\t<div *ngIf=\"f.submitted && region.invalid\" class=\"invalid-feedback\">\n\t\t\t\t\t\t\t<div *ngIf=\"region.errors.required\">Region is required</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Contact Person </label>\n\t\t\t\t\t\t<input type=\"text\" name=\"contactPersonName\" class=\"form-control input-vendor\"\n\t\t\t\t\t\t\t[(ngModel)]=\"vendor.contactPersonName\" placeholder=\"Contact Person Name *\" value=\"\"\n\t\t\t\t\t\t\t#contactPersonName=\"ngModel\" #contactPersonName=\"ngModel\"\n\t\t\t\t\t\t\t[ngClass]=\"{ 'is-invalid': f.submitted && contactPersonName.invalid }\" required />\n\t\t\t\t\t\t<div *ngIf=\"f.submitted && contactPersonName.invalid\" class=\"invalid-feedback\">\n\t\t\t\t\t\t\t<div *ngIf=\"contactPersonName.errors.required\">Contact Person is required</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Mobile Number</label>\n\t\t\t\t\t\t<input type=\"text\" name=\"contactNumber\" class=\"form-control input-vendor\"\n\t\t\t\t\t\t\t[(ngModel)]=\"vendor.contactNumber\" placeholder=\"Mobile Number *\" value=\"\" pattern=\"[0-9]*\"\n\t\t\t\t\t\t\tminlength=\"10\" maxlength=\"10\"  #contactNumber=\"ngModel\"\n\t\t\t\t\t\t\t#contactNumber=\"ngModel\" [ngClass]=\"{ 'is-invalid': f.submitted && contactNumber.invalid }\" required/>\n\t\t\t\t\t\t<div *ngIf=\"f.submitted && contactNumber.invalid\" class=\"invalid-feedback\">\n\t\t\t\t\t\t\t<div *ngIf=\"contactNumber.errors.required\">Mobile Number is required</div>\n\t\t\t\t\t\t\t<div *ngIf=\"contactNumber.errors.pattern\">Enter Valid Mobile Number</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br>\n\t\t\t\t<div class=\"row\" style=\"float: right;\">\n\t\t\t\t\t<button (click)=\"onBackClick()\" type=\"button\" class=\"btn btn-default btn-lg\">Back</button>\n\t\t\t\t\t<button class=\"btn btn-success btn-lg\" (click)=\"onSubmit()\">Save</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</form>\n</div>\n\n<!-- Edit Vendor -->\n<div class=\"container-fluid\" style=\"padding-right:42px; padding-left:42px\" *ngIf=\"iteration == 'editVendor'\">\n\t<form class=\"form\" (ngSubmit)=\"onSubmit()\">\n\t\t<div class=\"card\">\n\t\t\t<div class=\"view view-cascade gradient-card-header blue-gradient\">\n\t\t\t\t<!-- Title -->\n\t\t\t\t<h4 class=\"card-header-title mb-3\" style=\"color: white;\">Update Vendor</h4>\n\t\t\t</div>\n\t\t\t<div class=\"card-body vendor\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Vendor Type</label>\n\t\t\t\t\t\t<select disabled class=\"form-control\" name=\"organisationType\"\n\t\t\t\t\t\t\t[(ngModel)]=\"vendor1.organisationType\">\n\t\t\t\t\t\t\t<option>Select Vendor Type</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let t of types\" [ngValue]=\"t.paramId\">{{t.paramName}}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Organisation Name</label>\n\t\t\t\t\t\t<input type=\"text\" name=\"organisationName\" class=\"form-control input-vendor\"\n\t\t\t\t\t\t\t#organisationName=\"ngModel\" [(ngModel)]=\"vendor1.organisationName\" placeholder=\"Name *\"\n\t\t\t\t\t\t\tvalue=\"\" required=\"\" />\n\t\t\t\t\t\t<div *ngIf=\"organisationName.invalid && (organisationName.dirty || organisationName.touched)\"\n\t\t\t\t\t\t\tclass=\"alert alert-danger\">\n\t\t\t\t\t\t\t<div *ngIf=\"organisationName.errors.required\">\n\t\t\t\t\t\t\t\tOrganisation Name is Required.\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Email</label>\n\t\t\t\t\t\t<input type=\"text\" class=\"form-control input-vendor\" placeholder=\"Your Email *\"\n\t\t\t\t\t\t\tname=\"organisationEmail\" [(ngModel)]=\"vendor1.organisationEmail\" value=\"\"\n\t\t\t\t\t\t\tpattern=\"^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$\" #organisationEmail=\"ngModel\"\n\t\t\t\t\t\t\trequired />\n\t\t\t\t\t\t<div *ngIf=\"organisationEmail.invalid && (organisationEmail.dirty || organisationEmail.touched)\"\n\t\t\t\t\t\t\tclass=\"alert alert-danger\">\n\t\t\t\t\t\t\t<div *ngIf=\"organisationEmail.hasError('required')\">Email is required</div>\n\t\t\t\t\t\t\t<div *ngIf=\"organisationEmail.hasError('pattern')\">Email format should be\n\t\t\t\t\t\t\t\t<b>singapore@sipl.com</b>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"row\" id=\"vendorrow\">\n\t\t\t\t\t<div class=\"col-sm-12\"><label>Address</label></div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<input type=\"text\" name=\"addressLine1\" class=\"form-control input-vendor\"\n\t\t\t\t\t\t\t[(ngModel)]=\"address1.addressLine1\" placeholder=\"Address Line 1*\" value=\"\"\n\t\t\t\t\t\t\t#addressLine1=\"ngModel\" required />\n\t\t\t\t\t\t<div *ngIf=\"addressLine1.invalid && (addressLine1.dirty || addressLine1.touched)\"\n\t\t\t\t\t\t\tclass=\"alert alert-danger\">\n\t\t\t\t\t\t\t<div *ngIf=\"addressLine1.errors.required\">\n\t\t\t\t\t\t\t\tAddress Line 1 Required.\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<input type=\"text\" name=\"addressLine2\" class=\"form-control input-vendor input-vendor\"\n\t\t\t\t\t\t\t[(ngModel)]=\"address1.addressLine2\" placeholder=\"Address Line 2*\" value=\"\"\n\t\t\t\t\t\t\t#addressLine2=\"ngModel\" required />\n\t\t\t\t\t\t<div *ngIf=\"addressLine2.invalid && (addressLine2.dirty || addressLine2.touched)\"\n\t\t\t\t\t\t\tclass=\"alert alert-danger\">\n\t\t\t\t\t\t\t<div *ngIf=\"addressLine2.errors.required\">\n\t\t\t\t\t\t\t\tAddress Line 2 Required.\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<input type=\"text\" name=\"addressLine3\" class=\"form-control input-vendor\" #addressLine3=\"ngModel\"\n\t\t\t\t\t\t\t[(ngModel)]=\"address1.addressLine3\" placeholder=\"Address Line 3*\" value=\"\" required />\n\t\t\t\t\t\t<div *ngIf=\"addressLine3.invalid && (addressLine3.dirty || addressLine3.touched)\"\n\t\t\t\t\t\t\tclass=\"alert alert-danger\">\n\t\t\t\t\t\t\t<div *ngIf=\"addressLine3.errors.required\">\n\t\t\t\t\t\t\t\tAddress Line 3 Required.\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row\" id=\"vendorrow\">\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Country</label>\n\t\t\t\t\t\t<select disabled class=\"form-control\" name=\"countryId\" [(ngModel)]=\"address1.countryId\"\n\t\t\t\t\t\t\t(change)=\"onChangeCountry()\">\n\t\t\t\t\t\t\t<option>Select Country</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let c of countries\" [ngValue]=\"c.countryId\">\n\t\t\t\t\t\t\t\t{{c.countryName}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>State</label>\n\t\t\t\t\t\t<select select class=\"form-control\" name=\"stateId\" [(ngModel)]=\"address1.stateId\"\n\t\t\t\t\t\t\t(change)=\"onChangeState()\">\n\t\t\t\t\t\t\t<option *ngFor=\"let s of states\" [value]=\"s.stateId\">{{s.stateName}}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>City</label>\n\t\t\t\t\t\t<select select class=\"form-control\" name=\"cityId\" [(ngModel)]=\"address1.cityId\">\n\t\t\t\t\t\t\t<option *ngFor=\"let s of cities\" [value]=\"s.cityId\">{{s.cityName}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row\" id=\"vendorrow\">\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Region</label>\n\t\t\t\t\t\t<input type=\"text\" name=\"region\" class=\"form-control input-vendor\" [(ngModel)]=\"address1.region\"\n\t\t\t\t\t\t\tplaceholder=\"Region*\" value=\"\" #region=\"ngModel\" required />\n\t\t\t\t\t\t<div *ngIf=\"region.invalid && (region.dirty || region.touched)\" class=\"alert alert-danger\">\n\n\t\t\t\t\t\t\t<div *ngIf=\"region.errors.required\">\n\t\t\t\t\t\t\t\tRegion Required.\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Contact Person Name</label>\n\t\t\t\t\t\t<input type=\"text\" name=\"contactPersonName\" class=\"form-control input-vendor\"\n\t\t\t\t\t\t\t[(ngModel)]=\"vendor1.contactPersonName\" placeholder=\"Contact Person Name *\" value=\"\"\n\t\t\t\t\t\t\t#contactPersonName=\"ngModel\" required />\n\t\t\t\t\t\t<div *ngIf=\"contactPersonName.invalid && (contactPersonName.dirty || contactPersonName.touched)\"\n\t\t\t\t\t\t\tclass=\"alert alert-danger\">\n\t\t\t\t\t\t\t<div *ngIf=\"contactPersonName.errors.required\">\n\t\t\t\t\t\t\t\tContact Person Name is Required.\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Mobile Number</label>\n\t\t\t\t\t\t<input type=\"text\" name=\"contactNumber\" class=\"form-control input-vendor\"\n\t\t\t\t\t\t\t[(ngModel)]=\"vendor1.contactNumber\" placeholder=\"Mobile Number *\" value=\"\"\n\t\t\t\t\t\t\t#contactNumber=\"ngModel\" pattern=\"[0-9]*\" minlength=\"10\" maxlength=\"10\" required />\n\t\t\t\t\t\t<div *ngIf=\"contactNumber.invalid && (contactNumber.dirty || contactNumber.touched)\"\n\t\t\t\t\t\t\tclass=\"alert alert-danger\">\n\t\t\t\t\t\t\t<div *ngIf=\"contactNumber.errors.required\">\n\t\t\t\t\t\t\t\tMobile number is Required.\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div *ngIf=\"contactNumber.hasError('minlength')\">Mobile should be 10 Digit\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div *ngIf=\"contactNumber.hasError('pattern')\">Mobile number should be only\n\t\t\t\t\t\t\t\tnumbers\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br>\n\t\t\t\t<div class=\"row\" style=\"float: right;\">\n\t\t\t\t\t<button (click)=\"onBackClick()\" class=\"btn btn-default btn-lg\" value=\"Login\">Back</button>\n\t\t\t\t\t<button class=\"btn btn-success btn-lg\" type=\"submit\" value=\"Submit\">Update</button>\n\t\t\t\t\t<button type=\"button\" class=\"btn btn-secondary btn-lg\" (click)=\"bankAccount()\" *ngIf=\"vendorType=='INTERNAL VENDOR'\">Bank Account</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</form>\n</div>\n\n<div class=\"container-fluid orderprocess\" *ngIf=\"iteration=='viewOrderProcessingList'\">\n\t<div class=\"card p-2 mb-5\">\n\t\t<div class=\"row v1\">\n\t\t\t<div class=\"col-md-2\">\n\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t<select class=\"form-control\" [(ngModel)]=\"userType\" name=\"#userType\"\n\t\t\t\t\t\t(ngModelChange)=\"onUserType(selected)\">\n\t\t\t\t\t\t<option [ngValue]=\"null\" selected=\"selected\">Select User Type</option>\n\t\t\t\t\t\t<option *ngFor=\"let c of corporateList\" [value]=\"c\">{{c}}</option>\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-lg-2\">\n\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t<select class=\"form-control\" name=\"vendorName\" [(ngModel)]=\"vendorName\" (change)=\"onVendor()\">\n\t\t\t\t\t\t<option [ngValue]=\"null\">Select Vendor</option>\n\t\t\t\t\t\t<option *ngFor=\"let p of selectedVendor\" [ngValue]=\"p\">{{p}}</option>\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-lg-2\">\n\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t<select class=\"form-control\" name=\"warehouseName\" [(ngModel)]=\"warehouseName\"\n\t\t\t\t\t\t(change)=\"onWarehouse()\">\n\t\t\t\t\t\t<option [ngValue]=\"null\">Select Warehouse</option>\n\t\t\t\t\t\t<option *ngFor=\"let p of selectedWarehouse\" [ngValue]=\"p\">{{p}}</option>\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-lg-2\">\n\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t<select class=\"form-control\" name=\"productName\" [(ngModel)]=\"productName\" (change)=\"onProduct()\">\n\t\t\t\t\t\t<option [ngValue]=\"null\">Select Product</option>\n\t\t\t\t\t\t<option *ngFor=\"let p of selectedProduct\" [ngValue]=\"p\">{{p}}</option>\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-2\">\n\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t<select class=\"form-control\" [(ngModel)]=\"range\" name=\"#range\" (ngModelChange)=\"onSelect(selected)\">\n\t\t\t\t\t\t<option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n\t\t\t\t\t\t<option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-2\" *ngIf=\"customDate==true\">\n\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t<input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" [(ngModel)]=\"date\" placeholder=\"From\"\n\t\t\t\t\t\tclass=\"form-control input-vendor\" (ngModelChange)=\"onDateChange($event)\">\n\t\t\t\t\t<owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-2\" *ngIf=\"customDate==true\">\n\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t<input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" [(ngModel)]=\"date1\" placeholder=\"To\"\n\t\t\t\t\t\tclass=\"form-control input-vendor\" (ngModelChange)=\"onDateChange($event)\">\n\t\t\t\t\t<owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<section class=\"mb-5\">\n\t\t<!--Card-->\n\t\t<div class=\"card card-cascade narrower body-section\">\n\t\t\t<div\n\t\t\t\tclass=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n\t\t\t\t<div>\n\t\t\t\t</div>\n\t\t\t\t<h4 href=\"\" class=\"white-text mx-3\">Delivered Order List</h4>\n\t\t\t\t<div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"card-body\">\n\t\t\t\t<div class=\"table table-responsive table-striped table-bordered\">\n\t\t\t\t\t<table class=\"table text-nowrap\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>Processed Id</th>\n\t\t\t\t\t\t\t\t<th>Order Ref Number</th>\n\t\t\t\t\t\t\t\t<th>Vandor Name</th>\n\t\t\t\t\t\t\t\t<th>Warehouse Name</th>\n\t\t\t\t\t\t\t\t<th>Product Name</th>\n\t\t\t\t\t\t\t\t<th>Equipment Name</th>\n\t\t\t\t\t\t\t\t<th>Order Delivery Date</th>\n\t\t\t\t\t\t\t\t<th>Quantity</th>\n\t\t\t\t\t\t\t\t<th>Total Value</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t<tr *ngFor=\"let o of orderProcessingList  |\n\t\t\t\t\t\t\t\t\tpaginate: { id: 'listing_pagination',\n\t\t\t\t\t\t\t\t\titemsPerPage: 5,\n\t\t\t\t\t\t\t\t\tcurrentPage: page,\n\t\t\t\t\t\t\t\t\ttotalItems: totalRec }\n\t\t\t\t\t\t\t\t\t\">\n\t\t\t\t\t\t\t\t<td>{{o.processingId}}</td>\n\t\t\t\t\t\t\t\t<td>{{o.orderManagement.orderRefNumber}}</td>\n\t\t\t\t\t\t\t\t<td>{{o.validateThrough.warehouse.masterOrganisation.organisationName}}</td>\n\t\t\t\t\t\t\t\t<td>{{o.validateThrough.warehouse.warehouseName}}</td>\n\t\t\t\t\t\t\t\t<td>{{o.orderManagement.masterProducts.productName}}</td>\n\t\t\t\t\t\t\t\t<td>{{o.orderManagement.equipment.equipmentName}}</td>\n\t\t\t\t\t\t\t\t<td>{{o.orderDeliveredDate | date}}</td>\n\t\t\t\t\t\t\t\t<td>{{o.orderManagement.totalQuantity}} {{o.productUnit}}</td>\n\t\t\t\t\t\t\t\t<td>{{o.total | currency : o.currency}}</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t\t<br>\n\t\t\t\t<div class=\"d-flex justify-content-between\">\n\t\t\t\t\t<div class=\"wrap\">\n\t\t\t\t\t\t<pagination-controls id=\"listing_pagination\" maxSize=\"4\" directionLinks=\"true\"\n\t\t\t\t\t\t\t(pageChange)=\"page = $event\">\n\t\t\t\t\t\t</pagination-controls>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"button-section\">\n\t\t\t\t\t<button (click)=\"onBackClick()\" class=\"btn btn-default btn-lg\" value=\"Login\">Back</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</section>\n</div>\n\n<!-- Vendor Bank Account setting -->\n<div class=\"container\" *ngIf=\"iteration=='BANK_ACCOUNT'\">\n\t<div class=\"row\">\n\t  <div class=\"col-md-2\"></div>\n\t  <div class=\"col-md-8\">\n\t\t<div class=\"card card-cascade none\">\n\t\t  <h5 class=\"card-header gradient-card-header blue-gradient white-text text-center py-4\">\n\t\t\t<strong>Bank details for Payment</strong>\n\t\t  </h5><br>\n\t\t  <form>\n\t\t\t<div class=\"form-group row\">\n\t\t\t  <label class=\"col-sm-3 col-form-label\">Account Name</label>\n\t\t\t  <div class=\"col-sm-7\">\n\t\t\t\t<input type=\"text\" class=\"form-control\" [(ngModel)]=\"bankaccount.accountHolderName\" #accountHolderName=\"ngModel\" placeholder=\"Account Name\" [ngModelOptions]=\"{standalone: true}\">\n\t\t\t  </div>\n\t\t\t</div>\n\t\t\t<div class=\"form-group row\">\n\t\t\t  <label class=\"col-sm-3 col-form-label\">Bank</label>\n\t\t\t  <div class=\"col-sm-7\">\n\t\t\t\t<input type=\"text\" class=\"form-control\" [(ngModel)]=\"bankaccount.bankName\" placeholder=\"Enter Bank\" [ngModelOptions]=\"{standalone: true}\">\n\t\t\t  </div>\n\t\t\t</div>\n\t\t\t<div class=\"form-group row\">\n\t\t\t  <label class=\"col-sm-3 col-form-label\">Branch</label>\n\t\t\t  <div class=\"col-sm-7\">\n\t\t\t\t<input type=\"text\" class=\"form-control\" [(ngModel)]=\"bankaccount.branchName\" placeholder=\"Enter Branch\" [ngModelOptions]=\"{standalone: true}\">\n\t\t\t  </div>\n\t\t\t</div>\n\t\t\t<div class=\"form-group row\">\n\t\t\t  <label class=\"col-sm-3 col-form-label\">Account Number</label>\n\t\t\t  <div class=\"col-sm-7\">\n\t\t\t\t<input type=\"text\" class=\"form-control\" [(ngModel)]=\"bankaccount.accountNumber\" placeholder=\"Enter Account Number\" [ngModelOptions]=\"{standalone: true}\">\n\t\t\t  </div>\n\t\t\t</div>\n\t\t\t<div class=\"form-group row\">\n\t\t\t  <label class=\"col-sm-3 col-form-label\">IFSC Code</label>\n\t\t\t  <div class=\"col-sm-7\">\n\t\t\t\t<input type=\"text\" class=\"form-control\" [(ngModel)]=\"bankaccount.ifscCode\" placeholder=\"Enter  IFSC Code\" [ngModelOptions]=\"{standalone: true}\">\n\t\t\t  </div>\n\t\t\t</div>\n\t\t\t<div class=\"form-group row\">\n\t\t\t  <label class=\"col-sm-3 col-form-label\"></label>\n\t\t\t  <div class=\"col-sm-7\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t  <div class=\"col-sm-6\">\n\t\t\t\t\t<button class=\"btn btn-default btn-block btn-lg\" (click)=\"onBackFromAccount()\">Back</button>\n  \n\t\t\t\t  </div>\n\t\t\t\t  <div class=\"col-sm-6\">\n\t\t\t\t\t<button class=\"btn btn-success btn-block btn-lg\" (click)=\"onBankSubmit()\">Submit</button>\n\t\t\t\t  </div>\n\t\t\t\t</div>\n\t\t\t  </div>\n\t\t\t</div>\n\t\t  </form>\n\t\t</div>\n\t  </div>\n\t  <div class=\"col-md-2\"></div>\n\t</div>\n  </div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/vendorreward/vendorreward.component.html":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/components/vendorreward/vendorreward.component.html ***!
  \***********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n\n\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/viewallactivealerts/viewallactivealerts.component.html":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/components/viewallactivealerts/viewallactivealerts.component.html ***!
  \*************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n\n<div class=\"container-fluid register\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div class=\"tab-content\" id=\"myTabContent\">\n        <div class=\"tab-pane fade show active text-align form-new\" id=\"home\" role=\"tabpanel\" aria-labelledby=\"home-tab\">\n          <section class=\"mb-5\">\n            <!--Card-->\n            <div class=\"card card-cascade narrower body-section\">\n              <div\n                class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n                <div>\n                </div>\n                <h4 href=\"\" class=\"white-text mx-3\">All Active Alerts</h4>\n                <div>\n                </div>\n              </div>\n              <div class=\"card-body\">\n                <div class=\"table table-responsive table-striped table-bordered\">\n                  <table class=\"table text-nowrap\">\n                    <thead>\n                      <tr>\n                        <th>Alert Name</th>\n                        <th>Alert Event</th>\n                        <th>Role</th>\n                        <th>Send Via</th>\n                        <th>Remarks</th>\n                        <th>Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr *ngFor=\"let a of alerts  | \n                            paginate: { id: 'listing_pagination',\n                            itemsPerPage: 5,\n                            currentPage: page,\n                            totalItems: totalRec }\n                            \">\n                        <td>{{a.alertName}}</td>\n                        <td>{{a.alertEvents.eventName}}</td>\n                        <td>{{a.role.roleDesc}}</td>\n                        <td>{{a.sendVia}}</td>\n                        <td>{{a.remarks}}</td>\n                        <td style=\"width: 5%; padding: 0 2.75rem;\">\n                          <table style=\"width:100%\" class=\"innertable\">\n                            <tr style=\"background-color: unset;\">\n                              <td style=\"padding: unset; width: 10%;border: unset;\" >\n                                <img src=\"assets/Edit_icon.png\" width=\"30\" height=\"25\" (click)=\"onEdit(a)\" />\n                              </td>&nbsp;&nbsp;\n                              <td style=\"padding: unset; width: 10%;border: unset;\" >\n                                <img src=\"assets/delete_icon.png\" width=\"30\" height=\"25\"\n                                  (click)=\"openModalWithClass(template)\" />\n                              </td>\n                              <ng-template #template>\n                                <div class=\"modal-header\">\n                                  <h4 class=\"modal-title\">All Active Alert </h4>\n                                  <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\"\n                                    (click)=\"modalRef.hide()\">\n                                    <span aria-hidden=\"true\">×</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                  <h5>Are You Sure You Want to Delete the Record..?</h5>\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-default\"\n                                    (click)=\"modalRef.hide()\">Cancel</button>\n                                  <button type=\"button\" class=\"btn btn-danger\" (click)=\"deleteAlert(a.alertManId)\"\n                                    (click)=\"modalRef.hide()\">Yes</button>\n                                </div>\n                              </ng-template>\n                            </tr>\n                          </table>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                <br>\n                <div class=\"d-flex justify-content-between\">\n                  <div class=\"wrap\">\n                    <pagination-controls id=\"listing_pagination\" maxSize=\"4\" directionLinks=\"true\"\n                      (pageChange)=\"page = $event\">\n                    </pagination-controls>\n                  </div>\n                </div>\n                <div class=\"button-section\">\n                  <button [routerLink]=\"['/alert']\" class=\"btn btn-default btn-lg\">Back</button>&nbsp;\n                  <button [routerLink]=\"['/dashboard']\" class=\"btn btn-primary btn-lg\">Dashboard</button>&nbsp;\n                  <button [routerLink]=\"['/genAlert']\" class=\"btn btn-secondary btn-lg\">Create New Alert</button>&nbsp;&nbsp;\n                  <button [routerLink]=\"['/showEventsList']\" class=\"btn btn-primary btn-lg\">Event\n                    Management</button>&nbsp;&nbsp;\n                </div>\n              </div>\n            </div>\n          </section>\n        </div>\n      </div>\n    </div>\n  </div>\n\n</div>\n<div>\n  <br><br>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/viewgeneratedalerts/viewgeneratedalerts.component.html":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/components/viewgeneratedalerts/viewgeneratedalerts.component.html ***!
  \*************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n<div class=\"container\">\n    <h3 style=\"text-align: center;\">Alert Management</h3><br>\n    <div class=\"row\">\n        <div class=\"col-6 col-md-6\">\n            <!-- Card -->\n            <div class=\"card card-cascade\" [routerLink]=\"['/viewAllAlerts']\">\n                <!-- Card image -->\n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                    <!-- Title -->\n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Show Active Alerts</h4>\n                </div>\n                <!-- Card content -->\n                <div class=\"card-body card-body-cascade text-center \">\n                    <i class=\"fa fa-list\" style=\"font-size:88px;color:#2365f9\"></i>\n\n                </div>\n            </div>\n            <!-- Card -->\n        </div>\n        <div class=\"col-6 col-md-6\">\n            <!-- Card -->\n            <div class=\"card card-cascade\" [routerLink]=\"['/genAlert']\">\n                <!-- Card image -->\n                <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                    <!-- Title -->\n                    <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Create New Alert</h4>\n                </div>\n                <!-- Card content -->\n                <div class=\"card-body card-body-cascade text-center \">\n                    <i class=\"fa fa-plus-circle\" style=\"font-size:88px;color:#2b5f31\"></i>\n                </div>\n            </div>\n            <!-- Card -->\n        </div>\n    </div>\n    <br>\n    <div class=\"button-section\">\n        <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n        <button [routerLink]=\"['/dashboard']\" class=\"btn btn-primary btn-lg\">Dashboard</button>\n    </div>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/warehousemanagement/warehousemanagement.component.html":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/components/warehousemanagement/warehousemanagement.component.html ***!
  \*************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n<div class=\"container-fluid register\">\n\t<div class=\"row\">\n\t\t<div class=\"col-md-12\">\n\t\t\t<div *ngIf=\"iteration == 'initial'\">\n\t\t\t\t<div class=\"tab-content\" id=\"myTabContent\">\n\t\t\t\t\t<div class=\"tab-pane fade show active text-align form-new\" id=\"product\" role=\"tabpanel\"\n\t\t\t\t\t\taria-labelledby=\"product-tab\">\n\t\t\t\t\t\t<br>\n\t\t\t\t\t\t<div class=\"card p-2 mb-5\">\n\t\t\t\t\t\t\t<h4 class=\"filter\">Filters</h4>\n\t\t\t\t\t\t\t<div class=\"row v1\">\n\t\t\t\t\t\t\t\t<div class=\"col-lg-1\"></div>\n\t\t\t\t\t\t\t\t<div class=\"col-lg-2\">\n\t\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t<select class=\"form-control\" name=\"vendor\" [(ngModel)]=\"vendor\"\n\t\t\t\t\t\t\t\t\t\t\t(ngModelChange)=\"onVendorSelect()\">\n\t\t\t\t\t\t\t\t\t\t\t<option [ngValue]=\"v\">Select Vendor</option>\n\t\t\t\t\t\t\t\t\t\t\t<option *ngFor=\"let v of selectedVendors\" [value]=\"v\">{{v}}</option>\n\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"col-lg-2\">\n\t\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t<select class=\"form-control\" name=\"product\" [(ngModel)]=\"product\"\n\t\t\t\t\t\t\t\t\t\t\t(ngModelChange)=\"onVendorSelect()\">\n\t\t\t\t\t\t\t\t\t\t\t<option [ngValue]=\"p\">Select Product</option>\n\t\t\t\t\t\t\t\t\t\t\t<option *ngFor=\"let p of selectedProducts\" [value]=\"p\">{{p}}</option>\n\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"col-lg-2\">\n\t\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t<select class=\"form-control\" name=\"region\" [(ngModel)]=\"region\"\n\t\t\t\t\t\t\t\t\t\t\t(ngModelChange)=\"onVendorSelect()\">\n\t\t\t\t\t\t\t\t\t\t\t<option [ngValue]=\"r\">Select Region</option>\n\t\t\t\t\t\t\t\t\t\t\t<option *ngFor=\"let r of selectedRegion\" [value]=\"r\">{{r}}</option>\n\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"col-lg-2\">\n\t\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t<select class=\"form-control\" name=\"stateId\" [(ngModel)]=\"stateId\"\n\t\t\t\t\t\t\t\t\t\t\t(ngModelChange)=\"onVendorSelect()\">\n\t\t\t\t\t\t\t\t\t\t\t<option [ngValue]=\"s\">Select State</option>\n\t\t\t\t\t\t\t\t\t\t\t<option *ngFor=\"let s of selectedStates\" [value]=\"s\">{{s}}</option>\n\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"col-lg-2\">\n\t\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t<select class=\"form-control\" name=\"cityId\" [(ngModel)]=\"cityId\"\n\t\t\t\t\t\t\t\t\t\t\t(ngModelChange)=\"onVendorSelect()\">\n\t\t\t\t\t\t\t\t\t\t\t<option [ngValue]=\"c\">Select City</option>\n\t\t\t\t\t\t\t\t\t\t\t<option *ngFor=\"let c of selectedCities\" [value]=\"c\">{{c}}</option>\n\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"col-lg-1\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<section class=\"mb-5\">\n\t\t\t\t\t\t\t<!--Card-->\n\t\t\t\t\t\t\t<div class=\"card card-cascade narrower body-section\">\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclass=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<h4 href=\"\" class=\"white-text mx-3\">Warehouse Managment </h4>\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"card-body\">\n\t\t\t\t\t\t\t\t\t<div class=\"table table-responsive table-striped table-bordered\">\n\t\t\t\t\t\t\t\t\t\t<table class=\"table text-nowrap\">\n\t\t\t\t\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Warehouse Name</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Vendor Name</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Products</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Contact Person</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Contact Number</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Country</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Region</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>State</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>City</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Action</th>\n\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t\t\t<tr *ngFor=\"let w of warehouses  |\n\t\t\t\t\t\t\t\t\t\t\t\tpaginate: { id: 'listing_pagination',\n\t\t\t\t\t\t\t\t\t\t\t\titemsPerPage: 5,\n\t\t\t\t\t\t\t\t\t\t\t\tcurrentPage: page,\n\t\t\t\t\t\t\t\t\t\t\t\ttotalItems: totalRec }\n\t\t\t\t\t\t\t\t\t\t\t\t\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{{w.warehouseName}}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{{w.masterOrganisation.organisationName}}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td style=\"color: blue;\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a class=\"viewproduct\" data-toggle=\"modal\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdata-target=\"#exampleModalCenter\">View\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tProucts</a>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{{w.contactPersonName}}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{{w.contactNumber}}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{{w.address.country.countryName}}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{{w.address.state.region}}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{{w.address.state.stateName}}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{{w.address.city.cityName}}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td style=\"width: 5%; padding: 0 2.75rem;\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<table style=\"width:100%\" class=\"innertable\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<tr style=\"background-color: unset;\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td style=\"padding: unset; width: 10%;border: unset;\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<img src=\"assets/Edit_icon.png\" width=\"30\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theight=\"25\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"editWarehouse(w.warehouseId)\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>&nbsp;&nbsp;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td style=\"padding: unset; width: 10%;border: unset;\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<img src=\"assets/delete_icon.png\" width=\"30\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theight=\"25\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"openModalWithClass(template)\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ng-template #template>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"modal-header\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h4 class=\"modal-title\">Warehouse Management\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" class=\"close pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taria-label=\"Close\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"modalRef.hide()\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span aria-hidden=\"true\">×</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"modal-body\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h5>Are You Sure You Want to Delete the\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRecord..?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</h5>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"modal-footer\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-default\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"modalRef.hide()\">Cancel</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-danger\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"deleteWarehouse(w.warehouseId)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"modalRef.hide()\">Yes</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ng-template>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<!-- Modal -->\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"modal fade\" id=\"exampleModalCenter\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttabindex=\"-1\" role=\"dialog\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taria-labelledby=\"exampleModalCenterTitle\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taria-hidden=\"true\" data-backdrop=\"false\">\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<!-- Add .modal-dialog-centered to .modal-dialog to vertically center the modal -->\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"modal-dialog modal-dialog-centered\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trole=\"document\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"modal-content\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"modal-header\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h5 class=\"modal-title\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tid=\"exampleModalLongTitle\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tProduct List</h5>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" class=\"close\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdata-dismiss=\"modal\" aria-label=\"Close\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span aria-hidden=\"true\">&times;</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"modal-body\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ul class=\"list-group\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*ngFor=\"let p of w.masterProductsList\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<li class=\"list-group-item\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{{p.productName}}</li>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"modal-footer\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclass=\"btn btn-default btn-lg\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdata-dismiss=\"modal\">Back</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<tr *ngIf=\"warehouses && warehouses.length==0\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td colspan=\"10\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h4 style=\"color: royalblue;\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNo Data Found To Display....\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<br>\n\t\t\t\t\t\t\t\t\t<div class=\"d-flex justify-content-between\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"wrap\">\n\t\t\t\t\t\t\t\t\t\t\t<pagination-controls id=\"listing_pagination\" maxSize=\"4\"\n\t\t\t\t\t\t\t\t\t\t\t\tdirectionLinks=\"true\" responsive=\"true\" (pageChange)=\"page = $event\">\n\t\t\t\t\t\t\t\t\t\t\t</pagination-controls>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"button-section\">\n\t\t\t\t\t\t\t\t\t\t<button [routerLink]=\"['/dashboard']\"\n\t\t\t\t\t\t\t\t\t\t\tclass=\"btn btn-default btn-lg\">Back</button>\n\t\t\t\t\t\t\t\t\t\t<button (click)=\"addWarehouse()\" class=\"btn btn-secondary btn-lg\">Add\n\t\t\t\t\t\t\t\t\t\t\tWarehouse</button>\n\t\t\t\t\t\t\t\t\t\t<span> <button [routerLink]=\"['/dashboard']\"\n\t\t\t\t\t\t\t\t\t\t\t\tclass=\"btn btn-primary btn-lg\">Dashboard</button></span>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</section>\n\n\t\t\t\t\t</div><br>\n\n\t\t\t\t\t<div class=\"tab-pane fade show text-align form-new\" id=\"equipment\" role=\"tabpanel\"\n\t\t\t\t\t\taria-labelledby=\"equipment-tab\">\n\t\t\t\t\t\t<h3 class=\"register-heading\">Warehouse Users</h3>\n\t\t\t\t\t\t<div class=\"table-responsive\">\n\t\t\t\t\t\t\t<table class=\"table table-striped table-responsive-md btn-table\">\n\t\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t<th>User Name</th>\n\t\t\t\t\t\t\t\t\t\t<th>Vendor Name</th>\n\t\t\t\t\t\t\t\t\t\t<th>Warehouse</th>\n\t\t\t\t\t\t\t\t\t\t<th>Mobile No</th>\n\t\t\t\t\t\t\t\t\t\t<th>Country</th>\n\t\t\t\t\t\t\t\t\t\t<th>Region</th>\n\t\t\t\t\t\t\t\t\t\t<th>State</th>\n\t\t\t\t\t\t\t\t\t\t<th>City</th>\n\t\t\t\t\t\t\t\t\t\t<th>Action</th>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t<tr *ngFor=\"let u of users  | \n\t\t\t\t\t\t\t\t\t\tpaginate: { id: 'listing_pagination1',\n\t\t\t\t\t\t\t\t\t\titemsPerPage: 5,\n\t\t\t\t\t\t\t\t\t\tcurrentPage: page1,\n\t\t\t\t\t\t\t\t\t\ttotalItems: totalRec }\n\t\t\t\t\t\t\t\t\t\t\">\n\t\t\t\t\t\t\t\t\t\t<td>{{u.userName}}</td>\n\t\t\t\t\t\t\t\t\t\t<td>{{u.masterOrganisation.organisationName}}</td>\n\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t<tr *ngFor=\"let w of u.warehouseList\">\n\t\t\t\t\t\t\t\t\t\t<td>{{w.warehouseName}}</td>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{{u.mobileNumber}}</td>\n\t\t\t\t\t\t\t\t\t<td>{{u.address.country.countryName}}</td>\n\t\t\t\t\t\t\t\t\t<td>{{u.address.state.region}}</td>\n\t\t\t\t\t\t\t\t\t<td>{{u.address.state.stateName}}</td>\n\t\t\t\t\t\t\t\t\t<td>{{u.address.city.cityName}}</td>\n\t\t\t\t\t\t\t\t\t<td><img src=\"assets/Edit_icon.png\" class=\"btn\" width=\"50\" height=\"40\"\n\t\t\t\t\t\t\t\t\t\t\t(click)=\"editWarehouseUser(u.userId)\" />\n\t\t\t\t\t\t\t\t\t\t<img src=\"assets/delete_icon.png\" class=\"btn\" width=\"55\" height=\"45\"\n\t\t\t\t\t\t\t\t\t\t\t(click)=\"deleteWarehouseUser(u.userId)\" /></td>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t<pagination-controls id=\"listing_pagination1\" maxSize=\"5\" directionLinks=\"true\"\n\t\t\t\t\t\t\t\t(pageChange)=\"page1 = $event\"></pagination-controls>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-md-4 col-sm-4\">\n\t\t\t\t\t\t\t\t<button (click)=\"addWarehouseUser()\" class=\"btn btn-primary\">Create\n\t\t\t\t\t\t\t\t\tNew Warehouse User</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-4 col-sm-4\"></div>\n\t\t\t\t\t\t\t<div class=\"col-md-4 col-sm-4\">\n\t\t\t\t\t\t\t\t<a [routerLink]=\"['/user']\" class=\"btn btn-default\">Back</a>&nbsp;&nbsp;\n\t\t\t\t\t\t\t\t<span> <a [routerLink]=\"['/dashboard']\" class=\"btn btn-primary\">Dashboard</a></span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n\n<!-- Add Warehouse -->\n<div class=\"container-fluid\" style=\"padding-right:42px; padding-left:42px\" *ngIf=\"iteration == 'addWarehouse'\">\n\t<form class=\"form\" (ngSubmit)=\"f1.form.valid &&  onSubmit()\" #f1=\"ngForm\">\n\t\t<div class=\"card\">\n\t\t\t<div class=\"view view-cascade gradient-card-header blue-gradient\">\n\t\t\t\t<!-- Title -->\n\t\t\t\t<h4 class=\"card-header-title mb-3\" style=\"color: white;\">Add New Warehouse User</h4>\n\t\t\t</div>\n\t\t\t<div class=\"card-body vendor\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Vendor</label>\n\t\t\t\t\t\t<select class=\"form-control\" name=\"organisationId\" [(ngModel)]=\"warehouse.organisationId\"\n\t\t\t\t\t\t\t#organisationId=\"ngModel\"\n\t\t\t\t\t\t\t[ngClass]=\"{ 'is-invalid': f1.submitted && organisationId.invalid }\" required>\n\t\t\t\t\t\t\t<option [ngValue]=\"0\">Select Vendor</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let v of vendors\" [ngValue]=\"v.organisationId\">\n\t\t\t\t\t\t\t\t{{v.organisationName}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t\t<div class=\"invalid-feedback\" *ngIf=\"f1.submitted && organisationId.invalid\">\n\t\t\t\t\t\t\t<p *ngIf=\"organisationId.errors.required\">Please Select Vendor</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Products</label>\n\t\t\t\t\t\t<select class=\"form-control\" name=\"selectedMasterProducts\" multiple\n\t\t\t\t\t\t\t[(ngModel)]=\"warehouse.selectedMasterProducts\" #selectedMasterProducts=\"ngModel\"\n\t\t\t\t\t\t\t[ngClass]=\"{ 'is-invalid': f1.submitted && selectedMasterProducts.invalid }\" required>\n\t\t\t\t\t\t\t<option *ngFor=\"let p of products\" [ngValue]=\"p.productId\">\n\t\t\t\t\t\t\t\t{{p.productName}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t\t<div class=\"invalid-feedback\" *ngIf=\"f1.submitted && selectedMasterProducts.invalid\">\n\t\t\t\t\t\t\t<p *ngIf=\"selectedMasterProducts.errors.required\">Please Select Product</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Warehouse Name</label>\n\t\t\t\t\t\t<input type=\"text\" name=\"warehouseName\" class=\"form-control input-vendor\"\n\t\t\t\t\t\t\t[(ngModel)]=\"warehouse.warehouseName\" placeholder=\"Warehouse Name *\" value=\"\"\n\t\t\t\t\t\t\t#warehouseName=\"ngModel\" [ngClass]=\"{ 'is-invalid': f1.submitted && warehouseName.invalid }\"\n\t\t\t\t\t\t\trequired />\n\t\t\t\t\t\t<div class=\"invalid-feedback\" *ngIf=\"f1.submitted && warehouseName.invalid\">\n\t\t\t\t\t\t\t<p *ngIf=\"warehouseName.errors.required\">Please Enter Warehouse Name</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"row\" id=\"vendorrow\">\n\t\t\t\t\t<div class=\"col-sm-12\"><label>Address</label></div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<input type=\"text\" name=\"addressLine1\" class=\"form-control input-vendor\"\n\t\t\t\t\t\t\t[(ngModel)]=\"address.addressLine1\" placeholder=\"Address Line 1*\" value=\"\"\n\t\t\t\t\t\t\t#addressLine1=\"ngModel\" [ngClass]=\"{ 'is-invalid': f1.submitted && addressLine1.invalid }\"\n\t\t\t\t\t\t\trequired />\n\t\t\t\t\t\t<div class=\"invalid-feedback\" *ngIf=\"f1.submitted && addressLine1.invalid\">\n\t\t\t\t\t\t\t<p *ngIf=\"addressLine1.errors.required\">Please Enter Address Line 1</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<input type=\"text\" name=\"addressLine2\" class=\"form-control input-vendor\"\n\t\t\t\t\t\t\t[(ngModel)]=\"address.addressLine2\" placeholder=\"Address Line 2*\" value=\"\"\n\t\t\t\t\t\t\t#addressLine2=\"ngModel\" [ngClass]=\"{ 'is-invalid': f1.submitted && addressLine2.invalid }\"\n\t\t\t\t\t\t\trequired />\n\t\t\t\t\t\t<div class=\"invalid-feedback\" *ngIf=\"f1.submitted && addressLine2.invalid\">\n\t\t\t\t\t\t\t<p *ngIf=\"addressLine2.errors.required\">Please Enter Address Line 2</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<input type=\"text\" name=\"addressLine3\" class=\"form-control input-vendor\"\n\t\t\t\t\t\t\t[(ngModel)]=\"address.addressLine3\" placeholder=\"Address Line 3*\" value=\"\"\n\t\t\t\t\t\t\t#addressLine3=\"ngModel\" [ngClass]=\"{ 'is-invalid': f1.submitted && addressLine3.invalid }\"\n\t\t\t\t\t\t\trequired />\n\t\t\t\t\t\t<div class=\"invalid-feedback\" *ngIf=\"f1.submitted && addressLine3.invalid\">\n\t\t\t\t\t\t\t<p *ngIf=\"addressLine3.errors.required\">Please Enter Address Line 3</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row\" id=\"vendorrow\">\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Country</label>\n\t\t\t\t\t\t<select class=\"form-control\" name=\"countryId\" [(ngModel)]=\"address.countryId\"\n\t\t\t\t\t\t\t(change)=\"onChangeCountry()\" #countryId=\"ngModel\"\n\t\t\t\t\t\t\t[ngClass]=\"{ 'is-invalid': f1.submitted && countryId.invalid }\" required>\n\t\t\t\t\t\t\t<option [ngValue]=\"null\">Select Country</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let c of countries\" [ngValue]=\"c.countryId\">\n\t\t\t\t\t\t\t\t{{c.countryName}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t\t<div class=\"invalid-feedback\" *ngIf=\"f1.submitted && countryId.invalid\">\n\t\t\t\t\t\t\t<p *ngIf=\"countryId.errors.required\">Please Select Country</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>State</label>\n\t\t\t\t\t\t<select class=\"form-control\" name=\"stateId\" [(ngModel)]=\"address.stateId\"\n\t\t\t\t\t\t\t(change)=\"onChangeState()\" #stateId=\"ngModel\"\n\t\t\t\t\t\t\t[ngClass]=\"{ 'is-invalid': f1.submitted && stateId.invalid }\" required>\n\t\t\t\t\t\t\t<option [ngValue]=\"null\">Select state</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let s of states\" [value]=\"s.stateId\">{{s.stateName}}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t\t<div class=\"invalid-feedback\" *ngIf=\"f1.submitted && stateId.invalid\">\n\t\t\t\t\t\t\t<p *ngIf=\"stateId.errors.required\">Please Select State</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>City</label>\n\t\t\t\t\t\t<select class=\"form-control\" name=\"cityId\" [(ngModel)]=\"address.cityId\" #cityId=\"ngModel\"\n\t\t\t\t\t\t\t[ngClass]=\"{ 'is-invalid': f1.submitted && cityId.invalid }\" required>\n\t\t\t\t\t\t\t<option [ngValue]=\"null\">Select City</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let s of cities\" [value]=\"s.cityId\">{{s.cityName}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t\t<div class=\"invalid-feedback\" *ngIf=\"f1.submitted && cityId.invalid\">\n\t\t\t\t\t\t\t<p *ngIf=\"cityId.errors.required\">Please Select City</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row\" id=\"vendorrow\">\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Region</label>\n\t\t\t\t\t\t<input type=\"text\" name=\"region\" class=\"form-control input-vendor \" [(ngModel)]=\"address.region\"\n\t\t\t\t\t\t\tplaceholder=\"Region*\" value=\"\" required #region=\"ngModel\"\n\t\t\t\t\t\t\t[ngClass]=\"{ 'is-invalid': f1.submitted && region.invalid }\" required />\n\t\t\t\t\t\t<div class=\"invalid-feedback\" *ngIf=\"f1.submitted && region.invalid\">\n\t\t\t\t\t\t\t<p *ngIf=\"region.errors.required\">Please Enter Region</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Contact Person Name</label>\n\t\t\t\t\t\t<input type=\"text\" name=\"contactPersonName\" class=\"form-control input-vendor \"\n\t\t\t\t\t\t\t[(ngModel)]=\"warehouse.contactPersonName\" placeholder=\"Contact Person Name *\" value=\"\"\n\t\t\t\t\t\t\t#contactPersonName=\"ngModel\"\n\t\t\t\t\t\t\t[ngClass]=\"{ 'is-invalid': f1.submitted && contactPersonName.invalid }\" required />\n\t\t\t\t\t\t<div class=\"invalid-feedback\" *ngIf=\"f1.submitted && contactPersonName.invalid\">\n\t\t\t\t\t\t\t<p *ngIf=\"contactPersonName.errors.required\">Please Enter Contact Person </p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Mobile Number</label>\n\t\t\t\t\t\t<input type=\"text\" name=\"contactNumber\" class=\"form-control input-vendor\"\n\t\t\t\t\t\t\t[(ngModel)]=\"warehouse.contactNumber\" placeholder=\"Mobile Number *\" value=\"\"\n\t\t\t\t\t\t\t#contactNumber=\"ngModel\" pattern=\"[0-9]*\" minlength=\"10\" maxlength=\"10\"\n\t\t\t\t\t\t\t[ngClass]=\"{ 'is-invalid': f1.submitted && contactNumber.invalid }\" required />\n\t\t\t\t\t\t<div class=\"invalid-feedback\" *ngIf=\"f1.submitted && contactNumber.invalid\">\n\t\t\t\t\t\t\t<p *ngIf=\"contactNumber.errors.required\">Please Enter Mobile Number </p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br>\n\t\t\t\t<div class=\"row\" style=\"float: right;\">\n\t\t\t\t\t<button (click)=\"onBackClick()\" class=\"btn btn-default btn-lg\" value=\"Login\">Back</button>\n\t\t\t\t\t<button type=\"submit\" value=\"Submit\" class=\"btn btn-success btn-lg\">Save</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</form>\n</div>\n<!-- Edit Warehouse -->\n<div class=\"container-fluid\" style=\"padding-right:42px; padding-left:42px\" *ngIf=\"iteration == 'editWarehouse'\">\n\t<form class=\"form\" class=\"form\" (ngSubmit)=\"onSubmit()\">\n\t\t<div class=\"card\">\n\t\t\t<div class=\"view view-cascade gradient-card-header blue-gradient\">\n\t\t\t\t<!-- Title -->\n\t\t\t\t<h4 class=\"card-header-title mb-3\" style=\"color: white;\">Edit Warehouse</h4>\n\t\t\t</div>\n\t\t\t<div class=\"card-body vendor\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Vendor</label>\n\t\t\t\t\t\t<select disabled class=\"form-control\" name=\"organisationId\"\n\t\t\t\t\t\t\t[(ngModel)]=\"warehouse1.organisationId\">\n\t\t\t\t\t\t\t<option *ngFor=\"let v of vendors\" [ngValue]=\"v.organisationId\">\n\t\t\t\t\t\t\t\t{{v.organisationName}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Products</label>\n\t\t\t\t\t\t<select class=\"form-control\" name=\"selectedMasterProducts\" multiple\n\t\t\t\t\t\t\t[(ngModel)]=\"warehouse1.selectedMasterProducts\">\n\t\t\t\t\t\t\t<option *ngFor=\"let p of products\" [ngValue]=\"p.productId\">\n\t\t\t\t\t\t\t\t{{p.productName}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Warehouse Name</label>\n\t\t\t\t\t\t<input type=\"text\" name=\"warehouseName\" class=\"form-control input-vendor\"\n\t\t\t\t\t\t\t[(ngModel)]=\"warehouse1.warehouseName\" placeholder=\"Warehouse Name *\" value=\"\"\n\t\t\t\t\t\t\t#warehouseName=\"ngModel\" required />\n\t\t\t\t\t\t<div *ngIf=\"warehouseName.invalid && (warehouseName.dirty || warehouseName.touched)\"\n\t\t\t\t\t\t\tclass=\"alert alert-danger\">\n\t\t\t\t\t\t\t<div *ngIf=\"warehouseName.errors.required\">\n\t\t\t\t\t\t\t\tWarehouse Name is Required.\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"row\" id=\"vendorrow\">\n\t\t\t\t\t<div class=\"col-sm-12\"><label>Address</label></div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<input type=\"text\" name=\"addressLine1\" class=\"form-control input-vendor\" #addressLine1=\"ngModel\"\n\t\t\t\t\t\t\t[(ngModel)]=\"address1.addressLine1\" placeholder=\"Address Line 1*\" value=\"\" required />\n\t\t\t\t\t\t<div *ngIf=\"addressLine1.invalid && (addressLine1.dirty || addressLine1.touched)\"\n\t\t\t\t\t\t\tclass=\"alert alert-danger\">\n\t\t\t\t\t\t\t<div *ngIf=\"addressLine1.errors.required\">\n\t\t\t\t\t\t\t\tAddress Line 1 is Required.\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<input type=\"text\" name=\"addressLine2\" class=\"form-control input-vendor\"\n\t\t\t\t\t\t\t[(ngModel)]=\"address1.addressLine2\" placeholder=\"Address Line 2*\" value=\"\"\n\t\t\t\t\t\t\t#addressLine2=\"ngModel\" required />\n\t\t\t\t\t\t<div *ngIf=\"addressLine2.invalid && (addressLine2.dirty || addressLine2.touched)\"\n\t\t\t\t\t\t\tclass=\"alert alert-danger\">\n\t\t\t\t\t\t\t<div *ngIf=\"addressLine2.errors.required\">\n\t\t\t\t\t\t\t\tAddress Line 2 is Required.\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<input type=\"text\" name=\"addressLine3\" class=\"form-control input-vendor\" #addressLine3=\"ngModel\"\n\t\t\t\t\t\t\t[(ngModel)]=\"address1.addressLine3\" placeholder=\"Address Line 3*\" value=\"\" required />\n\t\t\t\t\t\t<div *ngIf=\"addressLine3.invalid && (addressLine3.dirty || addressLine3.touched)\"\n\t\t\t\t\t\t\tclass=\"alert alert-danger\">\n\t\t\t\t\t\t\t<div *ngIf=\"addressLine3.errors.required\">\n\t\t\t\t\t\t\t\tAddress Line 3 is Required.\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row\" id=\"vendorrow\">\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Country</label>\n\t\t\t\t\t\t<select disabled class=\"form-control\" name=\"countryId\" [(ngModel)]=\"address1.countryId\"\n\t\t\t\t\t\t\t(change)=\"onChangeCountry()\">\n\t\t\t\t\t\t\t<option>Select Country</option>\n\t\t\t\t\t\t\t<option *ngFor=\"let c of countries\" [ngValue]=\"c.countryId\">\n\t\t\t\t\t\t\t\t{{c.countryName}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>State</label>\n\t\t\t\t\t\t<select select class=\"form-control\" name=\"stateId\" [(ngModel)]=\"address1.stateId\"\n\t\t\t\t\t\t\t(change)=\"onChangeState()\">\n\t\t\t\t\t\t\t<option *ngFor=\"let s of states\" [value]=\"s.stateId\">{{s.stateName}}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>City</label>\n\t\t\t\t\t\t<select select class=\"form-control\" name=\"cityId\" [(ngModel)]=\"address1.cityId\">\n\t\t\t\t\t\t\t<option *ngFor=\"let s of cities\" [value]=\"s.cityId\">{{s.cityName}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row\" id=\"vendorrow\">\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Region</label>\n\t\t\t\t\t\t<input type=\"text\" name=\"region\" class=\"form-control input-vendor\" [(ngModel)]=\"address1.region\"\n\t\t\t\t\t\t\t#region=\"ngModel\" placeholder=\"Region*\" value=\"\" required />\n\t\t\t\t\t\t<div *ngIf=\"region.invalid && (region.dirty || region.touched)\" class=\"alert alert-danger\">\n\t\t\t\t\t\t\t<div *ngIf=\"region.errors.required\">\n\t\t\t\t\t\t\t\tRegion is Required.\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Contact Person Name</label>\n\t\t\t\t\t\t<input type=\"text\" name=\"contactPersonName\" class=\"form-control input-vendor\"\n\t\t\t\t\t\t\t[(ngModel)]=\"warehouse1.contactPersonName\" #contactPersonName=\"ngModel\"\n\t\t\t\t\t\t\tplaceholder=\"Contact Person Name *\" value=\"\" required />\n\t\t\t\t\t\t<div *ngIf=\"contactPersonName.invalid && (contactPersonName.dirty || contactPersonName.touched)\"\n\t\t\t\t\t\t\tclass=\"alert alert-danger\">\n\t\t\t\t\t\t\t<div *ngIf=\"contactPersonName.errors.required\">\n\t\t\t\t\t\t\t\tContact Person Name is Required.\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-4\">\n\t\t\t\t\t\t<label>Mobile Number</label>\n\t\t\t\t\t\t<input type=\"text\" name=\"contactNumber\" class=\"form-control input-vendor\"\n\t\t\t\t\t\t\t[(ngModel)]=\"warehouse1.contactNumber\" #contactNumber=\"ngModel\" pattern=\"[0-9]*\"\n\t\t\t\t\t\t\tminlength=\"10\" maxlength=\"10\" placeholder=\"Mobile Number *\" value=\"\" required />\n\t\t\t\t\t\t<div *ngIf=\"contactNumber.invalid && (contactNumber.dirty || contactNumber.touched)\"\n\t\t\t\t\t\t\tclass=\"alert alert-danger\">\n\t\t\t\t\t\t\t<div *ngIf=\"contactNumber.errors.required\">\n\t\t\t\t\t\t\t\tMobile number is Required.\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div *ngIf=\"contactNumber.hasError('minlength')\">Mobile should be 10 Digit</div>\n\t\t\t\t\t\t\t<div *ngIf=\"contactNumber.hasError('pattern')\">Mobile number should be only numbers\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br>\n\t\t\t\t<div class=\"row\" style=\"float: right;\">\n\t\t\t\t\t<button (click)=\"onBackClick()\" class=\"btn btn-default btn-lg\" value=\"Login\">Back</button>\n\t\t\t\t\t<button type=\"submit\" value=\"Submit\" class=\"btn btn-success btn-lg\">Update</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</form>\n</div>\n\n<!-- Allocate Warehouse -->\n<div *ngIf=\"iteration == 'allocateWarehouse'\">\n\t<div class=\"container py-3\">\n\t\t<div class=\"card addproduct\">\n\t\t\t<div class=\"card-header\">\n\t\t\t\t<h4 class=\"mb-0\">Allocate Warehouse </h4>\n\t\t\t</div>\n\t\t\t<div class=\"card-body\">\n\t\t\t\t<form class=\"form\" (ngSubmit)=\"onSubmit()\" #vendorForm>\n\n\t\t\t\t\t<div class=\"form-group row\">\n\t\t\t\t\t\t<label class=\"col-lg-4 col-form-label form-control-label\">Select Vendor Type : </label>\n\t\t\t\t\t\t<div class=\"col-lg-8\">\n\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t<select class=\"form-control\" name=\"vendorTypeId\"\n\t\t\t\t\t\t\t\t\t[(ngModel)]=\"warehouseUserMapping.vendorTypeId\" (change)=\"onChangeVendorType()\"\n\t\t\t\t\t\t\t\t\t#vendorTypeId=\"ngModel\" required>\n\t\t\t\t\t\t\t\t\t<option [ngValue]=\"null\">Select Vendor Type</option>\n\t\t\t\t\t\t\t\t\t<option *ngFor=\"let t of types\" [ngValue]=\"t.paramId\">{{t.paramName}}\n\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t<div *ngIf=\"vendorTypeId.invalid && (vendorTypeId.dirty || vendorTypeId.touched)\"\n\t\t\t\t\t\t\t\t\tclass=\"alert alert-danger\">\n\t\t\t\t\t\t\t\t\t<div [hidden]=\"!vendorTypeId.hasError('required')\">Please Select Vendor Type\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"form-group row\">\n\t\t\t\t\t\t<label class=\"col-lg-4 col-form-label form-control-label\">Select Vendor : </label>\n\t\t\t\t\t\t<div class=\"col-lg-8\">\n\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t<select class=\"form-control\" name=\"vendorId\" [(ngModel)]=\"warehouseUserMapping.vendorId\"\n\t\t\t\t\t\t\t\t\t(change)=\"onChangeVendor()\" #vendorId=\"ngModel\" required>\n\t\t\t\t\t\t\t\t\t<option [ngValue]=\"null\">Select Vendor</option>\n\t\t\t\t\t\t\t\t\t<option *ngFor=\"let v of masterOrganisationList\" [ngValue]=\"v.organisationId\">\n\t\t\t\t\t\t\t\t\t\t{{v.organisationName}}</option>\n\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t<div *ngIf=\"vendorId.invalid && (vendorId.dirty || vendorId.touched)\"\n\t\t\t\t\t\t\t\t\tclass=\"alert alert-danger\">\n\t\t\t\t\t\t\t\t\t<div [hidden]=\"!vendorId.hasError('required')\">Please Select Vendor </div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"form-group row\">\n\t\t\t\t\t\t<label class=\"col-lg-4 col-form-label form-control-label\">Select User : </label>\n\t\t\t\t\t\t<div class=\"col-lg-8\">\n\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t<select class=\"form-control\" name=\"vendorId1\" [(ngModel)]=\"warehouseUserMapping.userId\"\n\t\t\t\t\t\t\t\t\t(change)=\"onChangeUser()\" #userId=\"ngModel\" required>\n\t\t\t\t\t\t\t\t\t<option [ngValue]=\"null\">Select User</option>\n\t\t\t\t\t\t\t\t\t<option *ngFor=\"let u of users\" [ngValue]=\"u.userId\">\n\t\t\t\t\t\t\t\t\t\t{{u.userName}}</option>\n\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t<div *ngIf=\"userId.invalid && (userId.dirty || userId.touched)\"\n\t\t\t\t\t\t\t\t\tclass=\"alert alert-danger\">\n\t\t\t\t\t\t\t\t\t<div [hidden]=\"!userId.hasError('required')\">Please Select Vendor </div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div *ngIf=\"warehouseList != null\">\n\t\t\t\t\t\t<div class=\"form-group row\">\n\t\t\t\t\t\t\t<div class=\"col-lg-12\">\n\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t<table class=\"table table-striped table-responsive-md btn-table\">\n\t\t\t\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>Warehouse Name</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>Action</th>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t\t<tr *ngFor=\"let w of warehouseList\">\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{{w.warehouseName}}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td><input type=\"checkbox\" (change)=\"getSelectedWarehouse(w,$event)\">\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-group row\">\n\t\t\t\t\t\t<div class=\"col-md-4\"></div>\n\t\t\t\t\t\t<div class=\"col-md-4\">\n\t\t\t\t\t\t\t<button type=\"submit\" value=\"Submit\" class=\"btn btn-primary\">Allocate\n\t\t\t\t\t\t\t\tWarehouse User</button>\n\t\t\t\t\t\t\t&nbsp; <button (click)=\"onBackClick()\" class=\"btn btn-default\" value=\"Login\">Back</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-md-4\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/layouts/auth-layout/auth-layout.component.html":
/*!******************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/layouts/auth-layout/auth-layout.component.html ***!
  \******************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<router-outlet></router-outlet>\r\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/layouts/onetimepassword-layout/onetimepassword-layout.component.html":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/layouts/onetimepassword-layout/onetimepassword-layout.component.html ***!
  \****************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<router-outlet></router-outlet>\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/layouts/usermanagement-layout/usermanagement-layout.component.html":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/layouts/usermanagement-layout/usermanagement-layout.component.html ***!
  \**************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-dashboard></app-dashboard>\n<router-outlet></router-outlet>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/moduels/auth/login/login.component.html":
/*!***********************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/moduels/auth/login/login.component.html ***!
  \***********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<div id=\"login\">\n    <div className=\"app-branding\">\n        <img src=\"assets/smallerLogo.png\" width=\"160\" height=\"50\" data-toggle=\"modal\" data-target=\"#navBarModel\" />\n    </div>\n</div>\n<br>\n<!-- Default form login -->\n<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-3\"></div>\n        <div class=\"col-md-6\">\n            <div class=\"card\">\n                <h5 class=\"card-header gradient-card-header blue-gradient white-text text-center py-4\">\n                    <strong>Login</strong>\n                </h5>\n                <form class=\"text-center border border-light p-5\" action=\"#!\">\n                    <div class=\"card\">\n                        <div class=\"header\">\n                            <a href={{GOOGLE_AUTH_URL}}>\n                                <img src=\"assets/google-logo.png\" height=\"40px\" alt=\"Google\" />&nbsp;&nbsp;<b\n                                    style=\"color:black\">Log in with\n                                    Google</b>\n                            </a>\n                        </div>\n                    </div>\n                    <br>\n                    <div *ngIf=\"passwrodMissmatch\" class=\"alert alert-danger box-msg\" role=\"alert\">\n                        <strong>Please give valid Email or password!</strong>\n                    </div>\n                    <div class=\"form-group\">\n                        <input type=\"text\" [(ngModel)]=\"loginUserData.email\" name=\"email\" placeholder=\"Email\"\n                            class=\"form-control input-vendor\" autofocus\n                            pattern=\"^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$\" #email=\"ngModel\" required>\n                        <div *ngIf=\"email.invalid && (email.dirty || email.touched)\" class=\"alert alert-danger\">\n                            <div *ngIf=\"email.hasError('required')\">Email is required</div>\n                            <div *ngIf=\"email.hasError('pattern')\">Email format should be\n                                <b>singapore@sipl.com</b>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"form-group\">\n                        <input [(ngModel)]=\"loginUserData.password\" type=\"password\" name=\"password\"\n                            class=\"form-control input-vendor\" placeholder=\"Password\" (keyup.enter)=\"onSubmit()\"\n                            autofocus #password=\"ngModel\" required>\n                        <div *ngIf=\"password.invalid && (password.dirty || password.touched)\"\n                            class=\"alert alert-danger\">\n                            <div *ngIf=\"password.errors.required\">\n                                Password Required.\n                            </div>\n                        </div>\n                    </div>\n                    <!-- Sign in button -->\n                    <button class=\"btn btn-primary btn-block btn-lg\" type=\"submit\" (click)=\"onSubmit()\">LOGIN</button>\n                    <br>\n                    <div class=\"form-group\" id=\"register\">\n                        <div className=\"or-separator\"></div>\n\n                        <em>Not an existing user?</em> &nbsp;&nbsp;<a href=\"/registerUser\"\n                            [routerLink]=\"['/registerUser']\">Register Here</a>\n                    </div>\n                    <div class=\"form-group\" id=\"forgot\">\n                        <div className=\"or-separator\"></div>\n                        <a href=\"/forgotpassword\" [routerLink]=\"['/forgotpassword']\">Forgot Password..?</a>\n                    </div>\n                </form>\n                <!-- Default form login -->\n            </div>\n        </div>\n        <div class=\"col-md-3\"></div>\n    </div>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/orderdetails/orderdetails.component.html":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/orderdetails/orderdetails.component.html ***!
  \***********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<!-- <app-navbar></app-navbar>\n<br>\n<div class=\"container\">\n\n  <div class=\"card-header\">\n    <h3>Order Details </h3>\n  </div>\n\n  <div class=\"card-body\">\n    <div class=\"row\">\n      <div class=\"col-md-6\">\n        <div class=\"list-group\">\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-primary\">Order\n            Id\n            <span>001</span>\n          </a>\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-danger\">\n            Vendor Id:\n            <span>V-IND_PUN-00001</span>\n          </a>\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-primary\">Customer\n            Id :\n            <span>E-IND_PUN-00001</span>\n          </a>\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-danger\">\n            Warehouse Id :\n            <span>Pun-IND_PUN-00001</span>\n          </a>\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-primary\">\n            Warehouse Name :\n            <span>Warehouse 1</span>\n          </a>\n\n        </div>\n      </div>\n      <div class=\"col-md-6\">\n\n        <div class=\"list-group list-1\">\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-primary\">\n            Order Product :\n            <span>Mouse</span>\n          </a>\n\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-danger\">Delivered\n            products\n            <span>Mouse</span>\n          </a>\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-primary\">Equipments\n            <span>Cable</span>\n          </a>\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-danger\">Quantitiy\n            <span>25 units</span>\n          </a>\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-primary\">Total\n            Value\n            <span>Rs. 1800</span>\n          </a>\n\n        </div>\n      </div>\n\n      <div class=\"col-md-6 offset-md-4\">\n        <br><br>\n        <button type=\"submit\" [routerLink]=\"['/vieworder']\" class=\"btn btn-default\">\n          Back\n        </button>\n        <button type=\"submit\" [routerLink]=\"['/dashboard']\" class=\"btn btn-primary\">\n          Dashboard\n        </button>\n      </div>\n    </div>\n  </div>\n</div> -->");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/payment-management/payment-management.component.html":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/payment-management/payment-management.component.html ***!
  \***********************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n<div class=\"container-fluid\">\n  <div class=\"card\">\n    <div\n      class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n      <div>\n      </div>\n      <h4 href=\"\" class=\"white-text mx-3\">Price Management </h4>\n      <div>\n      </div>\n    </div>\n    <br>\n    <h4 class=\"filter\">Filters</h4>\n    <div class=\"row v1\">\n      <div class=\"col-lg-3\">\n        <div class=\"form-group\">\n          <select class=\"form-control\" name=\"productId\" [(ngModel)]=\"productId\" (change)=\"onChangeProduct()\">\n            <option [ngValue]=\"p\">Select Product</option>\n            <option *ngFor=\"let p of productsList\" [ngValue]=\"p.productId\">{{p.productName}}</option>\n          </select>\n        </div>\n      </div>\n      <div class=\"col-lg-2\">\n        <div class=\"form-group\">\n          <select class=\"form-control\" name=\"region\" [(ngModel)]=\"region\" (change)=\"onChangeFilter()\">\n            <option [ngValue]=\"null\">Select Region</option>\n            <option *ngFor=\"let r of selectedRegions\" [ngValue]=\"r\">{{r}}</option>\n          </select>\n        </div>\n      </div>\n      <div class=\" col-lg-2\">\n        <div class=\"form-group\">\n          <select class=\"form-control\" name=\"stateName\" [(ngModel)]=\"stateName\" (change)=\"onChangeFilter()\">\n            <option [ngValue]=\"null\">Select State</option>\n            <option *ngFor=\"let s of selectedStates\" [ngValue]=\"s\">{{s}}</option>\n          </select>\n        </div>\n      </div>\n      <div class=\" col-lg-2\">\n        <div class=\"form-group\">\n          <select class=\"form-control\" name=\"cityName\" [(ngModel)]=\"cityName\" (change)=\"onChangeFilter()\">\n            <option [ngValue]=\"null\">Select City</option>\n            <option *ngFor=\"let c of selectedCities\" [ngValue]=\"c\">{{c}}</option>\n          </select>\n        </div>\n      </div>\n      <div class=\" col-lg-3\">\n        <div class=\"form-group\">\n          <select class=\"form-control\" name=\"warehouseName\" [(ngModel)]=\"warehouseName\" (change)=\"onChangeFilter()\">\n            <option [ngValue]=\"null\">Select Warehouse</option>\n            <option *ngFor=\"let w of selectedWarehouse\" [ngValue]=\"w\">{{w}}</option>\n          </select>\n        </div>\n      </div>\n      <div class=\"col-lg-1\"></div>\n    </div>\n  </div>\n  <div *ngIf=\"vendorProductPriceManagementList!=null\">\n    <section class=\"mb-5\">\n      <!--Card-->\n      <div class=\"card card-cascade narrower body-section price\">\n        <div class=\"card-body\">\n          <div class=\"table table-responsive table-striped table-bordered\">\n            <table class=\"table text-nowrap\">\n              <thead>\n                <tr>\n                  <th>Warehouse Name</th>\n                  <th>Country</th>\n                  <th>Region</th>\n                  <th>State</th>\n                  <th>City</th>\n                  <th>Date</th>\n                  <th>Price</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let v of vendorProductPriceManagementList  \n                  |   paginate: { id: 'listing_pagination',\n                  itemsPerPage: 5,\n                  currentPage: page,\n                  totalItems: totalRec }\n                  \">\n                  <td>{{v.warehouseName}}</td>\n                  <td>{{v.countryName}}</td>\n                  <td>{{v.region}}</td>\n                  <td>{{v.stateName}}</td>\n                  <td>{{v.cityName}}</td>\n                  <td>{{v.priceDateAndTime | date}}</td>\n                  <td>{{v.priceValue}} / {{v.priceFactor}}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <br>\n          <div class=\"d-flex justify-content-between\">\n            <div class=\"wrap\">\n              <pagination-controls id=\"listing_pagination\" maxSize=\"4\" directionLinks=\"true\"\n                (pageChange)=\"page = $event\">\n              </pagination-controls>\n            </div>\n          </div>\n          <div class=\"button-section\">\n            <button [routerLink]=\"['/dashboard']\" class=\"btn btn-primary btn-lg\">Dashboard </button>\n          </div>\n        </div>\n      </div>\n    </section>\n  </div>\n  <div class=\"button-section\">\n    <button [routerLink]=\"['/dashboard']\" class=\"btn btn-default btn-lg\">Back </button>\n  </div>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/proceed/proceed.component.html":
/*!*************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/proceed/proceed.component.html ***!
  \*************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n\n<div class=\"container\" style=\"text-align: center;\">\n    <h2>150 Points Reddemeded Successfully</h2>\n    <h4 >Rs. {{redeem *0.01*10 -0.2 *10}} Will be Added to Your Bank Account</h4>\n    <div class=\"points-section\">\n        <h2 >Available Reward Points : 50</h2>\n        <h2>Perevious Reward Points : 200</h2>\n    </div>\n            <span class=\"btn btn-primary\" [routerLink]=\"['/rewardpoint']\" >Go to Reward Points History</span>\n            &nbsp;&nbsp;\n            <span class=\"btn btn-primary\"  [routerLink]=\"['/rewardvendor']\">Go to Reward Points History</span>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/reconciliation-vendoruser/reconciliation-vendoruser.component.html":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/reconciliation-vendoruser/reconciliation-vendoruser.component.html ***!
  \*************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n\n\n<!-- Account Summary -->\n<div class=\"container-fluid\" *ngIf=\"iteration == 'accountSummary'\">\n    <div class=\"row\">\n        <div class=\"col-md-3\">\n            <div class=\"form-group\">\n                <select class=\"form-control\" [(ngModel)]=\"range\" name=\"#range\"\n                    (ngModelChange)=\"onSelectRangeForVendor(selected,'R')\">\n                    <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                    <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n\n                </select>\n            </div>\n        </div>\n        <div class=\"col-md-3\" *ngIf=\"customDate==true\">\n            <div class=\"form-group\">\n                <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" [(ngModel)]=\"date\" placeholder=\"From\"\n                    class=\"form-control input-vendor\" (ngModelChange)=\"onDateChangeForVendorRecon($event,'R')\">\n                <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n            </div>\n        </div>\n        <div class=\"col-md-3\" *ngIf=\"customDate==true\">\n            <div class=\"form-group\">\n                <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" [(ngModel)]=\"date1\" placeholder=\"To\"\n                    class=\"form-control input-vendor\" (ngModelChange)=\"onDateChangeForVendorRecon($event,'R')\">\n                <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n            </div>\n        </div>\n        <div class=\"col-sm-12\" id=\"importcol\">\n            <section class=\"mb-5\">\n                <!--Card-->\n                <div class=\"card\">\n                    <div\n                        class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n                        <div>\n                        </div>\n                        <h4 href=\"\" class=\"white-text mx-3\">Wallet - Account Summary</h4>\n                        <div>\n                        </div>\n                    </div>\n                    <br>\n                    <div class=\"card-body\">\n                        <div class=\"table table-responsive table-striped table-bordered\">\n                            <table class=\"table text-nowrap\">\n                                <thead>\n                                    <tr>\n                                        <th>Date</th>\n                                        <th>Description</th>\n                                        <th>IN</th>\n                                        <th>OUT</th>\n                                        <th>Balance</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr *ngFor=\"let a of accountSummaryFilteredList | \n                                    paginate: { id: 'listing_pagination',\n                                    itemsPerPage: 6,\n                                    currentPage: page,\n                                    totalItems: totalRec }\">\n                                         <td>{{a.transactionDate | date}}</td>\n                                        <td> {{a.transactionDescription}}</td>\n                                        <td *ngIf=\"a.inAmount!=0\">{{a.inAmount |currency:a.transactionCurrency}}</td>\n                                        <td *ngIf=\"a.inAmount==0\">-</td>\n                                        <td *ngIf=\"a.outAmount!=0\">\n                                            {{a.outAmount | currency:a.transactionCurrency}}\n                                        </td>\n                                        <td *ngIf=\"a.outAmount==0\">-</td>\n                                        <td>{{a.availableBalance | currency:a.transactionCurrency}}</td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                        <br>\n                        <div class=\"d-flex justify-content-between\">\n                            <div class=\"wrap\">\n                                <pagination-controls id=\"listing_pagination\" maxSize=\"4\" directionLinks=\"true\"\n                                    (pageChange)=\"page = $event\">\n                                </pagination-controls>\n                            </div>\n                        </div>\n                        <div class=\"button-section\">\n                            <button type=\"submit\" [routerLink]=\"['/dashboard']\"\n                                class=\"btn btn-primary btn-lg\">Dashboard</button>\n                            <button class=\"btn btn-deep-orange btn-lg\" (click)=\"deliveryReport()\">Delivery Report</button>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        </div>\n    </div>\n</div>\n\n\n<div class=\"container-fluid\" *ngIf=\"iteration == 'delivery_report'\">\n    <div class=\"card\">\n        <div\n            class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n            <div>\n            </div>\n            <h4 href=\"\" class=\"white-text mx-3\">Delivery Product Report</h4>\n            <div>\n            </div>\n        </div>\n        <br>\n\n        <h4 class=\"filter\">Filters</h4>\n        <h5 class=\"head\"> <b>Vendor Name </b>&nbsp;&nbsp;\n            <b class=\"heading\">{{reconciliation[0].warehouse.masterOrganisation.organisationName}}</b></h5>\n        <div class=\"row filter1\">\n            <div class=\"col-md-3\">\n                <div class=\"form-group\">\n                    <select class=\"form-control\" [(ngModel)]=\"warehouseName\" name=\"#warehouseName\"\n                        (ngModelChange)=\"onSelectVendor(selected)\">\n                        <option [ngValue]=\"w\">Select Warehouse</option>\n                        <option *ngFor=\"let w of warehouseList\" [value]=\"w\">{{w}}</option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"col-md-3\">\n                <div class=\"form-group\">\n                    <select class=\"form-control\" [(ngModel)]=\"productName\" name=\"#productName\"\n                        (ngModelChange)=\"onSelectVendor(selected)\">\n                        <option [ngValue]=\"p\">Select Product</option>\n                        <option *ngFor=\"let p of productList\" [value]=\"p\">{{p}}</option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"col-md-2\">\n                <div class=\"form-group\">\n                    <select class=\"form-control\" [(ngModel)]=\"range\" name=\"#range\"\n                        (ngModelChange)=\"onSelectRangeForVendor(selected,'D')\">\n                        <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                        <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n\n                    </select>\n                </div>\n            </div>\n            <div class=\"col-md-2\" *ngIf=\"customDate==true\">\n                <div class=\"form-group\">\n                    <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" [(ngModel)]=\"date\" placeholder=\"From\"\n                        class=\"form-control input-vendor\" (ngModelChange)=\"onDateChangeForVendorRecon($event,'D')\">\n                    <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                </div>\n            </div>\n            <div class=\"col-md-2\" *ngIf=\"customDate==true\">\n                <div class=\"form-group\">\n                    <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" [(ngModel)]=\"date1\" placeholder=\"To\"\n                        class=\"form-control input-vendor\" (ngModelChange)=\"onDateChangeForVendorRecon($event,'D')\">\n                    <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                </div>\n            </div>\n        </div>\n    </div>\n\n\n\n    <section class=\"mb-5\">\n        <!--Card-->\n        <div class=\"card card-cascade narrower body-section\">\n            <div class=\"card-body\">\n                <div class=\"table table-responsive table-striped table-bordered\">\n                    <table class=\"table text-nowrap\">\n                        <thead>\n                            <tr>\n                                <th>Order Ref Number </th>\n                                <th>Delivery Date</th>\n                                <th>Delivered Product</th>\n                                <th>Delivered Quantity</th>\n                                <th>Price</th>\n                                <th>Total Amount</th>\n\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let v of reconciliation  | \n                        paginate: { id: 'listing_pagination',\n                        itemsPerPage: 5,\n                        currentPage: page,\n                        totalItems: totalRec }\n                        \">\n                                <td>{{v?.orderRefNumber}}</td>\n                                <td>{{v?.deliveryDate | date}}</td>\n                                <td>{{v?.deliveredProduct}}</td>\n                                <td>{{v?.deliveredQuantity}} {{v.productUnit}}</td>\n                                <td>{{v?.vendorProductPrice |currency: v.currency}} / {{v.productUnit}}</td>\n                                <td>{{v?.totalAmount |currency : v.currency}}</td>\n                        </tbody>\n                    </table>\n                    <div class=\"d-flex justify-content-between\">\n                        <div class=\"wrap\">\n                            <pagination-controls id=\"listing_pagination\" maxSize=\"5\" directionLinks=\"true\"\n                                responsive=\"true\" (pageChange)=\"page = $event\">\n                            </pagination-controls>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"button-section\">\n                    <button class=\"btn btn-default btn-lg\" (click)=\"goBack()\">Back</button>&nbsp;\n                   <!-- <button class=\"btn btn-primary btn-lg\" [routerLink]=\"['/dashboard']\">Back</button>&nbsp;-->\n                </div>\n            </div>\n        </div>\n    </section>\n\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/redeemreward/redeemreward.component.html":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/redeemreward/redeemreward.component.html ***!
  \***********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n<div class=\"container\">\n    <div class=\"row\" *ngIf=\"pageIterator == 1\">\n        <div class=\"card-body\">\n            <h3 class=\"mb-0\" style=\"text-align: center;\">Redeem Rewards </h3><br>\n            <form class=\"form\" role=\"form\" [formGroup]=\"redeemreward\">\n                <div class=\"form-group row\">\n                    <h4 class=\"col-lg-3 col-form-label form-control-label\"> Points To be Redeemed :</h4>\n                    <div class=\"col-lg-9\">\n                        <input type=\"text\" formControlName=\"redeem\" [(ngModel)]=\"redeem\" id=\"val\" autofocus>\n                    </div>\n                </div>\n                <div class=\"form-group row\" (click)=\"toggleDetails()\">\n                    <h4 class=\"col-lg-3 col-form-label form-control-label\">Available Points :</h4>\n                    <div class=\"col-lg-9\">\n                        <h3> <span class=\"badge badge-pill badge-info\">\n                                <p>250</p>\n                            </span></h3>\n                    </div>\n                </div>\n                <div class=\"form-group row\" (click)=\"toggleDetails()\">\n                    <h4 class=\"col-lg-3 col-form-label form-control-label\">1 Points :</h4>\n                    <div class=\"col-lg-9\" ng-init=\"num1=0.01\">\n                        <h3><span class=\"badge badge-pill badge-warning\">\n                                <p>Rs. 0.001</p>\n                            </span></h3>\n                    </div>\n                </div>\n                <div class=\"form-group row\" *ngIf=\"showDetails\">\n                    <h4 class=\"col-lg-3 col-form-label form-control-label\"> Points to Redeemed :</h4>\n                    <div class=\"col-lg-9\">\n                        <h3><span class=\"badge badge-pill badge-info\">\n                                <p>Rs. {{redeem}}</p>\n                            </span></h3>\n                    </div>\n                </div>\n                <hr><br>\n                <div class=\"form-group row\" *ngIf=\"showDetails\">\n                    <h4 class=\"col-lg-3 col-form-label form-control-label\">Amount :</h4>\n                    <div class=\"col-lg-9\">\n                        <h3><span class=\"badge badge-pill badge-info\">\n                                <p>Rs.{{redeem * 0.01 *10 }}</p>\n                            </span></h3>\n                    </div>\n                </div>\n\n                <div class=\"form-group row\" *ngIf=\"showDetails\">\n                    <h4 class=\"col-lg-3 col-form-label form-control-label\">Admin Charges :</h4>\n                    <div class=\"col-lg-9\">\n                        <h3> <span class=\"badge badge-pill badge-info\">\n                                <p>Rs. -0.2</p>\n                            </span></h3>\n                    </div>\n                </div>\n\n                <br>\n                <div *ngIf=\"showDetails\">\n                    <hr>\n                    <h4 style=\"color: green;\">Amount To be Credited : &nbsp;&nbsp;&nbsp;\n                        {{redeem *0.01*10 -0.2 *10 | number:'1.2-2'}} </h4>\n                </div>\n                <button type=\"button\" (click)=\"onRedeem()\" class=\"btn btn-success move\">Proceed</button>&nbsp;&nbsp;\n                <button type=\"button\" [routerLink]=\"['/rewardvendor']\" class=\"btn btn-default move\">Back</button>\n            </form>\n        </div>\n    </div>\n\n    <div class=\"container success\" style=\"text-align: center;\" *ngIf=\"pageIterator == 2\">\n        <h2> <span class=\"badge badge-pill badge-primary\">50</span> Points Reddemeded Successfully</h2>\n        <br>\n        <h4><span class=\"blinking\" style=\"color: green;font-size: 25px;font-weight: bold;\">Rs.\n                {{redeem *0.01*10 -0.2 *10}}</span> &nbsp; &nbsp;Will be Added to Your Bank Account</h4>\n        <br>\n        <div class=\"points-section\">\n            <h2>Available Reward Points : &nbsp;<span class=\"badge badge-pill badge-danger\">50</span></h2>\n            <br>\n            <h2>Perevious Reward Points : <span class=\"badge badge-pill badge-primary\">200</span></h2>\n        </div><br><br>\n        <button class=\"btn btn-primary\" [routerLink]=\"['/rewardvendor']\">Go to Reward Points History</button>\n        &nbsp;&nbsp;\n        &nbsp;&nbsp;\n        <button class=\"btn btn-primary\" [routerLink]=\"['/rewardvendor']\">Go To Reward</button>\n    </div>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/reportgeneration/reportgeneration.component.html":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/reportgeneration/reportgeneration.component.html ***!
  \*******************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n<div class=\"container\">\n    <div class=\"heading\">\n        <h2 style=\"text-align: center;color:darkslateblue;\">Reports</h2>\n    </div>\n    <br><br>\n    <div class=\"row justify-content-center\">\n\n        <div class=\"col-md-3\">\n            <button class=\"btn btn-primary\" (click)=\"toggleDetails()\"><b>Report 1</b></button>\n        </div>\n        <div class=\"col-md-3\">\n            <button class=\"btn btn-primary\" (click)=\"toggleDetails()\"><b>Report 2</b></button>\n\n        </div>\n        <div class=\"col-md-3\">\n            <button class=\"btn btn-primary\" (click)=\"toggleDetails()\"><b>Report 3</b></button>\n\n        </div>\n        <div class=\"col-md-3\">\n            <button class=\"btn btn-primary\" (click)=\"toggleDetails()\"> <b>Report 4</b></button>\n\n        </div>\n    </div><br><br>\n\n    <div class=\"container\" *ngIf=\"showDetails\">\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <nav>\n                    <div class=\"nav nav-tabs nav-fill\" id=\"nav-tab\" role=\"tablist\">\n                        <a class=\"nav-item nav-link active\" id=\"nav-home-tab\" data-toggle=\"tab\" href=\"#nav-home\"\n                            role=\"tab\" aria-controls=\"nav-home\" aria-selected=\"true\">Graphical Form</a>\n                        <a class=\"nav-item nav-link\" id=\"nav-profile-tab\" data-toggle=\"tab\" href=\"#nav-profile\"\n                            role=\"tab\" aria-controls=\"nav-profile\" aria-selected=\"false\">Tabular Form</a>\n                    </div>\n                </nav>\n                <div class=\"tab-content\" id=\"nav-tabContent\">\n                    <div class=\"tab-pane fade show active\" id=\"nav-home\" role=\"tabpanel\" aria-labelledby=\"nav-home-tab\">\n                        <div class=\"bar-image\">\n                            <img src=\"assets/bar.png\" style=\"height: 300px ;width: 100%; margin-top: 20px;\">\n                        </div><br>\n                        <div class=\"button-section\">\n                            <button [routerLink]=\"['/']\" class=\"btn btn-info\">Export</button>&nbsp;&nbsp;\n                            <button [routerLink]=\"['/dashboard']\" class=\"btn btn-info\">Dashboard</button>&nbsp;&nbsp;\n                        </div>\n                    </div>\n                    <div class=\"tab-pane fade\" id=\"nav-profile\" role=\"tabpanel\" aria-labelledby=\"nav-profile-tab\">\n                        <div class=\"table-responsive\">\n                            <table class=\"table  table-striped table-responsive-md btn-table\">\n                                <thead>\n                                    <tr>\n                                        <th>Sr.No</th>\n                                        <th>Product Seller </th>\n                                        <th>ReSeller</th>\n                                        <th>Month</th>\n                                        <th>Sales</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr>\n                                        <td>1</td>\n                                        <td>Anna</td>\n                                        <td>Pitt</td>\n                                        <td>35</td>\n                                        <td>Rs.200</td>\n                                    </tr>\n                                    <tr>\n                                        <td>2</td>\n                                        <td>Anna</td>\n                                        <td>Pitt</td>\n                                        <td>35</td>\n                                        <td>Rs.200</td>\n                                    </tr>\n                                    <tr>\n                                        <td>3</td>\n                                        <td>Anna</td>\n                                        <td>Pitt</td>\n                                        <td>35</td>\n                                        <td>Rs.300</td>\n                                    </tr>\n                                    <tr>\n                                        <td>4</td>\n                                        <td>Anna</td>\n                                        <td>Pitt</td>\n                                        <td>35</td>\n                                        <td>Rs.400</td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                            <pagination-controls (pageChange)=\"p =$event\"></pagination-controls>\n\n                        </div>\n                        <div class=\"button-section\">\n                            <button [routerLink]=\"['/']\" class=\"btn btn-info\">Export</button>&nbsp;&nbsp;\n                            <button [routerLink]=\"['/dashboard']\" class=\"btn btn-info\">Dashboard</button>&nbsp;&nbsp;\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n\n\n\n    </div>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/reward-managment/reward-managment.component.html":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/reward-managment/reward-managment.component.html ***!
  \*******************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n<div class=\"container py-3\">\n    <div *ngIf=\"pageIterator == 1\">\n        <h3 class=\"mb-0\" style=\"text-align: center;font-weight: bold;\">Reward Management</h3><br><br>\n        <div class=\"row\">\n            <div class=\"col-6 col-md-3\">\n                <div class=\"mainflip\">\n                    <div class=\"frontside\">\n                        <div class=\"card\" [routerLink]=\"['../rewardvendor']\" style=\"align-items: center\">\n                            <img class=\"card-img-top\" src=\"assets/winner.png\" style=\"width: 120px;height:100px\">\n                            <div class=\"card-body\">\n                                <h5 class=\"card-title\"> Earned Points :</h5>\n                                <h5>RS. 200</h5>\n                            </div>\n                        </div>\n                    </div>\n    \n                </div>\n            </div>\n            <div class=\"col-6 col-md-3\">\n                <div class=\"mainflip\">\n                    <div class=\"frontside\">\n                        <div class=\"card\" [routerLink]=\"['../rewardvendor']\" style=\"align-items: center\">\n                            <img class=\"card-img-top\" src=\"assets/winner.png\" style=\"width: 120px;height:100px\">\n                            <div class=\"card-body\">\n                                <h5 class=\"card-title\">Redeem Points : </h5>\n                                <h5>Rs. 0</h5>\n                            </div>\n                        </div>\n                    </div>\n    \n                </div>\n            </div>\n            <div class=\"col-6 col-md-3\">\n                <div class=\"mainflip\">\n                    <div class=\"frontside\">\n                        <div class=\"card\" [routerLink]=\"['../rewardvendor']\" style=\"align-items: center\">\n                            <img class=\"card-img-top\" src=\"assets/winner.png\" style=\"width: 120px;height:100px\">\n                            <div class=\"card-body\">\n                                <h5 class=\"card-title\">Lapsed Points : </h5>\n                                <h5>Rs. 0</h5>\n                            </div>\n                        </div>\n                    </div>\n    \n                </div>\n            </div>\n            <div class=\"col-6 col-md-3\">\n                <div class=\"mainflip\">\n                    <div class=\"frontside\">\n                        <div class=\"card\" [routerLink]=\"['../rewardvendor']\" style=\"align-items: center\">\n                            <img class=\"card-img-top\" src=\"assets/winner.png\" style=\"width: 120px;height:100px\">\n                            <div class=\"card-body\">\n                                <h5 class=\"card-title\">Available Points:</h5>\n                                <h5>Rs. 0</h5>\n                            </div>\n                        </div>\n                    </div>\n    \n                </div>\n            </div>\n        </div>\n\n        <!-- <div class=\"form-group row\">\n                <h3 class=\"col-lg-3 col-form-label form-control-label\">Earned Points :</h3>\n                <div class=\"col-lg-9\">\n                    <span class=\"badge badge-pill badge-info\">\n                        <p>{{eranedpoints}}</p>\n                    </span>\n                </div>\n            </div> -->\n\n        <!-- <div class=\"form-group row\">\n                <h3 class=\"col-lg-3 col-form-label form-control-label\">Redeemed Points :</h3>\n                <div class=\"col-lg-9\">\n                    <span class=\"badge badge-pill badge-info\">\n                        <p>0</p>\n                    </span>\n                </div>\n            </div> -->\n        <!-- <div class=\"form-group row\">\n                <h3 class=\"col-lg-3 col-form-label form-control-label\">Lapsed Points :</h3>\n                <div class=\"col-lg-9\">\n                    <span class=\"badge badge-pill badge-info\">\n                        <p>50</p>\n                    </span>\n                </div>\n            </div> -->\n        <!-- <div class=\"form-group row\">\n                <h3 class=\"col-lg-3 col-form-label form-control-label\">Available Points:</h3>\n                <div class=\"col-lg-9\">\n                    <span class=\"badge badge-pill badge-info\">\n                        <p>250</p>\n                    </span>\n                </div>\n            </div>--><br>\n        <div class=\"button-section\">\n            <button type=\"button\" [routerLink]=\"['/redeemreward']\" class=\"btn btn-primary\">Redeem</button>\n        </div><br><br>\n        <hr>\n\n        <h3>You'll get 1 Point on every order worth<span class=\"blinking\" style=\"font-weight: bold;font-size: 35px;\">\n                Rs. 30</span> Delivered </h3><br>\n        <div class=\"button-section\">\n            <button [routerLink]=\"['/dashboard']\" class=\"btn btn-default\">Back</button>\n            <button (click)=\"onReward()\" type=\"button\" class=\"btn btn-primary\">Rewards Point\n                History</button>\n        </div>\n    </div>\n\n    <!-- reward point History -->\n    <div *ngIf=\"pageIterator == 2\">\n\n        <h3 class=\"mb-0\" style=\"text-align: center;font-weight: bold;\">Reward Point History</h3>\n        <br>\n        <!-- <div class=\"form-group row\">\n                    <h3 class=\"col-lg-3 col-form-label form-control-label\">Earned Points :</h3>\n                    <div class=\"col-lg-9\">\n                        <span class=\"badge badge-pill badge-info\">\n                            <p>250</p>\n                        </span>\n                    </div>\n                </div> -->\n\n        <!-- <div class=\"form-group row\">\n                    <h3 class=\"col-lg-3 col-form-label form-control-label\">Redeemed Points :</h3>\n                    <div class=\"col-lg-9\">\n                        <span class=\"badge badge-pill badge-info\">\n                            <p>0</p>\n                        </span>\n                    </div>\n                </div> -->\n        <!-- <div class=\"form-group row\">\n                    <h3 class=\"col-lg-3 col-form-label form-control-label\">Lapsed Points :</h3>\n                    <div class=\"col-lg-9\">\n                        <span class=\"badge badge-pill badge-info\">\n                            <p>50</p>\n                        </span>\n                    </div>\n                </div> -->\n        <!-- <div class=\"form-group row\">\n                    <h3 class=\"col-lg-3 col-form-label form-control-label\">Available Points :</h3>\n                    <div class=\"col-lg-9\">\n                        <span class=\"badge badge-pill badge-info\">\n                            <p>250</p>\n                        </span>\n                    </div>\n                </div> -->\n                <div class=\"row\">\n                    <div class=\"col-6 col-md-3\">\n                        <div class=\"mainflip\">\n                            <div class=\"frontside\">\n                                <div class=\"card\" [routerLink]=\"['../rewardvendor']\" style=\"align-items: center\">\n                                    <img class=\"card-img-top\" src=\"assets/winner.png\" style=\"width: 120px;height:100px\">\n                                    <div class=\"card-body\">\n                                        <h5 class=\"card-title\"> Earned Points :</h5>\n                                        <h5>RS. 200</h5>\n                                    </div>\n                                </div>\n                            </div>\n            \n                        </div>\n                    </div>\n                    <div class=\"col-6 col-md-3\">\n                        <div class=\"mainflip\">\n                            <div class=\"frontside\">\n                                <div class=\"card\" [routerLink]=\"['../rewardvendor']\" style=\"align-items: center\">\n                                    <img class=\"card-img-top\" src=\"assets/winner.png\" style=\"width: 120px;height:100px\">\n                                    <div class=\"card-body\">\n                                        <h5 class=\"card-title\">Redeem Points : </h5>\n                                        <h5>Rs. 0</h5>\n                                    </div>\n                                </div>\n                            </div>\n            \n                        </div>\n                    </div>\n                    <div class=\"col-6 col-md-3\">\n                        <div class=\"mainflip\">\n                            <div class=\"frontside\">\n                                <div class=\"card\" [routerLink]=\"['../rewardvendor']\" style=\"align-items: center\">\n                                    <img class=\"card-img-top\" src=\"assets/winner.png\" style=\"width: 120px;height:100px\">\n                                    <div class=\"card-body\">\n                                        <h5 class=\"card-title\">Lapsed Points : </h5>\n                                        <h5>Rs. 0</h5>\n                                    </div>\n                                </div>\n                            </div>\n            \n                        </div>\n                    </div>\n                    <div class=\"col-6 col-md-3\">\n                        <div class=\"mainflip\">\n                            <div class=\"frontside\">\n                                <div class=\"card\" [routerLink]=\"['../rewardvendor']\" style=\"align-items: center\">\n                                    <img class=\"card-img-top\" src=\"assets/winner.png\" style=\"width: 120px;height:100px\">\n                                    <div class=\"card-body\">\n                                        <h5 class=\"card-title\">Available Points:</h5>\n                                        <h5>Rs. 0</h5>\n                                    </div>\n                                </div>\n                            </div>\n            \n                        </div>\n                    </div>\n                </div>\n        <div>\n            <br><br>\n            <div class=\"card-body filter\">\n                <div class=\"form-group row\">\n                    <div class=\"col-lg-4\">\n                        <div class=\"form-group\">\n                            <select class=\"form-control\">\n                                <option selected> Select Range</option>\n                                <option value=\"1\">Last week </option>\n                                <option value=\"2\">Last week 15 days</option>\n                                <option value=\"3\">Last week Month</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"col-lg-4\">\n                        <div class=\"form-group\">\n                            <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" [(ngModel)]=\"date\" placeholder=\"From\"\n                                class=\"form-control\" (ngModelChange)=\"onDateChange($event)\">\n                            <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                        </div>\n                    </div>\n                    <div class=\"col-lg-4\">\n                        <div class=\"form-group\">\n                            <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" [(ngModel)]=\"date1\" placeholder=\"To\"\n                                class=\"form-control\" (ngModelChange)=\"onDateChange($event)\">\n                            <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <!-- </div> -->\n            <div class=\"table-responsive\">\n                <table class=\"table table-striped table-responsive-md btn-table\">\n                    <thead>\n                        <tr>\n                            <th>Date </th>\n                            <th>Discription</th>\n                            <th>Rewarded Points</th>\n                            <th>Redeemed Points</th>\n                            <th>Lapsed Points</th>\n                            <th>Payment Status</th>\n                            <th>Available Points</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                        </tr>\n                    </tbody>\n                </table>\n                <pagination-controls id=\"listing_pagination\" maxSize=\"5\" directionLinks=\"true\" (pageChange)=\"page = $event\">\n                </pagination-controls>\n            </div>\n        </div><br>\n        <div class=\"button-section\">\n            <button (click)=\"onBackClick()\" type=\"button\" class=\"btn btn-primary\">Go To Rewards</button>\n            <button [routerLink]=\"['/dashboard']\" type=\"button\" class=\"btn btn-primary\">Dashboard</button>\n        </div>\n    </div>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/rewardpointhistory/rewardpointhistory.component.html":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/rewardpointhistory/rewardpointhistory.component.html ***!
  \***********************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<!-- <app-navbar></app-navbar>\n<div class=\"container\">\n    <br>\n    <h3 class=\"mb-0\">Reward Point History</h3><br>\n    <form class=\"form\" role=\"form\">\n\n        <div class=\"row\">\n\n            <div class=\" col-lg-3\">\n                <div class=\"card\">\n                    <div class=\"card-body\">\n                        <div class=\"offercode\">\n                            <h4>Earned Points :</h4>\n                            <h3 class=\"offer\">Rs. 200</h3>\n                        </div><br>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-lg-3\">\n                <div class=\"card\">\n                    <div class=\"card-body\">\n                        <div class=\"offercode\">\n                            <h4>Redeemed Points :</h4>\n                            <h3 class=\"offer\">Rs. 0</h3>\n                        </div><br>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-lg-3\">\n                <div class=\"card\">\n                    <div class=\"card-body\">\n                        <div class=\"offercode\">\n                            <h4>Lapsed Points :</h4>\n                            <h3 class=\"offer\">Rs. 50</h3>\n                        </div><br>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-lg-3\">\n                <div class=\"card\">\n                    <div class=\"card-body\">\n                        <div class=\"offercode\">\n                            <h4>Available Points :</h4>\n                            <h3 class=\"offer\">Rs. 250</h3>\n                        </div><br>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <br><br>\n        <div class=\"card-body addproduct\">\n            <div class=\"row\">\n                <div class=\"col-lg-4\">\n                    <div class=\"form-group\">\n                        <select class=\"browser-default custom-select\">\n                            <option selected> Select Range</option>\n                            <option value=\"1\">Last week </option>\n                            <option value=\"2\">Last week 15 days</option>\n                            <option value=\"3\">Last week Month</option>\n                        </select>\n                    </div>\n                </div>\n\n                <div class=\"col-lg-4\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" [(ngModel)]=\"date\" placeholder=\"From\"\n                            class=\"form-control\" (ngModelChange)=\"onDateChange($event)\">\n                        <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n\n                <div class=\"col-lg-4\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" [(ngModel)]=\"date1\" placeholder=\"To\"\n                            class=\"form-control\" (ngModelChange)=\"onDateChange($event)\">\n                        <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"table-responsive\">\n            <table class=\"table table-striped table-responsive-md btn-table\">\n                <thead>\n                    <tr>\n                        <th>Date </th>\n                        <th>Discription</th>\n                        <th>Rewarded Pointssss</th>\n                        <th>Redeemed Points</th>\n                        <th>Lapsed Points</th>\n                        <th>Payment Status</th>\n                        <th>Available Points</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                    </tr>\n                </tbody>\n            </table>\n            <pagination-controls id=\"listing_pagination\" maxSize=\"5\" directionLinks=\"true\" (pageChange)=\"page = $event\">\n            </pagination-controls>\n        </div>\n        <div class=\"button-section\">\n            <button [routerLink]=\"['/rewardvendor']\" type=\"button\" class=\"btn btn-primary\">Go To Reward</button>\n            <button [routerLink]=\"['/dashboard']\" type=\"button\" class=\"btn btn-primary\">Dashboard</button>\n        </div>\n    </form>\n</div> -->");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/vendorpayment/vendorpayment.component.html":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/vendorpayment/vendorpayment.component.html ***!
  \*************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n<div class=\"card pay\" *ngIf=\"iterationName == 'initial'\">\n    <div\n        class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n        <div>\n        </div>\n        <h4 href=\"\" class=\"white-text mx-3\">Payment Reconciliation</h4>\n        <div>\n        </div>\n    </div>\n    <div class=\"container in\">\n        <div class=\"row\">\n            <div class=\"col-6 col-md-4\">\n                <div class=\"card card-cascade\" (click)=\"onBankTransfer()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Bank Transfer<br></h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <i class=\"fas fa-university\" style=\"font-size:88px;color:#ff707d\"></i>\n\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"col-6 col-md-4\">\n                <div class=\"card card-cascade\" (click)=\"onChequeTransfer()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Cheque Deposit</h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <i class=\"fas fa-money-check\" style=\"font-size:88px;color:#49f990\"></i>\n\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-6 col-md-4\">\n                <div class=\"card card-cascade\" (click)=\"uploadBankStatement()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Upload Bank Statement</h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <i class=\"fas fa-file-upload\" style=\"font-size:88px;color:#865141\"></i>\n\n                    </div>\n                </div>\n            </div>\n        </div><br>\n        <div class=\"row\">\n            <div class=\"col-6 col-md-4\">\n                <div class=\"card card-cascade\" (click)=\"uploadBankPassbook()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Update Bank Passbook</h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <i class=\"fa fa-upload\" style=\"font-size:88px;color:#f37e5a\"></i>\n\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"button-section\">\n            <button class=\"btn btn-primary btn-lg\" [routerLink]=\"['/dashboard']\">Dashboard</button>\n        </div>\n    </div>\n</div>\n\n<div class=\"card pay\" *ngIf=\"iterationName =='Payment_By_Cheque'\">\n    <div\n        class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n        <div>\n        </div>\n        <h4 href=\"\" class=\"white-text mx-3\">Payment By Cheque </h4>\n        <div>\n        </div>\n    </div>\n    <div class=\"container in\">\n        <div class=\"row\">\n            <div class=\"col-6 col-md-4\">\n\n            </div>\n            <div class=\"col-6 col-md-4\">\n                <div class=\"card card-cascade\" (click)=\"onChequeDeposit()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Cheque Deposit</h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <i class=\"fas fa-envelope-open\" style=\"font-size:88px;color:#e57d56\"></i>\n\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"col-6 col-md-4\">\n\n            </div>\n\n        </div><br>\n\n        <div class=\"row\">\n            <div class=\"col-md-4\"></div>\n            <div class=\"col-md-4\">\n                <div class=\"button-section\">\n                    <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n-->\n<div class=\"card pay\" *ngIf=\"iterationName == 'Bank_Transfer'\">\n    <div\n        class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n        <div>\n        </div>\n        <h4 href=\"\" class=\"white-text mx-3\">Bank Transfer</h4>\n        <div>\n        </div>\n    </div>\n    <div class=\"container in\">\n        <div class=\"row\">\n            <div class=\"col-6 col-md-4\">\n                <div class=\"card card-cascade\" (click)=\"onBankPaymentReconciliation()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Pending Transaction<br></h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <img class=\"card-img-top\" src=\"assets/pending.png\" style=\"width: 120px;height:100px\">\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-6 col-md-4\">\n                <div class=\"card card-cascade\" (click)=\"onBankPaymentReport()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Bank Transfer Report</h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <img class=\"card-img-top\" src=\"assets/clearence.png\" style=\"width: 120px;height:100px\">\n                    </div>\n                </div>\n            </div>\n\n        </div>\n        <div class=\"row\">\n            <div class=\"col-6 col-md-4\"></div>\n            <div class=\"col-6 col-md-4\">\n                <div class=\"button-section\">\n                    <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n<div class=\"card pay\" *ngIf=\"iterationName == 'Cheque_Transfer'\">\n    <div\n        class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n        <div>\n        </div>\n        <h4 href=\"\" class=\"white-text mx-3\">Cheque Deposit</h4>\n        <div>\n        </div>\n    </div>\n    <div class=\"container in\">\n        <div class=\"row\">\n            <div class=\"col-6 col-md-4\">\n                <div class=\"card card-cascade\" (click)=\"onChequePaymentReconcilation()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Pending Transaction<br></h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <img class=\"card-img-top\" src=\"assets/pending.png\" style=\"width: 120px;height:100px\">\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-6 col-md-4\">\n                <div class=\"card card-cascade\" (click)=\"onChequePaymentReport()\">\n                    <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                        <h4 class=\"card-header-title mb-3\" style=\"color: white;\"> Cheque Payment Report</h4>\n                    </div>\n                    <div class=\"card-body card-body-cascade text-center \">\n                        <img class=\"card-img-top\" src=\"assets/clearence.png\" style=\"width: 120px;height:100px\">\n                    </div>\n                </div>\n            </div>\n        </div>\n        <br>\n        <div class=\"row\">\n            <div class=\"col-6 col-md-4\"></div>\n            <div class=\"col-6 col-md-4\">\n                <div class=\"button-section\">\n                    <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n<!-- Bank Payment Reconciliation -->\n<div class=\"container-fluid\" *ngIf=\"iterationName =='Bank_Payment_Reconciliation'\">\n    <div class=\"card card-cascade narrower body-section\">\n        <div\n            class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n            <div>\n            </div>\n            <h4 href=\"\" class=\"white-text mx-3\">Payment Receipt Reconciliation ( Bank Transfer Mode ) </h4>\n            <div>\n            </div>\n        </div>\n        <div class=\"card-body banrecon\">\n            <div class=\"row dummy\">\n                <div class=\"col-md-3\">\n                    <div class=\"form-group\">\n                        <select class=\"form-control\" [(ngModel)]=\"range\" name=\"#range\"\n                            (ngModelChange)=\"onSelectRange()\">\n                            <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                            <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n                        </select>\n                    </div>\n                </div>\n                <div class=\"col-md-2\" *ngIf=\"customDate==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" placeholder=\"From\" [(ngModel)]=\"date\"\n                            (ngModelChange)=\"onDateChange($event)\" class=\"form-control input-vendor\">\n                        <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n                <div class=\"col-md-2\" *ngIf=\"customDate==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" placeholder=\"To\" [(ngModel)]=\"date1\"\n                            (ngModelChange)=\"onDateChange($event)\" class=\"form-control input-vendor\">\n                        <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n\n                <div class=\"col-md-3\">\n                    <div class=\"form-group\">\n                        <input placeholder=\"UTR Number\" class=\"form-control input-vendor\" [(ngModel)]=\"utrNo\"\n                            (input)=\"onUtrNo()\">\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"button-section approve\">\n                <button class=\"btn btn-dark-green\" (click)=\"showMatchingChequePayments('BANK')\">Auto Match</button>\n            </div>\n\n            <h5 class=\"table-head\" style=\"font-size: x-large;font-weight: bold;color:red\">Pending Transactions</h5>\n            <div class=\"table table-responsive table-striped table-bordered\">\n                <table class=\"table text-nowrap\">\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Top Up Ref.No</th>\n                            <th>Remittance Date</th>\n                            <th>Amount</th>\n                            <th>Remitting Bank</th>\n                            <th>Remitter Name</th>\n                            <th>UTR No</th>\n                            <th>Status</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let p of bankPaymentList | \n                        paginate: { id: 'listing_pagination',\n                        itemsPerPage: 5,\n                        currentPage: page,\n                        totalItems: totalRec }\n                        \">\n                            <td>\n                                <div class=\" form-check\">\n                                    <input class=\"form-check-input\" type=\"checkbox\" id=payval{{p}}\n                                        name=\"selectedChequePay\" [(ngModel)]=\"p.selectedChequePay\"\n                                        (change)=\"onBankPayment(p)\">\n\n                                </div>\n                            </td>\n                            <td>{{p.topupRefNo}}</td>\n                            <td>{{p.remittingDate | date}}</td>\n                            <td>{{p.paidAmount | currency : p.currency}}</td>\n                            <td>{{p.remittingBank}}</td>\n                            <td>{{p.remittingName}}</td>\n                            <td>{{p.utrNo}}</td>\n                            <td *ngIf=\"p.paymentStatus == 'PENDING'\" style=\"color:red;font-weight: bold;\">\n                                {{p.paymentStatus}}</td>\n                            <td *ngIf=\"p.paymentStatus == 'APPROVED'\" style=\"color:green;font-weight: bold;\">\n                                {{p.paymentStatus}}</td>\n                        </tr>\n                        <tr *ngIf=\"bankPaymentList && bankPaymentList.length ==0\">\n                            <td colspan=\"10\" style=\"color: rgba(244, 67, 54, 0.7) ;\">\n                                <h4>No Data Found to Display.....</h4>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"d-flex justify-content-between\">\n                <div class=\"wrap\">\n                    <pagination-controls id=\"listing_pagination\" maxSize=\"5\" directionLinks=\"true\" responsive=\"true\"\n                        (pageChange)=\"page= $event\">\n                    </pagination-controls>\n                </div>\n            </div>\n            <br>\n            <div class=\"card\">\n                <div class=\"card-body\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-2\"></div>\n                        <div class=\"col-sm-2\" id=\"importhead\">\n                            Bank Name <p id=\"importbal\">{{vendorAccountDetails.bankName}}</p>\n                        </div>\n                        <div class=\"col-sm-4\" id=\"importhead\">\n                            Branch Name <p id=\"importbal\">{{vendorAccountDetails.branchName}}</p>\n                        </div>\n                        <div class=\"col-sm-2\" id=\"importhead\">\n                            A/c No <p id=\"importbal\">{{vendorAccountDetails.accountNumber}}</p>\n                        </div>\n                        <div class=\"col-sm-2\"></div>\n                    </div>\n                </div>\n            </div>\n            <hr>\n            <div class=\"row\">\n                <div class=\"col-md-3\">\n                    <div class=\"form-group\">\n                        <select class=\"form-control\" [(ngModel)]=\"bRange\" name=\"#bRange\"\n                            (ngModelChange)=\"onSelectRangeBank()\">\n                            <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                            <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n                        </select>\n                    </div>\n                </div>\n                <div class=\"col-md-2\" *ngIf=\"bCustomDate==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt3\" [owlDateTimeTrigger]=\"dt3\" placeholder=\"From\" [(ngModel)]=\"bDate\"\n                            (ngModelChange)=\"onDateChangeBank($event)\" class=\"form-control input-vendor\">\n                        <owl-date-time #dt3 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n                <div class=\"col-md-2\" *ngIf=\"bCustomDate==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"d4\" [owlDateTimeTrigger]=\"d4\" placeholder=\"Tp\" [(ngModel)]=\"bDate1\"\n                            (ngModelChange)=\"onDateChangeBank($event)\" class=\"form-control input-vendor\">\n                        <owl-date-time #d4 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n                <div class=\"col-md-3\">\n                    <div class=\"form-group\">\n                        <input placeholder=\"Particulars\" class=\"form-control input-vendor\" [(ngModel)]=\"particulars\"\n                            (input)=\"onParticulars()\">\n                    </div>\n                </div>\n                <div class=\"col-md-2 hidetrans\">\n                    <div class=\"form-group\">\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input hide1\" type=\"checkbox\" name=\"hideTransaction\"\n                                [value]=\"hideTransaction\" (click)=\"onHideTransaction(hideTransaction)\">\n                            <label class=\"form-check-label hidelabel\" for=\"hideTransaction\">\n                                Hide DB Transaction\n                            </label>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <h5 class=\"table-head\" style=\"font-size: x-large;font-weight: bold;color:red\">Bank Statement</h5>\n            <div class=\"table table-responsive table-striped table-bordered\">\n                <table class=\"table text-nowrap\">\n                    <thead>\n                        <tr>\n                            <th>Select</th>\n                            <th>Date</th>\n                            <th>Particulars</th>\n                            <th>Cr</th>\n                            <th>Db</th>\n                            <th>Balance </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let b of vendorBankStatement  |\n                            paginate: { id: 'listing_pagination10',\n                            itemsPerPage: 15,\n                            currentPage: page10,\n                            totalItems: totalRec } \">\n                            <td>\n                                <div class=\"form-check\">\n                                    <div class=\"form-check\">\n                                        <input class=\"form-check-input\" type=\"checkbox\" id=idval{{b}}\n                                            name=\"selectedBankStmt\" [(ngModel)]=\"b.selectedBankStmt\"\n                                            (change)=\"onBankStatement(b)\">\n                                    </div>\n                                </div>\n                            </td>\n                            <td>{{b.createdDate | date}}</td>\n                            <td>{{b.particulars}}</td>\n                            <td>{{b.creditAmount | currency : vendorAccountDetails.accountCurrency}}</td>\n                            <td *ngIf=\"b.debitAmount!=null\">\n                                {{b.debitAmount | currency : vendorAccountDetails.accountCurrency}}</td>\n                            <td *ngIf=\"b.debitAmount==null\">-</td>\n                            <td>{{b.balance | currency : vendorAccountDetails.accountCurrency}}</td>\n                        </tr>\n\n                        <tr *ngIf=\"vendorBankStatement && vendorBankStatement.length ==0\">\n                            <td colspan=\"11\" style=\"color: rgba(244, 67, 54, 0.7) ;\">\n                                <h4>No Data Found to Display.....</h4>\n                            </td>\n                        </tr>\n\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"d-flex justify-content-between\">\n                <div class=\"wrap\">\n                    <pagination-controls id=\"listing_pagination1\" maxSize=\"5\" directionLinks=\"true\" responsive=\"true\"\n                        (pageChange)=\"page1= $event\">\n                    </pagination-controls>\n                </div>\n            </div>\n            <div class=\"button-section\">\n                <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                <button class=\"btn btn-dark-green btn-lg\" (click)=\"onApproveChequePayment()\">Approve</button>\n                <!-- <button class=\"btn btn-danger btn-lg\" (click)=\"onHoldBankPayment()\">Hold</button>&nbsp;&nbsp;-->\n            </div>\n        </div>\n    </div>\n</div>\n\n\n\n<!-- Cheque Payment Reconciliation Auto Match -->\n<div class=\"container-fluid\" *ngIf=\"iterationName == 'Cheque_Payment_Reconciliation_Auto_Match'\">\n    <section class=\"mb-5\">\n        <!--Card-->\n        <div class=\"card card-cascade narrower body-section\">\n            <div\n                class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n                <div>\n                </div>\n                <h4 href=\"\" class=\"white-text mx-3\">Payment Receipt Reconciliation ( Cheque Mode ) </h4>\n                <div>\n                </div>\n            </div>\n            <div class=\"card-body banrecon\">\n                <h4 style=\"font-size: x-large;font-weight: bold;color:blue\">Matching Records</h4>\n\n                <div class=\"table-head import\">\n                    <input class=\"form-check-input hide1\" type=\"checkbox\" name=\"selectAllMatchingChequePayment\"\n                        [(ngModel)]=\"selectAllMatchingChequePayment\"\n                        (click)=\"selectAllMatchingChequePay(selectAllMatchingChequePayment)\">\n                    <label class=\"form-check-label hidelabel import1\"\n                        style=\"font-size: x-large;font-weight: bold;color:red\" for=\"selectAllMatchingBankPayment\">\n                        Select All Transaction\n                    </label>\n                </div>\n                <br>\n                <div class=\"table table-responsive table-striped table-bordered\">\n                    <table class=\"table text-nowrap\">\n                        <thead>\n                            <tr>\n                                <th>Select</th>\n                                <th>Top Up Ref.No </th>\n                                <th>Cheque Date</th>\n                                <th>Cheque Issuing Bank Name</th>\n                                <th>Cheque Issuer Name</th>\n                                <th>Deposited On</th>\n                                <th>Cheque Amount </th>\n                                <th>Cheque Number</th>\n                                <th style=\"background-color: lightsteelblue;\">Credit Amount</th>\n                                <th style=\"background-color: lightsteelblue;\">Bank Particulars</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let c of chequePaymentList |paginate: { id: 'listing_pagination4',\n                            itemsPerPage: 5,\n                            currentPage: page4,\n                            totalItems: totalRec }\n                            \">\n                                <td>\n                                    <div class=\"form-check\">\n                                        <input class=\"form-check-input\" type=\"checkbox\" id=cpayval{{c}}\n                                            name=\"selectedChequePay\" [(ngModel)]=\"c.selectedChequePay\"\n                                            (change)=\"onChequePayment(c)\">\n                                    </div>\n                                </td>\n                                <td>{{c.topupRefNo}}</td>\n                                <td>{{c.chequeDate | date}}</td>\n                                <td>{{c.chequeIssuingBank}}</td>\n                                <td>{{c.chequeIssuerName}}</td>\n                                <td>{{c.topupDate | date}}</td>\n                                <td>{{c.paidAmount | currency:c.currency}}</td>\n                                <td>{{c.chequeNumber}}</td>\n                                <td style=\"background-color: lightsteelblue;\">{{c.creditAmount | currency : c.currency}}\n                                </td>\n                                <td style=\"background-color: lightsteelblue;\">{{c.particulars}}</td>\n                            </tr>\n                            <tr *ngIf=\"chequePaymentList && chequePaymentList.length ==0\">\n                                <td colspan=\"11\" style=\"color: rgba(244, 67, 54, 0.7) ;\">\n                                    <h4>No Data Found to Display.....</h4>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <br>\n                <div class=\"d-flex justify-content-between\">\n                    <div class=\"wrap\">\n                        <pagination-controls id=\"listing_pagination4\" maxSize=\"4\" directionLinks=\"true\"\n                            (pageChange)=\"page4 = $event\">\n                        </pagination-controls>\n                    </div>\n                </div>\n                <div class=\"button-section\">\n                    <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                    <button class=\"btn btn-dark-green btn-lg\" (click)=\"onAutoApproveChequePayment()\">Approve</button>\n                </div>\n            </div>\n        </div>\n\n    </section>\n</div>\n\n<!-- Bank Payment Reconciliation Auto Match -->\n<div class=\"container-fluid\" *ngIf=\"iterationName =='Bank_Payment_Reconciliation_Auto_Match'\">\n    <div class=\"card card-cascade narrower body-section\">\n        <div\n            class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n            <div>\n            </div>\n            <h4 href=\"\" class=\"white-text mx-3\">Payment Receipt Reconciliation ( Bank Transfer Mode ) </h4>\n            <div>\n            </div>\n        </div>\n        <div class=\"card-body banrecon\">\n            <h4 style=\"font-size: x-large;font-weight: bold;color:blue\">Matching Records</h4>\n\n            <div class=\"table-head import\">\n                <input class=\"form-check-input hide1\" type=\"checkbox\" name=\"selectAllMatchingBankPayment\"\n                    [(ngModel)]=\"selectAllMatchingBankPayment\"\n                    (click)=\"selectAllMatchingBankPay(selectAllMatchingBankPayment)\">\n                <label class=\"form-check-label hidelabel import1\" style=\"font-size: x-large;font-weight: bold;color:red\"\n                    for=\"selectAllMatchingBankPayment\">\n                    Select All Transaction\n                </label>\n            </div>\n            <br>\n            <div class=\"table table-responsive table-striped table-bordered\">\n                <table class=\"table text-nowrap\">\n                    <thead>\n                        <tr>\n                            <th>Select</th>\n                            <th>Top Up Ref.No</th>\n                            <th>Remittance Date</th>\n                            <th>Remitting Bank</th>\n                            <th>Remitter Name</th>\n                            <th>Paid Amount</th>\n                            <th>UTR No</th>\n                            <th style=\"background-color: lightsteelblue;\">Credit Amount</th>\n                            <th style=\"background-color: lightsteelblue;\">Bank Particulars</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let p of chequePaymentList | \n                        paginate: { id: 'listing_pagination',\n                        itemsPerPage: 5,\n                        currentPage: page,\n                        totalItems: totalRec }\n                        \">\n                            <td>\n                                <div class=\" form-check\">\n                                    <input class=\"form-check-input\" type=\"checkbox\" id=bnkid name=\"selectedChequePay\"\n                                        [(ngModel)]=\"p.selectedChequePay\" (change)=\"onChequePayment(p)\">\n\n                                </div>\n                            </td>\n                            <td>{{p.topupRefNo}}</td>\n                            <td>{{p.remittingDate | date}}</td>\n                            <td>{{p.remittingBank}}</td>\n                            <td>{{p.remittingName}}</td>\n                            <td>{{p.paidAmount | currency : p.currency}}</td>\n                            <td>{{p.utrNo}}</td>\n                            <td style=\"background-color: lightsteelblue;\">{{p.creditAmount | currency : p.currency}}\n                            </td>\n                            <td style=\"background-color: lightsteelblue;\">{{p.particulars}}</td>\n                        </tr>\n                        <tr *ngIf=\"chequePaymentList && chequePaymentList.length ==0\">\n                            <td colspan=\"10\" style=\"color: rgba(244, 67, 54, 0.7) ;\">\n                                <h4>No Data Found to Display.....</h4>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"d-flex justify-content-between\">\n                <div class=\"wrap\">\n                    <pagination-controls id=\"listing_pagination\" maxSize=\"5\" directionLinks=\"true\" responsive=\"true\"\n                        (pageChange)=\"page= $event\">\n                    </pagination-controls>\n                </div>\n            </div>\n            <br>\n            <hr>\n\n            <div class=\"button-section\">\n                <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                <button class=\"btn btn-dark-green btn-lg\" (click)=\"onAutoApproveChequePayment()\">Approve</button>\n                <!-- <button class=\"btn btn-danger\" (click)=\"onHoldBankPayment()\">Hold</button>&nbsp;&nbsp; -->\n            </div>\n        </div>\n    </div>\n</div>\n\n<!-- Bank Payment Reconciliation -->\n<div class=\"container-fluid\" *ngIf=\"iterationName =='Bank_Payment_Report'\">\n    <div class=\"card card-cascade narrower body-section\">\n        <div\n            class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n            <div>\n            </div>\n            <h4 href=\"\" class=\"white-text mx-3\">Bank Transfer (Report) </h4>\n            <div>\n            </div>\n        </div>\n        <div class=\"card-body banrecon\">\n            <div class=\"row dummy\">\n                <div class=\"col-md-3\">\n                    <div class=\"form-group\">\n                        <select class=\"form-control\" [(ngModel)]=\"range\" name=\"#range\"\n                            (ngModelChange)=\"onSelectRange()\">\n                            <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                            <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n                        </select>\n                    </div>\n                </div>\n                <div class=\"col-md-2\" *ngIf=\"customDate==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" placeholder=\"From\" [(ngModel)]=\"date\"\n                            (ngModelChange)=\"onDateChange($event)\" class=\"form-control input-vendor\">\n                        <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n                <div class=\"col-md-2\" *ngIf=\"customDate==true\">\n                    <div class=\"form-group\">\n                        <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" placeholder=\"To\" [(ngModel)]=\"date1\"\n                            (ngModelChange)=\"onDateChange($event)\" class=\"form-control input-vendor\">\n                        <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                    </div>\n                </div>\n\n                <div class=\"col-md-3\">\n                    <div class=\"form-group\">\n                        <input placeholder=\"UTR Number\" class=\"form-control input-vendor\" [(ngModel)]=\"utrNo\"\n                            (input)=\"onUtrNo()\">\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"table table-responsive table-striped table-bordered\">\n                <table class=\"table text-nowrap\">\n                    <thead>\n                        <tr>\n                            <th>Top Up Ref.No</th>\n                            <th>Remittance Date</th>\n                            <th>Amount</th>\n                            <th>Remitting Bank</th>\n                            <th>Remitter Name</th>\n                            <th>UTR No</th>\n                            <th>Status</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let p of bankPaymentList | \n                        paginate: { id: 'listing_pagination',\n                        itemsPerPage: 15,\n                        currentPage: page,\n                        totalItems: totalRec }\n                        \">\n                            <td>{{p.topupRefNo}}</td>\n                            <td>{{p.remittingDate | date}}</td>\n                            <td>{{p.paidAmount | currency : p.currency}}</td>\n                            <td>{{p.remittingBank}}</td>\n                            <td>{{p.remittingName}}</td>\n                            <td>{{p.utrNo}}</td>\n                            <td *ngIf=\"p.paymentStatus == 'PENDING'\" style=\"color:red;font-weight: bold;\">\n                                {{p.paymentStatus}}</td>\n                            <td *ngIf=\"p.paymentStatus == 'APPROVED'\" style=\"color:green;font-weight: bold;\">\n                                {{p.paymentStatus}}</td>\n                        </tr>\n                        <tr>\n                            <td colspan=\"1\">\n                                <h5 style=\"color: black;font-weight: bold;\"> Total </h5>\n                            </td>\n                            <td colspan=\"3\"></td>\n\n                            <td colspan=\"1\">\n                                <h5 style=\"color: red;font-weight: bold;\">{{totalPaidAmount | currency : 'INR' }}</h5>\n                            </td>\n                            <td colspan=\"4\"></td>\n\n                        </tr>\n                        <tr *ngIf=\"bankPaymentList && bankPaymentList.length ==0\">\n                            <td colspan=\"10\" style=\"color: rgba(244, 67, 54, 0.7) ;\">\n                                <h4>No Data Found to Display.....</h4>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"d-flex justify-content-between\">\n                <div class=\"wrap\">\n                    <pagination-controls id=\"listing_pagination\" maxSize=\"5\" directionLinks=\"true\" responsive=\"true\"\n                        (pageChange)=\"page= $event\">\n                    </pagination-controls>\n                </div>\n            </div>\n\n\n            <div class=\"button-section\">\n                <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button></div>\n        </div>\n    </div>\n</div>\n\n<!-- Cheque Payment Reconciliation  -->\n<div class=\"container-fluid\" *ngIf=\"iterationName == 'Cheque_Payment_Reconciliation'\">\n    <section class=\"mb-5\">\n        <!--Card-->\n        <div class=\"card card-cascade narrower body-section\">\n            <div\n                class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n                <div>\n                </div>\n                <h4 href=\"\" class=\"white-text mx-3\">Payment Receipt Reconciliation ( Cheque Mode) </h4>\n                <div>\n                </div>\n            </div>\n            <div class=\"card-body banrecon\">\n                <div class=\"row dummy\">\n                    <div class=\"col-md-3\">\n                        <div class=\"form-group\">\n                            <select class=\"form-control\" [(ngModel)]=\"cRange\" name=\"#cRange\"\n                                (ngModelChange)=\"onSelectRangeCheque()\">\n                                <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                                <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\" *ngIf=\"cCustomDate==true\">\n                        <div class=\"form-group\">\n                            <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" placeholder=\"From\" [(ngModel)]=\"cDate\"\n                                (ngModelChange)=\"onDateChangeCheque($event)\" class=\"form-control input-vendor\">\n                            <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\" *ngIf=\"cCustomDate==true\">\n                        <div class=\"form-group\">\n                            <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" placeholder=\"To\" [(ngModel)]=\"cDate1\"\n                                (ngModelChange)=\"onDateChangeCheque($event)\" class=\"form-control input-vendor\">\n                            <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                        </div>\n                    </div>\n\n                    <div class=\"col-md-3\">\n                        <div class=\"form-group\">\n                            <input placeholder=\"Cheque Number\" class=\"form-control input-vendor\"\n                                [(ngModel)]=\"chequeNumber\" (input)=\"onChequeNumber()\">\n                        </div>\n                    </div>\n                </div>\n                <div class=\"button-section approve\">\n                    <button class=\"btn btn-dark-green\" (click)=\"showMatchingChequePayments('CHEQUE')\">Auto\n                        Match</button>\n                </div>\n\n                <h5 class=\"table-head\" style=\"font-size: x-large;font-weight: bold;color:red\">Pending Transactions\n                </h5>\n                <div class=\"table table-responsive table-striped table-bordered\">\n                    <table class=\"table text-nowrap\">\n                        <thead>\n                            <tr>\n                                <th>Select</th>\n                                <th>Top Up Ref.No </th>\n                                <th>Cheque Date</th>\n                                <th>Amount </th>\n                                <th>Cheque Issuing Bank Name</th>\n                                <th>Cheque Issuer Name</th>\n                                <th>Cheque Number</th>\n                                <th>Deposited On</th>\n                                <th>Status</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let c of pendingChequePaymentList  |\n                            paginate: { id: 'listing_pagination10',\n                            itemsPerPage: 15,\n                            currentPage: page10,\n                            totalItems: totalRec } \">\n\n                                <td>\n                                    <div class=\"form-check\">\n                                        <input class=\"form-check-input\" type=\"checkbox\" id=cpayval{{c}}\n                                            name=\"selectedChequePay\" [(ngModel)]=\"c.selectedChequePay\"\n                                            (change)=\"onChequePayment(c)\">\n                                    </div>\n                                </td>\n\n                                <td>{{c.topupRefNo}}</td>\n                                <td>{{c.chequeDate | date}}</td>\n                                <td>{{c.paidAmount | currency : c.currency}}</td>\n                                <td>{{c.chequeIssuingBank}}</td>\n                                <td>{{c.chequeIssuerName}}</td>\n                                <td>{{c.chequeNumber}}</td>\n                                <td>{{c.topupDate | date}}</td>\n                                <td *ngIf=\"c.paymentStatus == 'PENDING'\" style=\"color:red;font-weight: bold;\">\n                                    {{c.paymentStatus}}</td>\n                                <td *ngIf=\"c.paymentStatus == 'APPROVED'\" style=\"color:green;font-weight: bold;\">\n                                    {{c.paymentStatus}}</td>\n\n                            </tr>\n                            <tr *ngIf=\"pendingChequePaymentList && pendingChequePaymentList.length ==0\">\n                                <td colspan=\"11\" style=\"color: rgba(244, 67, 54, 0.7) ;\">\n                                    <h4>No Data Found to Display.....</h4>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <br>\n                <div class=\"d-flex justify-content-between\">\n                    <div class=\"wrap\">\n                        <pagination-controls id=\"listing_pagination4\" maxSize=\"4\" directionLinks=\"true\"\n                            (pageChange)=\"page4 = $event\">\n                        </pagination-controls>\n                    </div>\n                </div>\n                <br>\n                <div class=\"card\">\n                    <div class=\"card-body\">\n                        <div class=\"row\">\n                            <div class=\"col-sm-2\"></div>\n                            <div class=\"col-sm-2\" id=\"importhead\">\n                                Bank Name <p id=\"importbal\">{{vendorAccountDetails.bankName}}</p>\n                            </div>\n                            <div class=\"col-sm-4\" id=\"importhead\">\n                                Branch Name <p id=\"importbal\">{{vendorAccountDetails.branchName}}</p>\n                            </div>\n                            <div class=\"col-sm-2\" id=\"importhead\">\n                                A/c No <p id=\"importbal\">{{vendorAccountDetails.accountNumber}}</p>\n                            </div>\n                            <div class=\"col-sm-2\"></div>\n                        </div>\n                    </div>\n                </div>\n                <br>\n                <div class=\"row\">\n                    <div class=\"col-md-3\">\n                        <div class=\"form-group\">\n                            <select class=\"form-control\" [(ngModel)]=\"bRange\" name=\"#bRange\"\n                                (ngModelChange)=\"onSelectRangeBank()\">\n                                <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                                <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\" *ngIf=\"bCustomDate==true\">\n                        <div class=\"form-group\">\n                            <input [owlDateTime]=\"dt3\" [owlDateTimeTrigger]=\"dt3\" placeholder=\"From\" [(ngModel)]=\"bDate\"\n                                (ngModelChange)=\"onDateChangeBank($event)\" class=\"form-control input-vendor\">\n                            <owl-date-time #dt3 pickerType=\"calendar\"></owl-date-time>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\" *ngIf=\"bCustomDate==true\">\n                        <div class=\"form-group\">\n                            <input [owlDateTime]=\"dt4\" [owlDateTimeTrigger]=\"dt4\" placeholder=\"To\" [(ngModel)]=\"bDate1\"\n                                (ngModelChange)=\"onDateChangeBank($event)\" class=\"form-control input-vendor\">\n                            <owl-date-time #dt4 pickerType=\"calendar\"></owl-date-time>\n                        </div>\n                    </div>\n                    <div class=\"col-md-3\">\n                        <div class=\"form-group\">\n                            <input placeholder=\"Particulars\" class=\"form-control input-vendor\" [(ngModel)]=\"particulars\"\n                                (input)=\"onParticulars()\">\n                        </div>\n                    </div>\n                    <div class=\"col-md-2 hidetrans\">\n                        <div class=\"form-group\">\n                            <div class=\"form-check\">\n                                <input class=\"form-check-input hide1\" type=\"checkbox\" name=\"hideTransaction\"\n                                    [value]=\"hideTransaction\" (click)=\"onHideTransaction(hideTransaction)\">\n                                <label class=\"form-check-label hidelabel\" for=\"hideTransaction\">\n                                    Hide DB Transaction\n                                </label>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <h5 class=\"table-head\" style=\"font-size: x-large;font-weight: bold;color: red;\">Bank Statement</h5>\n                <div class=\"table table-responsive table-striped table-bordered\">\n                    <table class=\"table  text-nowrap\">\n                        <thead>\n                            <tr>\n                                <th>Select</th>\n                                <th>Date</th>\n                                <th>Particulars</th>\n                                <th>Cr</th>\n                                <th>Db</th>\n                                <th>Balance </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let b of vendorBankStatement  |\n                            paginate: { id: 'listing_pagination10',\n                            itemsPerPage: 15,\n                            currentPage: page10,\n                            totalItems: totalRec } \">\n                                <td>\n                                    <div class=\"form-check\">\n                                        <div class=\"form-check\">\n                                            <input class=\"form-check-input\" type=\"checkbox\" id=idval{{b}}\n                                                name=\"selectedBankStmt\" [(ngModel)]=\"b.selectedBankStmt\"\n                                                (change)=\"onBankStatement(b)\">\n                                        </div>\n                                    </div>\n                                </td>\n                                <td>{{b.createdDate | date}}</td>\n                                <td>{{b.particulars}}</td>\n                                <td>{{b.creditAmount | currency : vendorAccountDetails.accountCurrency}}</td>\n                                <td *ngIf=\"b.debitAmount!=null\">\n                                    {{b.debitAmount | currency : vendorAccountDetails.accountCurrency}}</td>\n                                <td *ngIf=\"b.debitAmount==null\">-</td>\n                                <td>{{b.balance | currency : vendorAccountDetails.accountCurrency}}</td>\n                            </tr>\n\n                            <tr *ngIf=\"vendorBankStatement && vendorBankStatement.length ==0\">\n                                <td colspan=\"11\" style=\"color: rgba(244, 67, 54, 0.7) ;\">\n                                    <h4>No Data Found to Display.....</h4>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div class=\"d-flex justify-content-between\">\n                    <div class=\"wrap\">\n                        <pagination-controls id=\"listing_pagination6\" maxSize=\"5\" directionLinks=\"true\"\n                            responsive=\"true\" (pageChange)=\"page6 = $event\">\n                        </pagination-controls>\n                    </div>\n                </div>\n                <div class=\"button-section\">\n                    <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                    <button class=\"btn btn-dark-green btn-lg\" (click)=\"onApproveChequePayment()\">Approve</button>\n                    <!--<button class=\"btn btn-danger btn-lg\" (click)=\"onHoldChequePayment()\">Hold</button>&nbsp;&nbsp;-->\n                </div>\n            </div>\n        </div>\n    </section>\n</div>\n\n<!-- Hold Cheque Payment  -->\n<!--\n<div class=\"container-fluid\" *ngIf=\"iterationName == 'Hold_Cheque_Payment'\">\n    <section class=\"mb-5\">\n        <div class=\"card card-cascade narrower body-section\">\n            <div\n                class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n                <div>\n                </div>\n                <h4 href=\"\" class=\"white-text mx-3\">Bank Reconciliation ( Hold Transaction Cheque ) </h4>\n                <div>\n                </div>\n            </div>\n            <div class=\"card-body banrecon\">\n                <div class=\"row dummy\">\n                    <div class=\"col-md-3\">\n                        <div class=\"form-group\">\n                            <select class=\"form-control\" [(ngModel)]=\"cRange\" name=\"#cRange\"\n                                (ngModelChange)=\"onSelectRangeCheque()\">\n                                <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                                <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\" *ngIf=\"cCustomDate==true\">\n                        <div class=\"form-group\">\n                            <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" placeholder=\"From\" [(ngModel)]=\"cDate\"\n                                (ngModelChange)=\"onDateChangeCheque($event)\" class=\"form-control input-vendor\">\n                            <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\" *ngIf=\"cCustomDate==true\">\n                        <div class=\"form-group\">\n                            <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" placeholder=\"To\" [(ngModel)]=\"cDate1\"\n                                (ngModelChange)=\"onDateChangeCheque($event)\" class=\"form-control input-vendor\">\n                            <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <div class=\"form-group\">\n                            <input placeholder=\"Name\" class=\"form-control input-vendor\" [(ngModel)]=\"customerName\"\n                                (input)=\"onChequeCustomerName()\">\n\n                        </div>\n                    </div>\n                    <div class=\"col-md-3\">\n                        <div class=\"form-group\">\n                            <input placeholder=\"Cheque Number\" class=\"form-control input-vendor\"\n                                [(ngModel)]=\"chequeNumber\" (input)=\"onChequeNumber()\">\n                        </div>\n                    </div>\n                </div>\n                <h5 class=\"table-head\" style=\"font-size: x-large;font-weight: bold;color:red\">Hold Transactions</h5>\n                <div class=\"table table-responsive table-striped table-bordered\">\n                    <table class=\"table text-nowrap\">\n                        <thead>\n                            <tr>\n                                <th>Select</th>\n                                <th>Customer Id</th>\n                                <th>Name</th>\n                                <th>Top Up Ref.No </th>\n                                <th>Cheque Date</th>\n                                <th>Amount </th>\n                                <th>Cheque Issuing Bank Name</th>\n                                <th>Cheque Issuer Name</th>\n                                <th>Cheque Number</th>\n                                <th>Deposited On</th>\n                                <th>Status</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>\n                                    <div class=\"form-check\">\n                                        <input class=\"form-check-input\" type=\"radio\" id=cpayval{{c}} name=\"c\"\n                                            [value]=\"c\" (change)=\"onChequePayment(c)\">\n                                    </div>\n                                </td>\n                                <td>423442</td>\n                                <td>bsdaj</td>\n                                <td>TUP-12313</td>\n                                <td>sep 2 2020</td>\n                                <td>2000</td>\n                                <td>AXIS</td>\n                                <td>sfdsdf</td>\n                                <td>38242584</td>\n                                <td>sep 1 2020</td>\n                                <td>Pending</td>\n                            </tr>\n                            <tr>\n                                <td>\n                                    <div class=\"form-check\">\n                                        <input class=\"form-check-input\" type=\"radio\" id=cpayval{{c}} name=\"c\"\n                                            [value]=\"c\" (change)=\"onChequePayment(c)\">\n                                    </div>\n                                </td>\n                                <td>423442</td>\n                                <td>bsdaj</td>\n                                <td>TUP-12313</td>\n                                <td>sep 2 2020</td>\n                                <td>2000</td>\n                                <td>AXIS</td>\n                                <td>sfdsdf</td>\n                                <td>38242584</td>\n                                <td>sep 1 2020</td>\n                                <td>Pending</td>\n                            </tr>\n                            <tr *ngIf=\"chequePaymentList && chequePaymentList.length ==0\">\n                                <td colspan=\"11\" style=\"color: rgba(244, 67, 54, 0.7) ;\">\n                                    <h4>No Data Found to Display.....</h4>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <br>\n                <div class=\"d-flex justify-content-between\">\n                    <div class=\"wrap\">\n                        <pagination-controls id=\"listing_pagination7\" maxSize=\"4\" directionLinks=\"true\"\n                            (pageChange)=\"page7 = $event\">\n                        </pagination-controls>\n                    </div>\n\n                </div>\n                <br>\n                <div class=\"card\">\n                    <div class=\"card-body\">\n                        <div class=\"row\">\n                            <div class=\"col-sm-2\"></div>\n                            <div class=\"col-sm-2\" id=\"importhead\">\n                                Bank Name <p id=\"importbal\">{{accountDetails.bankName}}</p>\n                            </div>\n                            <div class=\"col-sm-4\" id=\"importhead\">\n                                Branch Name <p id=\"importbal\">{{accountDetails.branchName}}</p>\n                            </div>\n                            <div class=\"col-sm-2\" id=\"importhead\">\n                                A/c No <p id=\"importbal\">{{accountDetails.accountNumber}}</p>\n                            </div>\n                            <div class=\"col-sm-2\"></div>\n                        </div>\n                    </div>\n                </div>\n                <br>\n                <div class=\"row\">\n                    <div class=\"col-md-3\">\n                        <div class=\"form-group\">\n                            <select class=\"form-control\" [(ngModel)]=\"bRange\" name=\"#bRange\"\n                                (ngModelChange)=\"onSelectRangeBank()\">\n                                <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                                <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\" *ngIf=\"bCustomDate==true\">\n                        <div class=\"form-group\">\n                            <input [owlDateTime]=\"dt3\" [owlDateTimeTrigger]=\"dt3\" placeholder=\"From\" [(ngModel)]=\"bDate\"\n                                (ngModelChange)=\"onDateChangeBank($event)\" class=\"form-control input-vendor\">\n                            <owl-date-time #dt3 pickerType=\"calendar\"></owl-date-time>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\" *ngIf=\"bCustomDate==true\">\n                        <div class=\"form-group\">\n                            <input [owlDateTime]=\"dt4\" [owlDateTimeTrigger]=\"dt4\" placeholder=\"To\" [(ngModel)]=\"bDate1\"\n                                (ngModelChange)=\"onDateChangeBank($event)\" class=\"form-control input-vendor\">\n                            <owl-date-time #dt4 pickerType=\"calendar\"></owl-date-time>\n                        </div>\n                    </div>\n                    <div class=\"col-md-3\">\n                        <div class=\"form-group\">\n                            <input placeholder=\"Particulars\" class=\"form-control input-vendor\" [(ngModel)]=\"particulars\"\n                                (input)=\"onParticulars()\">\n                        </div>\n                    </div>\n                    <div class=\"col-md-2 hidetrans\">\n                        <div class=\"form-group\">\n                            <div class=\"form-check\">\n                                <input class=\"form-check-input hide1\" type=\"checkbox\" name=\"hideTransaction\"\n                                    [value]=\"hideTransaction\" (click)=\"onHideTransaction(hideTransaction)\">\n                                <label class=\"form-check-label hidelabel\" for=\"hideTransaction\">\n                                    Hide DB Transaction\n                                </label>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <h5 class=\"table-head\" style=\"font-size: x-large;font-weight: bold;color:red\">Bank Statement</h5>\n                <div class=\"table table-responsive table-striped table-bordered\">\n                    <table class=\"table  text-nowrap\">\n                        <thead>\n                            <tr>\n                                <th>Select</th>\n                                <th>Date</th>\n                                <th>Particulars</th>\n                                <th>Cr</th>\n                                <th>Db</th>\n                                <th>Balance </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>\n                                    <div class=\"form-check\">\n                                        <input class=\"form-check-input\" type=\"radio\" id=idval{{b}} name=\"b\" [value]=\"b\">\n                                    </div>\n                                </td>\n                                <td>Sep 8 2020</td>\n                                <td>dsfdsfs</td>\n                                <td>1000</td>\n                                <td>\n                                    3000</td>\n                                <td *ngIf=\"b.debitAmount==null\">-</td>\n                                <td>2000</td>\n                            </tr>\n                            <tr>\n                                <td>\n                                    <div class=\"form-check\">\n                                        <input class=\"form-check-input\" type=\"radio\" id=idval{{b}} name=\"b\" [value]=\"b\">\n                                    </div>\n                                </td>\n                                <td>Sep 8 2020</td>\n                                <td>dsfdsfs</td>\n                                <td>1000</td>\n                                <td>\n                                    3000</td>\n                                <td *ngIf=\"b.debitAmount==null\">-</td>\n                                <td>2000</td>\n                            </tr>\n                            <tr *ngIf=\"bankStatementList && bankStatementList.length ==0\">\n                                <td colspan=\"11\" style=\"color: rgba(244, 67, 54, 0.7) ;\">\n                                    <h4>No Data Found to Display.....</h4>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div class=\"d-flex justify-content-between\">\n                    <div class=\"wrap\">\n                        <pagination-controls id=\"listing_pagination8\" maxSize=\"5\" directionLinks=\"true\"\n                            responsive=\"true\" (pageChange)=\"page8 = $event\">\n                        </pagination-controls>\n                    </div>\n                </div>\n                <div class=\"button-section\">\n                    <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                    <button class=\"btn btn-dark-green btn-lg\" (click)=\"onApproveChequePayment()\">Approve</button>\n                    <button class=\"btn btn-deep-orange btn-lg\" (click)=\"onChequePayAmountMismatch()\">Amount\n                        Mismatch</button>\n                    <button class=\"btn btn-danger btn-lg\" (click)=\"onChequePayNotFound()\">Not Found</button>\n                </div>\n            </div>\n        </div>\n    </section>\n</div>\n-->\n<!--  Cheque Payment Report  -->\n<div class=\"container-fluid\" *ngIf=\"iterationName == 'Cheque_Payment_Report'\">\n    <section class=\"mb-5\">\n        <!--Card-->\n        <div class=\"card card-cascade narrower body-section\">\n            <div\n                class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n                <div>\n                </div>\n                <h4 href=\"\" class=\"white-text mx-3\">Payment by Cheque ( Report )</h4>\n                <div>\n                </div>\n            </div>\n            <div class=\"card-body\">\n                <div class=\"row\">\n                    <div class=\"col-md-3\">\n                        <div class=\"form-group\">\n                            <select class=\"form-control\" [(ngModel)]=\"cRange\" name=\"#cRange\"\n                                (ngModelChange)=\"onSelectRangeApprCheque()\">\n                                <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                                <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\" *ngIf=\"cCustomDate==true\">\n                        <div class=\"form-group\">\n                            <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" placeholder=\"From\" [(ngModel)]=\"cDate\"\n                                (ngModelChange)=\"onDateChangeApprCheque($event)\" class=\"form-control input-vendor\">\n                            <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                        </div>\n                    </div>\n                    <div class=\"col-md-2\" *ngIf=\"cCustomDate==true\">\n                        <div class=\"form-group\">\n                            <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" placeholder=\"To\" [(ngModel)]=\"cDate1\"\n                                (ngModelChange)=\"onDateChangeApprCheque($event)\" class=\"form-control input-vendor\">\n                            <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                        </div>\n                    </div>\n\n                    <div class=\"col-md-3\">\n                        <div class=\"form-group\">\n                            <input placeholder=\"Cheque Number\" class=\"form-control input-vendor\"\n                                [(ngModel)]=\"chequeNumber\" (input)=\"onApprChequeChequeNumber()\">\n                        </div>\n                    </div>\n                </div>\n                <div class=\"table table-responsive table-striped table-bordered\">\n                    <table class=\"table text-nowrap\">\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>Top Up Ref.No</th>\n                                <th>Cheque Date</th>\n                                <th>Cheque Amount </th>\n                                <th>Cheque Issuing Bank</th>\n                                <th>Cheque Number </th>\n                                <th> Deposited On </th>\n                                <th>Status </th>\n                                <!--<th>Seq</th>-->\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let c of chequePaymentList  |\n                            paginate: { id: 'listing_pagination10',\n                            itemsPerPage: 15,\n                            currentPage: page10,\n                            totalItems: totalRec } \">\n\n                                <td>{{c.chequeIssuerName}}</td>\n                                <td>{{c.topupRefNo}}</td>\n                                <td>{{c.chequeDate | date}}</td>\n                                <td>\n                                    {{c.paidAmount | currency : c.currency}}</td>\n                                <td>{{c.chequeIssuingBank}}</td>\n                                <td>{{c.chequeNumber}}</td>\n                                <td>{{c.topupDate | date}}</td>\n                                <td *ngIf=\"c.paymentStatus == 'PENDING'\" style=\"color:red;font-weight: bold;\">\n                                    {{c.paymentStatus}}</td>\n                                <td *ngIf=\"c.paymentStatus == 'APPROVED'\" style=\"color:green;font-weight: bold;\">\n                                    {{c.paymentStatus}}</td>\n\n\n                            </tr>\n                            <tr *ngIf=\"chequePaymentList && chequePaymentList.length==0\">\n                                <td colspan=\"13\">\n                                    <h4 style=\"color: rgba(244, 67, 54, 0.7) ;\">No Data Found To Display.....</h4>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div class=\"d-flex justify-content-between\">\n                    <div class=\"wrap\">\n                        <pagination-controls id=\"listing_pagination11\" maxSize=\"5\" directionLinks=\"true\"\n                            responsive=\"true\" (pageChange)=\"page11 = $event\">\n                        </pagination-controls>\n                    </div>\n                </div>\n                <div class=\"button-section\">\n                    <button class=\"btn btn-default btn-lg\" (click)=\"onBackClick()\">Back</button>\n                </div>\n            </div>\n        </div>\n\n    </section>\n</div>\n\n\n<!-- Bank Statement upload -->\n<div class=\"container-fluid\" *ngIf=\"iterationName =='STATEMENT_UPLOAD'\">\n\n    <div class=\"card card-cascade narrower body-section\">\n        <div\n            class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n            <div>\n            </div>\n            <h4 href=\"\" class=\"white-text mx-3\">Bank Statement Upload </h4>\n            <div>\n            </div>\n        </div>\n        <div class=\"card-body\">\n            <div *ngIf=\"currentFile\" class=\"progress\" style=\"height: 40px;\">\n                <div class=\"progress-bar progress-bar-info progress-bar-striped progress-bar-animated\"\n                    role=\"progressbar\" attr.aria-valuenow=\"{{ progress }}\" aria-valuemin=\"0\" aria-valuemax=\"100\"\n                    [ngStyle]=\"{width: progress + '%' }\">\n                    {{ progress }}%\n                </div>\n            </div>\n            <br>\n            <div class=\"p-3 mb-2 bg-info text-white\" *ngIf=\"message\">{{message}}</div>\n            <div class=\"p-3 mb-2 btn-danger text-white\" *ngIf=\"errmessage\">{{errmessage}}</div>\n            <div class=\"row\">\n                <div class=\"col-md-2\"></div>\n                <div class=\"col-md-3\">\n                    <button class=\"btn btn-default btn-block  btn-lg\">\n                        <input type=\"file\" (change)=\"selectFile($event)\" />\n                    </button>\n                </div>\n                <div class=\"col-md-3\">\n                    <button type=\"button\" class=\"btn btn-success btn-block btn-lg upload\" [disabled]=\"!selectedFiles\"\n                        (click)=\"upload()\">\n                        Upload\n                    </button>\n                </div>\n                <div class=\"col-md-3\">\n                    <button class=\"btn btn-info btn-block upload  btn-lg\" (click)=\"onBackClick()\">Back</button>\n                </div>\n            </div>\n        </div>\n\n    </div>\n</div>\n\n<div class=\"container-fluid\" style=\"padding-right:42px; padding-left:42px\" *ngIf=\"iterationName == 'Update_passbook'\">\n    <form class=\"form\" class=\"form\" (ngSubmit)=\"f1.form.valid && onUpdatePassbook()\" #f1=\"ngForm\">\n        <div class=\"card\">\n            <div class=\"view view-cascade gradient-card-header blue-gradient\">\n                <!-- Title -->\n                <h4 class=\"card-header-title mb-3\" style=\"color: white;\">Update Passbook</h4>\n            </div>\n            <br>\n            <div class=\"card\">\n                <div class=\"card-body\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-4\"></div>\n                        <div class=\"col-sm-4\" id=\"importhead\">\n                            Passbook Balance <p id=\"importbal\">{{passbook.balance}}</p>\n                        </div>\n                        <div class=\"col-sm-4\"></div>\n                    </div>\n                </div>\n            </div>\n            <hr>\n            <div class=\"card-body vendor\">\n                <div class=\"row\">\n                    <div class=\"col-sm-4\">\n                        <label>Date</label>\n                        <div class=\"form-group\">\n                            <input placeholder=\" Date\" [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\"\n                                class=\"form-control input-vendor\" [(ngModel)]=\"passbook.createdDate\" name=\"createdDate\"\n                                #createdDate=\"ngModel\">\n                            <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n\n                        </div>\n\n\n                    </div>\n                    <div class=\"col-sm-4\">\n                        <label>UTR / Cheque No</label>\n                        <input class=\"form-control input-vendor\" name=\"particulars\" required\n                            [(ngModel)]=\"passbook.particulars\" type=\"text\" placeholder=\"Enter UTR / Cheque No \"\n                            #particulars=\"ngModel\" [ngClass]=\"{ 'is-invalid': f1.submitted && particulars.invalid }\"\n                            required>\n                        <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && particulars.invalid\">\n                            <p *ngIf=\"particulars.errors.required\">Please Enter UTR / Cheque No</p>\n                        </div>\n                    </div>\n                    <div class=\"col-sm-4\">\n                        <label>Amount </label>\n                        <input class=\"form-control input-vendor\" name=\"creditAmount\" required\n                            [(ngModel)]=\"passbook.creditAmount\" type=\"text\" placeholder=\"Enter Amount \"\n                            #creditAmount=\"ngModel\" [ngClass]=\"{ 'is-invalid': f1.submitted && creditAmount.invalid }\"\n                            required>\n                        <div class=\"invalid-feedback\" *ngIf=\"f1.submitted && creditAmount.invalid\">\n                            <p *ngIf=\"creditAmount.errors.required\">Please Amount</p>\n                        </div>\n                    </div>\n                </div>\n                <br>\n                <div class=\"row\" style=\"float: right;\">\n                    <button (click)=\"onBackClick()\" class=\"btn btn-default btn-lg\" value=\"back\">Back</button>\n                    <button type=\"submit\" value=\"Submit\" class=\"btn btn-success btn-lg\">Save</button>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/viewallorders/viewallorders.component.html":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/viewallorders/viewallorders.component.html ***!
  \*************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n\n<div class=\"container-fluid\" *ngIf=\"iternation == 'initial'\">\n  <div class=\"card\">\n    <div\n      class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n      <div>\n      </div>\n      <h4 href=\"\" class=\"white-text mx-3\"> Processed Orders </h4>\n      <div>\n      </div>\n    </div><br>\n    <h4 class=\"filter\">Filters</h4>\n    <h5 class=\"head\"> <b>Vendor Name </b> &nbsp;&nbsp;\n      <b class=\"heading\">{{orderProcessingList[0].validateThrough.warehouse.masterOrganisation.organisationName}}</b>\n    </h5>\n    <div class=\"form-group row\">\n      <div class=\"col-md-2\">\n        <div class=\"form-group\">\n          <select class=\"form-control\" [(ngModel)]=\"userType\" name=\"#userType\" (ngModelChange)=\"onUserType(selected)\">\n            <option [ngValue]=\"null\" selected=\"selected\">Select User Type</option>\n            <option *ngFor=\"let c of corporateList\" [value]=\"c\">{{c}}</option>\n          </select>\n        </div>\n      </div>\n      <div class=\"col-lg-2\">\n        <div class=\"form-group\">\n          <select class=\"form-control\" name=\"warehouseName\" [(ngModel)]=\"warehouseName\" (change)=\"onWarehouse()\">\n            <option [ngValue]=\"null\">Select Warehouse</option>\n            <option *ngFor=\"let w of selectedWarehouse\" [ngValue]=\"w\">{{w}}</option>\n          </select>\n        </div>\n      </div>\n      <div class=\"col-lg-2\">\n        <div class=\"form-group\">\n          <select class=\"form-control\" name=\"productName\" [(ngModel)]=\"productName\" (change)=\"onProduct()\">\n            <option [ngValue]=\"null\">Select Product</option>\n            <option *ngFor=\"let p of selectedProduct\" [ngValue]=\"p\">{{p}}</option>\n          </select>\n        </div>\n      </div>\n      <div class=\"col-md-2\">\n        <div class=\"form-group\">\n          <select class=\"form-control\" [(ngModel)]=\"range\" name=\"#range\" (ngModelChange)=\"onSelect(selected)\">\n            <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n            <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n          </select>\n        </div>\n      </div>\n      <div class=\"col-md-2\" *ngIf=\"customDate==true\">\n        <div class=\"form-group\">\n          <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" [(ngModel)]=\"date\" placeholder=\"From\"\n            class=\"form-control input-vendor\" (ngModelChange)=\"onDateChange($event)\">\n          <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n        </div>\n      </div>\n      <div class=\"col-md-2\" *ngIf=\"customDate==true\">\n        <div class=\"form-group\">\n          <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" [(ngModel)]=\"date1\" placeholder=\"To\"\n            class=\"form-control input-vendor\" (ngModelChange)=\"onDateChange($event)\">\n          <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n        </div>\n      </div>\n    </div>\n  </div>\n  <br>\n\n  <section class=\"mb-5\">\n    <!--Card-->\n    <div class=\"card card-cascade narrower body-section\">\n      <div class=\"card-body\">\n        <div class=\"table table-responsive table-striped table-bordered\">\n          <table class=\"table text-nowrap\">\n            <thead>\n              <tr>\n                <th>Processed Id</th>\n                <th>Order Ref Number</th>\n                <th>Warehouse Name</th>\n                <th>Equipment Name</th>\n                <th>Delivered Product</th>\n                <th>Delivered Quantity</th>\n                <th>Price</th>\n                <th>Total Amount</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr *ngFor=\"let o of orderProcessingList | \n                paginate: { id: 'listing_pagination',\n                itemsPerPage: 5,\n                currentPage: page,\n                totalItems: totalRec }\n                \">\n                <td>{{o.processingId}}</td>\n                <td>{{o.orderManagement.orderRefNumber}}</td>\n                <td>{{o.validateThrough.warehouse.warehouseName}}</td>\n                <td>{{o.orderManagement.equipment.equipmentName}}</td>\n                <td *ngIf=\"o.deliveredProduct!=null\">{{o.deliveredProduct.productName}}</td>\n                <td *ngIf=\"o.deliveredProduct==null\"> - </td>\n                <td *ngIf=\"o.deliveredQuantity!=null\">{{o.deliveredQuantity}}</td>\n                <td *ngIf=\"o.deliveredQuantity==null\"> - </td>\n                <td>{{o.price}}</td>\n                <td>{{o.total  | currency : o.currency}}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        <br>\n        <div class=\"d-flex justify-content-between\">\n          <div class=\"wrap\">\n            <pagination-controls id=\"listing_pagination\" maxSize=\"5\" directionLinks=\"true\" responsive=\"true\"\n              (pageChange)=\"page = $event\">\n            </pagination-controls>\n          </div>\n        </div>\n        <div class=\"button-section\">\n          <button [routerLink]=\"['/dashboard']\" class=\"btn btn-default btn-lg\">Back </button>\n          <button [routerLink]=\"['/dashboard']\" class=\"btn btn-primary btn-lg\">Dashboard </button>\n        </div>\n      </div>\n    </div>\n  </section>\n\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/warehouse-user/order-details/order-details.component.html":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/warehouse-user/order-details/order-details.component.html ***!
  \*****************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n\n\n<div class=\"container\">\n  <div>\n    <h2 style=\"text-align: center;\">Order Details </h2>\n  </div>\n  <div class=\"card-body\">\n    <div class=\"row\">\n      <div class=\"col-md-6\">\n        <div class=\"list-group\">\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-primary\">Order\n            Id\n            <span>001</span>\n          </a>\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-danger\">\n            Vendor Id:\n            <span>V-IND_PUN-00001</span>\n          </a>\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-primary\">Customer\n            Id :\n            <span>E-IND_PUN-00001</span>\n          </a>\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-danger\">\n            Warehouse Id :\n            <span>Pun-IND_PUN-00001</span>\n          </a>\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-primary\">\n            Warehouse Name :\n            <span>Warehouse 1</span>\n          </a>\n\n        </div>\n      </div>\n      <div class=\"col-md-6\">\n\n        <div class=\"list-group list-1\">\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-primary\">\n            Order Product :\n            <span>Mouse</span>\n          </a>\n\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-danger\">Delivered\n            products\n            <span>Mouse</span>\n          </a>\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-primary\">Equipments\n            <span>Cable</span>\n          </a>\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-danger\">Quantitiy\n            <span>25 units</span>\n          </a>\n          <a\n            class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action list-group-item-primary\">Total\n            Value\n            <span>Rs. 1800</span>\n          </a>\n\n        </div>\n      </div>\n    </div><br>\n    <div class=\"button-section\">\n      <button type=\"submit\" [routerLink]=\"['/dashboard']\" class=\"btn btn-primary\">\n        Dashboard\n      </button>\n      <button type=\"submit\" [routerLink]=\"['/processorder']\" class=\"btn btn-default\">\n        Back\n      </button>\n    </div>\n  </div>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/warehouse-user/orderprocessing/orderprocessing.component.html":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/warehouse-user/orderprocessing/orderprocessing.component.html ***!
  \*********************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n\n<main class=\"my-form\">\n  <div class=\"container\" *ngIf=\"pageIterator == 1\">\n    <div class=\"row\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-12\">\n        <div class=\"card card-cascade narrower body-section\">\n          <div class=\"view view-cascade gradient-card-header blue-gradient\">\n            <h3 style=\"color: white;\">Order Processing</h3>\n          </div>\n          <div class=\"card-body\">\n            <form name=\"my-form\">\n              <div class=\"form-group row\">\n                <label for=\"warehouseId\" class=\"col-md-4 col-form-label text-md-right\">Warehouse Id </label>\n                <div class=\"col-md-6\">\n                  <input type=\"text\" id=\"warehouseId\" name=\"warehouseId\" class=\"form-control\" readonly=\"true\"\n                    [(ngModel)]=\"orderManagement.warehouse.warehouseId\" value=\"\" required #warehouseId=\"ngModel\" />\n\n                </div>\n              </div>\n\n              <div class=\"form-group row\">\n                <label for=\"customerId\" class=\"col-md-4 col-form-label text-md-right\">Customer Id </label>\n                <div class=\"col-md-6\">\n                  <input type=\"text\" id=\"customerId\" name=\"customerId\" class=\"form-control\"\n                    [(ngModel)]=\"orderManagement.customerId\" value=\"\" required #customerId=\"ngModel\"\n                    (change)=\"onCustomerId()\" />\n                </div>\n              </div>\n\n              <div class=\"form-group row\">\n                <label for=\"equipmentName\" class=\"col-md-4 col-form-label text-md-right\">Equipment </label>\n                <div class=\"col-md-6\">\n                  <select class=\"form-control\" name=\"equipmentName\"\n                    [(ngModel)]=\"orderManagement.equipment.equipmentName\" (change)=\"onEquipment()\">\n                    <option [ngValue]=\"e\">Select Equipment</option>\n                    <option *ngFor=\"let e of selectedEquipments\" [ngValue]=\"e\">{{e}}</option>\n                  </select>\n                </div>\n              </div>\n              <div class=\"form-group row\">\n                <label for=\"orderId\" class=\"col-md-4 col-form-label text-md-right\">Choose </label>\n                <div class=\"col-md-3\">\n                  <button type=\"button\" for=\"orderId\" class=\" btn btn-success btn-block exes\"\n                    (click)=\"onExistingOrder()\">Existing\n                    Order</button>\n                </div>\n                <div class=\"col-md-3\">\n                  <button type=\"button\" for=\"orderId\" class=\"btn btn-danger btn-block new \" (click)=\"onNewOrder()\">New\n                    Order</button>\n                </div>\n              </div>\n              <div *ngIf=\"createOrderYN!=null\">\n                <div class=\"form-group row\" *ngIf=\"createOrderYN==false\">\n                  <label for=\"orderId\" class=\"col-md-4 col-form-label text-md-right\">Order Ref Number </label>\n                  <div class=\"col-md-6\">\n                    <input type=\"text\" id=\"orderRefNumber\" name=\"orderRefNumber\" class=\"form-control\"\n                      [(ngModel)]=\"orderManagement.orderRefNumber\" value=\"\" required #orderId=\"ngModel\"\n                      (change)=\"onOrderRefNumber()\" />\n                  </div>\n                </div>\n                <div class=\"form-group row\">\n                  <label for=\"masterProducts\" class=\"col-md-4 col-form-label text-md-right\">Ordered Product </label>\n                  <div class=\"col-md-6\">\n                    <input disabled type=\"text\" class=\"form-control\" name=\"masterProducts\"\n                      [(ngModel)]=\"orderManagement.masterProducts.productName\" autofocus>\n                  </div>\n                </div>\n\n                <div class=\"form-group row\">\n                  <label for=\"masterProducts\" class=\"col-md-4 col-form-label text-md-right\">Delivery Product </label>\n                  <div class=\"col-md-6\">\n                    <select class=\"form-control\" name=\"product\" [(ngModel)]=\"product\" (change)=\"onChangeProduct()\">\n                      <option [ngValue]=\"p\">Select Product</option>\n                      <option *ngFor=\"let p of masterProductsList\" [ngValue]=\"p\">{{p.productName}}</option>\n                    </select>\n                  </div>\n                </div>\n\n                <div class=\"form-group row\">\n                  <label for=\"totalQuantity\" class=\"col-md-4 col-form-label text-md-right\">Quantity </label>\n                  <div class=\"col-md-6\">\n                    <input type=\"text\" class=\"form-control\" name=\"totalQuantity\"\n                      [(ngModel)]=\"orderManagement.totalQuantity\" autofocus (change)=\"onQuanity()\">\n                  </div>\n                </div>\n              </div>\n              <div class=\"row\">\n                <div class=\"col-md-4\"></div>\n                <div class=\"col-md-3\">\n                  <button type=\"submit\" [routerLink]=\"['/dashboard']\" class=\"btn btn-default btn-block btn-lg ware\">\n                    Back\n                  </button>\n                </div>\n                <div class=\"col-md-3\">\n                  <button *ngIf=\"createOrderYN==false\" (click)=\"onValidateOrder()\" type=\"button\"\n                    class=\"btn btn-primary btn-block btn-lg \">\n                    Validate Order\n                  </button>\n                  <button *ngIf=\"createOrderYN==true\" (click)=\"onCreateOrderValidate()\" type=\"submit\"\n                    class=\"btn btn-primary btn-block btn-lg\">\n                    Validate Order\n                  </button>\n\n                </div>\n\n                <div class=\"col-md-2\"></div>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-md-2\"></div>\n    </div>\n  </div>\n  <br>\n  <div id=\"login\" *ngIf=\"pageIterator == 2\">\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-md-3\"></div>\n        <div class=\"col-md-8\">\n          <div class=\"card\">\n            <h5 class=\"card-header gradient-card-header blue-gradient white-text text-center py-4\">\n              <strong>Order Delivery</strong>\n            </h5>\n            <form class=\"text-center border border-light p-5\">\n              <h4 class=\"head\">Order Confirmed by Admin and Vendor</h4>\n              <div class=\"form-group\">\n                <label style=\"float:left;font-size: initial;font-weight: bold;\">OTP By Customer </label>\n                <input class=\"form-control input-vendor\" name=\"otp\" [(ngModel)]=\"otp\" type=\"text\"\n                  placeholder=\"Enter OTP\" required>\n              </div>\n              <div class=\"row\">\n                <div class=\"col-md-6\">\n                  <button type=\"submit\" [routerLink]=\"['/dashboard']\" class=\"btn btn-primary btn-block btn-lg\">\n                    Dashboard\n                  </button>\n\n                </div>\n                <div class=\"col-md-6\">\n                  <button type=\"button\" class=\"btn btn-success btn-block btn-lg\" (click)=\"onSubmit()\">Validate\n                    OTP</button>\n\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n        <div class=\"col-md-3\"></div>\n      </div>\n    </div>\n  </div>\n</main>\n\n<div class=\"container importct\" *ngIf=\"pageIterator == 3\">\n  <form name=\"form\">\n    <div class=\"row\">\n      <div class=\"col-sm-3\"></div>\n      <div class=\"col-sm-6\" id=\"wallet-1\">\n        <div class=\"card-header view view-cascade gradient-card-header blue-gradient\">\n          Delivery Details\n        </div>\n        <div class=\"card\" id=\"import\">\n          <div class=\"row\">\n            <div class=\"col-sm-12\">\n              <div class=\"importcard\">\n                <hr />\n                <div class=\"row\">\n                  <div class=\"col-sm-6\">Customer Id</div>\n                  <div class=\"col-sm-6\" id=\"importname\">\n                    {{orderProcess.orderManagement.customerId}}\n                  </div>\n                </div>\n                <hr />\n                <div class=\"row\">\n                  <div class=\"col-sm-6\">Warehouse Id </div>\n                  <div class=\"col-sm-6\" id=\"importname\">\n                    {{orderProcess.orderManagement.warehouse.warehouseId}}\n                  </div>\n                </div>\n                <hr />\n                <div class=\"row\">\n                  <div class=\"col-sm-6\">Order Ref No</div>\n                  <div class=\"col-sm-6\" id=\"importname\">\n                    {{orderProcess.orderManagement.orderRefNumber}}\n                  </div>\n                </div>\n                <hr />\n                <div class=\"row\">\n                  <div class=\"col-sm-6\"> Processed Id </div>\n                  <div class=\"col-sm-6\" id=\"importname\">\n                    {{orderProcess.processingId}}\n                  </div>\n                </div>\n                <hr />\n                <div class=\"row\">\n                  <div class=\"col-sm-6\">Equipment </div>\n                  <div class=\"col-sm-6\" id=\"importname\">\n                    {{orderProcess.orderManagement.equipment.equipmentName}}\n                  </div>\n                </div>\n                <hr />\n                <div class=\"row\">\n                  <div class=\"col-sm-6\">Ordered Product </div>\n                  <div class=\"col-sm-6\" id=\"importname\">\n                    {{orderProcess.orderManagement.masterProducts.productName}}\n                  </div>\n                </div>\n                <hr />\n                <div class=\"row\">\n                  <div class=\"col-sm-6\">Delivered Product</div>\n                  <div class=\"col-sm-6\" id=\"importname\">\n                    {{orderProcess.deliveredProduct.productName}}\n                  </div>\n                </div>\n                <hr />\n                <div class=\"row\">\n                  <div class=\"col-sm-6\">Delivery Quantity</div>\n                  <div class=\"col-sm-6\" id=\"importname\">\n                    {{orderProcess.deliveredQuantity}}\n                  </div>\n                </div>\n                <hr />\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-sm-4\"></div>\n            <div class=\"col-sm-8\">\n              <div class=\"button-section\">\n                <button class=\"btn btn-primary btn-lg\" [routerLink]=\"['/dashboard']\">Dashboard</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/warehouse-user/process-order/process-order.component.html":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/warehouse-user/process-order/process-order.component.html ***!
  \*****************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n<br>\n<div class=\"container-fluid\" *ngIf=\"iteration=='viewAllProcessedOrders'\">\n  <div class=\"card\">\n    <div\n      class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n      <div>\n      </div>\n      <h4 href=\"\" class=\"white-text mx-3\">Processed Orders </h4>\n      <div>\n      </div>\n    </div>\n    <form>\n      <h4 class=\"filter\">Filters</h4>\n      <div class=\"form-row t2\">\n        <div class=\"col-sm-3\">\n          <label>Vendor Name  &nbsp;&nbsp;\n            <b class=\"head\">{{orderProcessingList[0].validateThrough.warehouse.masterOrganisation.organisationName}}</b>\n          </label>\n        </div>\n        <div class=\"col-sm-3\">\n          <label class=\"just\">Warehouse Name  &nbsp;&nbsp;\n            <b class=\"head\">{{orderProcessingList[0].validateThrough.warehouse.warehouseName}}</b>\n          </label>\n        </div>\n      </div>\n    </form>\n    <div class=\"row t3\">\n      <div class=\"col-md-3\">\n        <div class=\"form-group\">\n          <select class=\"form-control\" [(ngModel)]=\"userType\" name=\"#userType\" (ngModelChange)=\"onUserType(selected)\">\n            <option [ngValue]=\"null\">Select User Type </option>\n            <option *ngFor=\"let c of corporateList\" [value]=\"c\">{{c}}</option>\n\n          </select>\n        </div>\n      </div>\n      <div class=\"col-lg-3\">\n        <div class=\"form-group\">\n          <select class=\"form-control\" name=\"productName\" [(ngModel)]=\"productName\" (change)=\"onProduct()\">\n            <option [ngValue]=\"null\">Select Product</option>\n            <option *ngFor=\"let p of selectedProduct\" [ngValue]=\"p\">{{p}}</option>\n          </select>\n        </div>\n      </div>\n      <div class=\"col-md-2\">\n        <div class=\"form-group\">\n          <select class=\"form-control\" [(ngModel)]=\"range\" name=\"#range\" (ngModelChange)=\"onSelect(selected)\">\n            <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n            <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n          </select>\n        </div>\n      </div>\n      <div class=\"col-md-2\" *ngIf=\"customDate==true\">\n        <div class=\"form-group\">\n          <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" [(ngModel)]=\"date\" placeholder=\"From\"\n            class=\"form-control input-vendor\" (ngModelChange)=\"onDateChange($event)\">\n          <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n        </div>\n      </div>\n      <div class=\"col-md-2\" *ngIf=\"customDate==true\">\n        <div class=\"form-group\">\n          <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" [(ngModel)]=\"date1\" placeholder=\"To\"\n            class=\"form-control input-vendor\" (ngModelChange)=\"onDateChange($event)\">\n          <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <section class=\"mb-5\">\n    <!--Card-->\n    <div class=\"card card-cascade narrower body-section\">\n      <div\n        class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n        <div>\n        </div>\n        <h4 href=\"\" class=\"white-text mx-3\">Delivery</h4>\n        <div>\n        </div>\n      </div>\n      <div class=\"card-body\">\n        <div class=\"table table-striped table-bordered table-responsive\">\n          <table class=\"table text-nowrap\">\n            <thead>\n              <tr>\n                <th>Processed Id</th>\n                <th>Order Ref Number</th>\n                <th>Processed Date</th>\n                <th>Equipment Name</th>\n                <th>Ordered Product</th>\n                <th>Ordered Quantity</th>\n                <th>Delivered Product</th>\n                <th>Delivered Quantity</th>\n                <th>Price</th>\n                <th>Total Amount</th>\n                <th>Status</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr *ngFor=\"let o of orderProcessingList  | \n                          paginate: { id: 'listing_pagination',\n                          itemsPerPage: 5,\n                          currentPage: page,\n                          totalItems: totalRec }\n                          \">\n                <td>{{o.processingId}}</td>\n                <td>{{o.orderManagement.orderRefNumber}}</td>\n                <td>{{o.orderProcessedDate | date}}</td>\n                <td>{{o.orderManagement.equipment.equipmentName}}</td>\n                <td>{{o.orderManagement.masterProducts.productName}}</td>\n                <td>{{o.orderManagement.totalQuantity}}</td>\n                <td *ngIf=\"o.deliveredProduct!=null\">{{o.deliveredProduct.productName}}</td>\n                <td *ngIf=\"o.deliveredProduct==null\"> - </td>\n                <td *ngIf=\"o.deliveredQuantity!=null\">{{o.deliveredQuantity}}</td>\n                <td *ngIf=\"o.deliveredQuantity==null\"> - </td>\n                <td>{{o.price}}</td>\n                <td>{{o.total  | currency : o.currency}}</td>\n                <td *ngIf=\"o.markedForDeliveryYn==true\" style=\"color: green;\">\n                  Delivered\n                </td>\n                <td *ngIf=\"o.markedForDeliveryYn==false && o.validatedYn==false\" style=\"color: red;\">\n                  Not Delivered\n                </td>\n                <td *ngIf=\"o.markedForDeliveryYn==false && o.validatedYn==true\" style=\"color: red;\">\n                  <button style=\"color: red;\" (click)=\"onClick(o)\">Not Delivered</button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        <div class=\"d-flex justify-content-between\">\n          <div class=\"wrap\">\n            <pagination-controls id=\"listing_pagination\" maxSize=\"4\" directionLinks=\"true\" (pageChange)=\"page = $event\">\n            </pagination-controls>\n          </div>\n        </div>\n        <div class=\"button-section\">\n          <button [routerLink]=\"['/dashboard']\" class=\"btn btn-default btn-lg\">Back </button>\n          <button [routerLink]=\"['/dashboard']\" class=\"btn btn-primary btn-lg\">Dashboard </button>\n        </div>\n      </div>\n    </div>\n  </section>\n</div>\n\n<div id=\"login\" *ngIf=\"iteration =='otp'\">\n  <h3 class=\"text-center text-white pt-5\">Order Processing</h3>\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-md-3\"></div>\n      <div class=\"col-md-6\">\n        <div class=\"card\">\n          <h5 class=\"card-header gradient-card-header blue-gradient white-text text-center py-4\">\n            <strong>Order Delivery</strong>\n          </h5>\n          <form class=\"text-center border border-light p-5\">\n            <h4 style=\"color:tomato\">Order Confirmed By Admin</h4>\n            <div class=\"form-group\">\n              <label style=\"float:left\">OTP By Customer</label>\n              <input class=\"form-control\" name=\"otp\" [(ngModel)]=\"otp\" type=\"text\" placeholder=\"Enter OTP\" required>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-md-6\">\n                <button type=\"button\" class=\"btn btn-primary btn-block my-4\" (click)=\"onSubmit()\">Validate\n                  OTP</button>&nbsp;&nbsp;\n              </div>\n              <div class=\"col-md-6\">\n                <button type=\"button\" class=\"btn btn-default btn-block my-4\" (click)=\"onClickBack()\">Back</button>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n      <div class=\"col-md-3\"></div>\n    </div>\n  </div>\n</div>\n\n<div class=\"container\" *ngIf=\"iteration == 'summaryPage'\">\n\n  <div class=\"container\">\n    <div class=\"card p-2 mb-5 card-cascade narrower body-section\">\n      <div\n        class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n        <div>\n        </div>\n        <h4 href=\"\" class=\"white-text mx-3\"> Delivery Details </h4>\n        <div>\n        </div>\n      </div>\n      <div class=\"card-body\">\n        <div class=\"row\">\n          <div class=\"col-md-2 \">\n            <label>Processed Id :</label>\n          </div>\n          <div class=\"col-md-3 \">\n            <span class=\"badge badge-pill badge-secondary\">\n              <p class=\"summary\">{{orderProcess.processingId}}</p>\n            </span>\n          </div>\n          <div class=\"col-md-3 \">\n            <label>Order Ref No :</label>\n          </div>\n          <div class=\"col-md-3\">\n            <span class=\"badge badge-pill badge-secondary\">\n              <p class=\"summary\">{{orderProcess.orderManagement.orderRefNumber}}</p>\n            </span>\n          </div>\n        </div>\n\n        <div class=\"row\">\n          <div class=\"col-md-2 \">\n            <label>Ordered Product :</label>\n          </div>\n          <div class=\"col-md-3 \">\n            <span class=\"badge badge-pill badge-secondary\">\n              <p class=\"summary\">{{orderProcess.orderManagement.masterProducts.productName}}</p>\n            </span>\n          </div>\n          <div class=\"col-md-3 \">\n            <label>Delivered Product :</label>\n          </div>\n          <div class=\"col-md-3\">\n            <span class=\"badge badge-pill badge-secondary\">\n              <p class=\"summary\">{{orderProcess.deliveredProduct.productName}}</p>\n            </span>\n          </div>\n        </div>\n\n        <div class=\"row\">\n          <div class=\"col-md-2 \">\n            <label>Warehouse Id :</label>\n          </div>\n          <div class=\"col-md-3\">\n            <span class=\"badge badge-pill badge-secondary\">\n              <p class=\"summary\">{{orderProcess.orderManagement.warehouse.warehouseId}}</p>\n            </span>\n          </div>\n          <div class=\"col-md-3\">\n            <label> Customer Id :</label>\n          </div>\n          <div class=\"col-md-3 \">\n            <span class=\"badge badge-pill badge-secondary\">\n              <p class=\"summary\">{{orderProcess.orderManagement.customerId}}</p>\n            </span>\n          </div>\n        </div>\n\n        <div class=\"row\">\n          <div class=\"col-md-2\">\n            <label>Equipment :</label>\n          </div>\n          <div class=\"col-md-3\">\n            <span class=\"badge badge-pill badge-secondary\">\n              <p class=\"summary\">{{orderProcess.orderManagement.equipment.equipmentName}}</p>\n            </span>\n          </div>\n          <div class=\"col-md-3\">\n            <label>Delivery Quantity :</label>\n          </div>\n          <div class=\"col-md-3\">\n            <span class=\"badge badge-pill badge-secondary\">\n              <p class=\"summary\">{{orderProcess.deliveredQuantity}}</p>\n            </span>\n          </div>\n        </div>\n\n      </div>\n    </div>\n  </div>\n  <div class=\"button-section\">\n    <button class=\"btn btn-default\" [routerLink]=\"['/dashboard']\">Dashboard</button>\n  </div>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/warehouse-user/reconcilation-warehouse/reconcilation-warehouse.component.html":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/warehouse-user/reconcilation-warehouse/reconcilation-warehouse.component.html ***!
  \*************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n<div class=\"container-fluid\" *ngIf=\"interation =='initial'\">\n    <div class=\"card\">\n        <div\n            class=\"view view-cascade py-3 gradient-card-header info-color-dark mx-4 d-flex justify-content-between align-items-center\">\n            <div>\n            </div>\n            <h4 href=\"\" class=\"white-text mx-3\"> Reconciliation</h4>\n            <div>\n            </div>\n        </div>\n        <h4 class=\"filter\">Filters</h4>\n        <div class=\"row t3\">\n            <div class=\"col-sm-3\">\n                <label>Vendor Name  &nbsp;&nbsp;\n                    <b class=\"head\">{{reconciliation[0].warehouse.masterOrganisation.organisationName}}</b>\n                </label>\n            </div>\n            <div class=\"col-sm-3\">\n                <label>Warehouse Name \n                    &nbsp;&nbsp; <b class=\"head\">{{reconciliation[0].warehouse.warehouseName}}</b>\n                </label>\n            </div>\n            <div class=\"col-lg-2\"></div>\n        </div>\n        <div class=\"form-group row filter\">\n            <div class=\"col-md-3\">\n                <div class=\"form-group\">\n                    <select class=\"form-control\" [(ngModel)]=\"productName\" name=\"#productName\"\n                        (ngModelChange)=\"onSelectVendor(selected)\">\n                        <option [ngValue]=\"p\">Select Product</option>\n                        <option *ngFor=\"let p of productList\" [value]=\"p\">{{p}}</option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"col-md-3\">\n                <div class=\"form-group\">\n                    <select class=\"form-control\" [(ngModel)]=\"range\" name=\"#range\"\n                        (ngModelChange)=\"onSelectRangeForVendor(selected)\">\n                        <option [ngValue]=\"-1\" selected=\"selected\">Select Range</option>\n                        <option *ngFor=\"let r of ranges\" [value]=\"r.id\">{{r.value}}</option>\n\n                    </select>\n                </div>\n            </div>\n            <div class=\"col-md-3\" *ngIf=\"customDate==true\">\n                <div class=\"form-group\">\n                    <input [owlDateTime]=\"dt1\" [owlDateTimeTrigger]=\"dt1\" [(ngModel)]=\"date\" placeholder=\"From\"\n                        class=\"form-control input-vendor\" (ngModelChange)=\"onDateChangeForVendorRecon($event)\">\n                    <owl-date-time #dt1 pickerType=\"calendar\"></owl-date-time>\n                </div>\n            </div>\n            <div class=\"col-md-3\" *ngIf=\"customDate==true\">\n                <div class=\"form-group\">\n                    <input [owlDateTime]=\"dt2\" [owlDateTimeTrigger]=\"dt2\" [(ngModel)]=\"date1\" placeholder=\"To\"\n                        class=\"form-control input-vendor\" (ngModelChange)=\"onDateChangeForVendorRecon($event)\">\n                    <owl-date-time #dt2 pickerType=\"calendar\"></owl-date-time>\n                </div>\n            </div>\n        </div>\n    </div>\n    <section class=\"mb-5\">\n        <!--Card-->\n        <div class=\"card card-cascade narrower body-section\">\n            <div class=\"card-body\">\n                <div class=\"table table-striped table-bordered table-responsive\">\n                    <table class=\"table text-nowrap\">\n                        <thead>\n                            <tr>\n                                <th>Order Ref Number </th>\n                                <th>Delivery Date</th>\n                                <th>Ordered Product</th>\n                                <th>Ordered Quantity</th>\n                                <th>Delivered Product</th>\n                                <th>Delivered Quantity</th>\n                                <th>Price</th>\n                                <th>Total Amount</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let v of reconciliation  |\n                                paginate: { id: 'listing_pagination',\n                                itemsPerPage: 5,\n                                currentPage: page,\n                                totalItems: totalRec }\n                                \">\n                                <td>{{v?.orderRefNumber}}</td>\n                                <td>{{v?.deliveryDate | date}}</td>\n                                <td>{{v?.orderedProduct}}</td>\n                                <td>{{v?.orderedQuantity}} {{v.productUnit}}</td>\n                                <td>{{v?.deliveredProduct}}</td>\n                                <td>{{v?.deliveredQuantity}} {{v.productUnit}}</td>\n                                <td>{{v?.vendorProductPrice |currency: v.currency}} / {{v.productUnit}}</td>\n                                <td>{{v?.totalAmount |currency : v.currency}}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div class=\"d-flex justify-content-between\">\n                    <div class=\"wrap\">\n                        <pagination-controls id=\"listing_pagination\" maxSize=\"5\" directionLinks=\"true\"\n                            (pageChange)=\"page = $event\">\n                        </pagination-controls>\n                    </div>\n                </div>\n                <div class=\"button-section\">\n                    <button class=\"btn btn-default btn-lg\" [routerLink]=\"['/dashboard']\">Back</button>&nbsp;\n                </div>\n            </div>\n        </div>\n    </section>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/warehouse-user/reports/reports.component.html":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/warehouse-user/reports/reports.component.html ***!
  \*****************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<app-navbar></app-navbar>\n<div class=\"container\">\n    <br><br>\n    <div class=\"heading\">\n        <h2 style=\"text-align: center;color:darkslateblue;\">Reports</h2>\n    </div>\n    <br><br>\n    <div class=\"row justify-content-center\">\n\n        <div class=\"col-md-3\">\n            <button class=\"btn btn-primary\" (click)=\"toggleDetails()\"><b>Report 1</b></button>\n        </div>\n        <div class=\"col-md-3\">\n            <button class=\"btn btn-primary\" (click)=\"toggleDetails()\"><b>Report 2</b></button>\n\n        </div>\n        <div class=\"col-md-3\">\n            <button class=\"btn btn-primary\" (click)=\"toggleDetails()\"><b>Report 3</b></button>\n\n        </div>\n        <div class=\"col-md-3\">\n            <button class=\"btn btn-primary\" (click)=\"toggleDetails()\"> <b>Report 4</b></button>\n\n        </div>\n    </div><br><br>\n\n    <div class=\"container\" *ngIf=\"showDetails\">\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <nav>\n                    <div class=\"nav nav-tabs nav-fill\" id=\"nav-tab\" role=\"tablist\">\n                        <a class=\"nav-item nav-link active\" id=\"nav-home-tab\" data-toggle=\"tab\" href=\"#nav-home\"\n                            role=\"tab\" aria-controls=\"nav-home\" aria-selected=\"true\">Graphical Form</a>\n                        <a class=\"nav-item nav-link\" id=\"nav-profile-tab\" data-toggle=\"tab\" href=\"#nav-profile\"\n                            role=\"tab\" aria-controls=\"nav-profile\" aria-selected=\"false\">Tabular Form</a>\n                    </div>\n                </nav>\n                <div class=\"tab-content\" id=\"nav-tabContent\">\n                    <div class=\"tab-pane fade show active\" id=\"nav-home\" role=\"tabpanel\" aria-labelledby=\"nav-home-tab\">\n                        <div class=\"bar-image\">\n                            <img src=\"assets/bar.png\" style=\"height: 300px ;width: 100%; margin-top: 20px;\">\n                        </div><br>\n                        <div class=\"row\">\n                            <!-- <div class=\"col-md-3\">\n                                <button type=\"button\" [routerLink]=\"['/']\" class=\"btn btn-secondary\">Secondary</button>\n                            </div> -->\n                            <div class=\"col-md-3\">\n                                <button [routerLink]=\"['/dashboard']\" class=\"btn btn-primary\">Dashboard</button>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"tab-pane fade\" id=\"nav-profile\" role=\"tabpanel\" aria-labelledby=\"nav-profile-tab\">\n                        <div class=\"table-responsive\">\n                            <table class=\"table  table-striped table-responsive-md btn-table\">\n                                <thead>\n                                    <tr>\n\n                                        <th>Product Seller </th>\n                                        <th>ReSeller</th>\n                                        <th>Month</th>\n                                        <th>Sales</th>\n\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr>\n\n                                        <td>Anna</td>\n                                        <td>Pitt</td>\n                                        <td>35</td>\n                                        <td>New York</td>\n\n                                    </tr>\n                                    <tr>\n\n                                        <td>Anna</td>\n                                        <td>Pitt</td>\n                                        <td>35</td>\n                                        <td>New York</td>\n\n                                    </tr>\n                                    <tr>\n\n                                        <td>Anna</td>\n                                        <td>Pitt</td>\n                                        <td>35</td>\n                                        <td>New York</td>\n\n                                    </tr>\n                                    <tr>\n\n                                        <td>Anna</td>\n                                        <td>Pitt</td>\n                                        <td>35</td>\n                                        <td>New York</td>\n\n                                    </tr>\n\n\n                                </tbody>\n                            </table>\n\n                        </div>\n                        <div class=\"row\">\n                            <!-- <div class=\"col-md-1\">\n                                <span [routerLink]=\"['/']\" class=\"btn btn-info\">Export</span>&nbsp;&nbsp;\n                            </div> -->\n                            <div class=\"col-md-3\">\n                                <button [routerLink]=\"['/dashboard']\" class=\"btn btn-primary\">Dashboard</button>&nbsp;&nbsp;\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n\n\n\n    </div>\n</div>");

/***/ }),

/***/ "./node_modules/tslib/tslib.es6.js":
/*!*****************************************!*\
  !*** ./node_modules/tslib/tslib.es6.js ***!
  \*****************************************/
/*! exports provided: __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __exportStar, __values, __read, __spread, __spreadArrays, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__extends", function() { return __extends; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__assign", function() { return __assign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__rest", function() { return __rest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__decorate", function() { return __decorate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__param", function() { return __param; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__metadata", function() { return __metadata; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__awaiter", function() { return __awaiter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__generator", function() { return __generator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__exportStar", function() { return __exportStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__values", function() { return __values; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__read", function() { return __read; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spread", function() { return __spread; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spreadArrays", function() { return __spreadArrays; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__await", function() { return __await; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncGenerator", function() { return __asyncGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncDelegator", function() { return __asyncDelegator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncValues", function() { return __asyncValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__makeTemplateObject", function() { return __makeTemplateObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importStar", function() { return __importStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importDefault", function() { return __importDefault; });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __exportStar(m, exports) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}


/***/ }),

/***/ "./node_modules/webpack/hot sync ^\\.\\/log$":
/*!*************************************************!*\
  !*** (webpack)/hot sync nonrecursive ^\.\/log$ ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./log": "./node_modules/webpack/hot/log.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/webpack/hot sync ^\\.\\/log$";

/***/ }),

/***/ "./src/app/User/createorder-user/createorder-user.component.css":
/*!**********************************************************************!*\
  !*** ./src/app/User/createorder-user/createorder-user.component.css ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("/* new preorder css */\r\nbutton.btn.btn-cyan {\r\n  height: 59px;\r\n  width: 100%;\r\n  cursor: default;\r\n  padding: 10px;\r\n  font-size: unset;\r\n  font-weight: bold;\r\n}\r\np {\r\n  margin-top: 10px;\r\n}\r\nselect.form-control.equp {\r\n  margin-top: 10px;\r\n  height: 50px;\r\n}\r\nlabel.headinglabel {\r\n  margin-left: 7px;\r\n  font-weight: bold;\r\n}\r\nselect.form-control.ng-pristine.ng-invalid.is-invalid {\r\n  background-image: none;\r\n}\r\n/* time frame */\r\nbutton.btn.btn-cyan.time {\r\n  width: 100%;\r\n}\r\np.timeinside {\r\n  color: black;\r\n  font-size: initial;\r\n  margin-top: 2px;\r\n}\r\np.timeframemonth {\r\n  color: black;\r\n  margin-top: 2px;\r\n  font-size: initial;\r\n}\r\nbutton.btn.btn-outline-info.waves-effect {\r\n  width: 100%;\r\n  height: 59px;\r\n}\r\nbutton.btn.btn-deep-orange {\r\n  height: 59px;\r\n}\r\np.balancesection {\r\n  /* font-size: initial;\r\n  font-weight: bold; */\r\n  margin-top: 0px;\r\n}\r\n.row.total {\r\nmargin-left: 10px;\r\n}\r\n.row.total h4{\r\n  font-size: 25px;\r\n  font-weight: bold;\r\n  margin-left: 325px;\r\n}\r\n/* .button-section {\r\n  text-align: right;\r\n} */\r\nbutton.btn.btn-deep-orange {\r\n  width: 100%;\r\n  font-size: unset;\r\n  font-weight: bold;\r\n}\r\nbutton.btn.btn-light.price {\r\n  margin-left: -70px;\r\n  margin-top: -3px;\r\n}\r\nlabel.order {\r\n  margin-top: 21px;\r\n  font-size: large;\r\n  font-weight: bold;\r\n}\r\nbutton.btn.btn-primary.btn-rounded {\r\n  width: 81%;\r\n}\r\nbutton.btn.btn-primary.price {\r\n  margin-left: -70px;\r\n}\r\np.mprice {\r\n  margin-left: -35px;\r\n  margin-top: 10px;\r\n}\r\nspan.badge.badge-pill.badge-secondary.summary{\r\n  width: 100%;\r\n}\r\nlabel {\r\n  font-size: initial;\r\n  font-weight: bold;\r\n}\r\n.card.content.p-2.mb-5 {\r\n  margin-top: 18px;\r\n}\r\n.col-lg-4.col-md-4.orderinput {\r\n  margin-left: -96px;\r\n}\r\nform.create{\r\n  margin-left: 33px;\r\n  margin-right: 33px;\r\n}\r\np.orderkg {\r\n  margin-top: 12px;\r\n  font-weight: 500;\r\n  margin-left: -18px;\r\n}\r\nbutton.btn.btn-light.single{\r\n  height: 50px;\r\n  color: #e65100;\r\n  font-size: larger;\r\n  font-weight: bold;\r\n  cursor: default;\r\n  width: 100%;\r\n  margin-top: 16px;\r\n  margin-left: -10px;\r\n}\r\nbutton.btn.btn-danger.save {\r\n  font-size: initial;\r\n  font-weight: bold;\r\n  width: 100%;\r\n  margin-top: -3px;\r\n}\r\nlabel.lb {\r\n   \r\n    font-weight: 600;\r\n}\r\n.card.p-2.mb-5.card-cascade.savings {\r\n  margin-bottom: 13px !important;\r\n  height: 150px !important;\r\n}\r\n.balance\r\n{\r\n    text-align: center;\r\n    font-size: 30px;\r\n   \r\n}\r\nb.header-section {\r\n    color: green;\r\n}\r\nbutton.btn.btn-primary.top-btn {\r\n    margin-top: -3px;\r\n    height: 50px;\r\n    color: white;\r\n}\r\ninput.form-control.top-input{\r\n    height: 48px;\r\n}\r\n.row.order {\r\n  margin-top: 10px;\r\n}\r\np.marketprice {\r\n  font-size: initial;\r\n  font-weight: bold;\r\n  margin-top: 1px;\r\n  color: chocolate;\r\n}\r\n.row.first {\r\n  padding-right: 10px;\r\n  margin-left: -2px;\r\n  margin-right: -8px;\r\n}\r\n.row.time {\r\n  padding-right: 10px;\r\n}\r\n.row.bal {\r\n  padding-right: 10px;\r\n}\r\n.body-section {\r\n    margin-left: 21px;\r\n}\r\np.extra {\r\n  font-size: larger;\r\n  font-weight: bold;\r\n}\r\n.balancesection {\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n}\r\nlabel.elabel {\r\n  margin-top: 10px;\r\n  margin-left: 10px;\r\n}\r\nbutton.btn.btn-primary.wallet {\r\n  margin-top: -3px;\r\n  height: 50px;\r\n}\r\n.col-md-4.col-12.orderqty {\r\n  margin-left: -130px;\r\n}\r\nlabel.color {\r\n  color: chocolate;\r\n  font-size: large;\r\n}\r\n.card-body.sum {\r\n  margin-left: 12px;\r\n  margin-right: 12px;\r\n}\r\n.button-section.order {\r\n  position: relative;\r\n  left: -18px;\r\n}\r\n.btn.btn-lg {\r\n  padding: 1rem 2.4rem;\r\n  font-size: 17px;\r\n  font-weight: bold;\r\n}\r\n.input-group-text {\r\n  border: 1px solid black;\r\n  background: #fff;\r\n}\r\n.input-group-prepend.imprt {\r\n  height: 38px;\r\n}\r\n/* import */\r\nlabel#importlabel {\r\n  font-weight: 400;\r\n}\r\nlabel#importlabeltype {\r\n  margin-left: 32px;\r\n  font-size: 19px;\r\n  font-weight: bold;\r\n}\r\ndiv#importpaid1 {\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  text-align: right;\r\n  color: #ff4444;\r\n}\r\n.importcard {\r\n  padding: 10px;\r\n}\r\n/*  */\r\ndiv#import {\r\n  padding: 2rem;\r\n  font-size: 19px;\r\n}\r\ndiv#importname {\r\n  text-align: right;\r\n  font-weight: 700;\r\n  font-size: 19px;\r\n\r\n}\r\nh5.importinfo {\r\n  margin-top: -13px;\r\n  font-size: 24px;\r\n  font-weight: 500;\r\n}\r\n.container.importct {\r\n  max-width: 1673px;\r\n}\r\n.charge {\r\n  padding: 10px;\r\n}\r\nh4#importhead {\r\n  font-weight: bold;\r\n}\r\n.btn.btn-lg {\r\n  padding: 1rem 2.4rem;\r\n  font-size: 17px;\r\n  font-weight: bold;\r\n}\r\n.card-header.view.view-cascade.gradient-card-header.blue-gradient {\r\n  font-size: 21px;\r\n  font-weight: bold;\r\n  color: #fff!important;\r\n  text-align: center;\r\n}\r\n.card-header.view.view-cascade.gradient-card-header.blue-gradient.imp {\r\n  margin-top: -33px;\r\n  width: 114%;\r\n  margin-left: -32px;\r\n}\r\nh4.importtr{\r\n  font-size: 25px;\r\n  text-align: left;\r\n  padding-bottom: 14px;\r\n  margin-left: -2px;\r\n  font-weight: 500;\r\n}\r\nh4.importor{\r\n  margin-top: 33px;\r\n  font-weight: 600;\r\n}\r\nh4.importtr1 {\r\n  font-size: 25px;\r\n  text-align: left;\r\n  padding-bottom: 14px;\r\n  margin-left: -2px;\r\n  font-weight: 500;\r\n  margin-top: 22px;\r\n}\r\ndiv#importequp {\r\n  padding: 10px 0px 0px 30px;\r\n  font-size: 17px;\r\n  font-weight: bold;\r\n  margin-top: 10px;\r\n}\r\ndiv#importac{\r\n  padding: 10px 0px 0px 30px;\r\n  font-size: 17px;\r\n  font-weight: bold;\r\n  margin-top: 10px;\r\n}\r\ndiv#importbll {\r\n  margin-left: 250px;\r\n  padding: 10px;\r\n}\r\ndiv#importequipment {\r\n  margin-top: 18px;\r\n}\r\nbutton.btn.btn-block {\r\n  font-size: 19px;\r\n  font-weight: 900;\r\n}\r\ndiv#importpaid {\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  text-align: center;\r\n}\r\ndiv#nopre {\r\ntext-align: center;\r\ncolor: red;\r\nfont-size: 18px;\r\nfont-weight: bold;\r\n}\r\ndiv#importname1 {\r\n  font-size: 18px;\r\n  font-weight: 700;\r\n  text-align: right;\r\n}\r\ndiv#vendorname {\r\n  font-size: 20px;\r\n}\r\ndiv#totalorder {\r\n  text-align: center;\r\n  font-weight: bold;\r\n  font-size: 22px;\r\n}\r\ndiv#orderqt {\r\n  padding: 10px 1px 0px 132px;\r\n  margin-left: 58px;\r\n  font-weight: bold;\r\n  font-size: 17px;\r\n  margin-top: -4px;\r\n}\r\ndiv#singlepre {\r\n  font-size: 20px;\r\n}\r\ndiv#importorder {\r\n  padding: 12px;\r\n}\r\n/*  */\r\n.input-vendor {\r\n    height: 50px;\r\n    background: #ebf4f9;\r\n}\r\n.card-body.vendor{\r\n    padding-right: 3rem;\r\n    padding-left: 3rem;\r\n}\r\ndiv#vendorrow {\r\n    padding-top: 0.5rem;\r\n}\r\nselect.form-control:not([size]):not([multiple]) {\r\n    height: 50px;\r\n    background-color:#ebf4f9; ;\r\n}\r\n/* Mobile Portrait Size to Mobile Landscape Size (devices and browsers)\r\n=================================================================== */\r\n@media only screen and (max-width: 479px) {\r\n  /*  */\r\n  h4.totalunits{\r\n    margin-top: -27px;\r\n    margin-left: 239px;\r\n  }  \r\n  /* p.balancesection {\r\n    margin-top: 15px;\r\n    font-size: 15px;\r\n    font-weight: bold;\r\n}  */\r\np.mprice {\r\n  margin-left: 2px;\r\n  margin-top: 10px;\r\n}\r\n.col-md-4.col-4 {\r\n  margin-left: 58px;\r\n}\r\n\r\np.orderkg {\r\n    margin-top: 10px;\r\n    margin-left: -17px;\r\n    font-weight: bold;\r\n}\r\n.col-lg-4.col-md-4.orderinput {\r\n  margin-left: 0px;\r\n}\r\n\r\nbutton.btn.btn-light.price {\r\n    margin-left: 0px;\r\n    \r\n}\r\n\r\n\r\nlabel.order {\r\n  margin-top: 32px;\r\n}\r\n\r\n.row.total h4{\r\n  font-size: 25px;\r\n  font-weight: bold;\r\n  margin-left: 0px;\r\n}\r\n/* button section */\r\n\r\nbutton.btn.btn-primary.wallet {\r\n  width: 100%;\r\n  margin-left: 2px;\r\n}\r\nlabel.elabel {\r\n  margin-left: 0px;\r\n}\r\n.col-md-4.col-12.orderqty {\r\n  margin-left: 0px;\r\n}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvVXNlci9jcmVhdGVvcmRlci11c2VyL2NyZWF0ZW9yZGVyLXVzZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxxQkFBcUI7QUFDckI7RUFDRSxZQUFZO0VBQ1osV0FBVztFQUNYLGVBQWU7RUFDZixhQUFhO0VBQ2IsZ0JBQWdCO0VBQ2hCLGlCQUFpQjtBQUNuQjtBQUVBO0VBQ0UsZ0JBQWdCO0FBQ2xCO0FBQ0E7RUFDRSxnQkFBZ0I7RUFDaEIsWUFBWTtBQUNkO0FBQ0E7RUFDRSxnQkFBZ0I7RUFDaEIsaUJBQWlCO0FBQ25CO0FBRUE7RUFDRSxzQkFBc0I7QUFDeEI7QUFFQSxlQUFlO0FBQ2Y7RUFDRSxXQUFXO0FBQ2I7QUFDQTtFQUNFLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIsZUFBZTtBQUNqQjtBQUNBO0VBQ0UsWUFBWTtFQUNaLGVBQWU7RUFDZixrQkFBa0I7QUFDcEI7QUFDQTtFQUNFLFdBQVc7RUFDWCxZQUFZO0FBQ2Q7QUFFQTtFQUNFLFlBQVk7QUFDZDtBQUNBO0VBQ0U7c0JBQ29CO0VBQ3BCLGVBQWU7QUFDakI7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0VBQ0UsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixrQkFBa0I7QUFDcEI7QUFDQTs7R0FFRztBQUNIO0VBQ0UsV0FBVztFQUNYLGdCQUFnQjtFQUNoQixpQkFBaUI7QUFDbkI7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQixnQkFBZ0I7QUFDbEI7QUFDQTtFQUNFLGdCQUFnQjtFQUNoQixnQkFBZ0I7RUFDaEIsaUJBQWlCO0FBQ25CO0FBQ0E7RUFDRSxVQUFVO0FBQ1o7QUFDQTtFQUNFLGtCQUFrQjtBQUNwQjtBQUNBO0VBQ0Usa0JBQWtCO0VBQ2xCLGdCQUFnQjtBQUNsQjtBQUNBO0VBQ0UsV0FBVztBQUNiO0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsaUJBQWlCO0FBQ25CO0FBQ0E7RUFDRSxnQkFBZ0I7QUFDbEI7QUFDQTtFQUNFLGtCQUFrQjtBQUNwQjtBQUVBO0VBQ0UsaUJBQWlCO0VBQ2pCLGtCQUFrQjtBQUNwQjtBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLGdCQUFnQjtFQUNoQixrQkFBa0I7QUFDcEI7QUFDQTtFQUNFLFlBQVk7RUFDWixjQUFjO0VBQ2QsaUJBQWlCO0VBQ2pCLGlCQUFpQjtFQUNqQixlQUFlO0VBQ2YsV0FBVztFQUNYLGdCQUFnQjtFQUNoQixrQkFBa0I7QUFDcEI7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixpQkFBaUI7RUFDakIsV0FBVztFQUNYLGdCQUFnQjtBQUNsQjtBQUVBOztJQUVJLGdCQUFnQjtBQUNwQjtBQUNBO0VBQ0UsOEJBQThCO0VBQzlCLHdCQUF3QjtBQUMxQjtBQUNBOztJQUVJLGtCQUFrQjtJQUNsQixlQUFlOztBQUVuQjtBQUNBO0lBQ0ksWUFBWTtBQUNoQjtBQUNBO0lBQ0ksZ0JBQWdCO0lBQ2hCLFlBQVk7SUFDWixZQUFZO0FBQ2hCO0FBRUE7SUFDSSxZQUFZO0FBQ2hCO0FBRUE7RUFDRSxnQkFBZ0I7QUFDbEI7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixpQkFBaUI7RUFDakIsZUFBZTtFQUNmLGdCQUFnQjtBQUNsQjtBQUVBO0VBQ0UsbUJBQW1CO0VBQ25CLGlCQUFpQjtFQUNqQixrQkFBa0I7QUFDcEI7QUFDQTtFQUNFLG1CQUFtQjtBQUNyQjtBQUNBO0VBQ0UsbUJBQW1CO0FBQ3JCO0FBQ0E7SUFDSSxpQkFBaUI7QUFDckI7QUFDQTtFQUNFLGlCQUFpQjtFQUNqQixpQkFBaUI7QUFDbkI7QUFDQTtFQUNFLGVBQWU7RUFDZixpQkFBaUI7QUFDbkI7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixpQkFBaUI7QUFDbkI7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixZQUFZO0FBQ2Q7QUFFQTtFQUNFLG1CQUFtQjtBQUNyQjtBQUNBO0VBQ0UsZ0JBQWdCO0VBQ2hCLGdCQUFnQjtBQUNsQjtBQUNBO0VBQ0UsaUJBQWlCO0VBQ2pCLGtCQUFrQjtBQUNwQjtBQUNBO0VBQ0Usa0JBQWtCO0VBQ2xCLFdBQVc7QUFDYjtBQUNBO0VBQ0Usb0JBQW9CO0VBQ3BCLGVBQWU7RUFDZixpQkFBaUI7QUFDbkI7QUFDQTtFQUNFLHVCQUF1QjtFQUN2QixnQkFBZ0I7QUFDbEI7QUFFQTtFQUNFLFlBQVk7QUFDZDtBQUNBLFdBQVc7QUFDWDtFQUNFLGdCQUFnQjtBQUNsQjtBQUNBO0VBQ0UsaUJBQWlCO0VBQ2pCLGVBQWU7RUFDZixpQkFBaUI7QUFDbkI7QUFDQTtFQUNFLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsaUJBQWlCO0VBQ2pCLGNBQWM7QUFDaEI7QUFDQTtFQUNFLGFBQWE7QUFDZjtBQUNBLEtBQUs7QUFDTDtFQUNFLGFBQWE7RUFDYixlQUFlO0FBQ2pCO0FBQ0E7RUFDRSxpQkFBaUI7RUFDakIsZ0JBQWdCO0VBQ2hCLGVBQWU7O0FBRWpCO0FBRUE7RUFDRSxpQkFBaUI7RUFDakIsZUFBZTtFQUNmLGdCQUFnQjtBQUNsQjtBQUNBO0VBQ0UsaUJBQWlCO0FBQ25CO0FBQ0E7RUFDRSxhQUFhO0FBQ2Y7QUFDQTtFQUNFLGlCQUFpQjtBQUNuQjtBQUNBO0VBQ0Usb0JBQW9CO0VBQ3BCLGVBQWU7RUFDZixpQkFBaUI7QUFDbkI7QUFFQTtFQUNFLGVBQWU7RUFDZixpQkFBaUI7RUFDakIscUJBQXFCO0VBQ3JCLGtCQUFrQjtBQUNwQjtBQUNBO0VBQ0UsaUJBQWlCO0VBQ2pCLFdBQVc7RUFDWCxrQkFBa0I7QUFDcEI7QUFDQTtFQUNFLGVBQWU7RUFDZixnQkFBZ0I7RUFDaEIsb0JBQW9CO0VBQ3BCLGlCQUFpQjtFQUNqQixnQkFBZ0I7QUFDbEI7QUFDQTtFQUNFLGdCQUFnQjtFQUNoQixnQkFBZ0I7QUFDbEI7QUFDQTtFQUNFLGVBQWU7RUFDZixnQkFBZ0I7RUFDaEIsb0JBQW9CO0VBQ3BCLGlCQUFpQjtFQUNqQixnQkFBZ0I7RUFDaEIsZ0JBQWdCO0FBQ2xCO0FBR0E7RUFDRSwwQkFBMEI7RUFDMUIsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixnQkFBZ0I7QUFDbEI7QUFDQTtFQUNFLDBCQUEwQjtFQUMxQixlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLGdCQUFnQjtBQUNsQjtBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLGFBQWE7QUFDZjtBQUVBO0VBQ0UsZ0JBQWdCO0FBQ2xCO0FBRUE7RUFDRSxlQUFlO0VBQ2YsZ0JBQWdCO0FBQ2xCO0FBR0E7RUFDRSxlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLGtCQUFrQjtBQUNwQjtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCLFVBQVU7QUFDVixlQUFlO0FBQ2YsaUJBQWlCO0FBQ2pCO0FBQ0E7RUFDRSxlQUFlO0VBQ2YsZ0JBQWdCO0VBQ2hCLGlCQUFpQjtBQUNuQjtBQUNBO0VBQ0UsZUFBZTtBQUNqQjtBQUdBO0VBQ0Usa0JBQWtCO0VBQ2xCLGlCQUFpQjtFQUNqQixlQUFlO0FBQ2pCO0FBQ0E7RUFDRSwyQkFBMkI7RUFDM0IsaUJBQWlCO0VBQ2pCLGlCQUFpQjtFQUNqQixlQUFlO0VBQ2YsZ0JBQWdCO0FBQ2xCO0FBRUE7RUFDRSxlQUFlO0FBQ2pCO0FBQ0E7RUFDRSxhQUFhO0FBQ2Y7QUFDRSxLQUFLO0FBRUw7SUFDRSxZQUFZO0lBQ1osbUJBQW1CO0FBQ3ZCO0FBQ0E7SUFDSSxtQkFBbUI7SUFDbkIsa0JBQWtCO0FBQ3RCO0FBRUE7SUFDSSxtQkFBbUI7QUFDdkI7QUFFQTtJQUNJLFlBQVk7SUFDWix3QkFBd0I7QUFDNUI7QUFFQTtxRUFDcUU7QUFDckU7RUFDRSxLQUFLO0VBQ0w7SUFDRSxpQkFBaUI7SUFDakIsa0JBQWtCO0VBQ3BCO0VBQ0E7Ozs7SUFJRTtBQUNKO0VBQ0UsZ0JBQWdCO0VBQ2hCLGdCQUFnQjtBQUNsQjtBQUNBO0VBQ0UsaUJBQWlCO0FBQ25COztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGtCQUFrQjtJQUNsQixpQkFBaUI7QUFDckI7QUFDQTtFQUNFLGdCQUFnQjtBQUNsQjs7QUFFQTtJQUNJLGdCQUFnQjs7QUFFcEI7OztBQUdBO0VBQ0UsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixnQkFBZ0I7QUFDbEI7QUFDQSxtQkFBbUI7O0FBRW5CO0VBQ0UsV0FBVztFQUNYLGdCQUFnQjtBQUNsQjtBQUNBO0VBQ0UsZ0JBQWdCO0FBQ2xCO0FBQ0E7RUFDRSxnQkFBZ0I7QUFDbEI7O0FBRUEiLCJmaWxlIjoic3JjL2FwcC9Vc2VyL2NyZWF0ZW9yZGVyLXVzZXIvY3JlYXRlb3JkZXItdXNlci5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLyogbmV3IHByZW9yZGVyIGNzcyAqL1xyXG5idXR0b24uYnRuLmJ0bi1jeWFuIHtcclxuICBoZWlnaHQ6IDU5cHg7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgY3Vyc29yOiBkZWZhdWx0O1xyXG4gIHBhZGRpbmc6IDEwcHg7XHJcbiAgZm9udC1zaXplOiB1bnNldDtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5cclxucCB7XHJcbiAgbWFyZ2luLXRvcDogMTBweDtcclxufVxyXG5zZWxlY3QuZm9ybS1jb250cm9sLmVxdXAge1xyXG4gIG1hcmdpbi10b3A6IDEwcHg7XHJcbiAgaGVpZ2h0OiA1MHB4O1xyXG59XHJcbmxhYmVsLmhlYWRpbmdsYWJlbCB7XHJcbiAgbWFyZ2luLWxlZnQ6IDdweDtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5cclxuc2VsZWN0LmZvcm0tY29udHJvbC5uZy1wcmlzdGluZS5uZy1pbnZhbGlkLmlzLWludmFsaWQge1xyXG4gIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XHJcbn1cclxuXHJcbi8qIHRpbWUgZnJhbWUgKi9cclxuYnV0dG9uLmJ0bi5idG4tY3lhbi50aW1lIHtcclxuICB3aWR0aDogMTAwJTtcclxufVxyXG5wLnRpbWVpbnNpZGUge1xyXG4gIGNvbG9yOiBibGFjaztcclxuICBmb250LXNpemU6IGluaXRpYWw7XHJcbiAgbWFyZ2luLXRvcDogMnB4O1xyXG59XHJcbnAudGltZWZyYW1lbW9udGgge1xyXG4gIGNvbG9yOiBibGFjaztcclxuICBtYXJnaW4tdG9wOiAycHg7XHJcbiAgZm9udC1zaXplOiBpbml0aWFsO1xyXG59XHJcbmJ1dHRvbi5idG4uYnRuLW91dGxpbmUtaW5mby53YXZlcy1lZmZlY3Qge1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIGhlaWdodDogNTlweDtcclxufVxyXG5cclxuYnV0dG9uLmJ0bi5idG4tZGVlcC1vcmFuZ2Uge1xyXG4gIGhlaWdodDogNTlweDtcclxufVxyXG5wLmJhbGFuY2VzZWN0aW9uIHtcclxuICAvKiBmb250LXNpemU6IGluaXRpYWw7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7ICovXHJcbiAgbWFyZ2luLXRvcDogMHB4O1xyXG59XHJcbi5yb3cudG90YWwge1xyXG5tYXJnaW4tbGVmdDogMTBweDtcclxufVxyXG4ucm93LnRvdGFsIGg0e1xyXG4gIGZvbnQtc2l6ZTogMjVweDtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxuICBtYXJnaW4tbGVmdDogMzI1cHg7XHJcbn1cclxuLyogLmJ1dHRvbi1zZWN0aW9uIHtcclxuICB0ZXh0LWFsaWduOiByaWdodDtcclxufSAqL1xyXG5idXR0b24uYnRuLmJ0bi1kZWVwLW9yYW5nZSB7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgZm9udC1zaXplOiB1bnNldDtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5idXR0b24uYnRuLmJ0bi1saWdodC5wcmljZSB7XHJcbiAgbWFyZ2luLWxlZnQ6IC03MHB4O1xyXG4gIG1hcmdpbi10b3A6IC0zcHg7XHJcbn1cclxubGFiZWwub3JkZXIge1xyXG4gIG1hcmdpbi10b3A6IDIxcHg7XHJcbiAgZm9udC1zaXplOiBsYXJnZTtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5idXR0b24uYnRuLmJ0bi1wcmltYXJ5LmJ0bi1yb3VuZGVkIHtcclxuICB3aWR0aDogODElO1xyXG59XHJcbmJ1dHRvbi5idG4uYnRuLXByaW1hcnkucHJpY2Uge1xyXG4gIG1hcmdpbi1sZWZ0OiAtNzBweDtcclxufVxyXG5wLm1wcmljZSB7XHJcbiAgbWFyZ2luLWxlZnQ6IC0zNXB4O1xyXG4gIG1hcmdpbi10b3A6IDEwcHg7XHJcbn1cclxuc3Bhbi5iYWRnZS5iYWRnZS1waWxsLmJhZGdlLXNlY29uZGFyeS5zdW1tYXJ5e1xyXG4gIHdpZHRoOiAxMDAlO1xyXG59XHJcblxyXG5sYWJlbCB7XHJcbiAgZm9udC1zaXplOiBpbml0aWFsO1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcbi5jYXJkLmNvbnRlbnQucC0yLm1iLTUge1xyXG4gIG1hcmdpbi10b3A6IDE4cHg7XHJcbn1cclxuLmNvbC1sZy00LmNvbC1tZC00Lm9yZGVyaW5wdXQge1xyXG4gIG1hcmdpbi1sZWZ0OiAtOTZweDtcclxufVxyXG5cclxuZm9ybS5jcmVhdGV7XHJcbiAgbWFyZ2luLWxlZnQ6IDMzcHg7XHJcbiAgbWFyZ2luLXJpZ2h0OiAzM3B4O1xyXG59XHJcblxyXG5wLm9yZGVya2cge1xyXG4gIG1hcmdpbi10b3A6IDEycHg7XHJcbiAgZm9udC13ZWlnaHQ6IDUwMDtcclxuICBtYXJnaW4tbGVmdDogLTE4cHg7XHJcbn1cclxuYnV0dG9uLmJ0bi5idG4tbGlnaHQuc2luZ2xle1xyXG4gIGhlaWdodDogNTBweDtcclxuICBjb2xvcjogI2U2NTEwMDtcclxuICBmb250LXNpemU6IGxhcmdlcjtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxuICBjdXJzb3I6IGRlZmF1bHQ7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgbWFyZ2luLXRvcDogMTZweDtcclxuICBtYXJnaW4tbGVmdDogLTEwcHg7XHJcbn1cclxuXHJcbmJ1dHRvbi5idG4uYnRuLWRhbmdlci5zYXZlIHtcclxuICBmb250LXNpemU6IGluaXRpYWw7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgbWFyZ2luLXRvcDogLTNweDtcclxufVxyXG5cclxubGFiZWwubGIge1xyXG4gICBcclxuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbn1cclxuLmNhcmQucC0yLm1iLTUuY2FyZC1jYXNjYWRlLnNhdmluZ3Mge1xyXG4gIG1hcmdpbi1ib3R0b206IDEzcHggIWltcG9ydGFudDtcclxuICBoZWlnaHQ6IDE1MHB4ICFpbXBvcnRhbnQ7XHJcbn1cclxuLmJhbGFuY2Vcclxue1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgZm9udC1zaXplOiAzMHB4O1xyXG4gICBcclxufVxyXG5iLmhlYWRlci1zZWN0aW9uIHtcclxuICAgIGNvbG9yOiBncmVlbjtcclxufVxyXG5idXR0b24uYnRuLmJ0bi1wcmltYXJ5LnRvcC1idG4ge1xyXG4gICAgbWFyZ2luLXRvcDogLTNweDtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxufVxyXG5cclxuaW5wdXQuZm9ybS1jb250cm9sLnRvcC1pbnB1dHtcclxuICAgIGhlaWdodDogNDhweDtcclxufVxyXG5cclxuLnJvdy5vcmRlciB7XHJcbiAgbWFyZ2luLXRvcDogMTBweDtcclxufVxyXG5cclxucC5tYXJrZXRwcmljZSB7XHJcbiAgZm9udC1zaXplOiBpbml0aWFsO1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIG1hcmdpbi10b3A6IDFweDtcclxuICBjb2xvcjogY2hvY29sYXRlO1xyXG59XHJcblxyXG4ucm93LmZpcnN0IHtcclxuICBwYWRkaW5nLXJpZ2h0OiAxMHB4O1xyXG4gIG1hcmdpbi1sZWZ0OiAtMnB4O1xyXG4gIG1hcmdpbi1yaWdodDogLThweDtcclxufVxyXG4ucm93LnRpbWUge1xyXG4gIHBhZGRpbmctcmlnaHQ6IDEwcHg7XHJcbn1cclxuLnJvdy5iYWwge1xyXG4gIHBhZGRpbmctcmlnaHQ6IDEwcHg7XHJcbn1cclxuLmJvZHktc2VjdGlvbiB7XHJcbiAgICBtYXJnaW4tbGVmdDogMjFweDtcclxufVxyXG5wLmV4dHJhIHtcclxuICBmb250LXNpemU6IGxhcmdlcjtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG4uYmFsYW5jZXNlY3Rpb24ge1xyXG4gIGZvbnQtc2l6ZTogMTZweDtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5cclxubGFiZWwuZWxhYmVsIHtcclxuICBtYXJnaW4tdG9wOiAxMHB4O1xyXG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xyXG59XHJcblxyXG5idXR0b24uYnRuLmJ0bi1wcmltYXJ5LndhbGxldCB7XHJcbiAgbWFyZ2luLXRvcDogLTNweDtcclxuICBoZWlnaHQ6IDUwcHg7XHJcbn1cclxuXHJcbi5jb2wtbWQtNC5jb2wtMTIub3JkZXJxdHkge1xyXG4gIG1hcmdpbi1sZWZ0OiAtMTMwcHg7XHJcbn1cclxubGFiZWwuY29sb3Ige1xyXG4gIGNvbG9yOiBjaG9jb2xhdGU7XHJcbiAgZm9udC1zaXplOiBsYXJnZTtcclxufVxyXG4uY2FyZC1ib2R5LnN1bSB7XHJcbiAgbWFyZ2luLWxlZnQ6IDEycHg7XHJcbiAgbWFyZ2luLXJpZ2h0OiAxMnB4O1xyXG59XHJcbi5idXR0b24tc2VjdGlvbi5vcmRlciB7XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIGxlZnQ6IC0xOHB4O1xyXG59XHJcbi5idG4uYnRuLWxnIHtcclxuICBwYWRkaW5nOiAxcmVtIDIuNHJlbTtcclxuICBmb250LXNpemU6IDE3cHg7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuLmlucHV0LWdyb3VwLXRleHQge1xyXG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xyXG4gIGJhY2tncm91bmQ6ICNmZmY7XHJcbn1cclxuXHJcbi5pbnB1dC1ncm91cC1wcmVwZW5kLmltcHJ0IHtcclxuICBoZWlnaHQ6IDM4cHg7XHJcbn1cclxuLyogaW1wb3J0ICovXHJcbmxhYmVsI2ltcG9ydGxhYmVsIHtcclxuICBmb250LXdlaWdodDogNDAwO1xyXG59XHJcbmxhYmVsI2ltcG9ydGxhYmVsdHlwZSB7XHJcbiAgbWFyZ2luLWxlZnQ6IDMycHg7XHJcbiAgZm9udC1zaXplOiAxOXB4O1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcbmRpdiNpbXBvcnRwYWlkMSB7XHJcbiAgZm9udC1zaXplOiAyMHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xyXG4gIGNvbG9yOiAjZmY0NDQ0O1xyXG59XHJcbi5pbXBvcnRjYXJkIHtcclxuICBwYWRkaW5nOiAxMHB4O1xyXG59XHJcbi8qICAqL1xyXG5kaXYjaW1wb3J0IHtcclxuICBwYWRkaW5nOiAycmVtO1xyXG4gIGZvbnQtc2l6ZTogMTlweDtcclxufVxyXG5kaXYjaW1wb3J0bmFtZSB7XHJcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XHJcbiAgZm9udC13ZWlnaHQ6IDcwMDtcclxuICBmb250LXNpemU6IDE5cHg7XHJcblxyXG59XHJcblxyXG5oNS5pbXBvcnRpbmZvIHtcclxuICBtYXJnaW4tdG9wOiAtMTNweDtcclxuICBmb250LXNpemU6IDI0cHg7XHJcbiAgZm9udC13ZWlnaHQ6IDUwMDtcclxufVxyXG4uY29udGFpbmVyLmltcG9ydGN0IHtcclxuICBtYXgtd2lkdGg6IDE2NzNweDtcclxufVxyXG4uY2hhcmdlIHtcclxuICBwYWRkaW5nOiAxMHB4O1xyXG59XHJcbmg0I2ltcG9ydGhlYWQge1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcbi5idG4uYnRuLWxnIHtcclxuICBwYWRkaW5nOiAxcmVtIDIuNHJlbTtcclxuICBmb250LXNpemU6IDE3cHg7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuXHJcbi5jYXJkLWhlYWRlci52aWV3LnZpZXctY2FzY2FkZS5ncmFkaWVudC1jYXJkLWhlYWRlci5ibHVlLWdyYWRpZW50IHtcclxuICBmb250LXNpemU6IDIxcHg7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgY29sb3I6ICNmZmYhaW1wb3J0YW50O1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG4uY2FyZC1oZWFkZXIudmlldy52aWV3LWNhc2NhZGUuZ3JhZGllbnQtY2FyZC1oZWFkZXIuYmx1ZS1ncmFkaWVudC5pbXAge1xyXG4gIG1hcmdpbi10b3A6IC0zM3B4O1xyXG4gIHdpZHRoOiAxMTQlO1xyXG4gIG1hcmdpbi1sZWZ0OiAtMzJweDtcclxufVxyXG5oNC5pbXBvcnR0cntcclxuICBmb250LXNpemU6IDI1cHg7XHJcbiAgdGV4dC1hbGlnbjogbGVmdDtcclxuICBwYWRkaW5nLWJvdHRvbTogMTRweDtcclxuICBtYXJnaW4tbGVmdDogLTJweDtcclxuICBmb250LXdlaWdodDogNTAwO1xyXG59XHJcbmg0LmltcG9ydG9ye1xyXG4gIG1hcmdpbi10b3A6IDMzcHg7XHJcbiAgZm9udC13ZWlnaHQ6IDYwMDtcclxufVxyXG5oNC5pbXBvcnR0cjEge1xyXG4gIGZvbnQtc2l6ZTogMjVweDtcclxuICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gIHBhZGRpbmctYm90dG9tOiAxNHB4O1xyXG4gIG1hcmdpbi1sZWZ0OiAtMnB4O1xyXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XHJcbiAgbWFyZ2luLXRvcDogMjJweDtcclxufVxyXG5cclxuXHJcbmRpdiNpbXBvcnRlcXVwIHtcclxuICBwYWRkaW5nOiAxMHB4IDBweCAwcHggMzBweDtcclxuICBmb250LXNpemU6IDE3cHg7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgbWFyZ2luLXRvcDogMTBweDtcclxufVxyXG5kaXYjaW1wb3J0YWN7XHJcbiAgcGFkZGluZzogMTBweCAwcHggMHB4IDMwcHg7XHJcbiAgZm9udC1zaXplOiAxN3B4O1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIG1hcmdpbi10b3A6IDEwcHg7XHJcbn1cclxuXHJcbmRpdiNpbXBvcnRibGwge1xyXG4gIG1hcmdpbi1sZWZ0OiAyNTBweDtcclxuICBwYWRkaW5nOiAxMHB4O1xyXG59XHJcblxyXG5kaXYjaW1wb3J0ZXF1aXBtZW50IHtcclxuICBtYXJnaW4tdG9wOiAxOHB4O1xyXG59XHJcblxyXG5idXR0b24uYnRuLmJ0bi1ibG9jayB7XHJcbiAgZm9udC1zaXplOiAxOXB4O1xyXG4gIGZvbnQtd2VpZ2h0OiA5MDA7XHJcbn1cclxuXHJcblxyXG5kaXYjaW1wb3J0cGFpZCB7XHJcbiAgZm9udC1zaXplOiAxOHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG5kaXYjbm9wcmUge1xyXG50ZXh0LWFsaWduOiBjZW50ZXI7XHJcbmNvbG9yOiByZWQ7XHJcbmZvbnQtc2l6ZTogMThweDtcclxuZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuZGl2I2ltcG9ydG5hbWUxIHtcclxuICBmb250LXNpemU6IDE4cHg7XHJcbiAgZm9udC13ZWlnaHQ6IDcwMDtcclxuICB0ZXh0LWFsaWduOiByaWdodDtcclxufVxyXG5kaXYjdmVuZG9ybmFtZSB7XHJcbiAgZm9udC1zaXplOiAyMHB4O1xyXG59XHJcblxyXG5cclxuZGl2I3RvdGFsb3JkZXIge1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxuICBmb250LXNpemU6IDIycHg7XHJcbn1cclxuZGl2I29yZGVycXQge1xyXG4gIHBhZGRpbmc6IDEwcHggMXB4IDBweCAxMzJweDtcclxuICBtYXJnaW4tbGVmdDogNThweDtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxuICBmb250LXNpemU6IDE3cHg7XHJcbiAgbWFyZ2luLXRvcDogLTRweDtcclxufVxyXG5cclxuZGl2I3NpbmdsZXByZSB7XHJcbiAgZm9udC1zaXplOiAyMHB4O1xyXG59XHJcbmRpdiNpbXBvcnRvcmRlciB7XHJcbiAgcGFkZGluZzogMTJweDtcclxufVxyXG4gIC8qICAqL1xyXG4gIFxyXG4gIC5pbnB1dC12ZW5kb3Ige1xyXG4gICAgaGVpZ2h0OiA1MHB4O1xyXG4gICAgYmFja2dyb3VuZDogI2ViZjRmOTtcclxufVxyXG4uY2FyZC1ib2R5LnZlbmRvcntcclxuICAgIHBhZGRpbmctcmlnaHQ6IDNyZW07XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDNyZW07XHJcbn1cclxuXHJcbmRpdiN2ZW5kb3Jyb3cge1xyXG4gICAgcGFkZGluZy10b3A6IDAuNXJlbTtcclxufVxyXG5cclxuc2VsZWN0LmZvcm0tY29udHJvbDpub3QoW3NpemVdKTpub3QoW211bHRpcGxlXSkge1xyXG4gICAgaGVpZ2h0OiA1MHB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjojZWJmNGY5OyA7XHJcbn1cclxuXHJcbi8qIE1vYmlsZSBQb3J0cmFpdCBTaXplIHRvIE1vYmlsZSBMYW5kc2NhcGUgU2l6ZSAoZGV2aWNlcyBhbmQgYnJvd3NlcnMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0NzlweCkge1xyXG4gIC8qICAqL1xyXG4gIGg0LnRvdGFsdW5pdHN7XHJcbiAgICBtYXJnaW4tdG9wOiAtMjdweDtcclxuICAgIG1hcmdpbi1sZWZ0OiAyMzlweDtcclxuICB9ICBcclxuICAvKiBwLmJhbGFuY2VzZWN0aW9uIHtcclxuICAgIG1hcmdpbi10b3A6IDE1cHg7XHJcbiAgICBmb250LXNpemU6IDE1cHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufSAgKi9cclxucC5tcHJpY2Uge1xyXG4gIG1hcmdpbi1sZWZ0OiAycHg7XHJcbiAgbWFyZ2luLXRvcDogMTBweDtcclxufVxyXG4uY29sLW1kLTQuY29sLTQge1xyXG4gIG1hcmdpbi1sZWZ0OiA1OHB4O1xyXG59XHJcblxyXG5wLm9yZGVya2cge1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxuICAgIG1hcmdpbi1sZWZ0OiAtMTdweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcbi5jb2wtbGctNC5jb2wtbWQtNC5vcmRlcmlucHV0IHtcclxuICBtYXJnaW4tbGVmdDogMHB4O1xyXG59XHJcblxyXG5idXR0b24uYnRuLmJ0bi1saWdodC5wcmljZSB7XHJcbiAgICBtYXJnaW4tbGVmdDogMHB4O1xyXG4gICAgXHJcbn1cclxuXHJcblxyXG5sYWJlbC5vcmRlciB7XHJcbiAgbWFyZ2luLXRvcDogMzJweDtcclxufVxyXG5cclxuLnJvdy50b3RhbCBoNHtcclxuICBmb250LXNpemU6IDI1cHg7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgbWFyZ2luLWxlZnQ6IDBweDtcclxufVxyXG4vKiBidXR0b24gc2VjdGlvbiAqL1xyXG5cclxuYnV0dG9uLmJ0bi5idG4tcHJpbWFyeS53YWxsZXQge1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIG1hcmdpbi1sZWZ0OiAycHg7XHJcbn1cclxubGFiZWwuZWxhYmVsIHtcclxuICBtYXJnaW4tbGVmdDogMHB4O1xyXG59XHJcbi5jb2wtbWQtNC5jb2wtMTIub3JkZXJxdHkge1xyXG4gIG1hcmdpbi1sZWZ0OiAwcHg7XHJcbn1cclxuXHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIl19 */");

/***/ }),

/***/ "./src/app/User/createorder-user/createorder-user.component.ts":
/*!*********************************************************************!*\
  !*** ./src/app/User/createorder-user/createorder-user.component.ts ***!
  \*********************************************************************/
/*! exports provided: CreateorderUserComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreateorderUserComponent", function() { return CreateorderUserComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_services_order_management_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/order-management.service */ "./src/app/services/order-management.service.ts");
/* harmony import */ var src_app_model_order_management__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/model/order-management */ "./src/app/model/order-management.ts");
/* harmony import */ var src_app_model_wallet_details__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/model/wallet-details */ "./src/app/model/wallet-details.ts");
/* harmony import */ var src_app_services_pre_order_management_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/services/pre-order-management.service */ "./src/app/services/pre-order-management.service.ts");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");
/* harmony import */ var src_app_services_wallet_detail_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/services/wallet-detail.service */ "./src/app/services/wallet-detail.service.ts");
/* harmony import */ var src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/services/usermanagement.service */ "./src/app/services/usermanagement.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var src_app_model_order_dto__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! src/app/model/order-dto */ "./src/app/model/order-dto.ts");
/* harmony import */ var src_app_model_order_management_new_dto__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! src/app/model/order-management-new-dto */ "./src/app/model/order-management-new-dto.ts");












let CreateorderUserComponent = class CreateorderUserComponent {
    constructor(orderManagementService, preOrderManagementService, toastr, walletService, userService, router) {
        this.orderManagementService = orderManagementService;
        this.preOrderManagementService = preOrderManagementService;
        this.toastr = toastr;
        this.walletService = walletService;
        this.userService = userService;
        this.router = router;
        this.walletDetails = new src_app_model_wallet_details__WEBPACK_IMPORTED_MODULE_4__["WalletDetails"]();
        this.masterProductsList = new Array();
        this.equipmentList = new Array();
        this.newPreOrderList = new Array();
        this.showDetails = false;
        this.hideeq = false;
        this.months = new Array(12);
    }
    ngOnInit() {
        this.months[0] = "January";
        this.months[1] = "February";
        this.months[2] = "March";
        this.months[3] = "April";
        this.months[4] = "May";
        this.months[5] = "June";
        this.months[6] = "July";
        this.months[7] = "August";
        this.months[8] = "September";
        this.months[9] = "October";
        this.months[10] = "November";
        this.months[11] = "December";
        if (this.orderManagementService.getSource() == "saveOrder()") {
            let orderId = this.orderManagementService.getOrderId();
            this.orderManagementService.getOrderManagementByOrderId(orderId)
                .subscribe((data) => {
                this.orderManagement = data;
                this.orderManagementService.setOrderId(null);
                this.orderManagementService.setSource(null);
                this.iteration = "orderSuccessPage";
            });
        }
        else {
            this.userService.getLoggedInUser()
                .subscribe((data) => {
                this.user = data;
            });
            this.productWarehouseSelection();
        }
    }
    createOrder() {
        this.orderManagement1 = this.orderManagement1;
        console.log(this.orderManagement1);
        let orderDto = new src_app_model_order_dto__WEBPACK_IMPORTED_MODULE_10__["OrderDto"]();
        orderDto.productId = this.orderManagement1.masterProducts.productId;
        orderDto.warehouseId = this.orderManagement1.warehouse.warehouseId;
        if (this.equipmentId) {
            orderDto.equipmentId = this.equipmentId;
        }
        console.log(orderDto);
        this.orderManagementService.getOrderManagement(orderDto)
            .subscribe((data) => {
            console.log(data);
            this.orderManagement = new src_app_model_order_management_new_dto__WEBPACK_IMPORTED_MODULE_11__["OrderManagementNewDto"]();
            this.orderManagement = data;
            this.totalPreOrderQuantity = 0;
            this.totalLockedMargin = 0;
            if (this.orderManagement.preOrderNewDtoList) {
                for (let p of this.orderManagement.preOrderNewDtoList) {
                    this.totalPreOrderQuantity = p.remainingPreOrderQuantity + this.totalPreOrderQuantity;
                    this.totalLockedMargin = (p.margin * p.remainingPreOrderQuantity) + this.totalLockedMargin;
                }
            }
            console.log(this.orderManagement);
            this.curr = "fa-" + this.orderManagement.walletDetails.walletCurrency.toLowerCase();
            console.log(this.curr);
            if (this.orderManagement != null) {
                this.orderManagement.requiredAmount = 0;
                let date = new Date();
                this.month = this.months[date.getMonth()];
                this.year = date.getFullYear();
                this.insuficientBalYn = false;
                this.hideeq = false;
                this.iteration = "startPage";
            }
            else {
                // alert("Admin not set Price for this product plz select another product")
                this.toastr.warning('Admin not set Price for this product plz select another product..!', '', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
                this.productWarehouseSelection();
            }
        });
    }
    onProceed() {
        this.iteration = "onProceed";
    }
    /*onChange() {
      //this.showDetails = true;
      if (this.showDetails) {
        this.showDetails = !this.showDetails;
      }
      this.orderManagement.totalAll = 0;
      //this.orderManagement.totalValue = 0;
      this.orderManagement.totalOrderQuantityUsingPreOrder = 0;
      this.orderManagement.orderQuantity = null;
      this.orderManagement.totalLockedMargin = 0;
  
      this.orderManagement.topupAmount = 0;
      this.orderManagement.deductFromAvailBal = 0;
      this.orderManagement.preOrderMargin = 0;
      this.orderManagement.walletAmount = 0;
      this.orderManagement.totalPaid = 0;
      this.orderManagement.creditUsed = 0;
      this.orderManagementForPreOrder.preOrderManagementList = JSON.parse(JSON.stringify(this.oldpreOrderManagementList));
  
      //if no preorder
      if (this.orderManagementForPreOrder.preOrderManagementList == null && this.orderManagementForPreOrder.preOrderManagement == null) {
        this.orderManagement.orderQuantity = this.orderManagement.quantity;
        //this.orderManagement.totalValue = this.orderManagement.quantity * this.orderManagement.orderP;
       // this.orderManagement.totalAll = this.orderManagement.totalValue;
        //this.orderManagement.masterUnitPrice.itemValue = this.orderManagement.totalAll;
       // this.orderManagement.amountPayable = this.orderManagement.totalAll;
        this.orderManagement.totalAmount = this.orderManagement.orderQuantity * this.orderManagement.orderPrice;
      }
  
      // if single preorder
      if (this.orderManagementForPreOrder.preOrderManagement != null) {
        // if ordered Quantity greater than preorder quantity
        if (this.orderManagement.quantity != 0 && this.orderManagement.quantity > this.orderManagementForPreOrder.preOrderManagement.remainingpreOrderQuantity) {
          this.orderManagement.orderQuantity = this.orderManagement.quantity - this.orderManagementForPreOrder.preOrderManagement.remainingpreOrderQuantity;
          //this.orderManagement.totalValue = this.orderManagement.orderQuantity * this.orderManagement.orderP;
          if (this.orderManagement.configType == 'WAVG') {
            this.orderManagementForPreOrder.preOrderManagement.totalAmount = this.orderManagementForPreOrder.preOrderManagement.remainingpreOrderQuantity * this.orderManagementForPreOrder.avgPrice;
          }
          else {
            this.orderManagementForPreOrder.preOrderManagement.totalAmount = this.orderManagementForPreOrder.preOrderManagement.remainingpreOrderQuantity * this.orderManagementForPreOrder.preOrderManagement.preOrderPrice;
          }
          this.orderManagement.totalAmount = this.orderManagementForPreOrder.preOrderManagement.totalAmount + this.orderManagement.totalValue;
          this.orderManagementForPreOrder.preOrderManagement.totalAmount = this.orderManagementForPreOrder.preOrderManagement.totalAmount - this.orderManagementForPreOrder.preOrderManagement.marginLockedAmount;
          this.orderManagement.totalAll = this.orderManagement.totalValue + this.orderManagementForPreOrder.preOrderManagement.totalAmount;
          this.orderManagement.masterUnitPrice.itemValue = this.orderManagement.totalValue;
          this.orderManagement.preOrderMargin = this.orderManagementForPreOrder.preOrderManagement.marginLockedAmount;
          this.orderManagement.totalOrderQuantityUsingPreOrder = this.orderManagementForPreOrder.preOrderManagement.remainingpreOrderQuantity;
          this.orderManagementForPreOrder.preOrderManagement.orderQuantity = this.orderManagementForPreOrder.preOrderManagement.remainingpreOrderQuantity;
          this.orderManagementForPreOrder.preOrderManagement.totalOrderQuantity = this.orderManagementForPreOrder.preOrderManagement.totalOrderQuantity + this.orderManagementForPreOrder.preOrderManagement.orderQuantity;
          this.orderManagement.preOrderManagement = this.orderManagementForPreOrder.preOrderManagement;
          this.orderManagement.amountPayable = this.orderManagement.totalAll;
        }
        // if ordered Quantity less or equal than preorder Quantity
        if (this.orderManagement.quantity != 0 && this.orderManagementForPreOrder.preOrderManagement.remainingpreOrderQuantity != 0 && this.orderManagement.quantity <= this.orderManagementForPreOrder.preOrderManagement.remainingpreOrderQuantity) {
          this.orderManagementForPreOrder.preOrderManagement.orderQuantity = this.orderManagement.quantity;
          if (this.orderManagement.configType == 'WAVG') {
            this.orderManagement.totalAll = this.orderManagement.quantity * this.orderManagementForPreOrder.avgPrice;
          }
          else {
            this.orderManagement.totalAll = this.orderManagement.quantity * this.orderManagementForPreOrder.preOrderManagement.preOrderPrice;
          }
          this.orderManagement.totalAmount = this.orderManagement.totalAll;
          this.orderManagement.totalAll = this.orderManagement.totalAll - (this.orderManagementForPreOrder.preOrderManagement.orderQuantity * this.orderManagementForPreOrder.preOrderManagement.oldMargin);
          this.orderManagement.totalOrderQuantityUsingPreOrder = this.orderManagement.quantity;
          this.orderManagementForPreOrder.preOrderManagement.totalOrderQuantity = this.orderManagementForPreOrder.preOrderManagement.totalOrderQuantity + this.orderManagementForPreOrder.preOrderManagement.orderQuantity;
          this.orderManagement.preOrderManagement = this.orderManagementForPreOrder.preOrderManagement;
          this.orderManagement.amountPayable = this.orderManagement.totalAll;
        }
        this.orderManagement.preOrderMargin = this.orderManagementForPreOrder.preOrderManagement.orderQuantity * this.orderManagementForPreOrder.preOrderManagement.oldMargin;
      }
  
      //if multiple preorder
      if (this.orderManagementForPreOrder.preOrderManagementList != null) {
  
        if (this.orderManagement.configType == 'LIFO') {
          this.newPreOrderList = new Array<PreOrderManagement>();
          for (let p of this.orderManagementForPreOrder.preOrderManagementList) {
            this.newPreOrderList.push(JSON.parse(JSON.stringify(p)));
          }
          let preOrderReverseList = this.newPreOrderList.reverse();
          this.orderManagementForPreOrder.preOrderManagementList = JSON.parse(JSON.stringify(preOrderReverseList));
        }
  
        // if order quantity is less or equal than pre order quantity
        if (this.orderManagement.quantity != 0 && this.orderManagementForPreOrder.totalRemainingPreOrderQuantity != 0 && this.orderManagement.quantity <= this.orderManagementForPreOrder.totalRemainingPreOrderQuantity) {
          this.orderManagement.totalRemainingPreOrderQuantity = this.orderManagementForPreOrder.totalRemainingPreOrderQuantity;
          this.orderManagement.avgPrice = this.orderManagementForPreOrder.avgPrice;
          this.orderManagement.totalOrderQuantityUsingPreOrder = this.orderManagement.quantity;
          if (this.orderManagement.configType == 'WAVG') {
            this.orderManagement.totalAll = this.orderManagement.quantity * this.orderManagementForPreOrder.avgPrice;
            this.orderManagement.amountPayable = this.orderManagement.totalAll;
          }
  
        }
  
        // if order quantity is greater than pre order quantity
        if (this.orderManagementForPreOrder.totalRemainingPreOrderQuantity != 0 && this.orderManagement.quantity != 0 && this.orderManagement.quantity > this.orderManagementForPreOrder.totalRemainingPreOrderQuantity) {
          this.orderManagement.orderQuantity = this.orderManagement.quantity - this.orderManagementForPreOrder.totalRemainingPreOrderQuantity;
          this.orderManagement.totalValue = this.orderManagement.orderQuantity * this.orderManagement.orderP;
          this.orderManagement.masterUnitPrice.itemValue = this.orderManagement.totalValue;
          this.orderManagement.totalOrderQuantityUsingPreOrder = this.orderManagement.quantity - this.orderManagement.orderQuantity;
        }
  
        let quantity: number = 0;
        let RQ: number = 0;
        let total: number = 0;
        quantity = this.orderManagement.quantity;
        this.orderManagement.totalLockedMargin = 0;
        for (let p of this.orderManagementForPreOrder.preOrderManagementList) {
          if (quantity > 0 && p.remainingpreOrderQuantity > 0) {
            if (p.remainingpreOrderQuantity > quantity) {
              RQ = p.remainingpreOrderQuantity - quantity;
              p.orderQuantity = quantity;
              p.remainingpreOrderQuantity = RQ;
              p.totalOrderQuantity = (p.totalOrderQuantity) + (new Number(quantity));
              quantity = p.preOrderQuantity - p.totalOrderQuantity - p.remainingpreOrderQuantity;
            }
            if (p.remainingpreOrderQuantity <= quantity) {
              RQ = quantity - p.remainingpreOrderQuantity;
              p.orderQuantity = p.remainingpreOrderQuantity;
              quantity = RQ;
              p.totalOrderQuantity = p.totalOrderQuantity + p.remainingpreOrderQuantity;
              p.remainingpreOrderQuantity = p.preOrderQuantity - p.totalOrderQuantity;
            }
  
            p.marginLockedAmount = p.orderQuantity * p.oldMargin;
            this.orderManagement.totalLockedMargin = this.orderManagement.totalLockedMargin + p.marginLockedAmount;
            this.orderManagement.preOrderMargin = this.orderManagement.totalLockedMargin;
            if (this.orderManagement.configType == 'WAVG') {
              p.totalAmount = (p.orderQuantity * this.orderManagementForPreOrder.avgPrice) - p.marginLockedAmount;
              total = total + Number(p.totalAmount);
            }
            if (this.orderManagement.configType == 'FIFO' || this.orderManagement.configType == 'LIFO' || this.orderManagement.configType == 'HPF' || this.orderManagement.configType == 'LPF') {
              p.totalAmount = (p.orderQuantity * p.preOrderPrice) - p.marginLockedAmount;
              total = total + Number(p.totalAmount);
            }
  
          }
        }
        this.orderManagement.totalAll = this.orderManagement.totalValue + total;
        this.orderManagement.totalAmount = this.orderManagement.totalAll + this.orderManagement.totalLockedMargin;
        this.orderManagement.amountPayable = this.orderManagement.totalAll;
        this.orderManagement.avgPrice = this.orderManagementForPreOrder.avgPrice;
        this.orderManagement.totalRemainingPreOrderQuantity = this.orderManagementForPreOrder.totalRemainingPreOrderQuantity;
  
        if (this.orderManagement.configType == 'LIFO') {
          this.newPreOrderList = new Array<PreOrderManagement>();
          for (let p of this.orderManagementForPreOrder.preOrderManagementList) {
            this.newPreOrderList.push(JSON.parse(JSON.stringify(p)));
          }
          let preOrderReverseList = this.newPreOrderList.reverse();
          this.orderManagementForPreOrder.preOrderManagementList = JSON.parse(JSON.stringify(preOrderReverseList));
        }
  
        this.orderManagement.preOrderManagementList = this.orderManagementForPreOrder.preOrderManagementList;
      }
  
  
  
      // Saving Calculations
      if (this.orderManagement.externalVendorList[1].priceValue >= this.orderManagement.externalVendorList[0].priceValue) {
        this.orderManagement.savingsValue = (((this.orderManagement.externalVendorList[1].priceValue * this.orderManagement.quantity) - this.orderManagement.totalAmount) / (this.orderManagement.externalVendorList[1].priceValue * this.orderManagement.quantity)) * 100;
        this.orderManagement.marketPrice = this.orderManagement.externalVendorList[1].priceValue;
      }
      if (this.orderManagement.externalVendorList[0].priceValue >= this.orderManagement.externalVendorList[1].priceValue) {
        this.orderManagement.savingsValue = (((this.orderManagement.externalVendorList[0].priceValue * this.orderManagement.quantity) - this.orderManagement.totalAmount) / (this.orderManagement.externalVendorList[0].priceValue * this.orderManagement.quantity)) * 100;
        this.orderManagement.marketPrice = this.orderManagement.externalVendorList[0].priceValue;
      }
  
      this.orderManagement.totalQuantity = this.orderManagement.quantity;
      this.insuficientBalYn = false;
      let calculatedBalance;
      if (this.orderManagement.creditLimitManagement != null) {
        this.orderManagement.creditLimitManagement.deductFromCredit = 0;
        calculatedBalance = this.orderManagement.creditLimitManagement.availableCredits + this.orderManagement.walletDetails.availableBalance;
      }
      else {
        calculatedBalance = this.orderManagement.walletDetails.availableBalance;
      }
      if (this.orderManagement.totalAll > this.orderManagement.walletDetails.availableBalance) {
        if (this.user.userType == null || this.user.userType == "CORPORATE_SUPERVISOR") {
          this.orderManagement.requiredAmount = this.orderManagement.totalAll - this.orderManagement.walletDetails.availableBalance;
          this.orderManagement.walletAmount = this.orderManagement.walletDetails.availableBalance;
          this.orderManagement.deductFromAvailBal = this.orderManagement.totalAll;
          this.orderManagement.topupAmount = this.orderManagement.requiredAmount;
        }
        else {
          if (this.orderManagement.totalAll > calculatedBalance) {
            this.insuficientBalYn = true;
            this.toastr.error('You cant Procced... Because You Have insuffient balance in your App', 'Order', {
              timeOut: 10000,
              positionClass: 'toast-top-center',
              progressBar: true,
              progressAnimation: 'increasing'
            })
          }
          else {
            this.orderManagement.requiredAmount = this.orderManagement.totalAll - this.orderManagement.walletDetails.availableBalance;
            this.orderManagement.deductFromAvailBal = this.orderManagement.totalAll;
            this.orderManagement.topupAmount = this.orderManagement.requiredAmount;
            this.orderManagement.walletAmount = this.orderManagement.walletDetails.availableBalance;
          }
        }
      }
      if (this.orderManagement.totalAll <= this.orderManagement.walletDetails.availableBalance) {
        this.orderManagement.walletAmount = this.orderManagement.totalAll;
        this.orderManagement.requiredAmount = 0;
        this.orderManagement.deductFromAvailBal = this.orderManagement.totalAll;
      }
      if (this.orderManagement.creditYN == true) {
        this.orderManagement.creditYN = false;
      }
      console.log(this.orderManagement);
      console.log(this.orderManagement.preOrderMargin)
    }*/
    onChange() {
        //this.showDetails = true;
        if (this.showDetails) {
            this.showDetails = !this.showDetails;
        }
        this.orderManagement.totalAll = 0;
        //this.orderManagement.totalValue = 0;
        this.orderManagement.totalOrderQuantityUsingPreOrder = 0;
        this.orderManagement.orderQuantity = null;
        this.orderManagement.totalLockedMargin = 0;
        this.orderManagement.topupAmount = 0;
        this.orderManagement.deductFromAvailBal = 0;
        this.orderManagement.preOrderMargin = 0;
        this.orderManagement.walletAmount = 0;
        this.orderManagement.totalPaid = 0;
        this.orderManagement.creditUsed = 0;
        this.preOrderTotalAmount = 0;
        //if no preorder
        if (this.orderManagement.preOrderNewDtoList == null) {
            this.orderManagement.orderQuantity = this.orderManagement.quantity;
            this.orderManagement.totalAll = this.orderManagement.orderQuantity * this.orderManagement.orderPrice;
        }
        // if single preorder
        if (this.orderManagement.preOrderNewDtoList != null && this.orderManagement.preOrderNewDtoList.length == 1) {
            // if ordered Quantity greater than preorder quantity
            if (this.orderManagement.quantity > this.orderManagement.preOrderNewDtoList[0].remainingPreOrderQuantity) {
                this.orderManagement.orderQuantity = this.orderManagement.quantity - this.orderManagement.preOrderNewDtoList[0].remainingPreOrderQuantity;
                this.orderManagement.totalValue = this.orderManagement.orderQuantity * this.orderManagement.orderP;
                if (this.orderManagement.configType == 'WAVG') {
                    this.preOrderTotalAmount = (this.orderManagement.preOrderNewDtoList[0].remainingPreOrderQuantity * this.orderManagement.preOrderNewDtoList[0].avgPrice);
                }
                else {
                    this.preOrderTotalAmount = (this.orderManagement.preOrderNewDtoList[0].remainingPreOrderQuantity * this.orderManagement.preOrderNewDtoList[0].preOrderPrice);
                }
                this.orderManagement.preOrderIds = this.orderManagement.preOrderNewDtoList[0].preOrderId;
                this.orderManagement.totalAll = this.preOrderTotalAmount + this.orderManagement.totalValue;
            }
            // if ordered Quantity less or equal than preorder Quantity
            if (this.orderManagement.quantity <= this.orderManagement.preOrderNewDtoList[0].remainingPreOrderQuantity) {
                if (this.orderManagement.configType == 'WAVG') {
                    this.preOrderTotalAmount = this.orderManagement.quantity * this.orderManagement.preOrderNewDtoList[0].avgPrice;
                }
                else {
                    this.preOrderTotalAmount = this.orderManagement.quantity * this.orderManagement.preOrderNewDtoList[0].preOrderPrice;
                }
                this.orderManagement.totalAll = this.orderManagement.totalAll - this.preOrderTotalAmount;
                //this.orderManagement.totalOrderQuantityUsingPreOrder = this.orderManagement.quantity;
            }
        }
        //if multiple preorder 
        if (this.orderManagement.preOrderNewDtoList != null && this.orderManagement.preOrderNewDtoList.length > 1) {
            if (this.orderManagement.configType == 'LIFO') {
                this.newPreOrderList = new Array();
                for (let p of this.orderManagement.preOrderNewDtoList) {
                    this.newPreOrderList.push(JSON.parse(JSON.stringify(p)));
                }
                let preOrderReverseList = this.newPreOrderList.reverse();
                this.orderManagement.preOrderNewDtoList = JSON.parse(JSON.stringify(preOrderReverseList));
            }
            // if order quantity is less or equal than pre order quantity
            if (this.orderManagement.quantity <= this.totalPreOrderQuantity) {
                this.orderManagement.totalValue = 0;
                // if (this.orderManagement.configType == 'WAVG') {
                //   this.preOrderTotalAmount  = this.orderManagement.quantity * this.orderManagement.preOrderNewDtoList[0].avgPrice;
                // }
            }
            // if order quantity is greater than pre order quantity
            if (this.orderManagement.quantity > this.totalPreOrderQuantity) {
                this.orderManagement.orderQuantity = this.orderManagement.quantity - this.totalPreOrderQuantity;
                this.orderManagement.totalValue = this.orderManagement.orderQuantity * this.orderManagement.orderPrice;
                //this.orderManagement.totalOrderQuantityUsingPreOrder = this.orderManagement.quantity - this.orderManagement.orderQuantity;
            }
            let quantity = 0;
            let RQ = 0;
            let total = 0;
            quantity = this.orderManagement.quantity;
            this.orderManagement.totalLockedMargin = 0;
            let preOrderIds = new Array();
            for (let p of this.orderManagement.preOrderNewDtoList) {
                if (quantity > 0 && p.remainingPreOrderQuantity > 0) {
                    if (p.remainingPreOrderQuantity > quantity) {
                        RQ = p.remainingPreOrderQuantity - quantity;
                        p.orderQuantity = quantity;
                        //p.remainingPreOrderQuantity = RQ;
                        //p.totalOrderQuantity = (p.totalOrderQuantity) + (new Number(quantity));
                        //quantity = p.preOrderQuantity - p.totalOrderQuantity - p.remainingPreOrderQuantity;
                        quantity = 0;
                    }
                    if (p.remainingPreOrderQuantity <= quantity) {
                        RQ = quantity - p.remainingPreOrderQuantity;
                        p.orderQuantity = p.remainingPreOrderQuantity;
                        quantity = RQ;
                        //p.totalOrderQuantity = p.totalOrderQuantity + p.remainingpreOrderQuantity;
                        //p.remainingpreOrderQuantity = p.preOrderQuantity - p.totalOrderQuantity;
                    }
                    console.log(p.orderQuantity);
                    //p.marginLockedAmount = p.orderQuantity * p.oldMargin;
                    //this.orderManagement.totalLockedMargin = this.orderManagement.totalLockedMargin + p.marginLockedAmount;
                    //this.orderManagement.preOrderMargin = this.orderManagement.totalLockedMargin;
                    if (this.orderManagement.configType == 'WAVG') {
                        total = total + (p.orderQuantity * p.avgPrice);
                    }
                    if (this.orderManagement.configType == 'FIFO' || this.orderManagement.configType == 'LIFO' || this.orderManagement.configType == 'HPF' || this.orderManagement.configType == 'LPF') {
                        total = total + (p.orderQuantity * p.preOrderPrice);
                    }
                    this.orderManagement.totalLockedMargin = this.orderManagement.totalLockedMargin + (p.orderQuantity * p.margin);
                    preOrderIds.push(p.preOrderId);
                    this.orderManagement.preOrderIds = preOrderIds;
                }
            }
            console.log(this.orderManagement.totalValue);
            this.orderManagement.totalAll = this.orderManagement.totalValue + total;
            console.log(this.orderManagement.totalAll);
            //this.orderManagement.totalAmount = this.orderManagement.totalAll + this.orderManagement.totalLockedMargin;
            //this.orderManagement.amountPayable = this.orderManagement.totalAll;
            //this.orderManagement.avgPrice = this.orderManagementForPreOrder.avgPrice;
            //this.orderManagement.totalRemainingPreOrderQuantity = this.orderManagementForPreOrder.totalRemainingPreOrderQuantity;
            if (this.orderManagement.configType == 'LIFO') {
                this.newPreOrderList = new Array();
                for (let p of this.orderManagement.preOrderNewDtoList) {
                    this.newPreOrderList.push(JSON.parse(JSON.stringify(p)));
                }
                let preOrderReverseList = this.newPreOrderList.reverse();
                this.orderManagement.preOrderNewDtoList = JSON.parse(JSON.stringify(preOrderReverseList));
            }
        }
        // Saving Calculations
        if (this.orderManagement.externalVendorList[1].priceValue >= this.orderManagement.externalVendorList[0].priceValue) {
            this.orderManagement.savingsValue = (((this.orderManagement.externalVendorList[1].priceValue * this.orderManagement.quantity) - this.orderManagement.totalAll) / (this.orderManagement.externalVendorList[1].priceValue * this.orderManagement.quantity)) * 100;
            this.orderManagement.marketPrice = this.orderManagement.externalVendorList[1].priceValue;
        }
        if (this.orderManagement.externalVendorList[0].priceValue >= this.orderManagement.externalVendorList[1].priceValue) {
            this.orderManagement.savingsValue = (((this.orderManagement.externalVendorList[0].priceValue * this.orderManagement.quantity) - this.orderManagement.totalAll) / (this.orderManagement.externalVendorList[0].priceValue * this.orderManagement.quantity)) * 100;
            this.orderManagement.marketPrice = this.orderManagement.externalVendorList[0].priceValue;
        }
        //    this.orderManagement.totalQuantity = this.orderManagement.quantity;
        this.insuficientBalYn = false;
        let calculatedBalance;
        if (this.orderManagement.creditLimitManagement != null) {
            this.orderManagement.creditLimitManagement.deductFromCredit = 0;
            calculatedBalance = this.orderManagement.creditLimitManagement.availableCredits + this.orderManagement.walletDetails.availableBalance;
        }
        else {
            calculatedBalance = this.orderManagement.walletDetails.availableBalance;
        }
        if (this.orderManagement.totalAll > this.orderManagement.walletDetails.availableBalance) {
            if (this.user.userType == null || this.user.userType == "CORPORATE_SUPERVISOR") {
                this.orderManagement.requiredAmount = (this.orderManagement.totalAll - this.orderManagement.totalLockedMargin) - this.orderManagement.walletDetails.availableBalance;
                this.orderManagement.walletAmount = this.orderManagement.walletDetails.availableBalance;
                this.orderManagement.deductFromAvailBal = this.orderManagement.totalAll;
                this.orderManagement.topupAmount = this.orderManagement.requiredAmount;
            }
            else {
                if (this.orderManagement.totalAll > calculatedBalance) {
                    this.insuficientBalYn = true;
                    this.toastr.error('You cant Procced... Because You Have insuffient balance in your App', 'Order', {
                        timeOut: 10000,
                        positionClass: 'toast-top-center',
                        progressBar: true,
                        progressAnimation: 'increasing'
                    });
                }
                else {
                    this.orderManagement.requiredAmount = (this.orderManagement.totalAll - this.orderManagement.totalLockedMargin) - this.orderManagement.walletDetails.availableBalance;
                    this.orderManagement.deductFromAvailBal = this.orderManagement.totalAll;
                    this.orderManagement.topupAmount = this.orderManagement.requiredAmount;
                    this.orderManagement.walletAmount = this.orderManagement.walletDetails.availableBalance;
                }
            }
        }
        if (this.orderManagement.totalAll <= this.orderManagement.walletDetails.availableBalance) {
            this.orderManagement.walletAmount = this.orderManagement.totalAll;
            this.orderManagement.requiredAmount = 0;
            this.orderManagement.deductFromAvailBal = this.orderManagement.totalAll;
        }
        if (this.orderManagement.creditYN == true) {
            this.orderManagement.creditYN = false;
        }
        console.log(this.orderManagement);
        //console.log(this.orderManagement.preOrderMargin)
    }
    saveOrder() {
        let order = new src_app_model_order_dto__WEBPACK_IMPORTED_MODULE_10__["OrderDto"]();
        order.orderQuantity = this.orderManagement.orderQuantity;
        order.totalQuantity = this.orderManagement.quantity;
        order.preOrderIds = this.orderManagement.preOrderIds;
        order.orderPrice = this.orderManagement.orderPrice;
        order.productId = this.orderManagement.productId;
        order.warehouseId = this.orderManagement.warehouseId;
        if (this.equipmentId) {
            order.equipmentId = this.equipmentId;
        }
        if (this.orderManagement.creditYN == false || this.orderManagement.creditYN == null) {
            if (this.orderManagement.totalAll > this.orderManagement.walletDetails.availableBalance) {
                this.toastr.error('You have insufficient Balance in ur wallet plz add money to ur wallet then continue the order!!!!', 'Order', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressAnimation: 'increasing'
                });
                this.walletService.setSource("onTopupWallet()");
                this.orderManagementService.setSource("saveOrder()");
                order.requiredAmount = this.orderManagement.requiredAmount;
                console.log(order);
                this.orderManagementService.setOrderDto(order);
                this.router.navigate(['/wallet']);
            }
            if (this.orderManagement.totalAll <= this.orderManagement.walletDetails.availableBalance) {
                console.log(order);
                this.orderManagementService.saveOrder(order)
                    .subscribe((data) => {
                    this.orderManagement = data;
                    if (this.orderManagement.orderRefNumber != null) {
                        this.orderManagementService.getOrderManagementByOrderId(this.orderManagement.orderId)
                            .subscribe((data) => {
                            this.orderManagement = data;
                            this.toastr.success('Order Placed Successfully!!!!', 'Order', { timeOut: 10000, positionClass: 'toast-top-center', progressAnimation: 'increasing' });
                            this.iteration = "orderSuccessPage";
                        });
                    }
                    else {
                        this.toastr.error('Order Price is Changed... Do You want To Continue', 'Pre Order', { timeOut: 10000, positionClass: 'toast-top-center', progressAnimation: 'increasing' });
                        this.iteration = "onProceed";
                    }
                });
            }
        }
        /*if (this.orderManagement.creditYN == true) {
          if (this.orderManagement.deductFromAvailBal > this.orderManagement.walletDetails.availableBalance) {
            // alert("You have insufficient Balance in ur wallet plz add money to ur wallet then continue the order")
            this.toastr.error('You have insufficient Balance in ur wallet plz add money to ur wallet then continue the order!!!!', '', {
              timeOut: 10000,
              positionClass: 'toast-top-center',
              progressAnimation: 'increasing'
            })
            this.walletService.setSource("onTopupWallet()");
            this.orderManagementService.setSource("saveOrder()")
            this.orderManagement.walletAmount = this.orderManagement.walletDetails.availableBalance;
    
            this.orderManagementService.setOrder(this.orderManagement);
            this.router.navigate(['/wallet']);
    
    
            //this.iteration = "topUpWallet";
          }
          if (this.orderManagement.deductFromAvailBal <= this.orderManagement.walletDetails.availableBalance) {
            console.log(this.orderManagement)
            //this.orderManagement.deductFromAvailBal = this.orderManagement.walletDetails.availableBalance;
            this.orderManagementService.saveOrder(this.orderManagement)
              .subscribe((data) => {
                this.toastr.success('Order Placed Successfully!!!!', 'Order', {
                  timeOut: 10000,
                  positionClass: 'toast-top-center',
                  progressAnimation: 'increasing'
                })
                this.orderManagement = data;
    
                this.iteration = "orderSuccessPage";
              })
          }
        }*/
    }
    productWarehouseSelection() {
        this.preOrderManagementService.getEquipmentProductMappingListForForLoggedInUser()
            .subscribe((data) => {
            if (data != null) {
                this.masterProductsList = new Array();
                this.equipmentProductMapping = data;
                for (let mapping of this.equipmentProductMapping) {
                    this.masterProductsList.push(mapping.masterProducts);
                    this.equipmentList.push(mapping.equipment);
                }
                let newlist = this.masterProductsList.filter((v, i) => this.masterProductsList.findIndex(item => item.productId == v.productId) === i);
                this.masterProductsList = newlist;
                console.log(this.masterProductsList);
                if (this.orderManagement == null) {
                    this.orderManagement1 = new src_app_model_order_management__WEBPACK_IMPORTED_MODULE_3__["OrderManagement"]();
                }
                else {
                    console.log(this.orderManagement);
                    this.orderManagement1 = this.orderManagement;
                    for (let p of this.masterProductsList) {
                        if (p.productId == this.orderManagement.productId)
                            this.orderManagement.masterProducts = p;
                    }
                }
                this.iteration = 'productWarehouseSelection';
            }
        });
    }
    onEditProductWarehouseSelection() {
        this.preOrderManagementService.getEquipmentProductMappingListForForLoggedInUser()
            .subscribe((data) => {
            if (data != null) {
                this.masterProductsList = new Array();
                this.equipmentProductMapping = data;
                for (let mapping of this.equipmentProductMapping) {
                    this.masterProductsList.push(mapping.masterProducts);
                    this.equipmentList.push(mapping.equipment);
                }
                let newlist = this.masterProductsList.filter((v, i) => this.masterProductsList.findIndex(item => item.productId == v.productId) === i);
                this.masterProductsList = newlist;
                if (this.orderManagement == null) {
                    this.orderManagement1 = new this.orderManagement();
                }
                else {
                    this.orderManagement1 = this.orderManagement;
                    console.log(this.orderManagement1);
                    for (let p of this.masterProductsList) {
                        if (p.productId == this.orderManagement.productId)
                            this.orderManagement1.masterProducts = p;
                    }
                    for (let w of this.warehouseList) {
                        if (w.warehouseId == this.orderManagement.warehouseId) {
                            this.orderManagement1.warehouse = w;
                        }
                    }
                }
                this.iteration = 'productWarehouseSelection';
            }
        });
    }
    onChangeProduct() {
        this.preOrderManagementService.getWarehouseProductMappingByMasterProducts(this.orderManagement1.masterProducts.productId)
            .subscribe((data) => {
            this.warehouseList = data;
            if (this.warehouseList != null) {
                this.selectedRegion = new Array();
                this.selectedStates = new Array();
                this.selectedCity = new Array();
                this.oldWarehouseList = this.warehouseList;
                for (let w of this.warehouseList) {
                    this.selectedRegion.push(w.address.region);
                    this.selectedStates.push(w.address.state.stateName);
                    this.selectedCity.push(w.address.city.cityName);
                }
                let unique1 = this.selectedRegion.filter((item1, i1, ar1) => ar1.indexOf(item1) === i1);
                this.selectedRegion = unique1;
                let unique2 = this.selectedStates.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.selectedStates = unique2;
                let unique3 = this.selectedCity.filter((item3, i3, ar3) => ar3.indexOf(item3) === i3);
                this.selectedCity = unique3;
            }
        });
        this.equipmentList = new Array();
        for (let e of this.equipmentProductMapping) {
            if (e.masterProducts.productId == this.orderManagement1.masterProducts.productId) {
                this.equipmentList.push(e.equipment);
            }
        }
    }
    onChangeFilter() {
        this.warehouseList = this.oldWarehouseList;
        this.newWarehouseList = new Array();
        if (this.orderManagement1.region != null) {
            this.selectedStates = new Array();
            for (let w of this.warehouseList) {
                if (w.address.region == this.orderManagement1.region) {
                    this.selectedStates.push(w.address.state.stateName);
                    this.newWarehouseList.push(w);
                }
            }
            this.warehouseList = this.newWarehouseList;
            let unique2 = this.selectedStates.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedStates = unique2;
        }
        if (this.orderManagement1.stateName != null) {
            this.newWarehouseList = new Array();
            this.selectedCity = new Array();
            for (let w of this.warehouseList) {
                if (w.address.state.stateName == this.orderManagement1.stateName) {
                    this.orderManagement1.stateId = w.address.state.stateId;
                    this.selectedCity.push(w.address.city.cityName);
                    this.newWarehouseList.push(w);
                }
            }
            this.warehouseList = this.newWarehouseList;
            let unique2 = this.selectedCity.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedCity = unique2;
        }
        if (this.orderManagement1.cityName != null) {
            this.newWarehouseList = new Array();
            for (let w of this.warehouseList) {
                if (w.address.city.cityName == this.orderManagement1.cityName) {
                    this.orderManagement1.cityId = w.address.city.cityId;
                    this.newWarehouseList.push(w);
                }
            }
            this.warehouseList = this.newWarehouseList;
        }
    }
    onChangeWarehouse() {
        console.log(this.orderManagement1);
    }
    next() {
        this.createOrder();
    }
    onChangeEquipment() {
        this.hideeq = true;
        this.orderManagement.equipmentId = this.orderManagement.equipmentId;
        this.equipmentId = this.orderManagement.equipmentId;
        this.orderManagementService.getAvgConsumptionForLoggedInUser(this.orderManagement.productId, this.orderManagement.warehouseId, this.orderManagement.equipmentId)
            .subscribe((data) => {
            this.avg = data;
        });
    }
    preOrderDetails() {
        this.orderManagement.preOrderNewDtoList;
        this.orderManagement;
        this.iteration = 'preOrderDetails';
    }
    onBackToOrder() {
        if (this.iteration == 'preOrderDetails') {
            this.iteration = "onProceed";
        }
    }
    onBack() {
        this.iteration = "onProceed";
    }
    onclickBack() {
        this.iteration = "startPage";
    }
    useCredits() {
        this.showDetails = !this.showDetails;
        if (this.showDetails == true) {
            if (this.orderManagement.creditLimitManagement.availableCredits > 0) {
                this.orderManagement.creditYN = true;
                this.orderManagement.creditLimitManagement.useCredit = 0;
                this.orderManagement.creditLimitManagement.extraCharges = 0;
                this.orderManagement.creditLimitManagement.payableAmount = 0;
                this.orderManagement.topupAmount = 0;
                this.orderManagement.payableAmount = 0;
                this.orderManagement.creditLimitManagement.deductFromCredit = 0;
                if (this.orderManagement.requiredAmount > this.orderManagement.creditLimitManagement.availableCredits) {
                    this.orderManagement.creditLimitManagement.useCredit = this.orderManagement.creditLimitManagement.availableCredits;
                    this.orderManagement.creditLimitManagement.extraCharges = (this.orderManagement.creditLimitManagement.useCredit / 100) * this.orderManagement.creditLimitManagement.processingCharges;
                    this.orderManagement.creditLimitManagement.payableAmount = this.orderManagement.creditLimitManagement.useCredit + this.orderManagement.creditLimitManagement.extraCharges;
                    this.orderManagement.payableAmount = this.orderManagement.requiredAmount - this.orderManagement.creditLimitManagement.availableCredits;
                    this.orderManagement.deductFromAvailBal = this.orderManagement.deductFromAvailBal - this.orderManagement.creditLimitManagement.useCredit;
                    this.orderManagement.topupAmount = this.orderManagement.requiredAmount - this.orderManagement.creditLimitManagement.availableCredits;
                    this.orderManagement.creditLimitManagement.deductFromCredit = this.orderManagement.creditLimitManagement.availableCredits;
                    this.orderManagement.creditUsed = this.orderManagement.creditLimitManagement.deductFromCredit;
                }
                if (this.orderManagement.requiredAmount <= this.orderManagement.creditLimitManagement.availableCredits) {
                    this.orderManagement.creditLimitManagement.useCredit = this.orderManagement.requiredAmount;
                    this.orderManagement.creditLimitManagement.extraCharges = (this.orderManagement.creditLimitManagement.useCredit / 100) * this.orderManagement.creditLimitManagement.processingCharges;
                    this.orderManagement.creditLimitManagement.payableAmount = this.orderManagement.creditLimitManagement.useCredit + this.orderManagement.creditLimitManagement.extraCharges;
                    this.orderManagement.deductFromAvailBal = this.orderManagement.deductFromAvailBal - this.orderManagement.creditLimitManagement.useCredit;
                    this.orderManagement.creditLimitManagement.deductFromCredit = this.orderManagement.requiredAmount;
                    this.orderManagement.creditUsed = this.orderManagement.creditLimitManagement.deductFromCredit;
                }
            }
        }
        else {
            this.orderManagement.creditYN = false;
            this.orderManagement.creditLimitManagement.deductFromCredit = 0;
            this.orderManagement.creditUsed = 0;
            this.orderManagement.creditLimitManagement.useCredit = 0;
            this.orderManagement.creditLimitManagement.payableAmount = 0;
            this.onChange();
        }
        if (this.orderManagement.creditLimitManagement.availableCredits == 0) {
            this.showDetails = !this.showDetails;
            // alert("No credit available")
            this.toastr.error('No credit available..!', '', {
                timeOut: 10000,
                positionClass: 'toast-top-center',
                progressBar: true,
                progressAnimation: 'increasing'
            });
            this.orderManagement.topupAmount = this.orderManagement.requiredAmount;
        }
    }
    onProceedToPayment() {
        //orderManagement.totalAll>orderManagement.walletDetails.availableBalance && user.userType==null || user.userType=='CORPORATE_SUPERVISOR'
        console.log(this.orderManagement.totalAll);
        console.log(this.orderManagement.walletDetails.availableBalance);
        console.log(this.user.userType);
        console.log(this.user);
        this.iteration = "finalPage";
    }
};
CreateorderUserComponent.ctorParameters = () => [
    { type: src_app_services_order_management_service__WEBPACK_IMPORTED_MODULE_2__["OrderManagementService"] },
    { type: src_app_services_pre_order_management_service__WEBPACK_IMPORTED_MODULE_5__["PreOrderManagementService"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_6__["ToastrService"] },
    { type: src_app_services_wallet_detail_service__WEBPACK_IMPORTED_MODULE_7__["WalletDetailService"] },
    { type: src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_8__["UsermanagementService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_9__["Router"] }
];
CreateorderUserComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-createorder-user',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./createorder-user.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/User/createorder-user/createorder-user.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./createorder-user.component.css */ "./src/app/User/createorder-user/createorder-user.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_order_management_service__WEBPACK_IMPORTED_MODULE_2__["OrderManagementService"],
        src_app_services_pre_order_management_service__WEBPACK_IMPORTED_MODULE_5__["PreOrderManagementService"],
        ngx_toastr__WEBPACK_IMPORTED_MODULE_6__["ToastrService"],
        src_app_services_wallet_detail_service__WEBPACK_IMPORTED_MODULE_7__["WalletDetailService"],
        src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_8__["UsermanagementService"],
        _angular_router__WEBPACK_IMPORTED_MODULE_9__["Router"]])
], CreateorderUserComponent);



/***/ }),

/***/ "./src/app/User/currentwalletbalance/currentwalletbalance.component.css":
/*!******************************************************************************!*\
  !*** ./src/app/User/currentwalletbalance/currentwalletbalance.component.css ***!
  \******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n.two-card div.amex-cvc-preview {\r\n    float: right;\r\n}\r\n.btn:not(:disabled):not(.disabled) {\r\n    cursor: pointer;\r\n    margin: 3px;\r\n}\r\n.badge-danger {\r\n \r\n    height: 100px;\r\n    width: 100%;\r\n\r\n}\r\nb {\r\n    font-size: 39px;\r\n    line-height: 83px;\r\n}\r\n.badge-info {\r\n    width: 100%;\r\n    height: 50px;\r\n    font-size: large;\r\n    font-weight: bold;\r\n    margin: 3px;\r\n}\r\na:not([href]):not([tabindex]) {\r\n    margin: 10px;\r\n    padding: 26px;\r\n    line-height: 24px;\r\n    margin-left: 0px;\r\n}\r\n.card\r\n{\r\n    background-color: white;\r\n    box-shadow: 5px 5px 5px 5px  grey;\r\n  }\r\n.card-body {\r\n    background: -webkit-gradient(linear, left top, right bottom, color-stop(50%, #CCE0FB), to(#A5EBF0));\r\n    background: linear-gradient(to bottom right, #CCE0FB 50%, #A5EBF0 100%);\r\n    }\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvVXNlci9jdXJyZW50d2FsbGV0YmFsYW5jZS9jdXJyZW50d2FsbGV0YmFsYW5jZS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTtJQUNJLFlBQVk7QUFDaEI7QUFDQTtJQUNJLGVBQWU7SUFDZixXQUFXO0FBQ2Y7QUFFQTs7SUFFSSxhQUFhO0lBQ2IsV0FBVzs7QUFFZjtBQUVBO0lBQ0ksZUFBZTtJQUNmLGlCQUFpQjtBQUNyQjtBQUVBO0lBQ0ksV0FBVztJQUNYLFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLFdBQVc7QUFDZjtBQUVBO0lBQ0ksWUFBWTtJQUNaLGFBQWE7SUFDYixpQkFBaUI7SUFDakIsZ0JBQWdCO0FBQ3BCO0FBQ0E7O0lBRUksdUJBQXVCO0lBQ3ZCLGlDQUFpQztFQUNuQztBQUdGO0lBQ0ksbUdBQXVFO0lBQXZFLHVFQUF1RTtJQUN2RSIsImZpbGUiOiJzcmMvYXBwL1VzZXIvY3VycmVudHdhbGxldGJhbGFuY2UvY3VycmVudHdhbGxldGJhbGFuY2UuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG4udHdvLWNhcmQgZGl2LmFtZXgtY3ZjLXByZXZpZXcge1xyXG4gICAgZmxvYXQ6IHJpZ2h0O1xyXG59XHJcbi5idG46bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkge1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgbWFyZ2luOiAzcHg7XHJcbn1cclxuXHJcbi5iYWRnZS1kYW5nZXIge1xyXG4gXHJcbiAgICBoZWlnaHQ6IDEwMHB4O1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcblxyXG59XHJcblxyXG5iIHtcclxuICAgIGZvbnQtc2l6ZTogMzlweDtcclxuICAgIGxpbmUtaGVpZ2h0OiA4M3B4O1xyXG59XHJcblxyXG4uYmFkZ2UtaW5mbyB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIGZvbnQtc2l6ZTogbGFyZ2U7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIG1hcmdpbjogM3B4O1xyXG59XHJcblxyXG5hOm5vdChbaHJlZl0pOm5vdChbdGFiaW5kZXhdKSB7XHJcbiAgICBtYXJnaW46IDEwcHg7XHJcbiAgICBwYWRkaW5nOiAyNnB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IDI0cHg7XHJcbiAgICBtYXJnaW4tbGVmdDogMHB4O1xyXG59XHJcbi5jYXJkXHJcbntcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xyXG4gICAgYm94LXNoYWRvdzogNXB4IDVweCA1cHggNXB4ICBncmV5O1xyXG4gIH1cclxuXHJcbiAgXHJcbi5jYXJkLWJvZHkge1xyXG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSByaWdodCwgI0NDRTBGQiA1MCUsICNBNUVCRjAgMTAwJSk7XHJcbiAgICB9Il19 */");

/***/ }),

/***/ "./src/app/User/currentwalletbalance/currentwalletbalance.component.ts":
/*!*****************************************************************************!*\
  !*** ./src/app/User/currentwalletbalance/currentwalletbalance.component.ts ***!
  \*****************************************************************************/
/*! exports provided: CurrentwalletbalanceComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CurrentwalletbalanceComponent", function() { return CurrentwalletbalanceComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_services_wallet_detail_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/wallet-detail.service */ "./src/app/services/wallet-detail.service.ts");
/* harmony import */ var src_app_model_select__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/model/select */ "./src/app/model/select.ts");




let CurrentwalletbalanceComponent = class CurrentwalletbalanceComponent {
    constructor(walletDetailService) {
        this.walletDetailService = walletDetailService;
        this.sr = 0;
        this.ranges = new Array();
        this.range = "-1";
        this.date = new Date("01/01/2000");
        this.date1 = new Date();
    }
    ngOnInit() {
        this.iteration = "walletAndRewardsMainPage";
    }
    onWallet() {
        alert("1");
        this.walletDetailService.getWalletDetailsForLoggedInUser()
            .subscribe((data) => {
            //console.log(data);
            this.walletDetails = data;
            this.accountSummaryList = this.walletDetails.accountSummaryList;
            this.accountSummaryFilteredList = this.accountSummaryList;
            this.sr++;
            //console.log("accunt summ : "+this.accountSummary)
        });
        this.iteration = "initial";
    }
    onAccountSummary() {
        this.customDate = false;
        this.range = "-1";
        this.populateRange();
        this.iteration = "accountSummary";
    }
    onTopupWallet() {
        this.iteration = "topupWallet";
    }
    onbackClick() {
        this.ngOnInit();
    }
    onClick() {
        this.iteration = 'topupSuccessPage';
    }
    populateRange() {
        let range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_3__["Select"];
        range.id = "1";
        range.value = "Custom Range";
        this.ranges[0] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_3__["Select"];
        range.id = "2";
        range.value = "15 Days";
        this.ranges[1] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_3__["Select"];
        range.id = "3";
        range.value = "Current Month";
        this.ranges[2] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_3__["Select"];
        range.id = "4";
        range.value = "3 Months";
        this.ranges[3] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_3__["Select"];
        range.id = "5";
        range.value = "6 Months";
        this.ranges[4] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_3__["Select"];
        range.id = "6";
        range.value = "1 Year";
        this.ranges[5] = range;
        console.log(this.ranges);
    }
    onSelect() {
        if (this.range != "-1") {
            if (this.range == "1") {
                this.customDate = true;
            }
            else {
                this.customDate = false;
            }
            this.filterList(this.range);
        }
    }
    onDateChange() {
        this.filterList("1");
    }
    filterList(option) {
        this.accountSummaryFilteredList = new Array();
        let startDate = new Date();
        let endDate = new Date();
        if (option == "1") {
            startDate = this.date;
            endDate = this.date1;
        }
        else if (option == "2") {
            startDate.setDate(endDate.getDate() - 15);
        }
        else if (option == "3") {
            startDate.setDate(endDate.getDate() - 30);
        }
        else if (option == "4") {
            startDate.setDate(endDate.getDate() - 90);
        }
        else if (option == "5") {
            startDate.setDate(endDate.getDate() - 180);
        }
        else if (option == "6") {
            startDate.setDate(endDate.getDate() - 360);
        }
        console.log(startDate);
        for (let a of this.accountSummaryList) {
            let dt = new Date(a.transactionDate);
            if (dt >= startDate && dt <= endDate) {
                this.accountSummaryFilteredList.push(a);
            }
        }
    }
};
CurrentwalletbalanceComponent.ctorParameters = () => [
    { type: src_app_services_wallet_detail_service__WEBPACK_IMPORTED_MODULE_2__["WalletDetailService"] }
];
CurrentwalletbalanceComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-currentwalletbalance',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./currentwalletbalance.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/User/currentwalletbalance/currentwalletbalance.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./currentwalletbalance.component.css */ "./src/app/User/currentwalletbalance/currentwalletbalance.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_wallet_detail_service__WEBPACK_IMPORTED_MODULE_2__["WalletDetailService"]])
], CurrentwalletbalanceComponent);



/***/ }),

/***/ "./src/app/User/offersuser/offersuser.component.css":
/*!**********************************************************!*\
  !*** ./src/app/User/offersuser/offersuser.component.css ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (".card\r\n{\r\n    width: 300px;\r\n    height: 350px;\r\n    padding: 15px;\r\n    background-color: white;\r\n    box-shadow: 5px 5px 5px 5px  grey;\r\n  }\r\n\r\n.col-lg-4 {\r\n    margin-top: 20px;\r\n}\r\n\r\nh3.text {\r\n    text-align: center;\r\n    font-size: 2.5rem;\r\n    font-weight: bold;\r\n}\r\n\r\n.disscout {\r\n    text-align: center;\r\n    color:  #c31432;\r\n    font-weight: bold;\r\n}\r\n\r\n.distext {\r\n    text-align: center;\r\n    font-size: 1.2rem; \r\n}\r\n\r\n.offercode {\r\n    text-align: center;\r\n    color: deeppink;\r\n  \r\n}\r\n\r\n.expire {\r\n    text-align: center;\r\n}\r\n\r\n.offer\r\n{\r\n    color: red;\r\n  \r\n}\r\n\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n  }\r\n\r\nbutton.btn.btn-primary.btn-lg.import {\r\n    margin-right: 48px;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvVXNlci9vZmZlcnN1c2VyL29mZmVyc3VzZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7SUFFSSxZQUFZO0lBQ1osYUFBYTtJQUNiLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsaUNBQWlDO0VBQ25DOztBQUVGO0lBQ0ksZ0JBQWdCO0FBQ3BCOztBQUNBO0lBQ0ksa0JBQWtCO0lBQ2xCLGlCQUFpQjtJQUNqQixpQkFBaUI7QUFDckI7O0FBQ0E7SUFDSSxrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLGlCQUFpQjtBQUNyQjs7QUFDQTtJQUNJLGtCQUFrQjtJQUNsQixpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsZUFBZTs7QUFFbkI7O0FBQ0E7SUFDSSxrQkFBa0I7QUFDdEI7O0FBQ0E7O0lBRUksVUFBVTs7QUFFZDs7QUFDQTtJQUNJLG9CQUFvQjtJQUNwQixlQUFlO0lBQ2YsaUJBQWlCO0VBQ25COztBQUVGO0lBQ0ksa0JBQWtCO0FBQ3RCIiwiZmlsZSI6InNyYy9hcHAvVXNlci9vZmZlcnN1c2VyL29mZmVyc3VzZXIuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jYXJkXHJcbntcclxuICAgIHdpZHRoOiAzMDBweDtcclxuICAgIGhlaWdodDogMzUwcHg7XHJcbiAgICBwYWRkaW5nOiAxNXB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XHJcbiAgICBib3gtc2hhZG93OiA1cHggNXB4IDVweCA1cHggIGdyZXk7XHJcbiAgfVxyXG5cclxuLmNvbC1sZy00IHtcclxuICAgIG1hcmdpbi10b3A6IDIwcHg7XHJcbn1cclxuaDMudGV4dCB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBmb250LXNpemU6IDIuNXJlbTtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcbi5kaXNzY291dCB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBjb2xvcjogICNjMzE0MzI7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG4uZGlzdGV4dCB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBmb250LXNpemU6IDEuMnJlbTsgXHJcbn1cclxuXHJcbi5vZmZlcmNvZGUge1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgY29sb3I6IGRlZXBwaW5rO1xyXG4gIFxyXG59XHJcbi5leHBpcmUge1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcbi5vZmZlclxyXG57XHJcbiAgICBjb2xvcjogcmVkO1xyXG4gIFxyXG59XHJcbi5idG4uYnRuLWxnIHtcclxuICAgIHBhZGRpbmc6IDFyZW0gMi40cmVtO1xyXG4gICAgZm9udC1zaXplOiAxN3B4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgfVxyXG4gIFxyXG5idXR0b24uYnRuLmJ0bi1wcmltYXJ5LmJ0bi1sZy5pbXBvcnQge1xyXG4gICAgbWFyZ2luLXJpZ2h0OiA0OHB4O1xyXG59Il19 */");

/***/ }),

/***/ "./src/app/User/offersuser/offersuser.component.ts":
/*!*********************************************************!*\
  !*** ./src/app/User/offersuser/offersuser.component.ts ***!
  \*********************************************************/
/*! exports provided: OffersuserComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OffersuserComponent", function() { return OffersuserComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let OffersuserComponent = class OffersuserComponent {
    constructor() { }
    ngOnInit() {
    }
};
OffersuserComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-offersuser',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./offersuser.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/User/offersuser/offersuser.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./offersuser.component.css */ "./src/app/User/offersuser/offersuser.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], OffersuserComponent);



/***/ }),

/***/ "./src/app/User/orderuser/orderuser.component.css":
/*!********************************************************!*\
  !*** ./src/app/User/orderuser/orderuser.component.css ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n\r\n.card.card-cascade.narrower.body-section {\r\n    margin-top: -29px;\r\n  }\r\n  .row.v1 {\r\n    margin-top: 16px;\r\n    margin-left: 0px;\r\n}\r\n  .container.end {\r\n  margin-top: 23px;\r\n}\r\n  .col-lg-4.col-md-6.mb-md-0.mb-4.col-6.or {\r\n  margin-left: -32px;\r\n}\r\n  .card.or {\r\n  margin-top: 90px;\r\n  margin-left: 16px;\r\n  margin-right: 16px;\r\n}\r\n  h4.filter{\r\n  font-weight: bold;\r\n}\r\n  .btn.btn-lg {\r\n  padding: 1rem 2.4rem;\r\n  font-size: 17px;\r\n  font-weight: bold;\r\n}\r\n  div#importback {\r\n  margin-left: -51px;\r\n}\r\n  /*  */\r\n  .input-vendor {\r\n    height: 50px;\r\n    background: #ebf4f9;\r\n}\r\n  .card-body.vendor{\r\n    padding-right: 3rem;\r\n    padding-left: 3rem;\r\n}\r\n  div#vendorrow {\r\n    padding-top: 0.5rem;\r\n}\r\n  select.form-control:not([size]):not([multiple]) {\r\n    height: 50px;\r\n    background-color:#ebf4f9; ;\r\n}\r\n  i.fa.importfa {\r\n  font-size: 100px;\r\n}\r\n  /* Higher than 1440 (desktop devices)\r\n====================================================================== */\r\n  @media only screen and (max-width: 1440px){ \r\n  \r\n}\r\n  /* Higher than 1200 (desktop devices)\r\n====================================================================== */\r\n  @media only screen and (max-width: 1024px) {\r\n}\r\n  /* Higher than 960 (desktop devices)\r\n====================================================================== */\r\n  @media only screen and (min-width: 992px) and (max-width: 1199px){\r\n}\r\n  /* Higher than 960 (desktop devices)\r\n====================================================================== */\r\n  @media only screen and (min-width: 992px){\r\n}\r\n  /* Tablet Portrait (devices and browsers)\r\n====================================================================== */\r\n  @media only screen and (min-width: 768px) and (max-width: 991px) {\r\n}\r\n  /* All Mobile Sizes (devices and browser)\r\n====================================================================== */\r\n  @media only screen and (max-width: 767px) {\r\n\r\n}\r\n  /* Mobile Landscape Size to Tablet Portrait (devices and browsers)\r\n====================================================================== */\r\n  @media only screen and (max-width: 375px)  {\r\n\r\n\r\n\r\n}\r\n  /*=================================*/\r\n  @media only screen and (min-width: 320px) {\r\n \r\n\r\n}\r\n  /* Mobile Portrait Size to Mobile Landscape Size (devices and browsers)\r\n=================================================================== */\r\n  @media only screen and (max-width: 479px) {\r\n  /*  */\r\n\r\n\r\n\r\n}\r\n  @media only screen and (max-width: 667px) {\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvVXNlci9vcmRlcnVzZXIvb3JkZXJ1c2VyLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQTtJQUNJLGlCQUFpQjtFQUNuQjtFQUNBO0lBQ0UsZ0JBQWdCO0lBQ2hCLGdCQUFnQjtBQUNwQjtFQUVBO0VBQ0UsZ0JBQWdCO0FBQ2xCO0VBQ0E7RUFDRSxrQkFBa0I7QUFDcEI7RUFFQTtFQUNFLGdCQUFnQjtFQUNoQixpQkFBaUI7RUFDakIsa0JBQWtCO0FBQ3BCO0VBQ0E7RUFDRSxpQkFBaUI7QUFDbkI7RUFDQTtFQUNFLG9CQUFvQjtFQUNwQixlQUFlO0VBQ2YsaUJBQWlCO0FBQ25CO0VBR0E7RUFDRSxrQkFBa0I7QUFDcEI7RUFHRSxLQUFLO0VBRUw7SUFDRSxZQUFZO0lBQ1osbUJBQW1CO0FBQ3ZCO0VBQ0E7SUFDSSxtQkFBbUI7SUFDbkIsa0JBQWtCO0FBQ3RCO0VBRUE7SUFDSSxtQkFBbUI7QUFDdkI7RUFFQTtJQUNJLFlBQVk7SUFDWix3QkFBd0I7QUFDNUI7RUFDQTtFQUNFLGdCQUFnQjtBQUNsQjtFQUNBO3dFQUN3RTtFQUN4RTs7QUFFQTtFQUVBO3dFQUN3RTtFQUN4RTtBQUNBO0VBRUE7d0VBQ3dFO0VBQ3hFO0FBQ0E7RUFFQTt3RUFDd0U7RUFDeEU7QUFDQTtFQUVBO3dFQUN3RTtFQUN4RTtBQUNBO0VBRUE7d0VBQ3dFO0VBQ3hFOztBQUVBO0VBRUE7d0VBQ3dFO0VBQ3hFOzs7O0FBSUE7RUFDQSxvQ0FBb0M7RUFDbkM7OztBQUdEO0VBQ0E7cUVBQ3FFO0VBQ3JFO0VBQ0UsS0FBSzs7OztBQUlQO0VBQ0E7O0FBRUEiLCJmaWxlIjoic3JjL2FwcC9Vc2VyL29yZGVydXNlci9vcmRlcnVzZXIuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5cclxuLmNhcmQuY2FyZC1jYXNjYWRlLm5hcnJvd2VyLmJvZHktc2VjdGlvbiB7XHJcbiAgICBtYXJnaW4tdG9wOiAtMjlweDtcclxuICB9XHJcbiAgLnJvdy52MSB7XHJcbiAgICBtYXJnaW4tdG9wOiAxNnB4O1xyXG4gICAgbWFyZ2luLWxlZnQ6IDBweDtcclxufVxyXG5cclxuLmNvbnRhaW5lci5lbmQge1xyXG4gIG1hcmdpbi10b3A6IDIzcHg7XHJcbn1cclxuLmNvbC1sZy00LmNvbC1tZC02Lm1iLW1kLTAubWItNC5jb2wtNi5vciB7XHJcbiAgbWFyZ2luLWxlZnQ6IC0zMnB4O1xyXG59XHJcblxyXG4uY2FyZC5vciB7XHJcbiAgbWFyZ2luLXRvcDogOTBweDtcclxuICBtYXJnaW4tbGVmdDogMTZweDtcclxuICBtYXJnaW4tcmlnaHQ6IDE2cHg7XHJcbn1cclxuaDQuZmlsdGVye1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcbi5idG4uYnRuLWxnIHtcclxuICBwYWRkaW5nOiAxcmVtIDIuNHJlbTtcclxuICBmb250LXNpemU6IDE3cHg7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuXHJcblxyXG5kaXYjaW1wb3J0YmFjayB7XHJcbiAgbWFyZ2luLWxlZnQ6IC01MXB4O1xyXG59XHJcblxyXG5cclxuICAvKiAgKi9cclxuICBcclxuICAuaW5wdXQtdmVuZG9yIHtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIGJhY2tncm91bmQ6ICNlYmY0Zjk7XHJcbn1cclxuLmNhcmQtYm9keS52ZW5kb3J7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAzcmVtO1xyXG4gICAgcGFkZGluZy1sZWZ0OiAzcmVtO1xyXG59XHJcblxyXG5kaXYjdmVuZG9ycm93IHtcclxuICAgIHBhZGRpbmctdG9wOiAwLjVyZW07XHJcbn1cclxuXHJcbnNlbGVjdC5mb3JtLWNvbnRyb2w6bm90KFtzaXplXSk6bm90KFttdWx0aXBsZV0pIHtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6I2ViZjRmOTsgO1xyXG59XHJcbmkuZmEuaW1wb3J0ZmEge1xyXG4gIGZvbnQtc2l6ZTogMTAwcHg7XHJcbn1cclxuLyogSGlnaGVyIHRoYW4gMTQ0MCAoZGVza3RvcCBkZXZpY2VzKVxyXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTQ0MHB4KXsgXHJcbiAgXHJcbn1cclxuXHJcbi8qIEhpZ2hlciB0aGFuIDEyMDAgKGRlc2t0b3AgZGV2aWNlcylcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjRweCkge1xyXG59XHJcblxyXG4vKiBIaWdoZXIgdGhhbiA5NjAgKGRlc2t0b3AgZGV2aWNlcylcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDk5MnB4KSBhbmQgKG1heC13aWR0aDogMTE5OXB4KXtcclxufVxyXG5cclxuLyogSGlnaGVyIHRoYW4gOTYwIChkZXNrdG9wIGRldmljZXMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA5OTJweCl7XHJcbn1cclxuXHJcbi8qIFRhYmxldCBQb3J0cmFpdCAoZGV2aWNlcyBhbmQgYnJvd3NlcnMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjhweCkgYW5kIChtYXgtd2lkdGg6IDk5MXB4KSB7XHJcbn1cclxuXHJcbi8qIEFsbCBNb2JpbGUgU2l6ZXMgKGRldmljZXMgYW5kIGJyb3dzZXIpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjdweCkge1xyXG5cclxufVxyXG5cclxuLyogTW9iaWxlIExhbmRzY2FwZSBTaXplIHRvIFRhYmxldCBQb3J0cmFpdCAoZGV2aWNlcyBhbmQgYnJvd3NlcnMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAzNzVweCkgIHtcclxuXHJcblxyXG5cclxufVxyXG4vKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXHJcbiBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMyMHB4KSB7XHJcbiBcclxuXHJcbn0gXHJcbi8qIE1vYmlsZSBQb3J0cmFpdCBTaXplIHRvIE1vYmlsZSBMYW5kc2NhcGUgU2l6ZSAoZGV2aWNlcyBhbmQgYnJvd3NlcnMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0NzlweCkge1xyXG4gIC8qICAqL1xyXG5cclxuXHJcblxyXG59XHJcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjY3cHgpIHtcclxuXHJcbn1cclxuXHJcblxyXG5cclxuIl19 */");

/***/ }),

/***/ "./src/app/User/orderuser/orderuser.component.ts":
/*!*******************************************************!*\
  !*** ./src/app/User/orderuser/orderuser.component.ts ***!
  \*******************************************************/
/*! exports provided: OrderuserComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OrderuserComponent", function() { return OrderuserComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_services_order_management_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/order-management.service */ "./src/app/services/order-management.service.ts");
/* harmony import */ var src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/usermanagement.service */ "./src/app/services/usermanagement.service.ts");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");





let OrderuserComponent = class OrderuserComponent {
    constructor(orderManagementService, userService, toastr) {
        this.orderManagementService = orderManagementService;
        this.userService = userService;
        this.toastr = toastr;
        this.newOrderManagementList = new Array();
        this.productsList = new Array();
    }
    ngOnInit() {
        this.pageiterator = 1;
        this.iteration = 'initial';
    }
    Onclick() {
        this.pageiterator++;
    }
    onOrderList() {
        if (this.iteration == 'viewAllOrders') {
            this.iteration = 'initial';
        }
        if (this.iteration == 'viewPaymentPendingOrders') {
            this.viewAllOrders();
        }
    }
    viewAllOrders() {
        this.productName = null;
        this.region = null;
        this.state = null;
        this.city = null;
        this.office = null;
        this.customerId = null;
        this.userService.getLoggedInUser()
            .subscribe((data) => {
            this.user = data;
        });
        this.orderManagementService.getAllOrdersForLoggedInUser()
            .subscribe((data) => {
            console.log(data);
            this.orderManagementList = data;
            this.oldOrderManagementList = data;
            this.regionList = new Array();
            this.regionList.push("All Region");
            this.stateList = new Array();
            this.stateList.push("All State");
            this.cityList = new Array();
            this.cityList.push("All City");
            this.officeList = new Array();
            this.officeList.push("All Office");
            this.uniqueUserIdList = new Array();
            this.uniqueUserIdList.push("All Customers");
            this.productsList = new Array();
            if (this.orderManagementList != null) {
                this.oldOrderManagementList = this.orderManagementList;
                for (let o of this.orderManagementList) {
                    if (o.user.region != null) {
                        this.regionList.push(o.user.region);
                    }
                    if (o.user.state != null) {
                        this.stateList.push(o.user.state);
                    }
                    if (o.user.city != null) {
                        this.cityList.push(o.user.city);
                    }
                    if (o.user.officeName != null) {
                        this.officeList.push(o.user.officeName);
                    }
                    this.uniqueUserIdList.push(o.user.uniqueUserId);
                    this.productsList.push(o.masterProducts.productName);
                }
                let unique1 = this.productsList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.productsList = unique1;
                unique1 = this.regionList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.regionList = unique1;
                unique1 = this.stateList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.stateList = unique1;
                unique1 = this.cityList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.cityList = unique1;
                unique1 = this.uniqueUserIdList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.uniqueUserIdList = unique1;
            }
            if (this.orderManagementList == null) {
                this.toastr.error('No Data Found', 'Order', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
            }
            this.iteration = 'viewAllOrders';
        });
    }
    onRegion() {
        if (this.region != null) {
            if (this.region != "All Region") {
                this.orderManagementList = this.oldOrderManagementList;
                this.newOrderManagementList = new Array();
                this.state = null;
                this.city = null;
                this.office = null;
                this.customerId = null;
                this.productName = null;
                this.stateList = new Array();
                this.stateList.push("All State");
                this.cityList = new Array();
                this.cityList.push("All City");
                this.officeList = new Array();
                this.officeList.push("All Office");
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                this.productsList = new Array();
                for (let o of this.orderManagementList) {
                    if (o.user.region == this.region) {
                        this.newOrderManagementList.push(o);
                        this.uniqueUserIdList.push(o.user.uniqueUserId);
                        if (o.user.state != null) {
                            this.stateList.push(o.user.state);
                        }
                        if (o.user.city != null) {
                            this.cityList.push(o.user.city);
                        }
                        if (o.user.officeName != null) {
                            this.officeList.push(o.user.officeName);
                        }
                        this.productsList.push(o.masterProducts.productName);
                    }
                }
                this.orderManagementList = this.newOrderManagementList;
                let unique1 = this.uniqueUserIdList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.uniqueUserIdList = unique1;
                unique1 = this.stateList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.stateList = unique1;
                unique1 = this.cityList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.cityList = unique1;
                unique1 = this.officeList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.officeList = unique1;
                unique1 = this.productsList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.productsList = unique1;
            }
            if (this.region == "All Region") {
                this.orderManagementList = this.oldOrderManagementList;
                this.state = null;
                this.city = null;
                this.office = null;
                this.customerId = null;
                this.productName = null;
                this.stateList = new Array();
                this.stateList.push("All State");
                this.cityList = new Array();
                this.cityList.push("All City");
                this.officeList = new Array();
                this.officeList.push("All Office");
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                this.productsList = new Array();
                this.newOrderManagementList = new Array();
                for (let o of this.orderManagementList) {
                    this.newOrderManagementList.push(o);
                    this.productsList.push(o.masterProducts.productName);
                }
                this.orderManagementList = this.newOrderManagementList;
            }
            let unique1 = this.productsList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.productsList = unique1;
            this.orderCorporateFilterdList = this.orderManagementList;
        }
    }
    onState() {
        if (this.state != null) {
            if (this.state != "All State") {
                this.city = null;
                this.office = null;
                this.customerId = null;
                this.productName = null;
                this.orderManagementList = this.oldOrderManagementList;
                this.newOrderManagementList = new Array();
                this.cityList = new Array();
                this.cityList.push("All City");
                this.officeList = new Array();
                this.officeList.push("All Office");
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                this.productsList = new Array();
                for (let o of this.orderManagementList) {
                    if (o.user.state == this.state) {
                        this.newOrderManagementList.push(o);
                        this.productsList.push(o.masterProducts.productName);
                        this.uniqueUserIdList.push(o.user.uniqueUserId);
                        if (o.user.city != null) {
                            this.cityList.push(o.user.city);
                        }
                        if (o.user.officeName != null) {
                            this.officeList.push(o.user.officeName);
                        }
                    }
                }
                this.orderManagementList = this.newOrderManagementList;
                let unique1 = this.uniqueUserIdList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.uniqueUserIdList = unique1;
                unique1 = this.cityList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.cityList = unique1;
                unique1 = this.officeList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.officeList = unique1;
                unique1 = this.productsList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.productsList = unique1;
            }
            if (this.state == "All State" && this.region != "All Region") {
                this.orderManagementList = this.oldOrderManagementList;
                this.city = null;
                this.office = null;
                this.customerId = null;
                this.productName = null;
                this.cityList = new Array();
                this.cityList.push("All City");
                this.officeList = new Array();
                this.officeList.push("All Office");
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                this.productsList = new Array();
                this.newOrderManagementList = new Array();
                for (let o of this.orderManagementList) {
                    if (this.region == o.user.region) {
                        this.newOrderManagementList.push(o);
                        this.productsList.push(o.masterProducts.productName);
                    }
                }
                this.orderManagementList = this.newOrderManagementList;
            }
            let unique1 = this.productsList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.productsList = unique1;
            this.orderCorporateFilterdList = this.orderManagementList;
        }
    }
    onCity() {
        if (this.city != null) {
            if (this.city != "All City") {
                this.office = null;
                this.customerId = null;
                this.productName = null;
                this.orderManagementList = this.oldOrderManagementList;
                this.newOrderManagementList = new Array();
                this.officeList = new Array();
                this.officeList.push("All Office");
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                this.productsList = new Array();
                for (let o of this.orderManagementList) {
                    if (o.user.city == this.city) {
                        this.newOrderManagementList.push(o);
                        this.uniqueUserIdList.push(o.user.uniqueUserId);
                        this.productsList.push(o.masterProducts.productName);
                        if (o.user.officeName != null) {
                            this.officeList.push(o.user.officeName);
                        }
                    }
                }
                this.orderManagementList = this.newOrderManagementList;
                let unique1 = this.uniqueUserIdList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.uniqueUserIdList = unique1;
                unique1 = this.officeList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.officeList = unique1;
                unique1 = this.productsList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.productsList = unique1;
            }
            if (this.city == "All City" && this.region != "All Region" && this.state != "All State") {
                this.orderManagementList = this.oldOrderManagementList;
                this.office = null;
                this.customerId = null;
                this.productName = null;
                this.officeList = new Array();
                this.officeList.push("All Office");
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                this.productsList = new Array();
                this.newOrderManagementList = new Array();
                for (let o of this.orderManagementList) {
                    if (this.region == o.user.region && o.user.state == this.state) {
                        this.newOrderManagementList.push(o);
                        this.productsList.push(o.masterProducts.productName);
                    }
                }
                let unique1 = this.productsList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.productsList = unique1;
                this.orderManagementList = this.newOrderManagementList;
            }
            this.orderCorporateFilterdList = this.orderManagementList;
        }
    }
    onOffice() {
        if (this.office != null) {
            if (this.office != "All Office") {
                this.customerId = null;
                this.productName = null;
                this.orderManagementList = this.oldOrderManagementList;
                this.newOrderManagementList = new Array();
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                this.productsList = new Array();
                for (let o of this.orderManagementList) {
                    if (o.user.officeName == this.office) {
                        this.newOrderManagementList.push(o);
                        this.uniqueUserIdList.push(o.user.uniqueUserId);
                        this.productsList.push(o.masterProducts.productName);
                    }
                }
                this.orderManagementList = this.newOrderManagementList;
                let unique1 = this.uniqueUserIdList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.uniqueUserIdList = unique1;
                unique1 = this.productsList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.productsList = unique1;
            }
            if (this.office == "All Office" && this.region != "All Region" && this.state != "All State" && this.city != "All Office") {
                this.orderManagementList = this.oldOrderManagementList;
                this.customerId = null;
                this.productName = null;
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                this.productsList = new Array();
                this.newOrderManagementList = new Array();
                for (let o of this.orderManagementList) {
                    if (this.region == o.user.region && o.user.state == this.state && o.user.city == this.city) {
                        this.newOrderManagementList.push(o);
                    }
                }
                this.orderManagementList = this.newOrderManagementList;
                let unique1 = this.productsList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.productsList = unique1;
            }
            this.orderCorporateFilterdList = this.orderManagementList;
        }
    }
    onCustomerId() {
        if (this.customerId != null) {
            if (this.customerId != "All Customers") {
                this.productName = null;
                this.orderManagementList = this.oldOrderManagementList;
                this.productsList = new Array();
                this.newOrderManagementList = new Array();
                for (let o of this.orderManagementList) {
                    if (o.user.uniqueUserId == this.customerId) {
                        this.newOrderManagementList.push(o);
                        this.productsList.push(o.masterProducts.productName);
                    }
                }
                let unique1 = this.productsList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.productsList = unique1;
                this.orderManagementList = this.newOrderManagementList;
            }
            if (this.customerId == "All Customers" && this.office != "All Office" && this.region != "All Region" && this.state != "All State" && this.city != "All Office") {
                this.orderManagementList = this.oldOrderManagementList;
                this.productName = null;
                this.productsList = new Array();
                this.newOrderManagementList = new Array();
                for (let o of this.orderManagementList) {
                    if (this.region == o.user.region && o.user.state == this.state && o.user.city == this.city && o.user.officeName == this.office) {
                        this.newOrderManagementList.push(o);
                        this.productsList.push(o.masterProducts.productName);
                    }
                }
                let unique1 = this.productsList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.productsList = unique1;
                this.orderManagementList = this.newOrderManagementList;
            }
            this.orderCorporateFilterdList = this.orderManagementList;
        }
    }
    onChangeProduct() {
        if (this.orderCorporateFilterdList == null) {
            this.orderManagementList = this.oldOrderManagementList;
        }
        else {
            this.orderManagementList = this.orderCorporateFilterdList;
        }
        if (this.productName != null) {
            this.page = 1;
            this.newOrderManagementList = new Array();
            for (let o of this.orderManagementList) {
                if (o.masterProducts.productName == this.productName) {
                    this.newOrderManagementList.push(o);
                }
            }
            this.orderManagementList = this.newOrderManagementList;
        }
    }
    viewPaymentPendingOrders() {
        this.orderManagementService.getPaymentPendingOrdersForLoggedInUser()
            .subscribe((data) => {
            console.log(data);
            this.orderManagementList = data;
            this.iteration = 'viewPaymentPendingOrders';
        });
    }
};
OrderuserComponent.ctorParameters = () => [
    { type: src_app_services_order_management_service__WEBPACK_IMPORTED_MODULE_2__["OrderManagementService"] },
    { type: src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_3__["UsermanagementService"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_4__["ToastrService"] }
];
OrderuserComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-orderuser',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./orderuser.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/User/orderuser/orderuser.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./orderuser.component.css */ "./src/app/User/orderuser/orderuser.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_order_management_service__WEBPACK_IMPORTED_MODULE_2__["OrderManagementService"],
        src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_3__["UsermanagementService"],
        ngx_toastr__WEBPACK_IMPORTED_MODULE_4__["ToastrService"]])
], OrderuserComponent);



/***/ }),

/***/ "./src/app/User/paymentgateway/paymentgateway.component.css":
/*!******************************************************************!*\
  !*** ./src/app/User/paymentgateway/paymentgateway.component.css ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n.btn:not(:disabled):not(.disabled) {\r\n    cursor: pointer;\r\n    margin: 3px;\r\n}\r\n\r\n.badge-danger {\r\n \r\n    height: 100px;\r\n    width: 100%;\r\n}\r\n\r\nb {\r\n    font-size: 39px;\r\n    line-height: 83px;\r\n}\r\n\r\n.badge-info {\r\n\r\n    width: 100%;\r\n    height: 50px;\r\n    font-size: large;\r\n    font-weight: bold;\r\n    margin: 3px;\r\n    /* margin-left: 40px; */\r\n}\r\n\r\n.card\r\n{\r\n  \r\n    padding: 15px;\r\n    background-color: white;\r\n    box-shadow: 5px 5px 5px 5px  grey;\r\n  }\r\n\r\na:not([href]):not([tabindex]) {\r\n    margin: 6px;\r\n    padding: 30px;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvVXNlci9wYXltZW50Z2F0ZXdheS9wYXltZW50Z2F0ZXdheS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTtJQUNJLGVBQWU7SUFDZixXQUFXO0FBQ2Y7O0FBRUE7O0lBRUksYUFBYTtJQUNiLFdBQVc7QUFDZjs7QUFFQTtJQUNJLGVBQWU7SUFDZixpQkFBaUI7QUFDckI7O0FBRUE7O0lBRUksV0FBVztJQUNYLFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLFdBQVc7SUFDWCx1QkFBdUI7QUFDM0I7O0FBQ0E7OztJQUdJLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsaUNBQWlDO0VBQ25DOztBQUNBO0lBQ0UsV0FBVztJQUNYLGFBQWE7QUFDakIiLCJmaWxlIjoic3JjL2FwcC9Vc2VyL3BheW1lbnRnYXRld2F5L3BheW1lbnRnYXRld2F5LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLmJ0bjpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKSB7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICBtYXJnaW46IDNweDtcclxufVxyXG5cclxuLmJhZGdlLWRhbmdlciB7XHJcbiBcclxuICAgIGhlaWdodDogMTAwcHg7XHJcbiAgICB3aWR0aDogMTAwJTtcclxufVxyXG5cclxuYiB7XHJcbiAgICBmb250LXNpemU6IDM5cHg7XHJcbiAgICBsaW5lLWhlaWdodDogODNweDtcclxufVxyXG5cclxuLmJhZGdlLWluZm8ge1xyXG5cclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiA1MHB4O1xyXG4gICAgZm9udC1zaXplOiBsYXJnZTtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgbWFyZ2luOiAzcHg7XHJcbiAgICAvKiBtYXJnaW4tbGVmdDogNDBweDsgKi9cclxufVxyXG4uY2FyZFxyXG57XHJcbiAgXHJcbiAgICBwYWRkaW5nOiAxNXB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XHJcbiAgICBib3gtc2hhZG93OiA1cHggNXB4IDVweCA1cHggIGdyZXk7XHJcbiAgfVxyXG4gIGE6bm90KFtocmVmXSk6bm90KFt0YWJpbmRleF0pIHtcclxuICAgIG1hcmdpbjogNnB4O1xyXG4gICAgcGFkZGluZzogMzBweDtcclxufSJdfQ== */");

/***/ }),

/***/ "./src/app/User/paymentgateway/paymentgateway.component.ts":
/*!*****************************************************************!*\
  !*** ./src/app/User/paymentgateway/paymentgateway.component.ts ***!
  \*****************************************************************/
/*! exports provided: PaymentgatewayComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PaymentgatewayComponent", function() { return PaymentgatewayComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let PaymentgatewayComponent = class PaymentgatewayComponent {
    constructor() { }
    ngOnInit() {
        this.pageIterator = 1;
    }
    onPay() {
        this.pageIterator++;
    }
    onClickBack() {
        this.pageIterator--;
    }
    onSubmit() {
        this.pageIterator++;
    }
    onCheckBal() {
        this.pageIterator++;
    }
    onAccount() {
        this.pageIterator++;
    }
    onaccountBack() {
        this.pageIterator--;
    }
};
PaymentgatewayComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-paymentgateway',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./paymentgateway.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/User/paymentgateway/paymentgateway.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./paymentgateway.component.css */ "./src/app/User/paymentgateway/paymentgateway.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], PaymentgatewayComponent);



/***/ }),

/***/ "./src/app/User/preorder/preorder.component.css":
/*!******************************************************!*\
  !*** ./src/app/User/preorder/preorder.component.css ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("/* new preorder css */\r\nbutton.btn.btn-cyan {\r\n  height: 59px;\r\n  width: 100%;\r\n  font-size: unset;\r\n  font-weight: bold;\r\n}\r\nselect.form-control.equp {\r\n  margin-top: 10px;\r\n  height: 50px;\r\n}\r\nlabel.headinglabel {\r\n  margin-left: 7px;\r\n  font-weight: bold;\r\n  font-size: initial;\r\n}\r\n/* time frame */\r\nbutton.btn.btn-cyan.time {\r\n  width: 100%;\r\n}\r\np.timeinside {\r\n  color: black;\r\n\r\n}\r\np.timeframemonth {\r\n  color: black;\r\n\r\n  margin-top: 7px;\r\n}\r\nbutton.btn.btn-outline-info.waves-effect {\r\n  width: 100%;\r\n  height: 59px;\r\n  font-size: initial;\r\n  margin-top: 8px;\r\n}\r\nbutton.btn.btn-deep-orange {\r\n  height: 59px;\r\n  width: 100%;\r\n}\r\np.balancesection {\r\n  margin-top: 11px;\r\n  font-size: 14px;\r\n  font-weight: bold;\r\n}\r\n.row.preorder {\r\n  margin-left: 18px;\r\n}\r\n.row.PO {\r\n  margin-top: 21px;\r\n  margin-left: 20px;\r\n}\r\nlabel.preorderlabel {\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n  margin-top: 10px;\r\n}\r\nlabel.pbody {\r\n  font-weight: bold;\r\n  margin-left: 210px;\r\n  font-size: initial;\r\n}\r\nlabel.mbody {\r\n  font-weight: bold;\r\n  margin-left: 28px;\r\n  font-size: initial;\r\n}\r\nlabel.sbody {\r\n  font-weight: bold;\r\n  margin-left: 25px;\r\n  font-size: initial;\r\n}\r\nlabel.label {\r\n  margin-left: 77px;\r\n  font-weight: bold;\r\n}\r\nspan.badge.badge-pill.badge-secondary.summary{\r\n    width: 100%;\r\n}\r\nspan.cancelamount {\r\n  font-size: 18px;\r\n  color: red;\r\n}\r\n.card.p-2.mb-5.main {\r\n  margin-top: 18px;\r\n}\r\n.card.card-cascade.narrower.body-section {\r\n  margin-top: -29px;\r\n}\r\n/* modalpop up css */\r\n.modal-title {\r\n  color: red;\r\n  font-size: large;\r\n  font-weight: bold;\r\n}\r\nlabel.topup{\r\n  margin-top: 10px;\r\n  margin-left: 75px;\r\n  font-size: large;\r\n  font-weight: 300;\r\n}\r\nh5.head {\r\n  text-align: center;\r\n  font-size: large;\r\n  font-weight: bold;\r\n  color: red;\r\n}\r\np.balancesection {\r\n  margin-top: 0px;\r\n  font-size: large;\r\n  font-weight: bold;\r\n}\r\n.balance\r\n{\r\n    text-align: center;\r\n    font-size: 30px;\r\n   \r\n}\r\nb.header-section {\r\n    color: green;\r\n}\r\nbutton.btn.btn-primary.top-btn {\r\n    margin-top: -3px;\r\n    height: 50px;\r\n    color: white;\r\n}\r\ninput.form-control.top-input{\r\n    height: 48px;\r\n}\r\ninput.form-control.pre{\r\n  margin-left: -88px;\r\n  margin-top: 3px;\r\n}\r\nlabel.preorderlabel.preprice {\r\n  margin-left: 202px;\r\n\r\n}\r\n/* year Qurater Month CSS */\r\n.row.header {\r\n    margin-left: -6px;\r\n}\r\nlabel.year {\r\n  font-size: initial;\r\n  font-weight: bold;\r\n  margin-left: 81px;\r\n}\r\nlabel.quarter {\r\n  font-size: initial;\r\n  font-weight: bold;\r\n  margin-left: 112px;\r\n}\r\nlabel.month {\r\n  font-size: initial;\r\n  font-weight: bold;\r\n  margin-left: 133px;\r\n}\r\n/* new section */\r\nlabel.marketvendor {\r\n  font-size: initial;\r\n  font-weight: bold;\r\n  word-break: break-all;\r\n}\r\np.marketvendor1 {\r\n  font-size: large;\r\n  font-weight: bold;\r\n  color: red;\r\n}\r\nlabel.marketpreorder {\r\n    font-size:initial;\r\n    font-weight: bold;\r\n}\r\np.marketpreorder1 {\r\n  font-size: large;\r\n  font-weight: bold;\r\n  color: red;\r\n}\r\n.form-group.row.header {\r\n  margin-left: -4px;\r\n}\r\n.form-group.row.body {\r\n  margin-left: -4px;\r\n}\r\n.form-group.row.footer {\r\n  margin-left: -4px;\r\n}\r\nlabel.elabel {\r\n  font-size: larger;\r\n  font-weight: bold;\r\n  margin-top: 10px;\r\n  margin-left: 10px;\r\n}\r\nbutton.btn.btn-primary.topupwallet {\r\n  height: 50px;\r\n  margin-top: -2px;\r\n  margin-left: -1px;\r\n  width: 100%;\r\n}\r\n/* summary Css */\r\n.badge-secondary  {\r\n  width: 100%;\r\n  height: 50px;\r\n  margin:4px;\r\n}\r\np.summary {\r\n  margin-top: 12px;\r\n  font-size: large;\r\n  font-weight: bold;\r\n  color: #ffffff !important;\r\n}\r\nlabel.summarylabel {\r\n  /* margin-top: 22px; */\r\n  font-size: initial;\r\n  font-weight: bold;\r\n}\r\n.modal-body {\r\n  margin-left: 14px;\r\n}\r\n.container.cancel {\r\n  margin-top: -7px;\r\n}\r\n.modal-content {\r\n  margin-top: 63px;\r\n}\r\nlabel.preorderlabel1 {\r\n  font-size: large;\r\n    font-weight: bold;\r\n    word-break: break-all;\r\n    margin-top: 10px;\r\n}\r\n.col-form-label {\r\n  font-size: initial;\r\n  line-height: 1.5;\r\n  font-weight: bold;\r\n}\r\n.row.first {\r\n  padding-right: 10px;\r\n  margin-left: -10px;\r\n  margin-right: -8px;\r\n}\r\n.row.time {\r\n  padding-right: 10px;\r\n}\r\n.row.bal {\r\n  padding-right: 10px;\r\n}\r\n.row.v1 {\r\n  margin-top: 16px;\r\n  margin-left: 2px;\r\n  margin-right: 1px;\r\n}\r\nlabel.color {\r\n  color: chocolate;\r\n  font-size: large;\r\n  font-weight: bold;\r\n  margin-top: 6px;\r\n}\r\n.card-body.sum{\r\n  margin-left: 10px;\r\n  margin-right: 10px;\r\n}\r\n.container.end {\r\n  margin-top: 23px;\r\n}\r\n.card.pre {\r\n  margin-left: 16px;\r\n  margin-right: 16px;\r\n  margin-top: 92px;\r\n}\r\nh4.filter{\r\n  font-weight: bold;\r\n}\r\n.card-body.summary{\r\n  margin-left: 10px;\r\n  margin-right: 10px;\r\n}\r\n.btn.btn-lg {\r\n  padding: 1rem 2.4rem;\r\n  font-size: 17px;\r\n  font-weight: bold;\r\n}\r\n.input-group-text {\r\n  border: 1px solid black;\r\n  background: #fff;\r\n}\r\nlabel#importlabel {\r\n  font-weight: 400;\r\n}\r\nlabel#importlabeltype {\r\n  margin-left: 32px;\r\n  font-size: 19px;\r\n  font-weight: bold;\r\n}\r\ndiv#importpaid1 {\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  text-align: right;\r\n  color: #ff4444;\r\n}\r\n/*  */\r\ndiv#import {\r\n  padding: 2rem;\r\n  font-size: 19px;\r\n}\r\ndiv#importname {\r\n  text-align: right;\r\n  font-weight: 700;\r\n}\r\nh5.importinfo {\r\n  margin-top: -13px;\r\n  font-size: 24px;\r\n  font-weight: 500;\r\n}\r\n.container.importct {\r\n  max-width: 1673px;\r\n}\r\n.charge {\r\n  padding: 10px;\r\n}\r\nh4#importhead {\r\n  font-weight: bold;\r\n}\r\n.btn.btn-lg {\r\n  padding: 1rem 2.4rem;\r\n  font-size: 17px;\r\n  font-weight: bold;\r\n}\r\n/* import */\r\nlabel#importlabel {\r\n  font-weight: 400;\r\n}\r\nlabel#importlabeltype {\r\n  margin-left: 32px;\r\n  font-size: 19px;\r\n  font-weight: bold;\r\n}\r\ndiv#importpaid1 {\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  text-align: right;\r\n  color: #ff4444;\r\n}\r\n/*  */\r\ndiv#import {\r\n  padding: 2rem;\r\n  font-size: 19px;\r\n}\r\ndiv#importname {\r\n  text-align: right;\r\n  font-weight: 700;\r\n  font-size: 19px;\r\n\r\n}\r\nh5.importinfo {\r\n  margin-top: -13px;\r\n  font-size: 24px;\r\n  font-weight: 500;\r\n}\r\n.container.importct {\r\n  max-width: 1673px;\r\n}\r\n.charge {\r\n  padding: 10px;\r\n}\r\nh4#importhead {\r\n  font-weight: bold;\r\n}\r\n.btn.btn-lg {\r\n  padding: 1rem 2.4rem;\r\n  font-size: 17px;\r\n  font-weight: bold;\r\n}\r\n.card-header.view.view-cascade.gradient-card-header.blue-gradient {\r\n  font-size: 21px;\r\n  font-weight: bold;\r\n  color: #fff!important;\r\n  text-align: center;\r\n}\r\n.card-header.view.view-cascade.gradient-card-header.blue-gradient.imp {\r\n  margin-top: -33px;\r\n  width: 114%;\r\n  margin-left: -32px;\r\n}\r\nh4.importtr{\r\n  font-size: 25px;\r\n  text-align: left;\r\n  padding-bottom: 14px;\r\n  margin-left: -2px;\r\n  font-weight: 500;\r\n}\r\nh4.importor{\r\n  margin-top: 33px;\r\n  font-weight: 600;\r\n}\r\nh4.importtr1 {\r\n  font-size: 25px;\r\n  text-align: left;\r\n  padding-bottom: 14px;\r\n  margin-left: -2px;\r\n  font-weight: 500;\r\n  margin-top: 22px;\r\n}\r\ndiv#importequp {\r\n  padding: 10px 0px 0px 30px;\r\n  font-size: 17px;\r\n  font-weight: bold;\r\n  margin-top: 10px;\r\n}\r\ndiv#importac{\r\n  padding: 10px 0px 0px 30px;\r\n  font-size: 17px;\r\n  font-weight: bold;\r\n  margin-top: 10px;\r\n}\r\ndiv#importbll {\r\n  margin-left: 250px;\r\n  padding: 10px;\r\n}\r\ndiv#importequipment {\r\n  margin-top: 18px;\r\n}\r\nbutton.btn.btn-block {\r\n  font-size: 19px;\r\n  font-weight: 900;\r\n  cursor: default;\r\n}\r\ndiv#importpaid {\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  text-align: center;\r\n}\r\ndiv#nopre {\r\ntext-align: center;\r\ncolor: red;\r\nfont-size: 18px;\r\nfont-weight: bold;\r\n}\r\ndiv#importname1 {\r\n  font-size: 18px;\r\n  font-weight: 700;\r\n  text-align: right;\r\n}\r\ndiv#vendorname {\r\n  font-size: 20px;\r\n}\r\ndiv#import1 {\r\n  font-size: 19px;\r\n  font-weight: 400;\r\n}\r\ndiv#totalorder {\r\n  text-align: center;\r\n  font-weight: bold;\r\n  font-size: 22px;\r\n}\r\ndiv#orderqt {\r\n  padding: 10px 1px 0px 132px;\r\n  margin-left: 58px;\r\n  font-weight: bold;\r\n  font-size: 17px;\r\n  margin-top: -4px;\r\n}\r\ndiv#singlepre {\r\n  font-size: 20px;\r\n}\r\ndiv#importorder {\r\n  padding: 12px;\r\n}\r\ndiv#importpre {\r\n  font-size: 19px;\r\n}\r\np#importlabel {\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  margin-left: 106px;\r\n}\r\nlabel#importlabel1 {\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n}\r\nselect.form-control.ng-pristine.ng-invalid.is-invalid {\r\n  background-image: none;\r\n}\r\np#importheading {\r\n  font-size: 20px;\r\n  float: right;\r\n  margin-top: 37px;\r\n  font-weight: 800;\r\n  color: #f57f17;\r\n  margin-right: 15px;\r\n}\r\ndiv#importrow {\r\n  padding: 0px 0px 0px 12px;\r\n}\r\ndiv#importheight {\r\n  margin-left: 1px;\r\n  margin-top: -18px;\r\n}\r\n.input-vendor {\r\n  height: 50px;\r\n  background: #ebf4f9;\r\n}\r\n.card-body.vendor{\r\n  padding-right: 3rem;\r\n  padding-left: 3rem;\r\n}\r\ndiv#vendorrow {\r\n  padding-top: 0.5rem;\r\n}\r\nselect.form-control:not([size]):not([multiple]) {\r\n  height: 50px;\r\n  background-color:#ebf4f9; ;\r\n}\r\n.importcard {\r\n  padding: 15px;\r\n}\r\ni.fa.importfa {\r\n  font-size: 100px;\r\n}\r\n/* Higher than 1440 (desktop devices)\r\n====================================================================== */\r\n@media only screen and (max-width: 1440px){ \r\n\r\n}\r\n/* Higher than 1200 (desktop devices)\r\n====================================================================== */\r\n@media only screen and (max-width: 1024px) {\r\n}\r\n/* Higher than 960 (desktop devices)\r\n====================================================================== */\r\n@media only screen and (min-width: 992px) and (max-width: 1199px){\r\n}\r\n/* Higher than 960 (desktop devices)\r\n====================================================================== */\r\n@media only screen and (min-width: 992px){\r\n}\r\n/* Tablet Portrait (devices and browsers)\r\n====================================================================== */\r\n@media only screen and (min-width: 768px) and (max-width: 991px) {\r\n}\r\n/* All Mobile Sizes (devices and browser)\r\n====================================================================== */\r\n@media only screen and (max-width: 767px) {\r\n\r\n}\r\n/* Mobile Landscape Size to Tablet Portrait (devices and browsers)\r\n====================================================================== */\r\n@media only screen and (max-width: 375px)  {\r\n\r\n\r\n\r\n}\r\n/*=================================*/\r\n@media only screen and (min-width: 320px) {\r\n\r\n\r\n}\r\n/* Mobile Portrait Size to Mobile Landscape Size (devices and browsers)\r\n=================================================================== */\r\n@media only screen and (max-width: 479px) {\r\n\r\n}\r\n@media only screen and (max-width: 667px) {\r\n\r\n}\r\n/* Higher than 1440 (desktop devices)\r\n====================================================================== */\r\n@media only screen and (max-width: 1440px){ \r\n  \r\n}\r\n/* Higher than 1200 (desktop devices)\r\n====================================================================== */\r\n@media only screen and (max-width: 1024px) {\r\n}\r\n/* Higher than 960 (desktop devices)\r\n====================================================================== */\r\n@media only screen and (min-width: 992px) and (max-width: 1199px){\r\n}\r\n/* Higher than 960 (desktop devices)\r\n====================================================================== */\r\n@media only screen and (min-width: 992px){\r\n}\r\n/* Tablet Portrait (devices and browsers)\r\n====================================================================== */\r\n@media only screen and (min-width: 768px) and (max-width: 991px) {\r\n}\r\n/* All Mobile Sizes (devices and browser)\r\n====================================================================== */\r\n@media only screen and (max-width: 767px) {\r\n\r\n}\r\n/* Mobile Landscape Size to Tablet Portrait (devices and browsers)\r\n====================================================================== */\r\n@media only screen and (max-width: 375px)  {\r\n\r\n\r\n\r\n}\r\n/*=================================*/\r\n@media only screen and (min-width: 320px) {\r\n \r\n\r\n}\r\n/* Mobile Portrait Size to Mobile Landscape Size (devices and browsers)\r\n=================================================================== */\r\n@media only screen and (max-width: 479px) {\r\n  /*  */\r\n  h4.totalunits{\r\n    margin-top: -27px;\r\n    margin-left: 239px;\r\n  }  \r\n  /* p.balancesection {\r\n    margin-top: 8px;\r\n    font-size: large;\r\n    font-weight: bold;\r\n    margin-left: 19px;\r\n}  */\r\n\r\nlabel.mbody {\r\n  margin-left: 96px;\r\n}\r\n\r\nbutton.btn.btn-secondary.mbody1 {\r\n  width: 100%;\r\n}\r\n.row.marketprice {\r\n  margin-left: 30px;\r\n}\r\nlabel.pbody {\r\n  margin-left: 80px;\r\n}\r\n\r\nlabel.sbody {\r\n  margin-left: 98px;\r\n}\r\nlabel.topup{\r\n  margin-top: 10px;\r\n  margin-left: 4px;\r\n  font-size: large;\r\n  font-weight: 300;\r\n}\r\n.row.PO {\r\n  margin-top: 21px;\r\n  margin-left: -2px;\r\n}\r\ninput.form-control {\r\n  margin-top: 7px;\r\n  height: 42px;\r\n  margin-left: 2px;\r\n}\r\ninput.form-control.pre {\r\n  margin-left: 0px; \r\n   margin-top: 0px;\r\n}\r\nlabel.preorderlabel.preprice {\r\n  margin-top: 27px;\r\n  margin-left: 0;\r\n}\r\n\r\nspan#basic-addon2 {\r\n  margin-top: 6px;\r\n}\r\nbutton.btn.btn-secondary.marketbtn {\r\n  width: 100%;\r\n}\r\n\r\nbutton.btn.btn-success.cancelsucess{\r\n  margin-left: 152px;\r\n  margin-top: -92px;\r\n}\r\nbutton.btn.btn-default.cancelexit{\r\n  height: 64px;\r\n  width: 38%;\r\n}\r\nbutton.btn.btn-primary.topupwallet{\r\n  width: 100%;\r\n  margin-left: 3px;\r\n}\r\n\r\n}\r\n@media only screen and (max-width: 667px) {\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvVXNlci9wcmVvcmRlci9wcmVvcmRlci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFCQUFxQjtBQUNyQjtFQUNFLFlBQVk7RUFDWixXQUFXO0VBQ1gsZ0JBQWdCO0VBQ2hCLGlCQUFpQjtBQUNuQjtBQUNBO0VBQ0UsZ0JBQWdCO0VBQ2hCLFlBQVk7QUFDZDtBQUNBO0VBQ0UsZ0JBQWdCO0VBQ2hCLGlCQUFpQjtFQUNqQixrQkFBa0I7QUFDcEI7QUFFQSxlQUFlO0FBQ2Y7RUFDRSxXQUFXO0FBQ2I7QUFDQTtFQUNFLFlBQVk7O0FBRWQ7QUFDQTtFQUNFLFlBQVk7O0VBRVosZUFBZTtBQUNqQjtBQUNBO0VBQ0UsV0FBVztFQUNYLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIsZUFBZTtBQUNqQjtBQUVBO0VBQ0UsWUFBWTtFQUNaLFdBQVc7QUFDYjtBQUNBO0VBQ0UsZ0JBQWdCO0VBQ2hCLGVBQWU7RUFDZixpQkFBaUI7QUFDbkI7QUFDQTtFQUNFLGlCQUFpQjtBQUNuQjtBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLGlCQUFpQjtBQUNuQjtBQUNBO0VBQ0UsaUJBQWlCO0VBQ2pCLGVBQWU7RUFDZixnQkFBZ0I7QUFDbEI7QUFDQTtFQUNFLGlCQUFpQjtFQUNqQixrQkFBa0I7RUFDbEIsa0JBQWtCO0FBQ3BCO0FBQ0E7RUFDRSxpQkFBaUI7RUFDakIsaUJBQWlCO0VBQ2pCLGtCQUFrQjtBQUNwQjtBQUNBO0VBQ0UsaUJBQWlCO0VBQ2pCLGlCQUFpQjtFQUNqQixrQkFBa0I7QUFDcEI7QUFDQTtFQUNFLGlCQUFpQjtFQUNqQixpQkFBaUI7QUFDbkI7QUFDQTtJQUNJLFdBQVc7QUFDZjtBQUNBO0VBQ0UsZUFBZTtFQUNmLFVBQVU7QUFDWjtBQUNBO0VBQ0UsZ0JBQWdCO0FBQ2xCO0FBQ0E7RUFDRSxpQkFBaUI7QUFDbkI7QUFFQSxvQkFBb0I7QUFDcEI7RUFDRSxVQUFVO0VBQ1YsZ0JBQWdCO0VBQ2hCLGlCQUFpQjtBQUNuQjtBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLGlCQUFpQjtFQUNqQixnQkFBZ0I7RUFDaEIsZ0JBQWdCO0FBQ2xCO0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsZ0JBQWdCO0VBQ2hCLGlCQUFpQjtFQUNqQixVQUFVO0FBQ1o7QUFDQTtFQUNFLGVBQWU7RUFDZixnQkFBZ0I7RUFDaEIsaUJBQWlCO0FBQ25CO0FBRUE7O0lBRUksa0JBQWtCO0lBQ2xCLGVBQWU7O0FBRW5CO0FBQ0E7SUFDSSxZQUFZO0FBQ2hCO0FBQ0E7SUFDSSxnQkFBZ0I7SUFDaEIsWUFBWTtJQUNaLFlBQVk7QUFDaEI7QUFFQTtJQUNJLFlBQVk7QUFDaEI7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQixlQUFlO0FBQ2pCO0FBQ0E7RUFDRSxrQkFBa0I7O0FBRXBCO0FBRUEsMkJBQTJCO0FBQzNCO0lBQ0ksaUJBQWlCO0FBQ3JCO0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsaUJBQWlCO0VBQ2pCLGlCQUFpQjtBQUNuQjtBQUNBO0VBQ0Usa0JBQWtCO0VBQ2xCLGlCQUFpQjtFQUNqQixrQkFBa0I7QUFDcEI7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQixpQkFBaUI7RUFDakIsa0JBQWtCO0FBQ3BCO0FBSUEsZ0JBQWdCO0FBQ2hCO0VBQ0Usa0JBQWtCO0VBQ2xCLGlCQUFpQjtFQUNqQixxQkFBcUI7QUFDdkI7QUFDQTtFQUNFLGdCQUFnQjtFQUNoQixpQkFBaUI7RUFDakIsVUFBVTtBQUNaO0FBR0E7SUFDSSxpQkFBaUI7SUFDakIsaUJBQWlCO0FBQ3JCO0FBQ0E7RUFDRSxnQkFBZ0I7RUFDaEIsaUJBQWlCO0VBQ2pCLFVBQVU7QUFDWjtBQUNBO0VBQ0UsaUJBQWlCO0FBQ25CO0FBQ0E7RUFDRSxpQkFBaUI7QUFDbkI7QUFDQTtFQUNFLGlCQUFpQjtBQUNuQjtBQUVBO0VBQ0UsaUJBQWlCO0VBQ2pCLGlCQUFpQjtFQUNqQixnQkFBZ0I7RUFDaEIsaUJBQWlCO0FBQ25CO0FBQ0E7RUFDRSxZQUFZO0VBQ1osZ0JBQWdCO0VBQ2hCLGlCQUFpQjtFQUNqQixXQUFXO0FBQ2I7QUFHQSxnQkFBZ0I7QUFDaEI7RUFDRSxXQUFXO0VBQ1gsWUFBWTtFQUNaLFVBQVU7QUFDWjtBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLGdCQUFnQjtFQUNoQixpQkFBaUI7RUFDakIseUJBQXlCO0FBQzNCO0FBQ0E7RUFDRSxzQkFBc0I7RUFDdEIsa0JBQWtCO0VBQ2xCLGlCQUFpQjtBQUNuQjtBQUNBO0VBQ0UsaUJBQWlCO0FBQ25CO0FBQ0E7RUFDRSxnQkFBZ0I7QUFDbEI7QUFDQTtFQUNFLGdCQUFnQjtBQUNsQjtBQUVBO0VBQ0UsZ0JBQWdCO0lBQ2QsaUJBQWlCO0lBQ2pCLHFCQUFxQjtJQUNyQixnQkFBZ0I7QUFDcEI7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIsaUJBQWlCO0FBQ25CO0FBQ0E7RUFDRSxtQkFBbUI7RUFDbkIsa0JBQWtCO0VBQ2xCLGtCQUFrQjtBQUNwQjtBQUNBO0VBQ0UsbUJBQW1CO0FBQ3JCO0FBQ0E7RUFDRSxtQkFBbUI7QUFDckI7QUFDQTtFQUNFLGdCQUFnQjtFQUNoQixnQkFBZ0I7RUFDaEIsaUJBQWlCO0FBQ25CO0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsZ0JBQWdCO0VBQ2hCLGlCQUFpQjtFQUNqQixlQUFlO0FBQ2pCO0FBQ0E7RUFDRSxpQkFBaUI7RUFDakIsa0JBQWtCO0FBQ3BCO0FBRUE7RUFDRSxnQkFBZ0I7QUFDbEI7QUFDQTtFQUNFLGlCQUFpQjtFQUNqQixrQkFBa0I7RUFDbEIsZ0JBQWdCO0FBQ2xCO0FBQ0E7RUFDRSxpQkFBaUI7QUFDbkI7QUFDQTtFQUNFLGlCQUFpQjtFQUNqQixrQkFBa0I7QUFDcEI7QUFFQTtFQUNFLG9CQUFvQjtFQUNwQixlQUFlO0VBQ2YsaUJBQWlCO0FBQ25CO0FBQ0E7RUFDRSx1QkFBdUI7RUFDdkIsZ0JBQWdCO0FBQ2xCO0FBRUE7RUFDRSxnQkFBZ0I7QUFDbEI7QUFDQTtFQUNFLGlCQUFpQjtFQUNqQixlQUFlO0VBQ2YsaUJBQWlCO0FBQ25CO0FBQ0E7RUFDRSxlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLGlCQUFpQjtFQUNqQixjQUFjO0FBQ2hCO0FBRUEsS0FBSztBQUNMO0VBQ0UsYUFBYTtFQUNiLGVBQWU7QUFDakI7QUFDQTtFQUNFLGlCQUFpQjtFQUNqQixnQkFBZ0I7QUFDbEI7QUFFQTtFQUNFLGlCQUFpQjtFQUNqQixlQUFlO0VBQ2YsZ0JBQWdCO0FBQ2xCO0FBQ0E7RUFDRSxpQkFBaUI7QUFDbkI7QUFDQTtFQUNFLGFBQWE7QUFDZjtBQUNBO0VBQ0UsaUJBQWlCO0FBQ25CO0FBQ0E7RUFDRSxvQkFBb0I7RUFDcEIsZUFBZTtFQUNmLGlCQUFpQjtBQUNuQjtBQUVBLFdBQVc7QUFDWDtFQUNFLGdCQUFnQjtBQUNsQjtBQUNBO0VBQ0UsaUJBQWlCO0VBQ2pCLGVBQWU7RUFDZixpQkFBaUI7QUFDbkI7QUFDQTtFQUNFLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsaUJBQWlCO0VBQ2pCLGNBQWM7QUFDaEI7QUFFQSxLQUFLO0FBQ0w7RUFDRSxhQUFhO0VBQ2IsZUFBZTtBQUNqQjtBQUNBO0VBQ0UsaUJBQWlCO0VBQ2pCLGdCQUFnQjtFQUNoQixlQUFlOztBQUVqQjtBQUVBO0VBQ0UsaUJBQWlCO0VBQ2pCLGVBQWU7RUFDZixnQkFBZ0I7QUFDbEI7QUFDQTtFQUNFLGlCQUFpQjtBQUNuQjtBQUNBO0VBQ0UsYUFBYTtBQUNmO0FBQ0E7RUFDRSxpQkFBaUI7QUFDbkI7QUFDQTtFQUNFLG9CQUFvQjtFQUNwQixlQUFlO0VBQ2YsaUJBQWlCO0FBQ25CO0FBRUE7RUFDRSxlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLHFCQUFxQjtFQUNyQixrQkFBa0I7QUFDcEI7QUFDQTtFQUNFLGlCQUFpQjtFQUNqQixXQUFXO0VBQ1gsa0JBQWtCO0FBQ3BCO0FBQ0E7RUFDRSxlQUFlO0VBQ2YsZ0JBQWdCO0VBQ2hCLG9CQUFvQjtFQUNwQixpQkFBaUI7RUFDakIsZ0JBQWdCO0FBQ2xCO0FBQ0E7RUFDRSxnQkFBZ0I7RUFDaEIsZ0JBQWdCO0FBQ2xCO0FBQ0E7RUFDRSxlQUFlO0VBQ2YsZ0JBQWdCO0VBQ2hCLG9CQUFvQjtFQUNwQixpQkFBaUI7RUFDakIsZ0JBQWdCO0VBQ2hCLGdCQUFnQjtBQUNsQjtBQUdBO0VBQ0UsMEJBQTBCO0VBQzFCLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsZ0JBQWdCO0FBQ2xCO0FBQ0E7RUFDRSwwQkFBMEI7RUFDMUIsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixnQkFBZ0I7QUFDbEI7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixhQUFhO0FBQ2Y7QUFFQTtFQUNFLGdCQUFnQjtBQUNsQjtBQUVBO0VBQ0UsZUFBZTtFQUNmLGdCQUFnQjtFQUNoQixlQUFlO0FBQ2pCO0FBR0E7RUFDRSxlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLGtCQUFrQjtBQUNwQjtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCLFVBQVU7QUFDVixlQUFlO0FBQ2YsaUJBQWlCO0FBQ2pCO0FBQ0E7RUFDRSxlQUFlO0VBQ2YsZ0JBQWdCO0VBQ2hCLGlCQUFpQjtBQUNuQjtBQUNBO0VBQ0UsZUFBZTtBQUNqQjtBQUdBO0VBQ0UsZUFBZTtFQUNmLGdCQUFnQjtBQUNsQjtBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLGlCQUFpQjtFQUNqQixlQUFlO0FBQ2pCO0FBQ0E7RUFDRSwyQkFBMkI7RUFDM0IsaUJBQWlCO0VBQ2pCLGlCQUFpQjtFQUNqQixlQUFlO0VBQ2YsZ0JBQWdCO0FBQ2xCO0FBRUE7RUFDRSxlQUFlO0FBQ2pCO0FBQ0E7RUFDRSxhQUFhO0FBQ2Y7QUFFQTtFQUNFLGVBQWU7QUFDakI7QUFFQTtFQUNFLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsa0JBQWtCO0FBQ3BCO0FBRUE7RUFDRSxlQUFlO0VBQ2YsaUJBQWlCO0FBQ25CO0FBRUE7RUFDRSxzQkFBc0I7QUFDeEI7QUFDQTtFQUNFLGVBQWU7RUFDZixZQUFZO0VBQ1osZ0JBQWdCO0VBQ2hCLGdCQUFnQjtFQUNoQixjQUFjO0VBQ2Qsa0JBQWtCO0FBQ3BCO0FBRUE7RUFDRSx5QkFBeUI7QUFDM0I7QUFHQTtFQUNFLGdCQUFnQjtFQUNoQixpQkFBaUI7QUFDbkI7QUFDQTtFQUNFLFlBQVk7RUFDWixtQkFBbUI7QUFDckI7QUFDQTtFQUNFLG1CQUFtQjtFQUNuQixrQkFBa0I7QUFDcEI7QUFFQTtFQUNFLG1CQUFtQjtBQUNyQjtBQUVBO0VBQ0UsWUFBWTtFQUNaLHdCQUF3QjtBQUMxQjtBQUNBO0VBQ0UsYUFBYTtBQUNmO0FBQ0E7RUFDRSxnQkFBZ0I7QUFDbEI7QUFDQTt3RUFDd0U7QUFDeEU7O0FBRUE7QUFFQTt3RUFDd0U7QUFDeEU7QUFDQTtBQUVBO3dFQUN3RTtBQUN4RTtBQUNBO0FBRUE7d0VBQ3dFO0FBQ3hFO0FBQ0E7QUFFQTt3RUFDd0U7QUFDeEU7QUFDQTtBQUVBO3dFQUN3RTtBQUN4RTs7QUFFQTtBQUVBO3dFQUN3RTtBQUN4RTs7OztBQUlBO0FBQ0Esb0NBQW9DO0FBQ3BDOzs7QUFHQTtBQUNBO3FFQUNxRTtBQUNyRTs7QUFFQTtBQUNBOztBQUVBO0FBRUE7d0VBQ3dFO0FBQ3hFOztBQUVBO0FBRUE7d0VBQ3dFO0FBQ3hFO0FBQ0E7QUFFQTt3RUFDd0U7QUFDeEU7QUFDQTtBQUVBO3dFQUN3RTtBQUN4RTtBQUNBO0FBRUE7d0VBQ3dFO0FBQ3hFO0FBQ0E7QUFFQTt3RUFDd0U7QUFDeEU7O0FBRUE7QUFFQTt3RUFDd0U7QUFDeEU7Ozs7QUFJQTtBQUNBLG9DQUFvQztBQUNuQzs7O0FBR0Q7QUFDQTtxRUFDcUU7QUFDckU7RUFDRSxLQUFLO0VBQ0w7SUFDRSxpQkFBaUI7SUFDakIsa0JBQWtCO0VBQ3BCO0VBQ0E7Ozs7O0lBS0U7O0FBRUo7RUFDRSxpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxXQUFXO0FBQ2I7QUFDQTtFQUNFLGlCQUFpQjtBQUNuQjtBQUNBO0VBQ0UsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsaUJBQWlCO0FBQ25CO0FBQ0E7RUFDRSxnQkFBZ0I7RUFDaEIsZ0JBQWdCO0VBQ2hCLGdCQUFnQjtFQUNoQixnQkFBZ0I7QUFDbEI7QUFDQTtFQUNFLGdCQUFnQjtFQUNoQixpQkFBaUI7QUFDbkI7QUFDQTtFQUNFLGVBQWU7RUFDZixZQUFZO0VBQ1osZ0JBQWdCO0FBQ2xCO0FBQ0E7RUFDRSxnQkFBZ0I7R0FDZixlQUFlO0FBQ2xCO0FBQ0E7RUFDRSxnQkFBZ0I7RUFDaEIsY0FBYztBQUNoQjs7QUFFQTtFQUNFLGVBQWU7QUFDakI7QUFDQTtFQUNFLFdBQVc7QUFDYjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixpQkFBaUI7QUFDbkI7QUFDQTtFQUNFLFlBQVk7RUFDWixVQUFVO0FBQ1o7QUFDQTtFQUNFLFdBQVc7RUFDWCxnQkFBZ0I7QUFDbEI7O0FBRUE7QUFHQTs7QUFFQSIsImZpbGUiOiJzcmMvYXBwL1VzZXIvcHJlb3JkZXIvcHJlb3JkZXIuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIG5ldyBwcmVvcmRlciBjc3MgKi9cclxuYnV0dG9uLmJ0bi5idG4tY3lhbiB7XHJcbiAgaGVpZ2h0OiA1OXB4O1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIGZvbnQtc2l6ZTogdW5zZXQ7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuc2VsZWN0LmZvcm0tY29udHJvbC5lcXVwIHtcclxuICBtYXJnaW4tdG9wOiAxMHB4O1xyXG4gIGhlaWdodDogNTBweDtcclxufVxyXG5sYWJlbC5oZWFkaW5nbGFiZWwge1xyXG4gIG1hcmdpbi1sZWZ0OiA3cHg7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgZm9udC1zaXplOiBpbml0aWFsO1xyXG59XHJcblxyXG4vKiB0aW1lIGZyYW1lICovXHJcbmJ1dHRvbi5idG4uYnRuLWN5YW4udGltZSB7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbn1cclxucC50aW1laW5zaWRlIHtcclxuICBjb2xvcjogYmxhY2s7XHJcblxyXG59XHJcbnAudGltZWZyYW1lbW9udGgge1xyXG4gIGNvbG9yOiBibGFjaztcclxuXHJcbiAgbWFyZ2luLXRvcDogN3B4O1xyXG59XHJcbmJ1dHRvbi5idG4uYnRuLW91dGxpbmUtaW5mby53YXZlcy1lZmZlY3Qge1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIGhlaWdodDogNTlweDtcclxuICBmb250LXNpemU6IGluaXRpYWw7XHJcbiAgbWFyZ2luLXRvcDogOHB4O1xyXG59XHJcblxyXG5idXR0b24uYnRuLmJ0bi1kZWVwLW9yYW5nZSB7XHJcbiAgaGVpZ2h0OiA1OXB4O1xyXG4gIHdpZHRoOiAxMDAlO1xyXG59XHJcbnAuYmFsYW5jZXNlY3Rpb24ge1xyXG4gIG1hcmdpbi10b3A6IDExcHg7XHJcbiAgZm9udC1zaXplOiAxNHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcbi5yb3cucHJlb3JkZXIge1xyXG4gIG1hcmdpbi1sZWZ0OiAxOHB4O1xyXG59XHJcblxyXG4ucm93LlBPIHtcclxuICBtYXJnaW4tdG9wOiAyMXB4O1xyXG4gIG1hcmdpbi1sZWZ0OiAyMHB4O1xyXG59XHJcbmxhYmVsLnByZW9yZGVybGFiZWwge1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIGZvbnQtc2l6ZTogMTZweDtcclxuICBtYXJnaW4tdG9wOiAxMHB4O1xyXG59XHJcbmxhYmVsLnBib2R5IHtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxuICBtYXJnaW4tbGVmdDogMjEwcHg7XHJcbiAgZm9udC1zaXplOiBpbml0aWFsO1xyXG59XHJcbmxhYmVsLm1ib2R5IHtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxuICBtYXJnaW4tbGVmdDogMjhweDtcclxuICBmb250LXNpemU6IGluaXRpYWw7XHJcbn1cclxubGFiZWwuc2JvZHkge1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIG1hcmdpbi1sZWZ0OiAyNXB4O1xyXG4gIGZvbnQtc2l6ZTogaW5pdGlhbDtcclxufVxyXG5sYWJlbC5sYWJlbCB7XHJcbiAgbWFyZ2luLWxlZnQ6IDc3cHg7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuc3Bhbi5iYWRnZS5iYWRnZS1waWxsLmJhZGdlLXNlY29uZGFyeS5zdW1tYXJ5e1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbn1cclxuc3Bhbi5jYW5jZWxhbW91bnQge1xyXG4gIGZvbnQtc2l6ZTogMThweDtcclxuICBjb2xvcjogcmVkO1xyXG59XHJcbi5jYXJkLnAtMi5tYi01Lm1haW4ge1xyXG4gIG1hcmdpbi10b3A6IDE4cHg7XHJcbn1cclxuLmNhcmQuY2FyZC1jYXNjYWRlLm5hcnJvd2VyLmJvZHktc2VjdGlvbiB7XHJcbiAgbWFyZ2luLXRvcDogLTI5cHg7XHJcbn1cclxuXHJcbi8qIG1vZGFscG9wIHVwIGNzcyAqL1xyXG4ubW9kYWwtdGl0bGUge1xyXG4gIGNvbG9yOiByZWQ7XHJcbiAgZm9udC1zaXplOiBsYXJnZTtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5cclxubGFiZWwudG9wdXB7XHJcbiAgbWFyZ2luLXRvcDogMTBweDtcclxuICBtYXJnaW4tbGVmdDogNzVweDtcclxuICBmb250LXNpemU6IGxhcmdlO1xyXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbn1cclxuXHJcbmg1LmhlYWQge1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBmb250LXNpemU6IGxhcmdlO1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIGNvbG9yOiByZWQ7XHJcbn1cclxucC5iYWxhbmNlc2VjdGlvbiB7XHJcbiAgbWFyZ2luLXRvcDogMHB4O1xyXG4gIGZvbnQtc2l6ZTogbGFyZ2U7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuXHJcbi5iYWxhbmNlXHJcbntcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIGZvbnQtc2l6ZTogMzBweDtcclxuICAgXHJcbn1cclxuYi5oZWFkZXItc2VjdGlvbiB7XHJcbiAgICBjb2xvcjogZ3JlZW47XHJcbn1cclxuYnV0dG9uLmJ0bi5idG4tcHJpbWFyeS50b3AtYnRuIHtcclxuICAgIG1hcmdpbi10b3A6IC0zcHg7XHJcbiAgICBoZWlnaHQ6IDUwcHg7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbn1cclxuXHJcbmlucHV0LmZvcm0tY29udHJvbC50b3AtaW5wdXR7XHJcbiAgICBoZWlnaHQ6IDQ4cHg7XHJcbn1cclxuaW5wdXQuZm9ybS1jb250cm9sLnByZXtcclxuICBtYXJnaW4tbGVmdDogLTg4cHg7XHJcbiAgbWFyZ2luLXRvcDogM3B4O1xyXG59XHJcbmxhYmVsLnByZW9yZGVybGFiZWwucHJlcHJpY2Uge1xyXG4gIG1hcmdpbi1sZWZ0OiAyMDJweDtcclxuXHJcbn1cclxuXHJcbi8qIHllYXIgUXVyYXRlciBNb250aCBDU1MgKi9cclxuLnJvdy5oZWFkZXIge1xyXG4gICAgbWFyZ2luLWxlZnQ6IC02cHg7XHJcbn1cclxuXHJcbmxhYmVsLnllYXIge1xyXG4gIGZvbnQtc2l6ZTogaW5pdGlhbDtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxuICBtYXJnaW4tbGVmdDogODFweDtcclxufVxyXG5sYWJlbC5xdWFydGVyIHtcclxuICBmb250LXNpemU6IGluaXRpYWw7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgbWFyZ2luLWxlZnQ6IDExMnB4O1xyXG59XHJcbmxhYmVsLm1vbnRoIHtcclxuICBmb250LXNpemU6IGluaXRpYWw7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgbWFyZ2luLWxlZnQ6IDEzM3B4O1xyXG59XHJcblxyXG5cclxuXHJcbi8qIG5ldyBzZWN0aW9uICovXHJcbmxhYmVsLm1hcmtldHZlbmRvciB7XHJcbiAgZm9udC1zaXplOiBpbml0aWFsO1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcclxufVxyXG5wLm1hcmtldHZlbmRvcjEge1xyXG4gIGZvbnQtc2l6ZTogbGFyZ2U7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgY29sb3I6IHJlZDtcclxufVxyXG5cclxuXHJcbmxhYmVsLm1hcmtldHByZW9yZGVyIHtcclxuICAgIGZvbnQtc2l6ZTppbml0aWFsO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxucC5tYXJrZXRwcmVvcmRlcjEge1xyXG4gIGZvbnQtc2l6ZTogbGFyZ2U7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgY29sb3I6IHJlZDtcclxufVxyXG4uZm9ybS1ncm91cC5yb3cuaGVhZGVyIHtcclxuICBtYXJnaW4tbGVmdDogLTRweDtcclxufVxyXG4uZm9ybS1ncm91cC5yb3cuYm9keSB7XHJcbiAgbWFyZ2luLWxlZnQ6IC00cHg7XHJcbn1cclxuLmZvcm0tZ3JvdXAucm93LmZvb3RlciB7XHJcbiAgbWFyZ2luLWxlZnQ6IC00cHg7XHJcbn1cclxuXHJcbmxhYmVsLmVsYWJlbCB7XHJcbiAgZm9udC1zaXplOiBsYXJnZXI7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgbWFyZ2luLXRvcDogMTBweDtcclxuICBtYXJnaW4tbGVmdDogMTBweDtcclxufVxyXG5idXR0b24uYnRuLmJ0bi1wcmltYXJ5LnRvcHVwd2FsbGV0IHtcclxuICBoZWlnaHQ6IDUwcHg7XHJcbiAgbWFyZ2luLXRvcDogLTJweDtcclxuICBtYXJnaW4tbGVmdDogLTFweDtcclxuICB3aWR0aDogMTAwJTtcclxufVxyXG5cclxuXHJcbi8qIHN1bW1hcnkgQ3NzICovXHJcbi5iYWRnZS1zZWNvbmRhcnkgIHtcclxuICB3aWR0aDogMTAwJTtcclxuICBoZWlnaHQ6IDUwcHg7XHJcbiAgbWFyZ2luOjRweDtcclxufVxyXG5cclxucC5zdW1tYXJ5IHtcclxuICBtYXJnaW4tdG9wOiAxMnB4O1xyXG4gIGZvbnQtc2l6ZTogbGFyZ2U7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgY29sb3I6ICNmZmZmZmYgIWltcG9ydGFudDtcclxufVxyXG5sYWJlbC5zdW1tYXJ5bGFiZWwge1xyXG4gIC8qIG1hcmdpbi10b3A6IDIycHg7ICovXHJcbiAgZm9udC1zaXplOiBpbml0aWFsO1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcbi5tb2RhbC1ib2R5IHtcclxuICBtYXJnaW4tbGVmdDogMTRweDtcclxufVxyXG4uY29udGFpbmVyLmNhbmNlbCB7XHJcbiAgbWFyZ2luLXRvcDogLTdweDtcclxufVxyXG4ubW9kYWwtY29udGVudCB7XHJcbiAgbWFyZ2luLXRvcDogNjNweDtcclxufVxyXG5cclxubGFiZWwucHJlb3JkZXJsYWJlbDEge1xyXG4gIGZvbnQtc2l6ZTogbGFyZ2U7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcclxuICAgIG1hcmdpbi10b3A6IDEwcHg7XHJcbn1cclxuLmNvbC1mb3JtLWxhYmVsIHtcclxuICBmb250LXNpemU6IGluaXRpYWw7XHJcbiAgbGluZS1oZWlnaHQ6IDEuNTtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG4ucm93LmZpcnN0IHtcclxuICBwYWRkaW5nLXJpZ2h0OiAxMHB4O1xyXG4gIG1hcmdpbi1sZWZ0OiAtMTBweDtcclxuICBtYXJnaW4tcmlnaHQ6IC04cHg7XHJcbn1cclxuLnJvdy50aW1lIHtcclxuICBwYWRkaW5nLXJpZ2h0OiAxMHB4O1xyXG59XHJcbi5yb3cuYmFsIHtcclxuICBwYWRkaW5nLXJpZ2h0OiAxMHB4O1xyXG59XHJcbi5yb3cudjEge1xyXG4gIG1hcmdpbi10b3A6IDE2cHg7XHJcbiAgbWFyZ2luLWxlZnQ6IDJweDtcclxuICBtYXJnaW4tcmlnaHQ6IDFweDtcclxufVxyXG5cclxubGFiZWwuY29sb3Ige1xyXG4gIGNvbG9yOiBjaG9jb2xhdGU7XHJcbiAgZm9udC1zaXplOiBsYXJnZTtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxuICBtYXJnaW4tdG9wOiA2cHg7XHJcbn1cclxuLmNhcmQtYm9keS5zdW17XHJcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XHJcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xyXG59XHJcblxyXG4uY29udGFpbmVyLmVuZCB7XHJcbiAgbWFyZ2luLXRvcDogMjNweDtcclxufVxyXG4uY2FyZC5wcmUge1xyXG4gIG1hcmdpbi1sZWZ0OiAxNnB4O1xyXG4gIG1hcmdpbi1yaWdodDogMTZweDtcclxuICBtYXJnaW4tdG9wOiA5MnB4O1xyXG59XHJcbmg0LmZpbHRlcntcclxuICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG4uY2FyZC1ib2R5LnN1bW1hcnl7XHJcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XHJcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xyXG59XHJcblxyXG4uYnRuLmJ0bi1sZyB7XHJcbiAgcGFkZGluZzogMXJlbSAyLjRyZW07XHJcbiAgZm9udC1zaXplOiAxN3B4O1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcbi5pbnB1dC1ncm91cC10ZXh0IHtcclxuICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcclxuICBiYWNrZ3JvdW5kOiAjZmZmO1xyXG59XHJcblxyXG5sYWJlbCNpbXBvcnRsYWJlbCB7XHJcbiAgZm9udC13ZWlnaHQ6IDQwMDtcclxufVxyXG5sYWJlbCNpbXBvcnRsYWJlbHR5cGUge1xyXG4gIG1hcmdpbi1sZWZ0OiAzMnB4O1xyXG4gIGZvbnQtc2l6ZTogMTlweDtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5kaXYjaW1wb3J0cGFpZDEge1xyXG4gIGZvbnQtc2l6ZTogMjBweDtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxuICB0ZXh0LWFsaWduOiByaWdodDtcclxuICBjb2xvcjogI2ZmNDQ0NDtcclxufVxyXG5cclxuLyogICovXHJcbmRpdiNpbXBvcnQge1xyXG4gIHBhZGRpbmc6IDJyZW07XHJcbiAgZm9udC1zaXplOiAxOXB4O1xyXG59XHJcbmRpdiNpbXBvcnRuYW1lIHtcclxuICB0ZXh0LWFsaWduOiByaWdodDtcclxuICBmb250LXdlaWdodDogNzAwO1xyXG59XHJcblxyXG5oNS5pbXBvcnRpbmZvIHtcclxuICBtYXJnaW4tdG9wOiAtMTNweDtcclxuICBmb250LXNpemU6IDI0cHg7XHJcbiAgZm9udC13ZWlnaHQ6IDUwMDtcclxufVxyXG4uY29udGFpbmVyLmltcG9ydGN0IHtcclxuICBtYXgtd2lkdGg6IDE2NzNweDtcclxufVxyXG4uY2hhcmdlIHtcclxuICBwYWRkaW5nOiAxMHB4O1xyXG59XHJcbmg0I2ltcG9ydGhlYWQge1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcbi5idG4uYnRuLWxnIHtcclxuICBwYWRkaW5nOiAxcmVtIDIuNHJlbTtcclxuICBmb250LXNpemU6IDE3cHg7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuXHJcbi8qIGltcG9ydCAqL1xyXG5sYWJlbCNpbXBvcnRsYWJlbCB7XHJcbiAgZm9udC13ZWlnaHQ6IDQwMDtcclxufVxyXG5sYWJlbCNpbXBvcnRsYWJlbHR5cGUge1xyXG4gIG1hcmdpbi1sZWZ0OiAzMnB4O1xyXG4gIGZvbnQtc2l6ZTogMTlweDtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5kaXYjaW1wb3J0cGFpZDEge1xyXG4gIGZvbnQtc2l6ZTogMjBweDtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxuICB0ZXh0LWFsaWduOiByaWdodDtcclxuICBjb2xvcjogI2ZmNDQ0NDtcclxufVxyXG5cclxuLyogICovXHJcbmRpdiNpbXBvcnQge1xyXG4gIHBhZGRpbmc6IDJyZW07XHJcbiAgZm9udC1zaXplOiAxOXB4O1xyXG59XHJcbmRpdiNpbXBvcnRuYW1lIHtcclxuICB0ZXh0LWFsaWduOiByaWdodDtcclxuICBmb250LXdlaWdodDogNzAwO1xyXG4gIGZvbnQtc2l6ZTogMTlweDtcclxuXHJcbn1cclxuXHJcbmg1LmltcG9ydGluZm8ge1xyXG4gIG1hcmdpbi10b3A6IC0xM3B4O1xyXG4gIGZvbnQtc2l6ZTogMjRweDtcclxuICBmb250LXdlaWdodDogNTAwO1xyXG59XHJcbi5jb250YWluZXIuaW1wb3J0Y3Qge1xyXG4gIG1heC13aWR0aDogMTY3M3B4O1xyXG59XHJcbi5jaGFyZ2Uge1xyXG4gIHBhZGRpbmc6IDEwcHg7XHJcbn1cclxuaDQjaW1wb3J0aGVhZCB7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuLmJ0bi5idG4tbGcge1xyXG4gIHBhZGRpbmc6IDFyZW0gMi40cmVtO1xyXG4gIGZvbnQtc2l6ZTogMTdweDtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5cclxuLmNhcmQtaGVhZGVyLnZpZXcudmlldy1jYXNjYWRlLmdyYWRpZW50LWNhcmQtaGVhZGVyLmJsdWUtZ3JhZGllbnQge1xyXG4gIGZvbnQtc2l6ZTogMjFweDtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxuICBjb2xvcjogI2ZmZiFpbXBvcnRhbnQ7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcbi5jYXJkLWhlYWRlci52aWV3LnZpZXctY2FzY2FkZS5ncmFkaWVudC1jYXJkLWhlYWRlci5ibHVlLWdyYWRpZW50LmltcCB7XHJcbiAgbWFyZ2luLXRvcDogLTMzcHg7XHJcbiAgd2lkdGg6IDExNCU7XHJcbiAgbWFyZ2luLWxlZnQ6IC0zMnB4O1xyXG59XHJcbmg0LmltcG9ydHRye1xyXG4gIGZvbnQtc2l6ZTogMjVweDtcclxuICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gIHBhZGRpbmctYm90dG9tOiAxNHB4O1xyXG4gIG1hcmdpbi1sZWZ0OiAtMnB4O1xyXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XHJcbn1cclxuaDQuaW1wb3J0b3J7XHJcbiAgbWFyZ2luLXRvcDogMzNweDtcclxuICBmb250LXdlaWdodDogNjAwO1xyXG59XHJcbmg0LmltcG9ydHRyMSB7XHJcbiAgZm9udC1zaXplOiAyNXB4O1xyXG4gIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgcGFkZGluZy1ib3R0b206IDE0cHg7XHJcbiAgbWFyZ2luLWxlZnQ6IC0ycHg7XHJcbiAgZm9udC13ZWlnaHQ6IDUwMDtcclxuICBtYXJnaW4tdG9wOiAyMnB4O1xyXG59XHJcblxyXG5cclxuZGl2I2ltcG9ydGVxdXAge1xyXG4gIHBhZGRpbmc6IDEwcHggMHB4IDBweCAzMHB4O1xyXG4gIGZvbnQtc2l6ZTogMTdweDtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxuICBtYXJnaW4tdG9wOiAxMHB4O1xyXG59XHJcbmRpdiNpbXBvcnRhY3tcclxuICBwYWRkaW5nOiAxMHB4IDBweCAwcHggMzBweDtcclxuICBmb250LXNpemU6IDE3cHg7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgbWFyZ2luLXRvcDogMTBweDtcclxufVxyXG5cclxuZGl2I2ltcG9ydGJsbCB7XHJcbiAgbWFyZ2luLWxlZnQ6IDI1MHB4O1xyXG4gIHBhZGRpbmc6IDEwcHg7XHJcbn1cclxuXHJcbmRpdiNpbXBvcnRlcXVpcG1lbnQge1xyXG4gIG1hcmdpbi10b3A6IDE4cHg7XHJcbn1cclxuXHJcbmJ1dHRvbi5idG4uYnRuLWJsb2NrIHtcclxuICBmb250LXNpemU6IDE5cHg7XHJcbiAgZm9udC13ZWlnaHQ6IDkwMDtcclxuICBjdXJzb3I6IGRlZmF1bHQ7XHJcbn1cclxuXHJcblxyXG5kaXYjaW1wb3J0cGFpZCB7XHJcbiAgZm9udC1zaXplOiAxOHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG5kaXYjbm9wcmUge1xyXG50ZXh0LWFsaWduOiBjZW50ZXI7XHJcbmNvbG9yOiByZWQ7XHJcbmZvbnQtc2l6ZTogMThweDtcclxuZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuZGl2I2ltcG9ydG5hbWUxIHtcclxuICBmb250LXNpemU6IDE4cHg7XHJcbiAgZm9udC13ZWlnaHQ6IDcwMDtcclxuICB0ZXh0LWFsaWduOiByaWdodDtcclxufVxyXG5kaXYjdmVuZG9ybmFtZSB7XHJcbiAgZm9udC1zaXplOiAyMHB4O1xyXG59XHJcblxyXG5cclxuZGl2I2ltcG9ydDEge1xyXG4gIGZvbnQtc2l6ZTogMTlweDtcclxuICBmb250LXdlaWdodDogNDAwO1xyXG59XHJcblxyXG5kaXYjdG90YWxvcmRlciB7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIGZvbnQtc2l6ZTogMjJweDtcclxufVxyXG5kaXYjb3JkZXJxdCB7XHJcbiAgcGFkZGluZzogMTBweCAxcHggMHB4IDEzMnB4O1xyXG4gIG1hcmdpbi1sZWZ0OiA1OHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIGZvbnQtc2l6ZTogMTdweDtcclxuICBtYXJnaW4tdG9wOiAtNHB4O1xyXG59XHJcblxyXG5kaXYjc2luZ2xlcHJlIHtcclxuICBmb250LXNpemU6IDIwcHg7XHJcbn1cclxuZGl2I2ltcG9ydG9yZGVyIHtcclxuICBwYWRkaW5nOiAxMnB4O1xyXG59XHJcblxyXG5kaXYjaW1wb3J0cHJlIHtcclxuICBmb250LXNpemU6IDE5cHg7XHJcbn1cclxuXHJcbnAjaW1wb3J0bGFiZWwge1xyXG4gIGZvbnQtc2l6ZTogMjBweDtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxuICBtYXJnaW4tbGVmdDogMTA2cHg7XHJcbn1cclxuXHJcbmxhYmVsI2ltcG9ydGxhYmVsMSB7XHJcbiAgZm9udC1zaXplOiAyMHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcblxyXG5zZWxlY3QuZm9ybS1jb250cm9sLm5nLXByaXN0aW5lLm5nLWludmFsaWQuaXMtaW52YWxpZCB7XHJcbiAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcclxufVxyXG5wI2ltcG9ydGhlYWRpbmcge1xyXG4gIGZvbnQtc2l6ZTogMjBweDtcclxuICBmbG9hdDogcmlnaHQ7XHJcbiAgbWFyZ2luLXRvcDogMzdweDtcclxuICBmb250LXdlaWdodDogODAwO1xyXG4gIGNvbG9yOiAjZjU3ZjE3O1xyXG4gIG1hcmdpbi1yaWdodDogMTVweDtcclxufVxyXG5cclxuZGl2I2ltcG9ydHJvdyB7XHJcbiAgcGFkZGluZzogMHB4IDBweCAwcHggMTJweDtcclxufVxyXG5cclxuXHJcbmRpdiNpbXBvcnRoZWlnaHQge1xyXG4gIG1hcmdpbi1sZWZ0OiAxcHg7XHJcbiAgbWFyZ2luLXRvcDogLTE4cHg7XHJcbn1cclxuLmlucHV0LXZlbmRvciB7XHJcbiAgaGVpZ2h0OiA1MHB4O1xyXG4gIGJhY2tncm91bmQ6ICNlYmY0Zjk7XHJcbn1cclxuLmNhcmQtYm9keS52ZW5kb3J7XHJcbiAgcGFkZGluZy1yaWdodDogM3JlbTtcclxuICBwYWRkaW5nLWxlZnQ6IDNyZW07XHJcbn1cclxuXHJcbmRpdiN2ZW5kb3Jyb3cge1xyXG4gIHBhZGRpbmctdG9wOiAwLjVyZW07XHJcbn1cclxuXHJcbnNlbGVjdC5mb3JtLWNvbnRyb2w6bm90KFtzaXplXSk6bm90KFttdWx0aXBsZV0pIHtcclxuICBoZWlnaHQ6IDUwcHg7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjojZWJmNGY5OyA7XHJcbn1cclxuLmltcG9ydGNhcmQge1xyXG4gIHBhZGRpbmc6IDE1cHg7XHJcbn1cclxuaS5mYS5pbXBvcnRmYSB7XHJcbiAgZm9udC1zaXplOiAxMDBweDtcclxufVxyXG4vKiBIaWdoZXIgdGhhbiAxNDQwIChkZXNrdG9wIGRldmljZXMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxNDQwcHgpeyBcclxuXHJcbn1cclxuXHJcbi8qIEhpZ2hlciB0aGFuIDEyMDAgKGRlc2t0b3AgZGV2aWNlcylcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjRweCkge1xyXG59XHJcblxyXG4vKiBIaWdoZXIgdGhhbiA5NjAgKGRlc2t0b3AgZGV2aWNlcylcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDk5MnB4KSBhbmQgKG1heC13aWR0aDogMTE5OXB4KXtcclxufVxyXG5cclxuLyogSGlnaGVyIHRoYW4gOTYwIChkZXNrdG9wIGRldmljZXMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA5OTJweCl7XHJcbn1cclxuXHJcbi8qIFRhYmxldCBQb3J0cmFpdCAoZGV2aWNlcyBhbmQgYnJvd3NlcnMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjhweCkgYW5kIChtYXgtd2lkdGg6IDk5MXB4KSB7XHJcbn1cclxuXHJcbi8qIEFsbCBNb2JpbGUgU2l6ZXMgKGRldmljZXMgYW5kIGJyb3dzZXIpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjdweCkge1xyXG5cclxufVxyXG5cclxuLyogTW9iaWxlIExhbmRzY2FwZSBTaXplIHRvIFRhYmxldCBQb3J0cmFpdCAoZGV2aWNlcyBhbmQgYnJvd3NlcnMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAzNzVweCkgIHtcclxuXHJcblxyXG5cclxufVxyXG4vKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXHJcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzIwcHgpIHtcclxuXHJcblxyXG59IFxyXG4vKiBNb2JpbGUgUG9ydHJhaXQgU2l6ZSB0byBNb2JpbGUgTGFuZHNjYXBlIFNpemUgKGRldmljZXMgYW5kIGJyb3dzZXJzKVxyXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDc5cHgpIHtcclxuXHJcbn1cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA2NjdweCkge1xyXG5cclxufVxyXG5cclxuLyogSGlnaGVyIHRoYW4gMTQ0MCAoZGVza3RvcCBkZXZpY2VzKVxyXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTQ0MHB4KXsgXHJcbiAgXHJcbn1cclxuXHJcbi8qIEhpZ2hlciB0aGFuIDEyMDAgKGRlc2t0b3AgZGV2aWNlcylcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjRweCkge1xyXG59XHJcblxyXG4vKiBIaWdoZXIgdGhhbiA5NjAgKGRlc2t0b3AgZGV2aWNlcylcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDk5MnB4KSBhbmQgKG1heC13aWR0aDogMTE5OXB4KXtcclxufVxyXG5cclxuLyogSGlnaGVyIHRoYW4gOTYwIChkZXNrdG9wIGRldmljZXMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA5OTJweCl7XHJcbn1cclxuXHJcbi8qIFRhYmxldCBQb3J0cmFpdCAoZGV2aWNlcyBhbmQgYnJvd3NlcnMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjhweCkgYW5kIChtYXgtd2lkdGg6IDk5MXB4KSB7XHJcbn1cclxuXHJcbi8qIEFsbCBNb2JpbGUgU2l6ZXMgKGRldmljZXMgYW5kIGJyb3dzZXIpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjdweCkge1xyXG5cclxufVxyXG5cclxuLyogTW9iaWxlIExhbmRzY2FwZSBTaXplIHRvIFRhYmxldCBQb3J0cmFpdCAoZGV2aWNlcyBhbmQgYnJvd3NlcnMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAzNzVweCkgIHtcclxuXHJcblxyXG5cclxufVxyXG4vKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXHJcbiBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMyMHB4KSB7XHJcbiBcclxuXHJcbn0gXHJcbi8qIE1vYmlsZSBQb3J0cmFpdCBTaXplIHRvIE1vYmlsZSBMYW5kc2NhcGUgU2l6ZSAoZGV2aWNlcyBhbmQgYnJvd3NlcnMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0NzlweCkge1xyXG4gIC8qICAqL1xyXG4gIGg0LnRvdGFsdW5pdHN7XHJcbiAgICBtYXJnaW4tdG9wOiAtMjdweDtcclxuICAgIG1hcmdpbi1sZWZ0OiAyMzlweDtcclxuICB9ICBcclxuICAvKiBwLmJhbGFuY2VzZWN0aW9uIHtcclxuICAgIG1hcmdpbi10b3A6IDhweDtcclxuICAgIGZvbnQtc2l6ZTogbGFyZ2U7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIG1hcmdpbi1sZWZ0OiAxOXB4O1xyXG59ICAqL1xyXG5cclxubGFiZWwubWJvZHkge1xyXG4gIG1hcmdpbi1sZWZ0OiA5NnB4O1xyXG59XHJcblxyXG5idXR0b24uYnRuLmJ0bi1zZWNvbmRhcnkubWJvZHkxIHtcclxuICB3aWR0aDogMTAwJTtcclxufVxyXG4ucm93Lm1hcmtldHByaWNlIHtcclxuICBtYXJnaW4tbGVmdDogMzBweDtcclxufVxyXG5sYWJlbC5wYm9keSB7XHJcbiAgbWFyZ2luLWxlZnQ6IDgwcHg7XHJcbn1cclxuXHJcbmxhYmVsLnNib2R5IHtcclxuICBtYXJnaW4tbGVmdDogOThweDtcclxufVxyXG5sYWJlbC50b3B1cHtcclxuICBtYXJnaW4tdG9wOiAxMHB4O1xyXG4gIG1hcmdpbi1sZWZ0OiA0cHg7XHJcbiAgZm9udC1zaXplOiBsYXJnZTtcclxuICBmb250LXdlaWdodDogMzAwO1xyXG59XHJcbi5yb3cuUE8ge1xyXG4gIG1hcmdpbi10b3A6IDIxcHg7XHJcbiAgbWFyZ2luLWxlZnQ6IC0ycHg7XHJcbn1cclxuaW5wdXQuZm9ybS1jb250cm9sIHtcclxuICBtYXJnaW4tdG9wOiA3cHg7XHJcbiAgaGVpZ2h0OiA0MnB4O1xyXG4gIG1hcmdpbi1sZWZ0OiAycHg7XHJcbn1cclxuaW5wdXQuZm9ybS1jb250cm9sLnByZSB7XHJcbiAgbWFyZ2luLWxlZnQ6IDBweDsgXHJcbiAgIG1hcmdpbi10b3A6IDBweDtcclxufVxyXG5sYWJlbC5wcmVvcmRlcmxhYmVsLnByZXByaWNlIHtcclxuICBtYXJnaW4tdG9wOiAyN3B4O1xyXG4gIG1hcmdpbi1sZWZ0OiAwO1xyXG59XHJcblxyXG5zcGFuI2Jhc2ljLWFkZG9uMiB7XHJcbiAgbWFyZ2luLXRvcDogNnB4O1xyXG59XHJcbmJ1dHRvbi5idG4uYnRuLXNlY29uZGFyeS5tYXJrZXRidG4ge1xyXG4gIHdpZHRoOiAxMDAlO1xyXG59XHJcblxyXG5idXR0b24uYnRuLmJ0bi1zdWNjZXNzLmNhbmNlbHN1Y2Vzc3tcclxuICBtYXJnaW4tbGVmdDogMTUycHg7XHJcbiAgbWFyZ2luLXRvcDogLTkycHg7XHJcbn1cclxuYnV0dG9uLmJ0bi5idG4tZGVmYXVsdC5jYW5jZWxleGl0e1xyXG4gIGhlaWdodDogNjRweDtcclxuICB3aWR0aDogMzglO1xyXG59XHJcbmJ1dHRvbi5idG4uYnRuLXByaW1hcnkudG9wdXB3YWxsZXR7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgbWFyZ2luLWxlZnQ6IDNweDtcclxufVxyXG5cclxufVxyXG5cclxuXHJcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjY3cHgpIHtcclxuXHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iXX0= */");

/***/ }),

/***/ "./src/app/User/preorder/preorder.component.ts":
/*!*****************************************************!*\
  !*** ./src/app/User/preorder/preorder.component.ts ***!
  \*****************************************************/
/*! exports provided: PreorderComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreorderComponent", function() { return PreorderComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_services_pre_order_management_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/pre-order-management.service */ "./src/app/services/pre-order-management.service.ts");
/* harmony import */ var src_app_model_pre_order_management__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/model/pre-order-management */ "./src/app/model/pre-order-management.ts");
/* harmony import */ var src_app_services_order_management_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/services/order-management.service */ "./src/app/services/order-management.service.ts");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");
/* harmony import */ var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ngx-bootstrap/modal */ "./node_modules/ngx-bootstrap/modal/fesm2015/ngx-bootstrap-modal.js");
/* harmony import */ var src_app_services_wallet_detail_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/services/wallet-detail.service */ "./src/app/services/wallet-detail.service.ts");
/* harmony import */ var src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/services/usermanagement.service */ "./src/app/services/usermanagement.service.ts");
/* harmony import */ var src_app_services_master_organisation_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/services/master-organisation.service */ "./src/app/services/master-organisation.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var src_app_model_pre_order__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! src/app/model/pre-order */ "./src/app/model/pre-order.ts");
/* harmony import */ var src_app_api_service_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! src/app/api/service.service */ "./src/app/api/service.service.ts");













let PreorderComponent = class PreorderComponent {
    constructor(preOrderManagementService, orderManagementService, toastr, modalService, walletService, userService, masterOrganisationService, router, apiservice) {
        this.preOrderManagementService = preOrderManagementService;
        this.orderManagementService = orderManagementService;
        this.toastr = toastr;
        this.modalService = modalService;
        this.walletService = walletService;
        this.userService = userService;
        this.masterOrganisationService = masterOrganisationService;
        this.router = router;
        this.apiservice = apiservice;
        this.selectedYear = new Array();
        this.selectedMonth = new Array();
        this.selectedProductNames = new Array();
        this.masterProductsList = new Array();
        this.equipmentList = new Array();
    }
    ngOnInit() {
        if (this.preOrderManagementService.getSource() == "onTopupAndLock()") {
            //this.preOrderManagement = this.preOrderManagementService.getPreOrderDto();
            this.preOrderManagementService.getPreOrderManagementByPreOrderId(this.preOrderManagementService.getPreOrderId())
                .subscribe((data) => {
                this.preOrderManagement = data;
                //this.preOrderManagementService.setPreOrderDto(null);
                this.preOrderManagementService.setPreOrderId(null);
                this.preOrderManagementService.setSource(null);
                this.iteration = "preOrderSuccessPage";
            });
        }
        else {
            this.userService.getLoggedInUser()
                .subscribe((data) => {
                this.user = data;
                this.iteration = 'initial';
            });
        }
    }
    // ---------------- Create Pre Order Methods --------------
    createPreOrder() {
        this.productWarehouseSelection();
    }
    productWarehouseSelection() {
        this.preOrderManagementService.getEquipmentProductMappingListForForLoggedInUser()
            .subscribe((data) => {
            if (data != null) {
                this.masterProductsList = new Array();
                this.equipmentProductMapping = data;
                for (let mapping of this.equipmentProductMapping) {
                    this.masterProductsList.push(mapping.masterProducts);
                    this.equipmentList.push(mapping.equipment);
                }
                let newlist = this.masterProductsList.filter((v, i) => this.masterProductsList.findIndex(item => item.productId == v.productId) === i);
                this.masterProductsList = newlist;
                if (this.preOrderManagement == null) {
                    this.preOrderManagement1 = new src_app_model_pre_order_management__WEBPACK_IMPORTED_MODULE_3__["PreOrderManagement"]();
                }
                else {
                    console.log(this.preOrderManagement);
                    this.preOrderManagement1 = this.preOrderManagement;
                    for (let p of this.masterProductsList) {
                        if (p.productId == this.preOrderManagement.productId)
                            this.preOrderManagement1.masterProducts = p;
                    }
                    if (this.preOrderManagement.warehouseId != null && this.preOrderManagement.warehouseId > 0) {
                        for (let w of this.warehouseList) {
                            if (w.warehouseId == this.preOrderManagement.warehouseId)
                                this.preOrderManagement.warehouse = w;
                        }
                    }
                }
                this.iteration = 'productWarehouseSelection';
            }
        });
    }
    next() {
        if (this.preOrderManagement1.region == "Select All Regions") {
            this.preOrderManagement1.region = null;
            this.preOrderManagement1.stateId = 0;
            this.preOrderManagement1.stateName = null;
            this.preOrderManagement1.cityId = 0;
            this.preOrderManagement1.cityName = null;
        }
        else if (this.preOrderManagement1.stateName == "Select All States") {
            this.preOrderManagement1.stateId = 0;
            this.preOrderManagement1.stateName = null;
            this.preOrderManagement1.cityName = null;
            this.preOrderManagement1.cityId = 0;
        }
        else if (this.preOrderManagement1.cityName == "Select All Cities") {
            this.preOrderManagement1.cityName = null;
            this.preOrderManagement1.cityId = 0;
        }
        else if (this.preOrderManagement1.warehouse == null) {
            this.preOrderManagement1.warehouse = null;
        }
        let preOrder = new src_app_model_pre_order__WEBPACK_IMPORTED_MODULE_11__["PreOrder"]();
        preOrder.userId = this.user.userId;
        preOrder.productId = this.preOrderManagement1.masterProducts.productId;
        preOrder.region = this.preOrderManagement1.region;
        preOrder.stateId = this.preOrderManagement1.stateId;
        preOrder.cityId = this.preOrderManagement1.cityId;
        if (this.preOrderManagement1.warehouse != null) {
            preOrder.warehouseId = this.preOrderManagement1.warehouse.warehouseId;
        }
        console.log(preOrder);
        this.preOrderInitMethod(preOrder);
    }
    preOrderInitMethod(preOrder) {
        this.preOrderManagementService.getPreOrderManagementNew(preOrder)
            .subscribe((data) => {
            this.preOrderManagement = data;
            console.log(this.preOrderManagement.userProductPriceList);
            this.curr = "fa-" + this.preOrderManagement.walletDetails.walletCurrency.toLowerCase();
            console.log(this.curr);
            if (this.preOrderManagement == null) {
                this.toastr.error('Price is not set Plz select another Fields!!!!', 'Product Warehouse Selection', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressAnimation: 'increasing'
                });
                this.productWarehouseSelection();
            }
            else {
                console.log(this.preOrderManagement);
                this.preOrderManagement.savingsValue = 0;
                this.preOrderManagement.topupAndLock = false;
                this.preOrderManagement.lock = false;
                this.currentMonth = this.preOrderManagement.month;
                this.currentYear = this.preOrderManagement.preOrderYear;
                console.log(this.preOrderManagement.month);
                console.log(this.preOrderManagement.preOrderMonth);
                this.preOrderManagementService.getPreOrderYearsData()
                    .subscribe((data) => {
                    this.preOrderYears = data;
                    console.log(this.preOrderYears);
                    let preOrderYear = data[0];
                    this.onYearClick(preOrderYear.year);
                    let currentQuarter = this.getQuarter(this.preOrderManagement.preOrderMonth);
                    console.log(currentQuarter);
                    this.onQuarterClick(currentQuarter);
                    this.onMonthClick(this.preOrderManagement.preOrderMonth);
                    this.preOrderManagementService.getPreOrderAvgConsumptionForLoggedInUser(this.preOrderManagement.productId, this.preOrderManagement.warehouseIds)
                        .subscribe((data) => {
                        this.preOrderAvgConsmption = data;
                        console.log(this.preOrderAvgConsmption);
                        if (this.iteration == 'productWarehouseSelection') {
                            console.log(this.preOrderManagement);
                            this.iteration = 'createPreOrder';
                        }
                        if (this.iteration == 'proceed') {
                            this.iteration = 'proceed';
                        }
                    });
                });
            }
        });
    }
    getQuarter(month) {
        return (Math.ceil(month / 3));
    }
    onYearClick(year) {
        this.preOrderManagement.preOrderYear = year;
        for (let preOrderYear of this.preOrderYears) {
            this.preOrderManagement.preOrderYear = year;
            if (year == preOrderYear.year) {
                preOrderYear.isSelected = true;
                this.preOrderQuarters = preOrderYear.preOrderQuarters;
                console.log(this.preOrderQuarters);
                for (let quarter of preOrderYear.preOrderQuarters) {
                    quarter.isSelected = false;
                }
            }
            else {
                preOrderYear.isSelected = false;
            }
        }
    }
    onQuarterClick(qtr) {
        console.log(qtr);
        for (let quarter of this.preOrderQuarters) {
            if (qtr == quarter.quarter) {
                quarter.isSelected = true;
                this.preOrderManagement.preOrderQuarter = qtr;
                this.preOrderMonths = quarter.preOrderMonths;
                console.log(this.preOrderMonths);
                for (let month of this.preOrderMonths) {
                    month.isSelected = true;
                }
            }
            else {
                quarter.isSelected = false;
            }
        }
    }
    onMonthClick(monthNo) {
        for (let month of this.preOrderMonths) {
            console.log(month);
            if (monthNo == month.monthNo) {
                month.isSelected = true;
                this.preOrderManagement.month = month.monthFullName;
                this.preOrderManagement.preOrderMonth = monthNo;
                console.log(this.preOrderManagement.preOrderMonth);
                for (let userPrice of this.preOrderManagement.userProductPriceList) {
                    console.log(userPrice);
                    if (this.preOrderManagement.preOrderYear == userPrice.year) {
                        this.preOrderManagement.preOrderPrice = userPrice.prices[monthNo - 1];
                    }
                }
            }
            else {
                month.isSelected = false;
            }
        }
    }
    onProceed() {
        this.iteration = 'proceed';
    }
    onPreOrderQuantity() {
        if (this.preOrderManagement.preOrderQuantity != undefined) {
            if (this.preOrderManagement.preOrderQuantity) {
                this.preOrderManagement.totalAmount = this.preOrderManagement.preOrderQuantity * this.preOrderManagement.preOrderPrice;
                if (this.preOrderManagement.vendorProductPriceList[0].priceValue > this.preOrderManagement.vendorProductPriceList[1].priceValue) {
                    this.preOrderManagement.savingsValue = (((this.preOrderManagement.vendorProductPriceList[0].priceValue * this.preOrderManagement.preOrderQuantity) - this.preOrderManagement.totalAmount) / (this.preOrderManagement.vendorProductPriceList[0].priceValue * this.preOrderManagement.preOrderQuantity)) * 100;
                    this.preOrderManagement.marketPrice = this.preOrderManagement.vendorProductPriceList[0].priceValue;
                }
                if (this.preOrderManagement.vendorProductPriceList[0].priceValue <= this.preOrderManagement.vendorProductPriceList[1].priceValue) {
                    this.preOrderManagement.savingsValue = (((this.preOrderManagement.vendorProductPriceList[1].priceValue * this.preOrderManagement.preOrderQuantity) - this.preOrderManagement.totalAmount) / (this.preOrderManagement.vendorProductPriceList[1].priceValue * this.preOrderManagement.preOrderQuantity)) * 100;
                    this.preOrderManagement.marketPrice = this.preOrderManagement.vendorProductPriceList[1].priceValue;
                }
                this.preOrderManagement.marginValue = (this.preOrderManagement.totalAmount * this.preOrderManagement.margin) / 100;
                if (this.preOrderManagement.marginValue > this.preOrderManagement.walletDetails.availableBalance) {
                    this.preOrderManagement.requiredAmount = this.preOrderManagement.marginValue - this.preOrderManagement.walletDetails.availableBalance;
                    this.preOrderManagement.walletAmount = this.preOrderManagement.walletDetails.availableBalance;
                    this.preOrderManagement.totalPaid = this.preOrderManagement.walletAmount;
                    if (this.user.userType == 'CORPORATE_USER') {
                        this.preOrderManagement.topupAndLock = false;
                        this.preOrderManagement.lock = false;
                        this.toastr.error('You cant Procced... Because You Have insuffient balance in your App !!!!!!', 'Pre Order', {
                            timeOut: 10000,
                            positionClass: 'toast-top-center',
                            progressBar: true,
                            progressAnimation: 'increasing'
                        });
                    }
                    else {
                        this.preOrderManagement.topupAndLock = true;
                        this.preOrderManagement.lock = false;
                    }
                }
                else {
                    this.preOrderManagement.walletAmount = this.preOrderManagement.marginValue;
                    this.preOrderManagement.totalPaid = this.preOrderManagement.walletAmount;
                    this.preOrderManagement.lock = true;
                    this.preOrderManagement.topupAndLock = false;
                }
            }
        }
        else {
            this.preOrderManagement.savingsValue = '';
            this.preOrderManagement.totalAmount = '';
            this.preOrderManagement.marginValue = '';
        }
    }
    getLatestDto(preOrderManagement) {
        let preOrder = new src_app_model_pre_order__WEBPACK_IMPORTED_MODULE_11__["PreOrder"]();
        preOrder.userId = this.user.userId;
        preOrder.productId = preOrderManagement.productId;
        preOrder.region = preOrderManagement.region;
        preOrder.stateId = preOrderManagement.stateId;
        preOrder.cityId = preOrderManagement.cityId;
        preOrder.warehouseIds = preOrderManagement.warehouseIds;
        preOrder.preOrderQuantity = preOrderManagement.preOrderQuantity;
        preOrder.preOrderYear = preOrderManagement.preOrderYear;
        preOrder.preOrderQuarter = preOrderManagement.preOrderQuarter;
        preOrder.preOrderMonth = preOrderManagement.preOrderMonth;
        preOrder.vendorProductPriceId = preOrderManagement.vendorProductPriceList[1].priceManagementId;
        preOrder.userProductPriceIds = new Array();
        preOrder.userProductPriceIds = preOrderManagement.userProductPriceIds;
        preOrder.preOrderPrice = preOrderManagement.preOrderPrice;
        return preOrder;
    }
    onTopupAndLock() {
        this.preOrderManagement = this.preOrderManagement;
        this.walletService.setSource("onTopupWallet()");
        this.preOrderManagementService.setSource("onTopupAndLock()");
        let preOrder = this.getLatestDto(this.preOrderManagement);
        preOrder.requiredAmount = this.preOrderManagement.requiredAmount;
        console.log(preOrder);
        this.preOrderManagement.walletAmount = this.preOrderManagement.walletDetails.availableBalance;
        this.preOrderManagementService.setPreOrderDto(preOrder);
        this.router.navigate(['/wallet']);
    }
    onLock() {
        let preOrder = this.getLatestDto(this.preOrderManagement);
        if (this.preOrderManagement.walletDetails.availableBalance >= this.preOrderManagement.marginValue) {
            console.log(preOrder);
            this.preOrderManagementService.savePreOrder(preOrder)
                .subscribe((data) => {
                this.preOrderManagement = data;
                if (this.preOrderManagement.preOrderRefNumber != null) {
                    this.toastr.success('Margin Locked Successfully', 'Pre-Order Lock Menu', { timeOut: 12000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
                    this.preOrderManagementService.getPreOrderManagementByPreOrderId(this.preOrderManagement.preOrderId)
                        .subscribe((data) => {
                        this.preOrderManagement = data;
                        this.iteration = "preOrderSuccessPage";
                    });
                }
                else {
                    this.toastr.error('Pre Order Price is Changed... Do You want To Continue', 'Pre Order', { timeOut: 10000, positionClass: 'toast-top-center', progressAnimation: 'increasing' });
                    this.preOrderInitMethod(preOrder);
                }
            });
        }
    }
    //-------------End ------------------
    //------------ View All Pre Orders -----------
    viewAllPreOrders() {
        this.preOrderManagementService.getAllUpcommingPreOrdersForLoggedInUser()
            .subscribe((data) => {
            this.preOrderManagementList = data;
            console.log(this.preOrderManagementList);
            this.year = 0;
            this.month = null;
            this.region = null;
            this.state = null;
            this.city = null;
            this.office = null;
            this.customerId = null;
            this.productName = null;
            this.user = this.user;
            this.totalPreOrderQuantity = 0;
            this.totalAvailableQuantity = 0;
            this.regionList = new Array();
            this.regionList.push("All Region");
            this.stateList = new Array();
            this.stateList.push("All State");
            this.cityList = new Array();
            this.cityList.push("All City");
            this.officeList = new Array();
            this.officeList.push("All Office");
            this.uniqueUserIdList = new Array();
            this.uniqueUserIdList.push("All Customers");
            this.productsList = new Array();
            this.selectedMonth = new Array();
            if (this.preOrderManagementList != null) {
                this.oldPreOrderManagementList = this.preOrderManagementList;
                for (let o of this.preOrderManagementList) {
                    if (o.user.region != null) {
                        this.regionList.push(o.user.region);
                    }
                    if (o.user.state != null) {
                        this.stateList.push(o.user.state);
                    }
                    if (o.user.city != null) {
                        this.cityList.push(o.user.city);
                    }
                    if (o.user.officeName != null) {
                        this.officeList.push(o.user.officeName);
                    }
                    this.selectedYear.push(o.preOrderYear);
                    this.totalPreOrderQuantity = this.totalPreOrderQuantity + o.preOrderQuantity;
                    this.totalAvailableQuantity = this.totalAvailableQuantity + (o.preOrderQuantity - (o.totalOrderQuantity + o.cancelledUnits));
                    this.uniqueUserIdList.push(o.user.uniqueUserId);
                    this.productsList.push(o.masterProducts.productName);
                }
                let unique1 = this.productsList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.productsList = unique1;
                unique1 = this.regionList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.regionList = unique1;
                unique1 = this.stateList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.stateList = unique1;
                unique1 = this.cityList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.cityList = unique1;
                unique1 = this.uniqueUserIdList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.uniqueUserIdList = unique1;
                unique1 = this.selectedYear.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.selectedYear = unique1;
                unique1 = this.uniqueUserIdList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.uniqueUserIdList = unique1;
            }
            if (this.preOrderManagementList == null) {
                this.toastr.error('Data not Found !!!!!!', 'Pre Order', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
            }
            this.iteration = 'viewAllPreOrders';
        });
    }
    onYear() {
        this.page1 = 1;
        this.preOrderManagementList = this.oldPreOrderManagementList;
        if (this.year != 0 || this.year == null) {
            this.newPreOrderManagementList = new Array();
            this.selectedProductNames = Array();
            this.month = null;
            this.productName = null;
            this.selectedMonth = new Array();
            this.totalPreOrderQuantity = 0;
            this.totalUtilizedPreOrderQuantity = 0;
            this.totalAvailableQuantity = 0;
            for (let o of this.preOrderManagementList) {
                if (o.preOrderYear == this.year) {
                    this.newPreOrderManagementList.push(o);
                    this.selectedProductNames.push(o.masterProducts.productName);
                    this.totalPreOrderQuantity = this.totalPreOrderQuantity + o.preOrderQuantity;
                    this.totalAvailableQuantity = this.totalAvailableQuantity + (o.preOrderQuantity - (o.totalOrderQuantity + o.cancelledUnits));
                    this.totalUtilizedPreOrderQuantity = this.totalUtilizedPreOrderQuantity + o.totalOrderQuantity;
                }
            }
            let unique1 = this.selectedProductNames.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedProductNames = unique1;
            this.preOrderManagementList = this.newPreOrderManagementList;
            this.preOrderFilterList = this.preOrderManagementList;
        }
        if (this.year == null) {
            this.preOrderManagementList = this.oldPreOrderManagementList;
            this.year = 0;
            this.month = null;
            this.month = null;
            this.productName = null;
            this.selectedProductNames = new Array();
            this.selectedMonth = new Array();
        }
    }
    onProduct() {
        this.preOrderManagementList = this.oldPreOrderManagementList;
        if (this.productName != null && this.year != 0) {
            this.newPreOrderManagementList = new Array();
            this.selectedMonth = new Array();
            this.month = null;
            this.totalPreOrderQuantity = 0;
            this.totalAvailableQuantity = 0;
            this.totalUtilizedPreOrderQuantity = 0;
            for (let o of this.preOrderManagementList) {
                if (o.masterProducts.productName == this.productName && o.preOrderYear == this.year) {
                    this.newPreOrderManagementList.push(o);
                    this.selectedMonth.push(o.month);
                    this.totalPreOrderQuantity = this.totalPreOrderQuantity + o.preOrderQuantity;
                    this.totalAvailableQuantity = this.totalAvailableQuantity + (o.preOrderQuantity - (o.totalOrderQuantity + o.cancelledUnits));
                    this.totalUtilizedPreOrderQuantity = this.totalUtilizedPreOrderQuantity + o.totalOrderQuantity;
                }
            }
            let unique3 = this.selectedMonth.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedMonth = unique3;
            this.preOrderManagementList = this.newPreOrderManagementList;
            this.preOrderFilterList = this.preOrderManagementList;
        }
    }
    onMonth() {
        this.page1 = 1;
        this.preOrderManagementList = this.oldPreOrderManagementList;
        if (this.month != null && this.year != 0 && this.productName != null) {
            this.newPreOrderManagementList = new Array();
            this.totalPreOrderQuantity = 0;
            this.totalAvailableQuantity = 0;
            this.totalUtilizedPreOrderQuantity = 0;
            this.regionList = new Array();
            this.regionList.push("All Region");
            console.log(this.totalUtilizedPreOrderQuantity);
            for (let o of this.preOrderManagementList) {
                if (o.month == this.month && o.preOrderYear == this.year && o.masterProducts.productName == this.productName) {
                    this.newPreOrderManagementList.push(o);
                    this.totalPreOrderQuantity = this.totalPreOrderQuantity + o.preOrderQuantity;
                    this.totalAvailableQuantity = this.totalAvailableQuantity + (o.preOrderQuantity - (o.totalOrderQuantity + o.cancelledUnits));
                    this.totalUtilizedPreOrderQuantity = this.totalUtilizedPreOrderQuantity + o.totalOrderQuantity;
                    console.log(this.totalUtilizedPreOrderQuantity);
                    if (o.user.region != null) {
                        this.regionList.push(o.user.region);
                    }
                }
            }
            this.preOrderManagementList = this.newPreOrderManagementList;
            this.preOrderFilterList = this.preOrderManagementList;
            let unique1 = this.regionList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.regionList = unique1;
        }
    }
    onRegion() {
        if (this.region != null) {
            if (this.region != "All Region") {
                if (this.year != 0) {
                    this.preOrderManagementList = this.preOrderFilterList;
                }
                else {
                    this.preOrderManagementList = this.oldPreOrderManagementList;
                }
                this.newPreOrderManagementList = new Array();
                //this.state=null;
                //this.city=null;
                this.office = null;
                this.customerId = null;
                //this.productName = null;
                //this.year = 0;
                //this.month = null;
                this.stateList = new Array();
                this.stateList.push("All State");
                this.cityList = new Array();
                this.cityList.push("All City");
                this.officeList = new Array();
                this.officeList.push("All Office");
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                //this.productsList = new Array<string>();
                //this.selectedMonth = new Array<string>();
                for (let o of this.preOrderManagementList) {
                    if (o.user.region == this.region) {
                        this.newPreOrderManagementList.push(o);
                        this.uniqueUserIdList.push(o.user.uniqueUserId);
                        if (o.user.state != null) {
                            this.stateList.push(o.user.state);
                        }
                        if (o.user.city != null) {
                            this.cityList.push(o.user.city);
                        }
                        if (o.user.officeName != null) {
                            this.officeList.push(o.user.officeName);
                        }
                        //this.productsList.push(o.masterProducts.productName);
                    }
                }
                this.preOrderManagementList = this.newPreOrderManagementList;
                let unique1 = this.uniqueUserIdList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.uniqueUserIdList = unique1;
                unique1 = this.stateList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.stateList = unique1;
                unique1 = this.cityList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.cityList = unique1;
                unique1 = this.officeList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.officeList = unique1;
                //unique1 = this.productsList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                //this.productsList = unique1;
            }
            if (this.region == "All Region") {
                if (this.year != 0) {
                    this.preOrderManagementList = this.preOrderFilterList;
                }
                else {
                    this.preOrderManagementList = this.oldPreOrderManagementList;
                }
                this.state = null;
                this.city = null;
                this.office = null;
                this.customerId = null;
                //this.productName = null;
                //this.year = 0;
                //this.month = null;
                this.stateList = new Array();
                this.stateList.push("All State");
                this.cityList = new Array();
                this.cityList.push("All City");
                this.officeList = new Array();
                this.officeList.push("All Office");
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                //this.productsList = new Array<string>();
                //this.selectedMonth = new Array<string>();
                this.newPreOrderManagementList = new Array();
                for (let o of this.preOrderManagementList) {
                    this.newPreOrderManagementList.push(o);
                    this.productsList.push(o.masterProducts.productName);
                }
                this.preOrderManagementList = this.newPreOrderManagementList;
            }
            let unique1 = this.productsList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.productsList = unique1;
            this.preOrderCorporateFilterdList = this.preOrderManagementList;
        }
    }
    onState() {
        if (this.state != null) {
            if (this.state != "All State") {
                this.city = null;
                this.office = null;
                this.customerId = null;
                //this.productName = null;
                //this.year = 0;
                //this.month = null;
                if (this.year != 0) {
                    this.preOrderManagementList = this.preOrderFilterList;
                }
                else {
                    this.preOrderManagementList = this.oldPreOrderManagementList;
                }
                this.newPreOrderManagementList = new Array();
                this.cityList = new Array();
                this.cityList.push("All City");
                this.officeList = new Array();
                this.officeList.push("All Office");
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                //this.productsList = new Array<string>();
                //this.selectedMonth = new Array<string>();
                for (let o of this.preOrderManagementList) {
                    if (o.user.state == this.state) {
                        this.newPreOrderManagementList.push(o);
                        this.productsList.push(o.masterProducts.productName);
                        this.uniqueUserIdList.push(o.user.uniqueUserId);
                        if (o.user.city != null) {
                            this.cityList.push(o.user.city);
                        }
                        if (o.user.officeName != null) {
                            this.officeList.push(o.user.officeName);
                        }
                    }
                }
                this.preOrderManagementList = this.newPreOrderManagementList;
                let unique1 = this.uniqueUserIdList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.uniqueUserIdList = unique1;
                unique1 = this.cityList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.cityList = unique1;
                unique1 = this.officeList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.officeList = unique1;
                unique1 = this.productsList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.productsList = unique1;
            }
            if (this.state == "All State" && this.region != "All Region") {
                if (this.year != 0) {
                    this.preOrderManagementList = this.preOrderFilterList;
                }
                else {
                    this.preOrderManagementList = this.oldPreOrderManagementList;
                }
                this.city = null;
                this.office = null;
                this.customerId = null;
                //this.productName=null;
                //this.year = 0;
                //this.month = null;
                this.cityList = new Array();
                this.cityList.push("All City");
                this.officeList = new Array();
                this.officeList.push("All Office");
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                //this.productsList = new Array<string>();
                //this.selectedMonth = new Array<string>();
                this.newPreOrderManagementList = new Array();
                for (let o of this.preOrderManagementList) {
                    if (this.region == o.user.region) {
                        this.newPreOrderManagementList.push(o);
                        //this.productsList.push(o.masterProducts.productName);
                    }
                }
                this.preOrderManagementList = this.newPreOrderManagementList;
            }
            //let unique1 = this.productsList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            //this.productsList = unique1;
            this.preOrderCorporateFilterdList = this.preOrderManagementList;
        }
    }
    onCity() {
        if (this.city != null) {
            this.page1 = 1;
            if (this.city != "All City") {
                this.office = null;
                this.customerId = null;
                //this.productName = null; 
                //this.year = 0;
                //this.month = null;
                if (this.year != 0) {
                    this.preOrderManagementList = this.preOrderFilterList;
                }
                else {
                    this.preOrderManagementList = this.oldPreOrderManagementList;
                }
                this.newPreOrderManagementList = new Array();
                this.officeList = new Array();
                this.officeList.push("All Office");
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                //this.productsList = new Array<string>();
                //this.selectedMonth = new Array<string>();
                for (let o of this.preOrderManagementList) {
                    if (o.user.city == this.city) {
                        this.newPreOrderManagementList.push(o);
                        this.uniqueUserIdList.push(o.user.uniqueUserId);
                        //this.productsList.push(o.masterProducts.productName);
                        if (o.user.officeName != null) {
                            this.officeList.push(o.user.officeName);
                        }
                    }
                }
                this.preOrderManagementList = this.newPreOrderManagementList;
                let unique1 = this.uniqueUserIdList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.uniqueUserIdList = unique1;
                unique1 = this.officeList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.officeList = unique1;
                //unique1 = this.productsList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                // this.productsList = unique1;
            }
            if (this.city == "All City" && this.region != "All Region" && this.state != "All State") {
                if (this.year != 0) {
                    this.preOrderManagementList = this.preOrderFilterList;
                }
                else {
                    this.preOrderManagementList = this.oldPreOrderManagementList;
                }
                this.office = null;
                this.customerId = null;
                //this.productName=null;
                //this.year = 0;
                //this.month = null;
                this.officeList = new Array();
                this.officeList.push("All Office");
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                // this.productsList = new Array<string>();
                // this.selectedMonth = new Array<string>();
                this.newPreOrderManagementList = new Array();
                for (let o of this.preOrderManagementList) {
                    if (this.region == o.user.region && o.user.state == this.state) {
                        this.newPreOrderManagementList.push(o);
                        //this.productsList.push(o.masterProducts.productName);
                    }
                }
                //let unique1 = this.productsList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                //this.productsList = unique1;
                this.preOrderManagementList = this.newPreOrderManagementList;
            }
            this.preOrderCorporateFilterdList = this.preOrderManagementList;
        }
    }
    onOffice() {
        if (this.office != null) {
            if (this.office != "All Office") {
                this.customerId = null;
                //this.productName = null;
                // this.year = 0;
                // this.month = null;
                if (this.year != 0) {
                    this.preOrderManagementList = this.preOrderFilterList;
                }
                else {
                    this.preOrderManagementList = this.oldPreOrderManagementList;
                }
                this.newPreOrderManagementList = new Array();
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                // this.productsList = new Array<string>();
                // this.selectedMonth = new Array<string>();
                for (let o of this.preOrderManagementList) {
                    if (o.user.officeName == this.office) {
                        this.newPreOrderManagementList.push(o);
                        this.uniqueUserIdList.push(o.user.uniqueUserId);
                        //this.productsList.push(o.masterProducts.productName)
                    }
                }
                this.preOrderManagementList = this.newPreOrderManagementList;
                let unique1 = this.uniqueUserIdList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.uniqueUserIdList = unique1;
                // unique1 = this.productsList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                // this.productsList = unique1;
            }
            if (this.office == "All Office" && this.region != "All Region" && this.state != "All State" && this.city != "All Office") {
                if (this.year != 0) {
                    this.preOrderManagementList = this.preOrderFilterList;
                }
                else {
                    this.preOrderManagementList = this.oldPreOrderManagementList;
                }
                this.customerId = null;
                //this.productName=null;
                //this.year = 0;
                //this.month = null;
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                //this.productsList = new Array<string>();
                //this.selectedMonth = new Array<string>();
                this.newPreOrderManagementList = new Array();
                for (let o of this.preOrderManagementList) {
                    if (this.region == o.user.region && o.user.state == this.state && o.user.city == this.city) {
                        this.newPreOrderManagementList.push(o);
                    }
                }
                this.preOrderManagementList = this.newPreOrderManagementList;
                //let unique1 = this.productsList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                //this.productsList = unique1;
            }
            this.preOrderCorporateFilterdList = this.preOrderManagementList;
        }
    }
    onCustomerId() {
        if (this.customerId != null) {
            if (this.customerId != "All Customers") {
                //this.productName = null;
                //this.year = 0;
                //this.month = null;
                if (this.year != 0) {
                    this.preOrderManagementList = this.preOrderFilterList;
                }
                else {
                    this.preOrderManagementList = this.oldPreOrderManagementList;
                }
                //this.productsList = new Array<string>();
                //this.selectedMonth = new Array<string>();
                this.newPreOrderManagementList = new Array();
                for (let o of this.preOrderManagementList) {
                    if (o.user.uniqueUserId == this.customerId) {
                        this.newPreOrderManagementList.push(o);
                        //this.productsList.push(o.masterProducts.productName);
                    }
                }
                //let unique1 = this.productsList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                //this.productsList = unique1;
                this.preOrderManagementList = this.newPreOrderManagementList;
            }
            if (this.customerId == "All Customers" && this.office != "All Office" && this.region != "All Region" && this.state != "All State" && this.city != "All Office") {
                if (this.year != 0) {
                    this.preOrderManagementList = this.preOrderFilterList;
                }
                else {
                    this.preOrderManagementList = this.oldPreOrderManagementList;
                }
                //this.productName=null;
                //this.year = 0;
                //this.month = null;
                // this.productsList = new Array<string>();
                // this.selectedMonth = new Array<string>();
                this.newPreOrderManagementList = new Array();
                for (let o of this.preOrderManagementList) {
                    if (this.region == o.user.region && o.user.state == this.state && o.user.city == this.city && o.user.officeName == this.office) {
                        this.newPreOrderManagementList.push(o);
                        // this.productsList.push(o.masterProducts.productName);
                    }
                }
                // let unique1 = this.productsList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                // this.productsList = unique1;
                this.preOrderManagementList = this.newPreOrderManagementList;
            }
            this.preOrderCorporateFilterdList = this.preOrderManagementList;
        }
    }
    onCorporateFilter() {
        // if Region
        if (this.region != null) {
            this.year = 0;
            this.month = null;
            this.productName = null;
            if (this.region != "All Region") {
                this.preOrderManagementList = this.oldPreOrderManagementList;
                this.newPreOrderManagementList = new Array();
                this.stateList = new Array();
                this.stateList.push("All State");
                this.cityList = new Array();
                this.cityList.push("All City");
                this.officeList = new Array();
                this.officeList.push("All Office");
                this.totalPreOrderQuantity = 0;
                this.totalAvailableQuantity = 0;
                this.uniqueUserIdList = new Array();
                for (let p of this.preOrderManagementList) {
                    if (p.user.region == this.region) {
                        this.newPreOrderManagementList.push(p);
                        this.uniqueUserIdList.push(p.user.uniqueUserId);
                        this.totalPreOrderQuantity = this.totalPreOrderQuantity + p.preOrderQuantity;
                        this.totalAvailableQuantity = this.totalAvailableQuantity + (p.preOrderQuantity - (p.totalOrderQuantity + p.cancelledUnits));
                    }
                }
                for (let o of this.corporateOffices) {
                    if (o.officeRegion == this.region) {
                        this.stateList.push(o.stateName);
                        this.cityList.push(o.cityName);
                        this.officeList.push(o.officeName);
                    }
                }
                this.preOrderManagementList = this.newPreOrderManagementList;
                let unique1 = this.uniqueUserIdList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.uniqueUserIdList = unique1;
                unique1 = this.stateList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.stateList = unique1;
                unique1 = this.cityList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.cityList = unique1;
                unique1 = this.officeList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.officeList = unique1;
            }
            if (this.region == "All Region") {
                this.preOrderManagementList = this.oldPreOrderManagementList;
                this.state = null;
                this.city = null;
                this.office = null;
                this.stateList = new Array();
                this.stateList.push("All State");
                this.cityList = new Array();
                this.cityList.push("All City");
                this.officeList = new Array();
                this.officeList.push("All Office");
                this.uniqueUserIdList = new Array();
                this.totalPreOrderQuantity = 0;
                this.totalAvailableQuantity = 0;
                for (let p of this.preOrderManagementList) {
                    this.uniqueUserIdList.push(p.user.uniqueUserId);
                    this.totalPreOrderQuantity = this.totalPreOrderQuantity + p.preOrderQuantity;
                    this.totalAvailableQuantity = this.totalAvailableQuantity + (p.preOrderQuantity - (p.totalOrderQuantity + p.cancelledUnits));
                }
                for (let o of this.corporateOffices) {
                    this.regionList.push(o.officeRegion);
                    this.stateList.push(o.stateName);
                    this.cityList.push(o.cityName);
                    this.officeList.push(o.officeName);
                }
                let unique1 = this.uniqueUserIdList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.uniqueUserIdList = unique1;
                unique1 = this.regionList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.regionList = unique1;
                unique1 = this.stateList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.stateList = unique1;
                unique1 = this.cityList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.cityList = unique1;
                unique1 = this.officeList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.officeList = unique1;
            }
        }
        // if state
        if (this.state != null) {
            if (this.state != "All State") {
                this.preOrderManagementList = this.preOrderManagementList;
                this.newPreOrderManagementList = new Array();
                this.cityList = new Array();
                this.cityList.push("All City");
                this.officeList = new Array();
                this.officeList.push("All Office");
                this.totalPreOrderQuantity = 0;
                this.totalAvailableQuantity = 0;
                this.uniqueUserIdList = new Array();
                for (let p of this.preOrderManagementList) {
                    if (p.user.state == this.state) {
                        this.newPreOrderManagementList.push(p);
                        this.uniqueUserIdList.push(p.user.uniqueUserId);
                        this.totalPreOrderQuantity = this.totalPreOrderQuantity + p.preOrderQuantity;
                        this.totalAvailableQuantity = this.totalAvailableQuantity + (p.preOrderQuantity - (p.totalOrderQuantity + p.cancelledUnits));
                    }
                }
                for (let o of this.corporateOffices) {
                    if (o.stateName == this.state) {
                        this.cityList.push(o.cityName);
                        this.officeList.push(o.officeName);
                    }
                }
                this.preOrderManagementList = this.newPreOrderManagementList;
                let unique1 = this.uniqueUserIdList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.uniqueUserIdList = unique1;
                unique1 = this.cityList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.cityList = unique1;
                unique1 = this.officeList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.officeList = unique1;
            }
        }
        // if city
        if (this.city != null) {
            if (this.city != "All City") {
                this.preOrderManagementList = this.preOrderManagementList;
                this.newPreOrderManagementList = new Array();
                this.officeList = new Array();
                this.officeList.push("All Office");
                this.totalPreOrderQuantity = 0;
                this.totalAvailableQuantity = 0;
                this.uniqueUserIdList = new Array();
                for (let p of this.preOrderManagementList) {
                    if (p.user.city == this.city) {
                        this.newPreOrderManagementList.push(p);
                        this.uniqueUserIdList.push(p.user.uniqueUserId);
                        this.totalPreOrderQuantity = this.totalPreOrderQuantity + p.preOrderQuantity;
                        this.totalAvailableQuantity = this.totalAvailableQuantity + (p.preOrderQuantity - (p.totalOrderQuantity + p.cancelledUnits));
                    }
                }
                for (let o of this.corporateOffices) {
                    if (o.cityName == this.city) {
                        this.officeList.push(o.officeName);
                    }
                }
                this.preOrderManagementList = this.newPreOrderManagementList;
                let unique1 = this.uniqueUserIdList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.uniqueUserIdList = unique1;
                unique1 = this.officeList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.officeList = unique1;
            }
        }
        // if Office
        if (this.office != null) {
            if (this.office != "All Office") {
                this.preOrderManagementList = this.preOrderManagementList;
                this.newPreOrderManagementList = new Array();
                this.totalPreOrderQuantity = 0;
                this.totalAvailableQuantity = 0;
                this.uniqueUserIdList = new Array();
                for (let p of this.preOrderManagementList) {
                    if (p.user.officeName == this.office) {
                        this.newPreOrderManagementList.push(p);
                        this.uniqueUserIdList.push(p.user.uniqueUserId);
                        this.totalPreOrderQuantity = this.totalPreOrderQuantity + p.preOrderQuantity;
                        this.totalAvailableQuantity = this.totalAvailableQuantity + (p.preOrderQuantity - (p.totalOrderQuantity + p.cancelledUnits));
                    }
                }
                this.preOrderManagementList = this.newPreOrderManagementList;
                let unique1 = this.uniqueUserIdList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.uniqueUserIdList = unique1;
            }
        }
        if (this.customerId != null) {
            this.year = 0;
            this.productName = null;
            this.month = null;
            this.preOrderManagementList = this.oldPreOrderManagementList;
            this.newPreOrderManagementList = new Array();
            for (let p of this.preOrderManagementList) {
                if (p.user.uniqueUserId == this.customerId) {
                    this.newPreOrderManagementList.push(p);
                }
            }
            this.preOrderManagementList = this.newPreOrderManagementList;
        }
        this.preOrderCorporateFilterdList = this.preOrderManagementList;
    }
    viewPaymentPendingPreOrders() {
        this.preOrderManagementService.getPayPendingPreOrdersForLoggedInUser()
            .subscribe((data) => {
            console.log(data);
            this.preOrderManagementList = data;
            this.iteration = 'viewAllPaymentPendingPreOrders';
        });
    }
    viewAllPastPreOrders() {
        this.preOrderManagementService.getAllPreviousPreOrdersForLoggedInUser()
            .subscribe((data) => {
            console.log(data);
            this.preOrderManagementList = data;
            this.selectedYear = new Array();
            this.selectedProductNames = new Array();
            this.selectedMonth = new Array();
            if (this.preOrderManagementList != null) {
                this.productName = null;
                this.year = 0;
                this.month = null;
                this.oldPreOrderManagementList = this.preOrderManagementList;
                this.totalPreOrderQuantity = 0;
                this.totalUtilizedPreOrderQuantity = 0;
                for (let p of this.preOrderManagementList) {
                    this.selectedYear.push(p.preOrderYear);
                    this.totalPreOrderQuantity = this.totalPreOrderQuantity + p.preOrderQuantity;
                    this.totalUtilizedPreOrderQuantity = this.totalUtilizedPreOrderQuantity + p.totalOrderQuantity;
                }
                let unique2 = this.selectedYear.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.selectedYear = unique2;
                this.iteration = 'viewAllPastPreOrders';
            }
            if (this.preOrderManagementList == null) {
                //alert("Data not found");
                this.toastr.error('Data not Found !!!!!!', 'Pre Order', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
            }
        });
    }
    onCancelPreOrder() {
        this.iteration = 'cancelPreOrderView';
    }
    onChange() {
        this.page2 = 1;
        if (this.region == null && this.state == null && this.city == null && this.office == null && this.customerId == null) {
            this.preOrderManagementList = this.oldPreOrderManagementList;
        }
        else {
            this.preOrderManagementList = this.preOrderCorporateFilterdList;
        }
        if (this.year != 0 || this.year == null) {
            this.newPreOrderManagementList = new Array();
            this.selectedProductNames = Array();
            this.totalPreOrderQuantity = 0;
            this.totalAvailableQuantity = 0;
            for (let o of this.preOrderManagementList) {
                if (o.preOrderYear == this.year) {
                    this.newPreOrderManagementList.push(o);
                    this.selectedProductNames.push(o.masterProducts.productName);
                    this.totalPreOrderQuantity = this.totalPreOrderQuantity + o.preOrderQuantity;
                    this.totalAvailableQuantity = this.totalAvailableQuantity + (o.preOrderQuantity - (o.totalOrderQuantity + o.cancelledUnits));
                }
            }
            let unique1 = this.selectedProductNames.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedProductNames = unique1;
            this.preOrderManagementList = this.newPreOrderManagementList;
        }
        if (this.productName != null) {
            this.newPreOrderManagementList = new Array();
            this.selectedMonth = Array();
            this.totalPreOrderQuantity = 0;
            this.totalAvailableQuantity = 0;
            for (let o of this.preOrderManagementList) {
                if (o.masterProducts.productName == this.productName) {
                    this.newPreOrderManagementList.push(o);
                    this.selectedMonth.push(o.month);
                    this.totalPreOrderQuantity = this.totalPreOrderQuantity + o.preOrderQuantity;
                    this.totalAvailableQuantity = this.totalAvailableQuantity + (o.preOrderQuantity - (o.totalOrderQuantity + o.cancelledUnits));
                }
            }
            let unique3 = this.selectedMonth.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedMonth = unique3;
            this.preOrderManagementList = this.newPreOrderManagementList;
        }
        if (this.month != null) {
            this.newPreOrderManagementList = new Array();
            this.totalPreOrderQuantity = 0;
            this.totalAvailableQuantity = 0;
            for (let o of this.preOrderManagementList) {
                if (o.month == this.month) {
                    this.newPreOrderManagementList.push(o);
                    this.totalPreOrderQuantity = this.totalPreOrderQuantity + o.preOrderQuantity;
                    this.totalAvailableQuantity = this.totalAvailableQuantity + (o.preOrderQuantity - (o.totalOrderQuantity + o.cancelledUnits));
                }
            }
            this.preOrderManagementList = this.newPreOrderManagementList;
        }
        if (this.year == null) {
            this.preOrderManagementList = this.oldPreOrderManagementList;
            this.year = 0;
            this.month = null;
        }
    }
    cancelPreOrder() {
        this.preOrderManagementService.getAllPreOrdersForCancellation()
            .subscribe((data) => {
            this.preOrderManagementList = data;
            if (this.preOrderManagementList != null) {
                this.productName = null;
                this.year = 0;
                this.month = null;
                this.oldPreOrderManagementList = this.preOrderManagementList;
                console.log(this.preOrderManagementList);
                for (let p of this.preOrderManagementList) {
                    this.selectedYear.push(p.preOrderYear);
                    this.selectedMonth.push(p.month);
                    this.selectedProductNames.push(p.masterProducts.productName);
                }
                let unique1 = this.selectedProductNames.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.selectedProductNames = unique1;
                let unique2 = this.selectedYear.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.selectedYear = unique2;
                let unique3 = this.selectedMonth.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.selectedMonth = unique3;
            }
            this.iteration = 'cancelPreOrderView';
        });
    }
    onChangeProduct() {
        this.preOrderManagementService.getWarehouseProductMappingByMasterProducts(this.preOrderManagement1.masterProducts.productId)
            .subscribe((data) => {
            this.warehouseList = data;
            if (this.warehouseList != null) {
                this.selectedRegion = new Array();
                this.selectedRegion.push("Select All Regions");
                this.selectedStates = new Array();
                this.selectedStates.push("Select All States");
                this.selectedCity = new Array();
                this.selectedCity.push("Select All Cities");
                this.oldWarehouseList = this.warehouseList;
                for (let w of this.warehouseList) {
                    this.selectedRegion.push(w.address.region);
                    this.selectedStates.push(w.address.state.stateName);
                    this.selectedCity.push(w.address.city.cityName);
                }
                let unique1 = this.selectedRegion.filter((item1, i1, ar1) => ar1.indexOf(item1) === i1);
                this.selectedRegion = unique1;
                let unique2 = this.selectedStates.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.selectedStates = unique2;
                let unique3 = this.selectedCity.filter((item3, i3, ar3) => ar3.indexOf(item3) === i3);
                this.selectedCity = unique3;
            }
        });
        this.equipmentList = new Array();
        for (let e of this.equipmentProductMapping) {
            if (e.masterProducts.productId == this.preOrderManagement1.masterProducts.productId) {
                this.equipmentList.push(e.equipment);
            }
        }
    }
    onChangeFilter() {
        this.warehouseList = this.oldWarehouseList;
        this.newWarehouseList = new Array();
        if (this.preOrderManagement1.region != null) {
            this.selectedStates = new Array();
            this.selectedStates.push("Select All States");
            for (let w of this.warehouseList) {
                if (w.address.region == this.preOrderManagement1.region) {
                    this.selectedStates.push(w.address.state.stateName);
                    this.newWarehouseList.push(w);
                }
            }
            this.warehouseList = this.newWarehouseList;
            let unique2 = this.selectedStates.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedStates = unique2;
        }
        if (this.preOrderManagement1.stateName != null) {
            this.newWarehouseList = new Array();
            this.selectedCity = new Array();
            this.selectedCity.push("Select All Cities");
            for (let w of this.warehouseList) {
                if (w.address.state.stateName == this.preOrderManagement1.stateName) {
                    this.preOrderManagement1.stateId = w.address.state.stateId;
                    this.selectedCity.push(w.address.city.cityName);
                    this.newWarehouseList.push(w);
                }
            }
            this.warehouseList = this.newWarehouseList;
            let unique2 = this.selectedCity.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedCity = unique2;
        }
        if (this.preOrderManagement1.cityName != null) {
            this.newWarehouseList = new Array();
            for (let w of this.warehouseList) {
                if (w.address.city.cityName == this.preOrderManagement1.cityName) {
                    this.preOrderManagement1.cityId = w.address.city.cityId;
                    this.newWarehouseList.push(w);
                }
            }
            this.warehouseList = this.newWarehouseList;
        }
        if (this.preOrderManagement1.region == "Select All Regions") {
            //this.preOrderManagement1.region = null;
            this.preOrderManagement1.stateId = 0;
            this.preOrderManagement1.stateName = null;
            this.preOrderManagement1.cityId = 0;
            this.preOrderManagement1.cityName = null;
            this.warehouseList = this.oldWarehouseList;
            //this.preOrderManagement1.warehouse = null;
        }
        if (this.preOrderManagement1.stateName == "Select All States") {
            this.preOrderManagement1.cityName = null;
            this.preOrderManagement1.cityId = 0;
            // this.preOrderManagement1.warehouse = null;
        }
        if (this.preOrderManagement1.cityName == "Select All Cities") {
            // this.preOrderManagement1.warehouse = null;
        }
    }
    onChangeWarehouse() {
        console.log(this.preOrderManagement1);
    }
    onCancel(p) {
        this.preOrderManagement = new src_app_model_pre_order_management__WEBPACK_IMPORTED_MODULE_3__["PreOrderManagement"]();
        this.preOrderManagement = p;
        this.preOrderManagement.requiredAmount = 0;
        this.preOrderManagement.margin = 0;
        this.preOrderManagement.totalCancellationCharges = 0;
        this.preOrderManagement.availableUnits = this.preOrderManagement.remainingpreOrderQuantity;
        let newCancellationChanges;
        this.totalMargin = 0;
        this.releasedMargin = 0;
        this.totalMargin = this.preOrderManagement.remainingpreOrderQuantity * this.preOrderManagement.oldMargin;
        this.onClickCancel();
        this.iteration = "cancelSinglePreOrder";
    }
    onCancelUnit(template) {
        if (this.preOrderManagement.availableUnits != undefined) {
            if (this.preOrderManagement.availableUnits) {
                this.onClickCancel();
                if (this.preOrderManagement.availableUnits > (this.preOrderManagement.preOrderQuantity - this.preOrderManagement.totalOrderQuantity)) {
                    this.modalRef = this.modalService.show(template, Object.assign({}, { class: 'gray modal-800px' }));
                    this.onCancel(this.preOrderManagement);
                }
            }
        }
        else {
            this.releasedMargin = '';
            this.preOrderManagement.requiredAmount = '';
        }
    }
    onClickCancel() {
        if (this.preOrderManagement.availableUnits <= (this.preOrderManagement.preOrderQuantity - this.preOrderManagement.totalOrderQuantity) && this.preOrderManagement.availableUnits > 0) {
            this.preOrderManagement.totalCancellationCharges = (this.preOrderManagement.availableUnits * this.preOrderManagement.perUnitMarginCancellationCharges) + (this.preOrderManagement.availableUnits * this.preOrderManagement.perUnitAdminCancellationCharges);
            this.preOrderManagement.cancelledUnits = this.preOrderManagement.availableUnits;
            this.preOrderManagement.margin = this.preOrderManagement.availableUnits * this.preOrderManagement.oldMargin;
            if (this.preOrderManagement.totalCancellationCharges > this.preOrderManagement.margin) {
                this.preOrderManagement.requiredAmount = this.preOrderManagement.totalCancellationCharges - this.preOrderManagement.margin;
                console.log(this.preOrderManagement.requiredAmount);
                this.releasedMargin = this.preOrderManagement.margin;
            }
            if (this.preOrderManagement.totalCancellationCharges <= this.preOrderManagement.margin) {
                this.releasedMargin = this.preOrderManagement.margin;
                this.preOrderManagement.requiredAmount = this.preOrderManagement.margin - this.preOrderManagement.totalCancellationCharges;
                this.preOrderManagement.margin = this.preOrderManagement.margin - this.preOrderManagement.requiredAmount;
                console.log(this.preOrderManagement.requiredAmount);
            }
        }
    }
    onCancelBack() {
        this.cancelPreOrder();
    }
    onViewPastBackClick() {
        this.viewAllPreOrders();
    }
    onCancellationConfirm() {
        console.log(this.preOrderManagement);
        if (this.preOrderManagement.totalCancellationCharges > this.preOrderManagement.margin) {
            console.log(this.preOrderManagement.requiredAmount);
            //if(this.preOrderManagement.walletDetails.availableBalance>=this.preOrderManagement.requiredAmount){
            this.preOrderManagementService.cancelPreOrder(this.preOrderManagement)
                .subscribe((data) => {
                console.log(data);
                this.toastr.success('Pre-Order Cancelled Successfully!!!!', 'Pre-Order', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressAnimation: 'increasing'
                });
                this.iteration = "preOrderCancelSuccessPage";
            });
        }
        if (this.preOrderManagement.totalCancellationCharges <= this.preOrderManagement.margin) {
            console.log(this.preOrderManagement.requiredAmount);
            this.preOrderManagementService.cancelPreOrder(this.preOrderManagement)
                .subscribe((data) => {
                console.log(data);
                this.iteration = "preOrderCancelSuccessPage";
            });
        }
    }
    onCancelFilter() {
        this.page = 1;
        this.preOrderManagementList = this.oldPreOrderManagementList;
        if (this.year != 0 || this.year == null) {
            this.newPreOrderManagementList = new Array();
            this.selectedMonth = new Array();
            for (let o of this.preOrderManagementList) {
                if (o.preOrderYear == this.year) {
                    this.newPreOrderManagementList.push(o);
                    this.selectedMonth.push(o.month);
                    this.selectedProductNames.push(o.masterProducts.productName);
                }
            }
            let unique3 = this.selectedMonth.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedMonth = unique3;
            let unique1 = this.selectedProductNames.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedProductNames = unique1;
            this.preOrderManagementList = this.newPreOrderManagementList;
        }
        if (this.month != null) {
            this.newPreOrderManagementList = new Array();
            this.selectedProductNames = new Array();
            for (let o of this.preOrderManagementList) {
                if (o.month == this.month) {
                    this.newPreOrderManagementList.push(o);
                    this.selectedProductNames.push(o.masterProducts.productName);
                }
            }
            let unique1 = this.selectedProductNames.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedProductNames = unique1;
            this.preOrderManagementList = this.newPreOrderManagementList;
        }
        if (this.productName != null) {
            this.newPreOrderManagementList = new Array();
            for (let o of this.preOrderManagementList) {
                if (o.masterProducts.productName == this.productName) {
                    this.newPreOrderManagementList.push(o);
                }
            }
            this.preOrderManagementList = this.newPreOrderManagementList;
        }
        if (this.year == null) {
            this.preOrderManagementList = this.oldPreOrderManagementList;
            this.year = 0;
            this.month = null;
        }
    }
    onBackClick() {
        if (this.iteration == 'preOrderCancelSuccessPage') {
            this.iteration = 'initial';
        }
        else if (this.iteration == 'cancelPreOrderView') {
            this.iteration = 'initial';
        }
        else if (this.iteration == 'viewAllPreOrders') {
            this.iteration = 'initial';
        }
        else if (this.iteration == 'productWarehouseSelection') {
            this.iteration = 'initial';
        }
        else if (this.iteration == 'proceed') {
            this.iteration = 'createPreOrder';
        }
        else if (this.iteration == 'cancelPreOrderView') {
            this.iteration = 'initial';
        }
    }
};
PreorderComponent.ctorParameters = () => [
    { type: src_app_services_pre_order_management_service__WEBPACK_IMPORTED_MODULE_2__["PreOrderManagementService"] },
    { type: src_app_services_order_management_service__WEBPACK_IMPORTED_MODULE_4__["OrderManagementService"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_5__["ToastrService"] },
    { type: ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_6__["BsModalService"] },
    { type: src_app_services_wallet_detail_service__WEBPACK_IMPORTED_MODULE_7__["WalletDetailService"] },
    { type: src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_8__["UsermanagementService"] },
    { type: src_app_services_master_organisation_service__WEBPACK_IMPORTED_MODULE_9__["MasterOrganisationService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_10__["Router"] },
    { type: src_app_api_service_service__WEBPACK_IMPORTED_MODULE_12__["ServiceService"] }
];
PreorderComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-preorder',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./preorder.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/User/preorder/preorder.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./preorder.component.css */ "./src/app/User/preorder/preorder.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_pre_order_management_service__WEBPACK_IMPORTED_MODULE_2__["PreOrderManagementService"],
        src_app_services_order_management_service__WEBPACK_IMPORTED_MODULE_4__["OrderManagementService"],
        ngx_toastr__WEBPACK_IMPORTED_MODULE_5__["ToastrService"],
        ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_6__["BsModalService"],
        src_app_services_wallet_detail_service__WEBPACK_IMPORTED_MODULE_7__["WalletDetailService"],
        src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_8__["UsermanagementService"],
        src_app_services_master_organisation_service__WEBPACK_IMPORTED_MODULE_9__["MasterOrganisationService"],
        _angular_router__WEBPACK_IMPORTED_MODULE_10__["Router"], src_app_api_service_service__WEBPACK_IMPORTED_MODULE_12__["ServiceService"]])
], PreorderComponent);



/***/ }),

/***/ "./src/app/User/redeemmangementuser/redeemmangementuser.component.css":
/*!****************************************************************************!*\
  !*** ./src/app/User/redeemmangementuser/redeemmangementuser.component.css ***!
  \****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n\r\n.justify-content-center {\r\n\r\n    margin-top: 20px;\r\n}\r\n\r\n.form-group.row {\r\n    text-align: center;\r\n}\r\n\r\ninput {\r\n    outline: 0;\r\n    border-width: 0 0 2px;\r\n    \r\n  }\r\n\r\n.btn-primary {\r\n    color: #fff;\r\n    background-color: #007bff;\r\n    border-color: #007bff;\r\n    margin: 3px;\r\n}\r\n\r\n.container.success {\r\n    margin-top: 30px;\r\npadding:43px;\r\n    \r\n}\r\n\r\n/* blincking */\r\n\r\n.blinking{\r\n    -webkit-animation:blinkingText 1.2s infinite;\r\n            animation:blinkingText 1.2s infinite;\r\n}\r\n\r\n@-webkit-keyframes blinkingText{\r\n    0%{     color: green;    }\r\n    49%{    color:green; }\r\n    60%{    color: transparent; }\r\n    99%{    color:transparent;  }\r\n    100%{   color: green;    }\r\n}\r\n\r\n@keyframes blinkingText{\r\n    0%{     color: green;    }\r\n    49%{    color:green; }\r\n    60%{    color: transparent; }\r\n    99%{    color:transparent;  }\r\n    100%{   color: green;    }\r\n}\r\n\r\n.col-form-label {\r\n    padding-top: calc(.375rem + 1px);\r\n    padding-bottom: calc(.375rem + 1px);\r\n    margin-bottom: 0;\r\n    font-size: inherit;\r\n    line-height: 1.5;\r\n    font-size: large;\r\n    font-weight: bold;\r\n\r\n}\r\n\r\n.badge-warning {\r\n  \r\n    width: 50%;\r\n}\r\n\r\n.badge-info {\r\n\r\n    height: 50px;\r\n    width: 50%;\r\n}\r\n\r\nbutton.btn.move {\r\n    float: right;\r\n}\r\n\r\nbutton.btn.move {\r\n    float: right;\r\n}\r\n\r\np {\r\n  \r\n    margin: 7px;\r\n}\r\n\r\n.badge-danger {\r\n  \r\n    line-height: 42.5px;\r\n}\r\n\r\n.badge-primary {\r\n\r\n    line-height: 42.5px; \r\n}\r\n\r\nhr {\r\n\r\n    border: 2px solid black;\r\n \r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvVXNlci9yZWRlZW1tYW5nZW1lbnR1c2VyL3JlZGVlbW1hbmdlbWVudHVzZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBOztJQUVJLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLGtCQUFrQjtBQUN0Qjs7QUFDQTtJQUNJLFVBQVU7SUFDVixxQkFBcUI7O0VBRXZCOztBQUVGO0lBQ0ksV0FBVztJQUNYLHlCQUF5QjtJQUN6QixxQkFBcUI7SUFDckIsV0FBVztBQUNmOztBQUNBO0lBQ0ksZ0JBQWdCO0FBQ3BCLFlBQVk7O0FBRVo7O0FBQ0EsY0FBYzs7QUFDZDtJQUNJLDRDQUFvQztZQUFwQyxvQ0FBb0M7QUFDeEM7O0FBQ0E7SUFDSSxRQUFRLFlBQVksS0FBSztJQUN6QixRQUFRLFdBQVcsRUFBRTtJQUNyQixRQUFRLGtCQUFrQixFQUFFO0lBQzVCLFFBQVEsaUJBQWlCLEdBQUc7SUFDNUIsUUFBUSxZQUFZLEtBQUs7QUFDN0I7O0FBTkE7SUFDSSxRQUFRLFlBQVksS0FBSztJQUN6QixRQUFRLFdBQVcsRUFBRTtJQUNyQixRQUFRLGtCQUFrQixFQUFFO0lBQzVCLFFBQVEsaUJBQWlCLEdBQUc7SUFDNUIsUUFBUSxZQUFZLEtBQUs7QUFDN0I7O0FBQ0E7SUFDSSxnQ0FBZ0M7SUFDaEMsbUNBQW1DO0lBQ25DLGdCQUFnQjtJQUNoQixrQkFBa0I7SUFDbEIsZ0JBQWdCO0lBQ2hCLGdCQUFnQjtJQUNoQixpQkFBaUI7O0FBRXJCOztBQUdBOztJQUVJLFVBQVU7QUFDZDs7QUFDQTs7SUFFSSxZQUFZO0lBQ1osVUFBVTtBQUNkOztBQUVBO0lBQ0ksWUFBWTtBQUNoQjs7QUFDQTtJQUNJLFlBQVk7QUFDaEI7O0FBRUE7O0lBRUksV0FBVztBQUNmOztBQUNBOztJQUVJLG1CQUFtQjtBQUN2Qjs7QUFFQTs7SUFFSSxtQkFBbUI7QUFDdkI7O0FBRUE7O0lBRUksdUJBQXVCOztBQUUzQiIsImZpbGUiOiJzcmMvYXBwL1VzZXIvcmVkZWVtbWFuZ2VtZW50dXNlci9yZWRlZW1tYW5nZW1lbnR1c2VyLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbi5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyIHtcclxuXHJcbiAgICBtYXJnaW4tdG9wOiAyMHB4O1xyXG59XHJcblxyXG4uZm9ybS1ncm91cC5yb3cge1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcbmlucHV0IHtcclxuICAgIG91dGxpbmU6IDA7XHJcbiAgICBib3JkZXItd2lkdGg6IDAgMCAycHg7XHJcbiAgICBcclxuICB9XHJcblxyXG4uYnRuLXByaW1hcnkge1xyXG4gICAgY29sb3I6ICNmZmY7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmO1xyXG4gICAgYm9yZGVyLWNvbG9yOiAjMDA3YmZmO1xyXG4gICAgbWFyZ2luOiAzcHg7XHJcbn1cclxuLmNvbnRhaW5lci5zdWNjZXNzIHtcclxuICAgIG1hcmdpbi10b3A6IDMwcHg7XHJcbnBhZGRpbmc6NDNweDtcclxuICAgIFxyXG59XHJcbi8qIGJsaW5ja2luZyAqL1xyXG4uYmxpbmtpbmd7XHJcbiAgICBhbmltYXRpb246YmxpbmtpbmdUZXh0IDEuMnMgaW5maW5pdGU7XHJcbn1cclxuQGtleWZyYW1lcyBibGlua2luZ1RleHR7XHJcbiAgICAwJXsgICAgIGNvbG9yOiBncmVlbjsgICAgfVxyXG4gICAgNDkleyAgICBjb2xvcjpncmVlbjsgfVxyXG4gICAgNjAleyAgICBjb2xvcjogdHJhbnNwYXJlbnQ7IH1cclxuICAgIDk5JXsgICAgY29sb3I6dHJhbnNwYXJlbnQ7ICB9XHJcbiAgICAxMDAleyAgIGNvbG9yOiBncmVlbjsgICAgfVxyXG59XHJcbi5jb2wtZm9ybS1sYWJlbCB7XHJcbiAgICBwYWRkaW5nLXRvcDogY2FsYyguMzc1cmVtICsgMXB4KTtcclxuICAgIHBhZGRpbmctYm90dG9tOiBjYWxjKC4zNzVyZW0gKyAxcHgpO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMDtcclxuICAgIGZvbnQtc2l6ZTogaW5oZXJpdDtcclxuICAgIGxpbmUtaGVpZ2h0OiAxLjU7XHJcbiAgICBmb250LXNpemU6IGxhcmdlO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcblxyXG59XHJcblxyXG5cclxuLmJhZGdlLXdhcm5pbmcge1xyXG4gIFxyXG4gICAgd2lkdGg6IDUwJTtcclxufVxyXG4uYmFkZ2UtaW5mbyB7XHJcblxyXG4gICAgaGVpZ2h0OiA1MHB4O1xyXG4gICAgd2lkdGg6IDUwJTtcclxufVxyXG5cclxuYnV0dG9uLmJ0bi5tb3ZlIHtcclxuICAgIGZsb2F0OiByaWdodDtcclxufVxyXG5idXR0b24uYnRuLm1vdmUge1xyXG4gICAgZmxvYXQ6IHJpZ2h0O1xyXG59XHJcblxyXG5wIHtcclxuICBcclxuICAgIG1hcmdpbjogN3B4O1xyXG59XHJcbi5iYWRnZS1kYW5nZXIge1xyXG4gIFxyXG4gICAgbGluZS1oZWlnaHQ6IDQyLjVweDtcclxufVxyXG5cclxuLmJhZGdlLXByaW1hcnkge1xyXG5cclxuICAgIGxpbmUtaGVpZ2h0OiA0Mi41cHg7IFxyXG59XHJcblxyXG5ociB7XHJcblxyXG4gICAgYm9yZGVyOiAycHggc29saWQgYmxhY2s7XHJcbiBcclxufSJdfQ== */");

/***/ }),

/***/ "./src/app/User/redeemmangementuser/redeemmangementuser.component.ts":
/*!***************************************************************************!*\
  !*** ./src/app/User/redeemmangementuser/redeemmangementuser.component.ts ***!
  \***************************************************************************/
/*! exports provided: RedeemmangementuserComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RedeemmangementuserComponent", function() { return RedeemmangementuserComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");



let RedeemmangementuserComponent = class RedeemmangementuserComponent {
    constructor(fb) {
        this.fb = fb;
        this.showDetails = false;
    }
    ngOnInit() {
        this.redeemreward = this.fb.group({
            redeem: ['']
        });
        this.pageIterator = 1;
        console.log("The iterator value is : " + this.pageIterator);
    }
    toggleDetails() {
        this.showDetails = !this.showDetails;
    }
    onRedeem() {
        this.pageIterator++;
        console.log("The iterator value is : " + this.pageIterator);
    }
    onBackClick() {
        this.pageIterator--;
        console.log("The iterator value is : " + this.pageIterator);
    }
};
RedeemmangementuserComponent.ctorParameters = () => [
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormBuilder"] }
];
RedeemmangementuserComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-redeemmangementuser',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./redeemmangementuser.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/User/redeemmangementuser/redeemmangementuser.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./redeemmangementuser.component.css */ "./src/app/User/redeemmangementuser/redeemmangementuser.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormBuilder"]])
], RedeemmangementuserComponent);



/***/ }),

/***/ "./src/app/User/rewaradmanagementuser/rewaradmanagementuser.component.css":
/*!********************************************************************************!*\
  !*** ./src/app/User/rewaradmanagementuser/rewaradmanagementuser.component.css ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (".form-group.row {\r\n    text-align: center;\r\n}\r\n\r\n.blinking{\r\n    -webkit-animation:blinkingText 1.2s infinite;\r\n            animation:blinkingText 1.2s infinite;\r\n}\r\n\r\n@-webkit-keyframes blinkingText{\r\n    0%{     color:green;    }\r\n    49%{    color:green; }\r\n    60%{    color: transparent; }\r\n    99%{    color:transparent;  }\r\n    100%{   color: green;    }\r\n}\r\n\r\n@keyframes blinkingText{\r\n    0%{     color:green;    }\r\n    49%{    color:green; }\r\n    60%{    color: transparent; }\r\n    99%{    color:transparent;  }\r\n    100%{   color: green;    }\r\n}\r\n\r\n/* badges */\r\n\r\np {\r\n    margin-top: 0;\r\n    margin-bottom: 1rem;\r\n    margin: 12px;\r\n    font-size: large;\r\n    font-weight: bold;\r\n    color: #fff;\r\n}\r\n\r\n.col-form-label {\r\n\r\n    font-size: medium;\r\n    font-weight: bold;\r\n}\r\n\r\n.col-form-label {\r\n    font-size: large;\r\n    font-weight: bold;\r\n}\r\n\r\np {\r\n \r\n    margin: 8px;\r\n}\r\n\r\n.btn:not(:disabled):not(.disabled) {\r\n  \r\n    margin: 3px;\r\n}\r\n\r\n/*  */\r\n\r\ndiv#importhead {\r\n    font-weight: bold;\r\n    font-size: 20px;\r\n    padding: 14px 0px 10px 62px;\r\n    text-align: center;\r\n}\r\n\r\np#importbal {\r\n    line-height: 3.5rem;\r\n    color: orangered;\r\n    font-size: 30px;\r\n}\r\n\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n  }\r\n\r\nspan.badge.badge-pill {\r\n    height: 40px;\r\n    padding-top: 10px;\r\n    padding-bottom: 10px;\r\n}\r\n\r\nh5.importpara {\r\n    font-size: 25px;\r\n    padding-left: 84px;\r\n    padding-top: 14px;\r\n    color: crimson;\r\n}\r\n\r\ndiv#importname {\r\n    font-weight: 700;\r\n    font-size: 22px;\r\n    padding: 10px;\r\n  }\r\n\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n  }\r\n\r\nh4.card-header-title.mb-3 {\r\n    padding: 10px;\r\n    font-weight: bold;\r\n    margin-top: 10px;\r\n}\r\n\r\ndiv#importlabel {\r\n    font-size: 22px;\r\n    padding: 11px;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvVXNlci9yZXdhcmFkbWFuYWdlbWVudHVzZXIvcmV3YXJhZG1hbmFnZW1lbnR1c2VyLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSw0Q0FBb0M7WUFBcEMsb0NBQW9DO0FBQ3hDOztBQUNBO0lBQ0ksUUFBUSxXQUFXLEtBQUs7SUFDeEIsUUFBUSxXQUFXLEVBQUU7SUFDckIsUUFBUSxrQkFBa0IsRUFBRTtJQUM1QixRQUFRLGlCQUFpQixHQUFHO0lBQzVCLFFBQVEsWUFBWSxLQUFLO0FBQzdCOztBQU5BO0lBQ0ksUUFBUSxXQUFXLEtBQUs7SUFDeEIsUUFBUSxXQUFXLEVBQUU7SUFDckIsUUFBUSxrQkFBa0IsRUFBRTtJQUM1QixRQUFRLGlCQUFpQixHQUFHO0lBQzVCLFFBQVEsWUFBWSxLQUFLO0FBQzdCOztBQUVBLFdBQVc7O0FBSVg7SUFDSSxhQUFhO0lBQ2IsbUJBQW1CO0lBQ25CLFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLFdBQVc7QUFDZjs7QUFDQTs7SUFFSSxpQkFBaUI7SUFDakIsaUJBQWlCO0FBQ3JCOztBQUdBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGlCQUFpQjtBQUNyQjs7QUFFQTs7SUFFSSxXQUFXO0FBQ2Y7O0FBR0E7O0lBRUksV0FBVztBQUNmOztBQUNBLEtBQUs7O0FBQ0w7SUFDSSxpQkFBaUI7SUFDakIsZUFBZTtJQUNmLDJCQUEyQjtJQUMzQixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxtQkFBbUI7SUFDbkIsZ0JBQWdCO0lBQ2hCLGVBQWU7QUFDbkI7O0FBQ0E7SUFDSSxvQkFBb0I7SUFDcEIsZUFBZTtJQUNmLGlCQUFpQjtFQUNuQjs7QUFDQTtJQUNFLFlBQVk7SUFDWixpQkFBaUI7SUFDakIsb0JBQW9CO0FBQ3hCOztBQUVBO0lBQ0ksZUFBZTtJQUNmLGtCQUFrQjtJQUNsQixpQkFBaUI7SUFDakIsY0FBYztBQUNsQjs7QUFDQTtJQUNJLGdCQUFnQjtJQUNoQixlQUFlO0lBQ2YsYUFBYTtFQUNmOztBQUNBO0lBQ0Usb0JBQW9CO0lBQ3BCLGVBQWU7SUFDZixpQkFBaUI7RUFDbkI7O0FBQ0E7SUFDRSxhQUFhO0lBQ2IsaUJBQWlCO0lBQ2pCLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLGVBQWU7SUFDZixhQUFhO0FBQ2pCIiwiZmlsZSI6InNyYy9hcHAvVXNlci9yZXdhcmFkbWFuYWdlbWVudHVzZXIvcmV3YXJhZG1hbmFnZW1lbnR1c2VyLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZm9ybS1ncm91cC5yb3cge1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcblxyXG4uYmxpbmtpbmd7XHJcbiAgICBhbmltYXRpb246YmxpbmtpbmdUZXh0IDEuMnMgaW5maW5pdGU7XHJcbn1cclxuQGtleWZyYW1lcyBibGlua2luZ1RleHR7XHJcbiAgICAwJXsgICAgIGNvbG9yOmdyZWVuOyAgICB9XHJcbiAgICA0OSV7ICAgIGNvbG9yOmdyZWVuOyB9XHJcbiAgICA2MCV7ICAgIGNvbG9yOiB0cmFuc3BhcmVudDsgfVxyXG4gICAgOTkleyAgICBjb2xvcjp0cmFuc3BhcmVudDsgIH1cclxuICAgIDEwMCV7ICAgY29sb3I6IGdyZWVuOyAgICB9XHJcbn1cclxuXHJcbi8qIGJhZGdlcyAqL1xyXG5cclxuXHJcblxyXG5wIHtcclxuICAgIG1hcmdpbi10b3A6IDA7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xyXG4gICAgbWFyZ2luOiAxMnB4O1xyXG4gICAgZm9udC1zaXplOiBsYXJnZTtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgY29sb3I6ICNmZmY7XHJcbn1cclxuLmNvbC1mb3JtLWxhYmVsIHtcclxuXHJcbiAgICBmb250LXNpemU6IG1lZGl1bTtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcblxyXG5cclxuLmNvbC1mb3JtLWxhYmVsIHtcclxuICAgIGZvbnQtc2l6ZTogbGFyZ2U7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5cclxucCB7XHJcbiBcclxuICAgIG1hcmdpbjogOHB4O1xyXG59XHJcblxyXG5cclxuLmJ0bjpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKSB7XHJcbiAgXHJcbiAgICBtYXJnaW46IDNweDtcclxufVxyXG4vKiAgKi9cclxuZGl2I2ltcG9ydGhlYWQge1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICBwYWRkaW5nOiAxNHB4IDBweCAxMHB4IDYycHg7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxuXHJcbnAjaW1wb3J0YmFsIHtcclxuICAgIGxpbmUtaGVpZ2h0OiAzLjVyZW07XHJcbiAgICBjb2xvcjogb3JhbmdlcmVkO1xyXG4gICAgZm9udC1zaXplOiAzMHB4O1xyXG59XHJcbi5idG4uYnRuLWxnIHtcclxuICAgIHBhZGRpbmc6IDFyZW0gMi40cmVtO1xyXG4gICAgZm9udC1zaXplOiAxN3B4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgfVxyXG4gIHNwYW4uYmFkZ2UuYmFkZ2UtcGlsbCB7XHJcbiAgICBoZWlnaHQ6IDQwcHg7XHJcbiAgICBwYWRkaW5nLXRvcDogMTBweDtcclxuICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xyXG59XHJcblxyXG5oNS5pbXBvcnRwYXJhIHtcclxuICAgIGZvbnQtc2l6ZTogMjVweDtcclxuICAgIHBhZGRpbmctbGVmdDogODRweDtcclxuICAgIHBhZGRpbmctdG9wOiAxNHB4O1xyXG4gICAgY29sb3I6IGNyaW1zb247XHJcbn1cclxuZGl2I2ltcG9ydG5hbWUge1xyXG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcclxuICAgIGZvbnQtc2l6ZTogMjJweDtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgfVxyXG4gIC5idG4uYnRuLWxnIHtcclxuICAgIHBhZGRpbmc6IDFyZW0gMi40cmVtO1xyXG4gICAgZm9udC1zaXplOiAxN3B4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgfVxyXG4gIGg0LmNhcmQtaGVhZGVyLXRpdGxlLm1iLTMge1xyXG4gICAgcGFkZGluZzogMTBweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxufVxyXG5cclxuZGl2I2ltcG9ydGxhYmVsIHtcclxuICAgIGZvbnQtc2l6ZTogMjJweDtcclxuICAgIHBhZGRpbmc6IDExcHg7XHJcbn0iXX0= */");

/***/ }),

/***/ "./src/app/User/rewaradmanagementuser/rewaradmanagementuser.component.ts":
/*!*******************************************************************************!*\
  !*** ./src/app/User/rewaradmanagementuser/rewaradmanagementuser.component.ts ***!
  \*******************************************************************************/
/*! exports provided: RewaradmanagementuserComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RewaradmanagementuserComponent", function() { return RewaradmanagementuserComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_services_master_paramters_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/master-paramters.service */ "./src/app/services/master-paramters.service.ts");
/* harmony import */ var src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/usermanagement.service */ "./src/app/services/usermanagement.service.ts");
/* harmony import */ var src_app_model_select__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/model/select */ "./src/app/model/select.ts");
/* harmony import */ var src_app_model_redeem_reward__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/model/redeem-reward */ "./src/app/model/redeem-reward.ts");
/* harmony import */ var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ngx-bootstrap/modal */ "./node_modules/ngx-bootstrap/modal/fesm2015/ngx-bootstrap-modal.js");
/* harmony import */ var src_app_services_country_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/services/country.service */ "./src/app/services/country.service.ts");








let RewaradmanagementuserComponent = class RewaradmanagementuserComponent {
    constructor(masterService, userService, modalService, countryService) {
        this.masterService = masterService;
        this.userService = userService;
        this.modalService = modalService;
        this.countryService = countryService;
        this.ranges = new Array();
        this.range = "-1";
        this.date = new Date("01/01/2019");
        this.date1 = new Date();
        this.showDetails = false;
    }
    ngOnInit() {
        this.userService.getLoggedInUser()
            .subscribe((data) => {
            this.user = data;
            this.countryService.getCurrencyByCountryCode(this.user.countryCode).subscribe((data) => {
                console.log(data);
                this.currencyCode = data;
            });
            this.masterService.userRewardPointsById(this.user.userId)
                .subscribe((data) => {
                this.userRewarpoint = data;
                console.log(data);
                this.iterationName = 1;
            });
        });
        this.masterService.getParametersByParamType('REWARD_FACTOR').subscribe((data) => {
            this.rewardfactor = data[0];
            console.log(data);
            console.log(this.rewardfactor.paramName);
        });
    }
    rewardPointHistory() {
        this.customDate = false;
        this.populateRange();
        console.log(this.user.userId);
        this.masterService.getRewardPointHistoryByUser(this.user.userId)
            .subscribe((data) => {
            this.rewardPointHistoryList = data;
            console.log(data);
            this.orgRewardPointHistory = Array();
            this.orgRewardPointHistory = this.rewardPointHistoryList;
            this.range = -1;
        });
        this.iterationName++;
    }
    populateRange() {
        let range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_4__["Select"];
        range.id = "1";
        range.value = "Custom Range";
        this.ranges[0] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_4__["Select"];
        range.id = "2";
        range.value = "15 Days";
        this.ranges[1] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_4__["Select"];
        range.id = "3";
        range.value = "Current Month";
        this.ranges[2] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_4__["Select"];
        range.id = "4";
        range.value = "3 Months";
        this.ranges[3] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_4__["Select"];
        range.id = "5";
        range.value = "6 Months";
        this.ranges[4] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_4__["Select"];
        range.id = "6";
        range.value = "1 Year";
        this.ranges[5] = range;
    }
    // on select Date Range
    onSelectRangeForRewardPoints() {
        if (this.range != "-1") {
            if (this.range == "1") {
                this.customDate = true;
            }
            else {
                this.customDate = false;
            }
            this.filterListForRewardPointsHistory(this.range);
        }
    }
    filterListForRewardPointsHistory(option) {
        this.rewardPointHistoryList = this.orgRewardPointHistory;
        let startDate = new Date();
        let endDate = new Date();
        if (option == "1") {
            startDate = this.date;
            endDate = this.date1;
        }
        else if (option == "2") {
            startDate.setDate(endDate.getDate() - 15);
        }
        else if (option == "3") {
            startDate.setDate(endDate.getDate() - 30);
        }
        else if (option == "4") {
            startDate.setDate(endDate.getDate() - 90);
        }
        else if (option == "5") {
            startDate.setDate(endDate.getDate() - 180);
        }
        else if (option == "6") {
            startDate.setDate(endDate.getDate() - 360);
        }
        console.log(startDate);
        let tmpRewardHistory = new Array();
        for (let r of this.rewardPointHistoryList) {
            let dt = new Date(r.updatedDate);
            if (dt >= startDate && dt <= endDate) {
                tmpRewardHistory.push(r);
            }
        }
        this.rewardPointHistoryList = tmpRewardHistory;
    }
    onDateChangeForRewardPointHistory() {
        this.page = 1;
        this.filterListForRewardPointsHistory("1");
    }
    onBackClick() {
        this.iterationName = 1;
    }
    redeem() {
        this.availablePoints = this.userRewarpoint.totalRewardPoints - this.userRewarpoint.totalRedeemPoints - this.userRewarpoint.lapsedPoints;
        this.masterService.getRewardConfiguration("INDIVIDUAL_USER", this.userRewarpoint.rewardCategory)
            .subscribe((data) => {
            this.rewardConfig = data;
            this.valuePerPoint = this.rewardConfig.valuePerPoint;
            console.log(this.valuePerPoint);
            this.iterationName = 3;
        });
    }
    onRedeem() {
        console.log(this.redeemPoint);
        console.log(this.availablePoints);
        if (this.redeemPoint <= this.availablePoints) {
            let redeemReward = new src_app_model_redeem_reward__WEBPACK_IMPORTED_MODULE_5__["RedeemReward"]();
            redeemReward.userId = this.user.userId;
            redeemReward.redeemPoint = this.redeemPoint;
            redeemReward.redeemAmount = this.redeemAmount;
            this.masterService.redeemRewards(redeemReward)
                .subscribe((data) => {
                this.walletBalance = data;
                this.iterationName++;
            });
        }
        else {
            alert("Redeem point should not be greater than available point");
        }
    }
    viewDetails() {
        console.log(this.redeemPoint);
        console.log(this.valuePerPoint);
        this.redeemAmount = this.redeemPoint * this.valuePerPoint;
        console.log(this.redeemAmount);
        this.showDetails = true;
    }
};
RewaradmanagementuserComponent.ctorParameters = () => [
    { type: src_app_services_master_paramters_service__WEBPACK_IMPORTED_MODULE_2__["MasterParamtersService"] },
    { type: src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_3__["UsermanagementService"] },
    { type: ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_6__["BsModalService"] },
    { type: src_app_services_country_service__WEBPACK_IMPORTED_MODULE_7__["CountryService"] }
];
RewaradmanagementuserComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-rewaradmanagementuser',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./rewaradmanagementuser.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/User/rewaradmanagementuser/rewaradmanagementuser.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./rewaradmanagementuser.component.css */ "./src/app/User/rewaradmanagementuser/rewaradmanagementuser.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_master_paramters_service__WEBPACK_IMPORTED_MODULE_2__["MasterParamtersService"], src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_3__["UsermanagementService"],
        ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_6__["BsModalService"], src_app_services_country_service__WEBPACK_IMPORTED_MODULE_7__["CountryService"]])
], RewaradmanagementuserComponent);



/***/ }),

/***/ "./src/app/User/rewardpointhistoryuser/rewardpointhistoryuser.component.css":
/*!**********************************************************************************!*\
  !*** ./src/app/User/rewardpointhistoryuser/rewardpointhistoryuser.component.css ***!
  \**********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n.form-group.row {\r\n    text-align: center;\r\n}\r\n\r\n.badge-info {\r\n    color: #fff;\r\n    background-color: #17a2b8;\r\n    height: 50px;\r\n    width: 50%;\r\n}\r\n\r\n.col-form-label {\r\n    font-size: large;\r\n    font-weight: bold;\r\n}\r\n\r\np {\r\n \r\n    margin: 8px;\r\n}\r\n\r\n.btn:not(:disabled):not(.disabled) {\r\n    cursor: pointer;\r\n    margin: 3px;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvVXNlci9yZXdhcmRwb2ludGhpc3Rvcnl1c2VyL3Jld2FyZHBvaW50aGlzdG9yeXVzZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0E7SUFDSSxrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxXQUFXO0lBQ1gseUJBQXlCO0lBQ3pCLFlBQVk7SUFDWixVQUFVO0FBQ2Q7O0FBQ0E7SUFDSSxnQkFBZ0I7SUFDaEIsaUJBQWlCO0FBQ3JCOztBQUVBOztJQUVJLFdBQVc7QUFDZjs7QUFHQTtJQUNJLGVBQWU7SUFDZixXQUFXO0FBQ2YiLCJmaWxlIjoic3JjL2FwcC9Vc2VyL3Jld2FyZHBvaW50aGlzdG9yeXVzZXIvcmV3YXJkcG9pbnRoaXN0b3J5dXNlci5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbi5mb3JtLWdyb3VwLnJvdyB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxuXHJcbi5iYWRnZS1pbmZvIHtcclxuICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzE3YTJiODtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIHdpZHRoOiA1MCU7XHJcbn1cclxuLmNvbC1mb3JtLWxhYmVsIHtcclxuICAgIGZvbnQtc2l6ZTogbGFyZ2U7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5cclxucCB7XHJcbiBcclxuICAgIG1hcmdpbjogOHB4O1xyXG59XHJcblxyXG5cclxuLmJ0bjpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKSB7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICBtYXJnaW46IDNweDtcclxufSJdfQ== */");

/***/ }),

/***/ "./src/app/User/rewardpointhistoryuser/rewardpointhistoryuser.component.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/User/rewardpointhistoryuser/rewardpointhistoryuser.component.ts ***!
  \*********************************************************************************/
/*! exports provided: RewardpointhistoryuserComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RewardpointhistoryuserComponent", function() { return RewardpointhistoryuserComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let RewardpointhistoryuserComponent = class RewardpointhistoryuserComponent {
    constructor() { }
    ngOnInit() {
    }
};
RewardpointhistoryuserComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-rewardpointhistoryuser',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./rewardpointhistoryuser.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/User/rewardpointhistoryuser/rewardpointhistoryuser.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./rewardpointhistoryuser.component.css */ "./src/app/User/rewardpointhistoryuser/rewardpointhistoryuser.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], RewardpointhistoryuserComponent);



/***/ }),

/***/ "./src/app/User/top-up-wallet/top-up-wallet.component.css":
/*!****************************************************************!*\
  !*** ./src/app/User/top-up-wallet/top-up-wallet.component.css ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n\r\n.badge-info {\r\n  \r\n    height: 50px;\r\n    width: 100%;\r\n    border-radius: 46px;\r\n\r\n}\r\n\r\np.text {\r\n    line-height: 42px;\r\n    font-size: large;\r\n    font-weight: bold;\r\n}\r\n\r\nhr {\r\n\r\n    border: 2px solid black;\r\n}\r\n\r\np {\r\n    margin-top: 0;\r\n    margin-bottom: 1rem;\r\n    margin: 3px;\r\n}\r\n\r\nlabel {\r\n    font-size: larger;\r\n    font-weight: bold;\r\n}\r\n\r\nh4{\r\n    margin-left:10px;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvVXNlci90b3AtdXAtd2FsbGV0L3RvcC11cC13YWxsZXQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBOztJQUVJLFlBQVk7SUFDWixXQUFXO0lBQ1gsbUJBQW1COztBQUV2Qjs7QUFFQTtJQUNJLGlCQUFpQjtJQUNqQixnQkFBZ0I7SUFDaEIsaUJBQWlCO0FBQ3JCOztBQUNBOztJQUVJLHVCQUF1QjtBQUMzQjs7QUFDQTtJQUNJLGFBQWE7SUFDYixtQkFBbUI7SUFDbkIsV0FBVztBQUNmOztBQUNBO0lBQ0ksaUJBQWlCO0lBQ2pCLGlCQUFpQjtBQUNyQjs7QUFDQTtJQUNJLGdCQUFnQjtBQUNwQiIsImZpbGUiOiJzcmMvYXBwL1VzZXIvdG9wLXVwLXdhbGxldC90b3AtdXAtd2FsbGV0LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbi5iYWRnZS1pbmZvIHtcclxuICBcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNDZweDtcclxuXHJcbn1cclxuXHJcbnAudGV4dCB7XHJcbiAgICBsaW5lLWhlaWdodDogNDJweDtcclxuICAgIGZvbnQtc2l6ZTogbGFyZ2U7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5ociB7XHJcblxyXG4gICAgYm9yZGVyOiAycHggc29saWQgYmxhY2s7XHJcbn1cclxucCB7XHJcbiAgICBtYXJnaW4tdG9wOiAwO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMXJlbTtcclxuICAgIG1hcmdpbjogM3B4O1xyXG59XHJcbmxhYmVsIHtcclxuICAgIGZvbnQtc2l6ZTogbGFyZ2VyO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuaDR7XHJcbiAgICBtYXJnaW4tbGVmdDoxMHB4O1xyXG59Il19 */");

/***/ }),

/***/ "./src/app/User/top-up-wallet/top-up-wallet.component.ts":
/*!***************************************************************!*\
  !*** ./src/app/User/top-up-wallet/top-up-wallet.component.ts ***!
  \***************************************************************/
/*! exports provided: TopUpWalletComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TopUpWalletComponent", function() { return TopUpWalletComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let TopUpWalletComponent = class TopUpWalletComponent {
    constructor() { }
    ngOnInit() {
        this.pageIterator = 1;
    }
    onClick() {
        this.pageIterator++;
    }
    onSubmit() {
        this.pageIterator++;
    }
    onClickBack() {
        this.pageIterator--;
    }
    onbackWallet() {
        this.pageIterator--;
    }
};
TopUpWalletComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-top-up-wallet',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./top-up-wallet.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/User/top-up-wallet/top-up-wallet.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./top-up-wallet.component.css */ "./src/app/User/top-up-wallet/top-up-wallet.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], TopUpWalletComponent);



/***/ }),

/***/ "./src/app/User/userpaymentgateway/userpaymentgateway.component.css":
/*!**************************************************************************!*\
  !*** ./src/app/User/userpaymentgateway/userpaymentgateway.component.css ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (".card-header h5{\r\n    font-weight: bold;\r\n}\r\n\r\nbutton.btn.btn-primary.btn-block.verify{\r\n    border-radius: 30px;\r\n}\r\n\r\nlabel.custom-control-label.b {\r\n    font-weight: 600;\r\n}\r\n\r\np.import-text {\r\n    text-align: center;\r\n    font-size: 24px;\r\n    line-height: 2.5rem;\r\n    font-weight: bold;\r\n    color: green;\r\n}\r\n\r\nh3.importdetail {\r\n    color: black;\r\n    font-size: 20px;\r\n    text-align: left;\r\n    line-height: 0.5rem;\r\n    text-align: center;\r\n}\r\n\r\ndiv#importpaid {\r\n    font-size: 21px;\r\n    font-weight: bold;\r\n}\r\n\r\np.import-end {\r\n    font-size: 21px;\r\n    text-align: center;\r\n    font-weight: 600;\r\n    color: red;\r\n}\r\n\r\nlabel#importlabel {\r\n    font-weight: 400;\r\n}\r\n\r\nlabel#importlabeltype {\r\n    margin-left: 32px;\r\n    font-size: 19px;\r\n    font-weight: bold;\r\n}\r\n\r\ndiv#importpaid1 {\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    text-align: right;\r\n    color: #ff4444;\r\n}\r\n\r\n/* \r\nlabel.custom-control-label {\r\n    font-size: initial;\r\n    font-weight: bold;\r\n} */\r\n\r\n/* label {\r\n    font-size: initial;\r\n    font-weight: bold;\r\n} */\r\n\r\n.headersec {\r\n    margin-left: 31px;\r\n}\r\n\r\n.btn.btn-primary.paywallet{\r\n    width: 100%;\r\n}\r\n\r\nh4.card-header-title.mb-3 {\r\n    padding: 10px;\r\n    font-weight: bold;\r\n    margin-top: 10px;\r\n}\r\n\r\nh4.card-header-title.mb-3.initial {\r\n    font-weight: bold;\r\n    margin-top: 4px;\r\n    padding: 0px;\r\n}\r\n\r\nh5.outerheader {\r\n    font-size: initial;\r\n    font-weight: bold;\r\n    margin-left: 18px;\r\n}\r\n\r\n/* blincking */\r\n\r\n.blinking{\r\n    -webkit-animation:blinkingText 1.2s infinite;\r\n            animation:blinkingText 1.2s infinite;\r\n}\r\n\r\n@-webkit-keyframes blinkingText{\r\n    0%{     color: red;    }\r\n    49%{    color:red; }\r\n    60%{    color: transparent; }\r\n    99%{    color:transparent;  }\r\n    100%{   color: red;    }\r\n}\r\n\r\n@keyframes blinkingText{\r\n    0%{     color: red;    }\r\n    49%{    color:red; }\r\n    60%{    color: transparent; }\r\n    99%{    color:transparent;  }\r\n    100%{   color: red;    }\r\n}\r\n\r\nb.color {\r\n    font-size: larger;\r\n    color: chocolate;\r\n}\r\n\r\nlabel.color {\r\n    color: chocolate;\r\n    font-size: large;\r\n    margin-left: -11px;\r\n}\r\n\r\nb.dot {\r\n    padding: 10px;\r\n}\r\n\r\nspan.dot {\r\n    padding: 10px;\r\n}\r\n\r\nspan.dtt {\r\n    margin-left: 24px;\r\n}\r\n\r\nspan.dtt1 {\r\n    margin-left: 98px;\r\n}\r\n\r\nspan.dtt2 {\r\n    margin-left: 84px;\r\n}\r\n\r\nspan.dtt3 {\r\n    margin-left: 9px;\r\n}\r\n\r\nspan.dtt4 {\r\n    margin-left: 63px;\r\n}\r\n\r\n/*  */\r\n\r\ndiv#import {\r\n    padding: 2rem;\r\n    font-size: 19px;\r\n}\r\n\r\ndiv#importname {\r\n    text-align: right;\r\n    font-weight: 700;\r\n}\r\n\r\nh5.importinfo {\r\n    margin-top: -13px;\r\n    font-size: 24px;\r\n    font-weight: 500;\r\n}\r\n\r\n.container.importct {\r\n    max-width: 1673px;\r\n}\r\n\r\n.charge {\r\n    padding: 10px;\r\n}\r\n\r\n/* .card.first {\r\n    box-shadow: 2px 3px 3px #d6d5d5!important;\r\n} */\r\n\r\n.card-header.view.view-cascade.gradient-card-header.blue-gradient {\r\n    font-size: 21px;\r\n    font-weight: bold;\r\n    color: #fff!important;\r\n    text-align: center;\r\n}\r\n\r\n.card-header.view.view-cascade.gradient-card-header.blue-gradient.imp {\r\n    margin-top: -33px;\r\n    width: 114%;\r\n    margin-left: -32px;\r\n}\r\n\r\nh4#addCharges{\r\n    line-height: 2.5rem;\r\n    margin-bottom: -25px;\r\n    text-transform: uppercase;\r\n    font-weight: 600;\r\n    color: red;\r\n}\r\n\r\n.charges {\r\n    line-height: 1.5rem;\r\n    margin-top: 10px;\r\n}\r\n\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n}\r\n\r\nh4#importhead {\r\n    font-weight: bold;\r\n}\r\n\r\n.input-group-text {\r\n    border: 1px solid black;\r\n    background: #fff;\r\n}\r\n\r\n#toast-container > div {\r\n    width: 300px;\r\n}\r\n\r\n/*  */\r\n\r\n.input-vendor {\r\n    height: 50px;\r\n    background: #ebf4f9;\r\n}\r\n\r\n.card-body.vendor{\r\n    padding-right: 3rem;\r\n    padding-left: 3rem;\r\n}\r\n\r\ndiv#vendorrow {\r\n    padding-top: 0.5rem;\r\n}\r\n\r\nselect.form-control:not([size]):not([multiple]) {\r\n    height: 50px;\r\n    background-color:#ebf4f9; ;\r\n}\r\n\r\n/* Mobile Portrait Size to Mobile Landscape Size (devices and browsers)\r\n=================================================================== */\r\n\r\n@media only screen and (max-width: 479px) {\r\nbutton.btn.btn-primary.btn-block.verify{\r\n    border-radius: 30px;\r\n    margin-top: -1px;\r\n}\r\nbutton.btn.btn-default.btn-lg.back {\r\n    width: 100%;\r\n}\r\nbutton.btn.btn-primary.btn-lg.update {\r\n    width: 100%;\r\n}\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvVXNlci91c2VycGF5bWVudGdhdGV3YXkvdXNlcnBheW1lbnRnYXRld2F5LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxtQkFBbUI7QUFDdkI7O0FBR0E7SUFDSSxnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLG1CQUFtQjtJQUNuQixpQkFBaUI7SUFDakIsWUFBWTtBQUNoQjs7QUFDQTtJQUNJLFlBQVk7SUFDWixlQUFlO0lBQ2YsZ0JBQWdCO0lBQ2hCLG1CQUFtQjtJQUNuQixrQkFBa0I7QUFDdEI7O0FBSUE7SUFDSSxlQUFlO0lBQ2YsaUJBQWlCO0FBQ3JCOztBQUNBO0lBQ0ksZUFBZTtJQUNmLGtCQUFrQjtJQUNsQixnQkFBZ0I7SUFDaEIsVUFBVTtBQUNkOztBQUVBO0lBQ0ksZ0JBQWdCO0FBQ3BCOztBQUNBO0lBQ0ksaUJBQWlCO0lBQ2pCLGVBQWU7SUFDZixpQkFBaUI7QUFDckI7O0FBQ0E7SUFDSSxlQUFlO0lBQ2YsaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUNqQixjQUFjO0FBQ2xCOztBQUNBOzs7O0dBSUc7O0FBQ0g7OztHQUdHOztBQUVIO0lBQ0ksaUJBQWlCO0FBQ3JCOztBQUNBO0lBQ0ksV0FBVztBQUNmOztBQUNBO0lBQ0ksYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixnQkFBZ0I7QUFDcEI7O0FBQ0E7SUFDSSxpQkFBaUI7SUFDakIsZUFBZTtJQUNmLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCLGlCQUFpQjtBQUNyQjs7QUFDQSxjQUFjOztBQUNkO0lBQ0ksNENBQW9DO1lBQXBDLG9DQUFvQztBQUN4Qzs7QUFDQTtJQUNJLFFBQVEsVUFBVSxLQUFLO0lBQ3ZCLFFBQVEsU0FBUyxFQUFFO0lBQ25CLFFBQVEsa0JBQWtCLEVBQUU7SUFDNUIsUUFBUSxpQkFBaUIsR0FBRztJQUM1QixRQUFRLFVBQVUsS0FBSztBQUMzQjs7QUFOQTtJQUNJLFFBQVEsVUFBVSxLQUFLO0lBQ3ZCLFFBQVEsU0FBUyxFQUFFO0lBQ25CLFFBQVEsa0JBQWtCLEVBQUU7SUFDNUIsUUFBUSxpQkFBaUIsR0FBRztJQUM1QixRQUFRLFVBQVUsS0FBSztBQUMzQjs7QUFFQTtJQUNJLGlCQUFpQjtJQUNqQixnQkFBZ0I7QUFDcEI7O0FBQ0E7SUFDSSxnQkFBZ0I7SUFDaEIsZ0JBQWdCO0lBQ2hCLGtCQUFrQjtBQUN0Qjs7QUFDQTtJQUNJLGFBQWE7QUFDakI7O0FBQ0E7SUFDSSxhQUFhO0FBQ2pCOztBQUNBO0lBQ0ksaUJBQWlCO0FBQ3JCOztBQUNBO0lBQ0ksaUJBQWlCO0FBQ3JCOztBQUNBO0lBQ0ksaUJBQWlCO0FBQ3JCOztBQUNBO0lBQ0ksZ0JBQWdCO0FBQ3BCOztBQUNBO0lBQ0ksaUJBQWlCO0FBQ3JCOztBQUNBLEtBQUs7O0FBQ0w7SUFDSSxhQUFhO0lBQ2IsZUFBZTtBQUNuQjs7QUFDQTtJQUNJLGlCQUFpQjtJQUNqQixnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxpQkFBaUI7SUFDakIsZUFBZTtJQUNmLGdCQUFnQjtBQUNwQjs7QUFDQTtJQUNJLGlCQUFpQjtBQUNyQjs7QUFDQTtJQUNJLGFBQWE7QUFDakI7O0FBQ0E7O0dBRUc7O0FBQ0g7SUFDSSxlQUFlO0lBQ2YsaUJBQWlCO0lBQ2pCLHFCQUFxQjtJQUNyQixrQkFBa0I7QUFDdEI7O0FBQ0E7SUFDSSxpQkFBaUI7SUFDakIsV0FBVztJQUNYLGtCQUFrQjtBQUN0Qjs7QUFDQTtJQUNJLG1CQUFtQjtJQUNuQixvQkFBb0I7SUFDcEIseUJBQXlCO0lBQ3pCLGdCQUFnQjtJQUNoQixVQUFVO0FBQ2Q7O0FBQ0E7SUFDSSxtQkFBbUI7SUFDbkIsZ0JBQWdCO0FBQ3BCOztBQUNBO0lBQ0ksb0JBQW9CO0lBQ3BCLGVBQWU7SUFDZixpQkFBaUI7QUFDckI7O0FBR0E7SUFDSSxpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSx1QkFBdUI7SUFDdkIsZ0JBQWdCO0FBQ3BCOztBQUNBO0lBQ0ksWUFBWTtBQUNoQjs7QUFHRSxLQUFLOztBQUVMO0lBQ0UsWUFBWTtJQUNaLG1CQUFtQjtBQUN2Qjs7QUFDQTtJQUNJLG1CQUFtQjtJQUNuQixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osd0JBQXdCO0FBQzVCOztBQUVBO3FFQUNxRTs7QUFDckU7QUFDQTtJQUNJLG1CQUFtQjtJQUNuQixnQkFBZ0I7QUFDcEI7QUFDQTtJQUNJLFdBQVc7QUFDZjtBQUNBO0lBQ0ksV0FBVztBQUNmO0FBQ0EiLCJmaWxlIjoic3JjL2FwcC9Vc2VyL3VzZXJwYXltZW50Z2F0ZXdheS91c2VycGF5bWVudGdhdGV3YXkuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jYXJkLWhlYWRlciBoNXtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcblxyXG5idXR0b24uYnRuLmJ0bi1wcmltYXJ5LmJ0bi1ibG9jay52ZXJpZnl7XHJcbiAgICBib3JkZXItcmFkaXVzOiAzMHB4O1xyXG59XHJcblxyXG5cclxubGFiZWwuY3VzdG9tLWNvbnRyb2wtbGFiZWwuYiB7XHJcbiAgICBmb250LXdlaWdodDogNjAwO1xyXG59XHJcblxyXG5wLmltcG9ydC10ZXh0IHtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIGZvbnQtc2l6ZTogMjRweDtcclxuICAgIGxpbmUtaGVpZ2h0OiAyLjVyZW07XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIGNvbG9yOiBncmVlbjtcclxufVxyXG5oMy5pbXBvcnRkZXRhaWwge1xyXG4gICAgY29sb3I6IGJsYWNrO1xyXG4gICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgIGxpbmUtaGVpZ2h0OiAwLjVyZW07XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxuXHJcblxyXG5cclxuZGl2I2ltcG9ydHBhaWQge1xyXG4gICAgZm9udC1zaXplOiAyMXB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxucC5pbXBvcnQtZW5kIHtcclxuICAgIGZvbnQtc2l6ZTogMjFweDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgICBjb2xvcjogcmVkO1xyXG59XHJcblxyXG5sYWJlbCNpbXBvcnRsYWJlbCB7XHJcbiAgICBmb250LXdlaWdodDogNDAwO1xyXG59XHJcbmxhYmVsI2ltcG9ydGxhYmVsdHlwZSB7XHJcbiAgICBtYXJnaW4tbGVmdDogMzJweDtcclxuICAgIGZvbnQtc2l6ZTogMTlweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcbmRpdiNpbXBvcnRwYWlkMSB7XHJcbiAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xyXG4gICAgY29sb3I6ICNmZjQ0NDQ7XHJcbn1cclxuLyogXHJcbmxhYmVsLmN1c3RvbS1jb250cm9sLWxhYmVsIHtcclxuICAgIGZvbnQtc2l6ZTogaW5pdGlhbDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59ICovXHJcbi8qIGxhYmVsIHtcclxuICAgIGZvbnQtc2l6ZTogaW5pdGlhbDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59ICovXHJcblxyXG4uaGVhZGVyc2VjIHtcclxuICAgIG1hcmdpbi1sZWZ0OiAzMXB4O1xyXG59XHJcbi5idG4uYnRuLXByaW1hcnkucGF5d2FsbGV0e1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbn1cclxuaDQuY2FyZC1oZWFkZXItdGl0bGUubWItMyB7XHJcbiAgICBwYWRkaW5nOiAxMHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG59XHJcbmg0LmNhcmQtaGVhZGVyLXRpdGxlLm1iLTMuaW5pdGlhbCB7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIG1hcmdpbi10b3A6IDRweDtcclxuICAgIHBhZGRpbmc6IDBweDtcclxufVxyXG5cclxuaDUub3V0ZXJoZWFkZXIge1xyXG4gICAgZm9udC1zaXplOiBpbml0aWFsO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBtYXJnaW4tbGVmdDogMThweDtcclxufVxyXG4vKiBibGluY2tpbmcgKi9cclxuLmJsaW5raW5ne1xyXG4gICAgYW5pbWF0aW9uOmJsaW5raW5nVGV4dCAxLjJzIGluZmluaXRlO1xyXG59XHJcbkBrZXlmcmFtZXMgYmxpbmtpbmdUZXh0e1xyXG4gICAgMCV7ICAgICBjb2xvcjogcmVkOyAgICB9XHJcbiAgICA0OSV7ICAgIGNvbG9yOnJlZDsgfVxyXG4gICAgNjAleyAgICBjb2xvcjogdHJhbnNwYXJlbnQ7IH1cclxuICAgIDk5JXsgICAgY29sb3I6dHJhbnNwYXJlbnQ7ICB9XHJcbiAgICAxMDAleyAgIGNvbG9yOiByZWQ7ICAgIH1cclxufVxyXG5cclxuYi5jb2xvciB7XHJcbiAgICBmb250LXNpemU6IGxhcmdlcjtcclxuICAgIGNvbG9yOiBjaG9jb2xhdGU7XHJcbn1cclxubGFiZWwuY29sb3Ige1xyXG4gICAgY29sb3I6IGNob2NvbGF0ZTtcclxuICAgIGZvbnQtc2l6ZTogbGFyZ2U7XHJcbiAgICBtYXJnaW4tbGVmdDogLTExcHg7XHJcbn1cclxuYi5kb3Qge1xyXG4gICAgcGFkZGluZzogMTBweDtcclxufVxyXG5zcGFuLmRvdCB7XHJcbiAgICBwYWRkaW5nOiAxMHB4O1xyXG59XHJcbnNwYW4uZHR0IHtcclxuICAgIG1hcmdpbi1sZWZ0OiAyNHB4O1xyXG59XHJcbnNwYW4uZHR0MSB7XHJcbiAgICBtYXJnaW4tbGVmdDogOThweDtcclxufVxyXG5zcGFuLmR0dDIge1xyXG4gICAgbWFyZ2luLWxlZnQ6IDg0cHg7XHJcbn1cclxuc3Bhbi5kdHQzIHtcclxuICAgIG1hcmdpbi1sZWZ0OiA5cHg7XHJcbn1cclxuc3Bhbi5kdHQ0IHtcclxuICAgIG1hcmdpbi1sZWZ0OiA2M3B4O1xyXG59XHJcbi8qICAqL1xyXG5kaXYjaW1wb3J0IHtcclxuICAgIHBhZGRpbmc6IDJyZW07XHJcbiAgICBmb250LXNpemU6IDE5cHg7XHJcbn1cclxuZGl2I2ltcG9ydG5hbWUge1xyXG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XHJcbiAgICBmb250LXdlaWdodDogNzAwO1xyXG59XHJcblxyXG5oNS5pbXBvcnRpbmZvIHtcclxuICAgIG1hcmdpbi10b3A6IC0xM3B4O1xyXG4gICAgZm9udC1zaXplOiAyNHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcclxufVxyXG4uY29udGFpbmVyLmltcG9ydGN0IHtcclxuICAgIG1heC13aWR0aDogMTY3M3B4O1xyXG59XHJcbi5jaGFyZ2Uge1xyXG4gICAgcGFkZGluZzogMTBweDtcclxufVxyXG4vKiAuY2FyZC5maXJzdCB7XHJcbiAgICBib3gtc2hhZG93OiAycHggM3B4IDNweCAjZDZkNWQ1IWltcG9ydGFudDtcclxufSAqL1xyXG4uY2FyZC1oZWFkZXIudmlldy52aWV3LWNhc2NhZGUuZ3JhZGllbnQtY2FyZC1oZWFkZXIuYmx1ZS1ncmFkaWVudCB7XHJcbiAgICBmb250LXNpemU6IDIxcHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIGNvbG9yOiAjZmZmIWltcG9ydGFudDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG4uY2FyZC1oZWFkZXIudmlldy52aWV3LWNhc2NhZGUuZ3JhZGllbnQtY2FyZC1oZWFkZXIuYmx1ZS1ncmFkaWVudC5pbXAge1xyXG4gICAgbWFyZ2luLXRvcDogLTMzcHg7XHJcbiAgICB3aWR0aDogMTE0JTtcclxuICAgIG1hcmdpbi1sZWZ0OiAtMzJweDtcclxufVxyXG5oNCNhZGRDaGFyZ2Vze1xyXG4gICAgbGluZS1oZWlnaHQ6IDIuNXJlbTtcclxuICAgIG1hcmdpbi1ib3R0b206IC0yNXB4O1xyXG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgICBjb2xvcjogcmVkO1xyXG59XHJcbi5jaGFyZ2VzIHtcclxuICAgIGxpbmUtaGVpZ2h0OiAxLjVyZW07XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG59XHJcbi5idG4uYnRuLWxnIHtcclxuICAgIHBhZGRpbmc6IDFyZW0gMi40cmVtO1xyXG4gICAgZm9udC1zaXplOiAxN3B4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuXHJcblxyXG5oNCNpbXBvcnRoZWFkIHtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcblxyXG4uaW5wdXQtZ3JvdXAtdGV4dCB7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcclxuICAgIGJhY2tncm91bmQ6ICNmZmY7XHJcbn1cclxuI3RvYXN0LWNvbnRhaW5lciA+IGRpdiB7XHJcbiAgICB3aWR0aDogMzAwcHg7XHJcbn1cclxuXHJcblxyXG4gIC8qICAqL1xyXG4gIFxyXG4gIC5pbnB1dC12ZW5kb3Ige1xyXG4gICAgaGVpZ2h0OiA1MHB4O1xyXG4gICAgYmFja2dyb3VuZDogI2ViZjRmOTtcclxufVxyXG4uY2FyZC1ib2R5LnZlbmRvcntcclxuICAgIHBhZGRpbmctcmlnaHQ6IDNyZW07XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDNyZW07XHJcbn1cclxuXHJcbmRpdiN2ZW5kb3Jyb3cge1xyXG4gICAgcGFkZGluZy10b3A6IDAuNXJlbTtcclxufVxyXG5cclxuc2VsZWN0LmZvcm0tY29udHJvbDpub3QoW3NpemVdKTpub3QoW211bHRpcGxlXSkge1xyXG4gICAgaGVpZ2h0OiA1MHB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjojZWJmNGY5OyA7XHJcbn1cclxuXHJcbi8qIE1vYmlsZSBQb3J0cmFpdCBTaXplIHRvIE1vYmlsZSBMYW5kc2NhcGUgU2l6ZSAoZGV2aWNlcyBhbmQgYnJvd3NlcnMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0NzlweCkge1xyXG5idXR0b24uYnRuLmJ0bi1wcmltYXJ5LmJ0bi1ibG9jay52ZXJpZnl7XHJcbiAgICBib3JkZXItcmFkaXVzOiAzMHB4O1xyXG4gICAgbWFyZ2luLXRvcDogLTFweDtcclxufVxyXG5idXR0b24uYnRuLmJ0bi1kZWZhdWx0LmJ0bi1sZy5iYWNrIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG59XHJcbmJ1dHRvbi5idG4uYnRuLXByaW1hcnkuYnRuLWxnLnVwZGF0ZSB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxufVxyXG59Il19 */");

/***/ }),

/***/ "./src/app/User/userpaymentgateway/userpaymentgateway.component.ts":
/*!*************************************************************************!*\
  !*** ./src/app/User/userpaymentgateway/userpaymentgateway.component.ts ***!
  \*************************************************************************/
/*! exports provided: UserpaymentgatewayComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserpaymentgatewayComponent", function() { return UserpaymentgatewayComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var src_app_services_payment_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/payment.service */ "./src/app/services/payment.service.ts");
/* harmony import */ var src_app_services_wallet_detail_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/services/wallet-detail.service */ "./src/app/services/wallet-detail.service.ts");
/* harmony import */ var src_app_model_account_details__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/model/account-details */ "./src/app/model/account-details.ts");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");
/* harmony import */ var src_app_services_order_management_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/services/order-management.service */ "./src/app/services/order-management.service.ts");
/* harmony import */ var src_app_services_pre_order_management_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/services/pre-order-management.service */ "./src/app/services/pre-order-management.service.ts");
/* harmony import */ var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ngx-bootstrap/modal */ "./node_modules/ngx-bootstrap/modal/fesm2015/ngx-bootstrap-modal.js");
/* harmony import */ var src_app_model_online_payment__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! src/app/model/online-payment */ "./src/app/model/online-payment.ts");
/* harmony import */ var src_app_model_payment_dto__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! src/app/model/payment-dto */ "./src/app/model/payment-dto.ts");
/* harmony import */ var src_app_model_bank_payment_dto__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! src/app/model/bank-payment-dto */ "./src/app/model/bank-payment-dto.ts");
/* harmony import */ var src_app_model_cheque_payment_dto__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! src/app/model/cheque-payment-dto */ "./src/app/model/cheque-payment-dto.ts");
/* harmony import */ var src_app_model_online_payment_new_dto__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! src/app/model/online-payment-new-dto */ "./src/app/model/online-payment-new-dto.ts");















let UserpaymentgatewayComponent = class UserpaymentgatewayComponent {
    constructor(route, paymentService, walletService, toastr, router, orderService, preOrderService, modalService) {
        this.route = route;
        this.paymentService = paymentService;
        this.walletService = walletService;
        this.toastr = toastr;
        this.router = router;
        this.orderService = orderService;
        this.preOrderService = preOrderService;
        this.modalService = modalService;
        this.SHOW_UPDATE_PAYMENT_INFO = false;
        this.min = new Date(2020, 1, 12, 10, 30);
        this.max = new Date(2020, 8, 11);
    }
    ngOnInit() {
        this.paymentMode = null;
        this.topupPendingYN = null;
        if (this.walletService.getWalletDetail() != null) {
            this.walletDetails = this.walletService.getWalletDetail();
            this.walletService.setWalletDetails(null);
            this.paymentService.getPaymentMethods()
                .subscribe((data) => {
                this.paymentMethods = data;
                this.iterationName = 'initial';
            });
        }
        else if (this.paymentService.getSource() == 'onProceed()') {
            if (this.paymentService.getIteration() == 'Bank Transfer') {
                this.bankPayId = this.paymentService.getBankPayId();
                this.paymentMethod = this.paymentService.getIteration();
                this.paymentService.setBankPayId(null);
                this.paymentService.setIteration(null);
                this.onProceed();
            }
            else if (this.paymentService.getIteration() == 'Cheque Payment') {
                this.chequePayId = this.paymentService.getChequePayId();
                this.paymentMethod = this.paymentService.getIteration();
                this.paymentService.setChequePayId(null);
                this.paymentService.setIteration(null);
                this.onProceed();
            }
        }
        else {
            this.router.navigate(['/wallet']);
        }
    }
    onPaymentSelection(p) {
        console.log(p);
        this.paymentMode = p;
    }
    updatePaymntInfo() {
        this.bankPayment.paidAmount = this.bankPayment.topupAmount + (this.bankPayment.charges * this.bankPayment.topupAmount) / 100;
        //this.bankPayment.paidAmount = this.bankPayment.topupAmount * 1 + 1 *  (this.bankPayment.topupAmount * this.bankPayment.charges) / 100;
        console.log(this.bankPayment.currency);
        this.curr = "fa-" + this.bankPayment.currency.toLowerCase();
        console.log(this.curr);
        this.iterationName = 'SHOW_UPDATE_PAYMENT_INFO';
    }
    onPaidAmount(template) {
        if (this.bankPayment.paidAmount < (this.bankPayment.topupAmount + (this.bankPayment.charges * this.bankPayment.topupAmount) / 100)) {
            if (this.bankPayment.charges == 0) {
                // alert("You Need To Pay Minimum Amount")
                this.modalRef = this.modalService.show(template, Object.assign({}, { class: 'gray modal-800px' }));
            }
            else if (this.bankPayment.charges != 0) {
                alert("You Need To Pay Minimum Amount(Including Charges)");
            }
        }
    }
    onPaymentsubmit() {
        if (this.bankPayment.paidAmount < (this.bankPayment.topupAmount + (this.bankPayment.charges * this.bankPayment.topupAmount) / 100)) {
            if (this.bankPayment.charges == 0) {
                alert("You Need To Pay Minimum Amount");
            }
            else if (this.bankPayment.charges != 0) {
                if (this.bankPayment.paidAmount < (this.bankPayment.topupAmount + (this.bankPayment.charges * this.bankPayment.topupAmount) / 100)) {
                    alert("You Need To Pay Minimum Amount(Including Charges)");
                }
            }
        }
        else {
            let bankPaymentDto = new src_app_model_bank_payment_dto__WEBPACK_IMPORTED_MODULE_12__["BankPaymentDto"]();
            bankPaymentDto.bankPayId = this.bankPayment.bankPayId;
            bankPaymentDto.remittingBank = this.bankPayment.remittingBank;
            bankPaymentDto.remittingName = this.bankPayment.remittingName;
            bankPaymentDto.remittingDate = this.bankPayment.remittingDate;
            bankPaymentDto.utrNo = this.bankPayment.utrNo;
            bankPaymentDto.topupAmount = this.bankPayment.topupAmount;
            console.log("Bank Payment Update : " + bankPaymentDto);
            this.paymentService.updateBankPayment(this.bankPayment).subscribe((data) => {
                this.toastr.success('Bank Transfer Details Updated  Successfully. Sent for Admin Approval', 'Bank Payment', { timeOut: 10000, positionClass: 'toast-top-full-width', progressBar: true, progressAnimation: 'increasing', });
                this.pendingTopup();
            });
        }
    }
    onChequeAmount(template) {
        if (this.chequePayment.chequeAmount < (this.chequePayment.topupAmount + (this.chequePayment.charges * this.chequePayment.topupAmount) / 100)) {
            if (this.chequePayment.charges == 0) {
                // alert("You Need To Pay Minimum Amount")
                this.modalRef = this.modalService.show(template, Object.assign({}, { class: 'gray modal-800px' }));
            }
            else if (this.chequePayment.charges != 0) {
                alert("You Need To Pay Minimum Amount(Including Charges)");
            }
        }
    }
    onSaveCheque() {
        if (this.chequePayment.chequeAmount < (this.chequePayment.topupAmount + (this.chequePayment.charges * this.chequePayment.topupAmount) / 100)) {
            if (this.chequePayment.charges == 0) {
                alert("You Need To Pay Minimum Amount");
            }
            else if (this.chequePayment.charges != 0) {
                alert("You Need To Pay Minimum Amount(Including Charges)");
            }
        }
        else {
            let chequePaymentDto = new src_app_model_cheque_payment_dto__WEBPACK_IMPORTED_MODULE_13__["ChequePaymentDto"]();
            chequePaymentDto.chequePayId = this.chequePayment.chequePayId;
            chequePaymentDto.chequeNumber = this.chequePayment.chequeNumber;
            chequePaymentDto.chequeAmount = this.chequePayment.chequeAmount;
            chequePaymentDto.chequeIssuerName = this.chequePayment.chequeIssuerName;
            chequePaymentDto.chequeIssuingBank = this.chequePayment.chequeIssuingBank;
            chequePaymentDto.chequeDate = this.chequePayment.chequeDate;
            if (this.chequePayment.depositedOn != null) {
                chequePaymentDto.depositedOn = this.chequePayment.depositedOn;
            }
            if (this.chequePayment.toBeCollectedOn != null) {
                chequePaymentDto.toBeCollectedOn = this.chequePayment.toBeCollectedOn;
            }
            if (this.chequePayment.toBeDeliveredOn != null) {
                chequePaymentDto.toBeDeliveredOn = this.chequePayment.toBeDeliveredOn;
            }
            chequePaymentDto.chequeType = this.chequeMode;
            chequePaymentDto.topupAmount = this.chequePayment.topupAmount;
            console.log("Cheque Payment Update : " + chequePaymentDto);
            this.paymentService.updateChequePayment(chequePaymentDto).subscribe((data) => {
                this.toastr.success('Cheque Details Updated  Successfully. Sent for Admin Approval', 'Cheque Payment', { timeOut: 10000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
                this.pendingTopup();
            });
        }
    }
    pendingTopup() {
        this.walletService.setSource("onPendingTransation()");
        this.router.navigate(['/wallet']);
    }
    onSaveOnlinePayment() {
        let online = new src_app_model_online_payment_new_dto__WEBPACK_IMPORTED_MODULE_14__["OnlinePaymentNewDto"]();
        online.topupRefNo = this.onlinePayment.topupRefNo;
        online.topupDate = this.onlinePayment.topupDate;
        online.topupAmount = this.onlinePayment.topupAmount;
        online.currency = this.onlinePayment.currency;
        online.customerId = this.onlinePayment.customerId;
        online.organisationRefNo = this.onlinePayment.organisationRefNo;
        online.charges = this.onlinePayment.charges;
        online.paidAmount = this.onlinePayment.paidAmount;
        online.agreegatoreId = this.onlinePayment.agreegatoreId;
        online.customerName = this.onlinePayment.customerName;
        online.paymentMode = this.onlinePayment.paymentMode;
        if (this.orderService.getOrderDto() != null) {
            online.order = this.orderService.getOrderDto();
            this.orderService.setOrderDto(null);
        }
        if (this.preOrderService.getPreOrderDto() != null) {
            online.preOrder = this.preOrderService.getPreOrderDto();
            this.preOrderService.setPreOrderDto(null);
        }
        this.paymentService.saveOnlinePayment(online)
            .subscribe((data) => {
            online = JSON.parse(JSON.stringify(data));
            if (online.orderId != null) {
                this.orderService.setOrderId(online.orderId);
                this.walletService.setSource("onPendingTransation()");
                this.router.navigate(['/wallet']);
            }
            if (online.preOrderId != null) {
                this.preOrderService.setPreOrderId(online.preOrderId);
                this.walletService.setSource("onPendingTransation()");
                this.router.navigate(['/wallet']);
            }
            this.walletService.getWalletDetailsForLoggedInUser()
                .subscribe((data) => {
                this.toastr.success('Transaction Successfull.', 'Online Payment ', { timeOut: 10000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
                this.walletDetails = data;
                this.iterationName = 'SHOW_VERIFY_SUCCESS';
            });
        });
    }
    onLinePaymentDetails(walletDetails, paymentMethod, paymentMode) {
        this.onlinePayment = new src_app_model_online_payment__WEBPACK_IMPORTED_MODULE_10__["OnlinePayment"]();
        this.onlinePayment.charges = 0;
        if (paymentMode.slab1 == 0 && paymentMode.slab2 == 0) {
            this.onlinePayment.charges = 0;
        }
        else {
            if (walletDetails.topupAmount > 2000) {
                this.onlinePayment.charges = paymentMode.slab2;
                this.onlinePayment.tax = 1.18;
                this.onlinePayment.totalCharges = paymentMode.slab2 + ((paymentMode.slab2 / 100) * 1.18);
            }
            else if (walletDetails.topupAmount <= 2000) {
                this.onlinePayment.charges = paymentMode.slab1;
                this.onlinePayment.tax = 1.18;
                this.onlinePayment.totalCharges = paymentMode.slab1 + ((paymentMode.slab1 / 100) * 1.18);
            }
        }
        this.onlinePayment.topupAmount = walletDetails.topupAmount;
        this.onlinePayment.topupDate = walletDetails.topupDate;
        this.onlinePayment.topupRefNo = walletDetails.topupRefNo;
        this.onlinePayment.paymentMode = paymentMethod;
        this.onlinePayment.customerName = walletDetails.customerName;
        this.onlinePayment.currency = walletDetails.walletCurrency;
        if (walletDetails.customerId != null) {
            this.onlinePayment.customerId = walletDetails.customerId;
        }
        if (walletDetails.organisationRefNo != null) {
            this.onlinePayment.organisationRefNo = this.walletDetails.organisationRefNo;
        }
        this.onlinePayment.agreegatoreId = paymentMode.agreegatorPaymethodId;
        this.onlinePayment.paidAmount = walletDetails.topupAmount * 1 + 1 * ((walletDetails.topupAmount * this.onlinePayment.charges) / 100) * 1.18;
        return this.onlinePayment;
    }
    onProceed() {
        if (this.paymentMethod == 'Bank Transfer') {
            console.log(this.walletDetails);
            this.walletService.getAdminBankDetails()
                .subscribe((data) => {
                this.accountDetials = new src_app_model_account_details__WEBPACK_IMPORTED_MODULE_5__["AccountDetails"]();
                this.accountDetials = JSON.parse(JSON.stringify(data));
            });
            if (this.walletDetails != null && this.walletDetails.topupAmount != null && this.walletDetails.topupRefNo != null) {
                let paymentDto = new src_app_model_payment_dto__WEBPACK_IMPORTED_MODULE_11__["PaymentDto"]();
                console.log(this.paymentMode);
                paymentDto.topupAmount = this.walletDetails.topupAmount;
                if (this.paymentMode.slab1 == 0 && this.paymentMode.slab2 == 0) {
                    paymentDto.charges = 0;
                }
                else {
                    if (this.bankPayment.topupAmount > 2000) {
                        paymentDto.charges = this.paymentMode.slab2;
                    }
                    else if (this.bankPayment.topupAmount <= 2000) {
                        paymentDto.charges = this.paymentMode.slab1;
                    }
                }
                paymentDto.topupRefNo = this.walletDetails.topupRefNo;
                paymentDto.topupDate = this.walletDetails.topupDate;
                paymentDto.currency = this.walletDetails.walletCurrency;
                if (this.walletDetails.customerId != null && this.walletDetails.organisationRefNo == null) {
                    paymentDto.customerId = this.walletDetails.customerId;
                }
                if (this.walletDetails.organisationRefNo != null && this.walletDetails.customerId != null) {
                    paymentDto.organisationRefNo = this.walletDetails.organisationRefNo;
                    paymentDto.customerId = this.walletDetails.customerId;
                }
                paymentDto.customerName = this.walletDetails.customerName;
                if (this.orderService.getOrderDto() != null) {
                    paymentDto.order = this.orderService.getOrderDto();
                    this.orderService.setOrderDto(null);
                }
                if (this.preOrderService.getPreOrderDto() != null) {
                    paymentDto.preOrder = this.preOrderService.getPreOrderDto();
                    this.preOrderService.setPreOrderDto(null);
                }
                paymentDto.paymentMode = "Bank";
                console.log("Bank Payment Save : " + paymentDto);
                this.paymentService.saveOfflinePayment(paymentDto)
                    .subscribe((data) => {
                    this.bankPayment = JSON.parse(JSON.stringify(data));
                    console.log(this.bankPayment);
                    if (this.bankPayment.orderId != null) {
                        this.orderService.setOrderId(this.bankPayment.orderId);
                    }
                    if (this.bankPayment.preOrderId != null) {
                        this.preOrderService.setPreOrderId(this.bankPayment.preOrderId);
                    }
                    this.bankPayment.remittingName = this.bankPayment.customerName;
                    this.topupPendingYN = true;
                    this.iterationName = 'SHOW_TOPUP';
                });
            }
            else if (this.paymentService.getTopupAmount() != 0 && this.bankPayId != 0) {
                this.paymentService.getBankPayment(this.bankPayId)
                    .subscribe((data) => {
                    this.walletDetails = this.walletService.getWalletDetailsForLoggedInUser()
                        .subscribe((data) => {
                        this.walletDetails = data;
                        console.log(this.walletDetails);
                        this.curr = "fa-" + this.walletDetails.walletCurrency.toLowerCase();
                        console.log(this.curr);
                    });
                    this.bankPayment = JSON.parse(JSON.stringify(data));
                    this.bankPayment.topupAmount = 1 * this.paymentService.getTopupAmount();
                    this.bankPayment.remittingName = this.bankPayment.customerName;
                    this.paymentService.setTopupAmount(null);
                    this.updatePaymntInfo();
                });
            }
            else if (this.bankPayId != 0 && this.paymentService.getTopupAmount() == 0) {
                this.paymentService.getBankPayment(this.bankPayId)
                    .subscribe((data) => {
                    this.bankPayment = JSON.parse(JSON.stringify(data));
                    this.bankPayment.remittingName = this.bankPayment.customerName;
                    this.updatePaymntInfo();
                });
            }
            else {
                this.toastr.error('Topup Details Not Found Please Try Again !!', 'TopUp', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
            }
        }
        else if (this.paymentMethod == 'Cheque Payment') {
            this.paymentService.getChequeTypes()
                .subscribe((data) => {
                console.log(data);
                this.chequeTypes = data;
            });
            if (this.walletDetails != null && this.walletDetails.topupAmount != null && this.walletDetails.topupRefNo != null) {
                let paymentDto = new src_app_model_payment_dto__WEBPACK_IMPORTED_MODULE_11__["PaymentDto"]();
                paymentDto.topupRefNo = this.walletDetails.topupRefNo;
                paymentDto.topupAmount = this.walletDetails.topupAmount;
                paymentDto.topupDate = this.walletDetails.topupDate;
                paymentDto.currency = this.walletDetails.walletCurrency;
                if (this.paymentMode.slab1 == 0 && this.paymentMode.slab2 == 0) {
                    paymentDto.charges = 0;
                }
                else {
                    if (paymentDto.topupAmount > 2000) {
                        paymentDto.charges = this.paymentMode.slab2;
                    }
                    else if (paymentDto.topupAmount <= 2000) {
                        paymentDto.charges = this.paymentMode.slab1;
                    }
                }
                if (this.walletDetails.customerId != null && this.walletDetails.organisationRefNo == null) {
                    paymentDto.customerId = this.walletDetails.customerId;
                }
                if (this.walletDetails.customerId != null && this.walletDetails.organisationRefNo != null) {
                    paymentDto.organisationRefNo = this.walletDetails.organisationRefNo;
                    paymentDto.customerId = this.walletDetails.customerId;
                }
                paymentDto.customerName = this.walletDetails.customerName;
                if (this.orderService.getOrderDto() != null) {
                    paymentDto.order = this.orderService.getOrderDto();
                    this.orderService.setOrderDto(null);
                }
                if (this.preOrderService.getPreOrderDto() != null) {
                    paymentDto.preOrder = this.preOrderService.getPreOrderDto();
                    this.preOrderService.setPreOrderDto(null);
                }
                paymentDto.paymentMode = "Cheque";
                console.log("Cheque Payment Save : " + paymentDto);
                this.paymentService.saveOfflinePayment(paymentDto)
                    .subscribe((data) => {
                    this.chequePayment = JSON.parse(JSON.stringify(data));
                    console.log(this.chequePayment);
                    if (this.chequePayment.orderId != null) {
                        this.orderService.setOrderId(this.chequePayment.orderId);
                    }
                    if (this.chequePayment.preOrderId != null) {
                        this.preOrderService.setPreOrderId(this.chequePayment.preOrderId);
                    }
                    this.chequePayment.chequeAmount = this.chequePayment.topupAmount * 1 + 1 * (this.chequePayment.topupAmount * this.chequePayment.charges) / 100;
                    this.chequePayment.chequeIssuerName = this.chequePayment.customerName;
                    this.iterationName = 'CHEQUE';
                });
            }
            else if (this.paymentService.getTopupAmount() != 0 && this.chequePayId != 0) {
                this.paymentService.getChequePayment(this.chequePayId)
                    .subscribe((data) => {
                    this.chequePayment = JSON.parse(JSON.stringify(data));
                    this.chequePayment.topupAmount = this.paymentService.getTopupAmount();
                    this.paymentService.setTopupAmount(null);
                    this.chequePayment.chequeAmount = this.chequePayment.topupAmount * 1 + 1 * (this.chequePayment.topupAmount * this.chequePayment.charges) / 100;
                    this.chequePayment.chequeIssuerName = this.chequePayment.customerName;
                    this.iterationName = 'CHEQUE';
                });
            }
            else if (this.chequePayId != 0 && this.paymentService.getTopupAmount() == 0) {
                this.paymentService.getChequePayment(this.chequePayId)
                    .subscribe((data) => {
                    this.chequePayment = JSON.parse(JSON.stringify(data));
                    this.chequePayment.chequeAmount = this.chequePayment.topupAmount * 1 + 1 * (this.chequePayment.topupAmount * this.chequePayment.charges) / 100;
                    this.chequePayment.chequeIssuerName = this.chequePayment.customerName;
                    this.iterationName = 'CHEQUE';
                });
            }
            else {
                this.toastr.error('Topup Details Not Found Please Try Again !!', 'TopUp', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
            }
        }
        else if (this.paymentMethod == 'BHIM/UPI') {
            console.log(this.walletDetails);
            if (this.walletDetails != null && this.walletDetails.topupAmount != null && this.walletDetails.topupRefNo != null) {
                this.onlinePayment = new src_app_model_online_payment__WEBPACK_IMPORTED_MODULE_10__["OnlinePayment"]();
                this.onlinePayment = this.onLinePaymentDetails(this.walletDetails, this.paymentMethod, this.paymentMode);
                this.iterationName = 'SHOW_BHIM_UPI';
            }
        }
        else if (this.paymentMethod == 'Rupay Debit Card') {
            console.log(this.walletDetails);
            if (this.walletDetails != null && this.walletDetails.topupAmount != null && this.walletDetails.topupRefNo != null) {
                this.onlinePayment = new src_app_model_online_payment__WEBPACK_IMPORTED_MODULE_10__["OnlinePayment"]();
                this.onlinePayment = this.onLinePaymentDetails(this.walletDetails, this.paymentMethod, this.paymentMode);
                this.iterationName = 'SHOW_RUPAY_DETAILS';
            }
        }
        else if (this.paymentMethod == 'Visa/Master Debit Card') {
            console.log(this.walletDetails);
            if (this.walletDetails != null && this.walletDetails.topupAmount != null && this.walletDetails.topupRefNo != null) {
                this.onlinePayment = new src_app_model_online_payment__WEBPACK_IMPORTED_MODULE_10__["OnlinePayment"]();
                this.onlinePayment = this.onLinePaymentDetails(this.walletDetails, this.paymentMethod, this.paymentMode);
                this.iterationName = 'ON_DEBIT_CARD_VISA_MASTER';
            }
        }
        else if (this.paymentMethod == 'Visa/Master Credit Card') {
            console.log(this.walletDetails);
            if (this.walletDetails != null && this.walletDetails.topupAmount != null && this.walletDetails.topupRefNo != null) {
                this.onlinePayment = new src_app_model_online_payment__WEBPACK_IMPORTED_MODULE_10__["OnlinePayment"]();
                this.onlinePayment = this.onLinePaymentDetails(this.walletDetails, this.paymentMethod, this.paymentMode);
                this.iterationName = 'ON_CREDIT_CARD_VISA_MASTER';
            }
        }
    }
    onBackPendingTopup() {
        this.walletService.setSource("onPendingTopup()");
        this.route.navigate(['/wallet']);
    }
    /* onChequeDeliveryMode(){
       this.chequePayment =  this.chequePayment;
       this.chequePayment.chequeDeliveredYN= true;
       this.paymentService.saveChequePayment(this.chequePayment)
       .subscribe((data)=>{
         this.chequePayment = JSON.parse(JSON.stringify(data));
         this.iterationName = 'CHEQUE_DELIVERY';
       })
       
     }
   
     onChequeCollectMode(){
       this.chequePayment =  this.chequePayment;
       this.chequePayment.chequeToBeCollctedYN = true;
       this.paymentService.saveChequePayment(this.chequePayment)
       .subscribe((data)=>{
         this.chequePayment = JSON.parse(JSON.stringify(data));
         this.iterationName = 'CHEQUE_COLLECT';
       })
       
      
     }
   
     onChequeDepositMode(){
       this.chequePayment =  this.chequePayment;
       this.chequePayment.chequeDepositedYN = true;
       this.paymentService.saveChequePayment(this.chequePayment)
       .subscribe((data)=>{
         this.chequePayment = JSON.parse(JSON.stringify(data));
         this.iterationName = 'CHEQUE_DEPOSIT';
       })
     }
   */
    onBackClick() {
        if (this.iterationName == 'SHOW_UPDATE_PAYMENT_INFO') {
            this.iterationName = 'SHOW_TOPUP';
        }
        else if (this.iterationName == 'WALLET_TOPUP_PENDING') {
            if (this.offlineMode == "bank") {
                this.iterationName = 'SHOW_UPDATE_PAYMENT_INFO';
            }
            else {
                this.iterationName = 'CHEQUE_DEPOSIT';
            }
        }
        else if (this.iterationName == 'initial') {
            this.route.navigate(['/wallet']);
        }
        else if (this.iterationName == 'SHOW_VERIFY_SUCCESS') {
            this.route.navigate(['/wallet']);
        }
        else if (this.iterationName == 'CHEQUE') {
            this.iterationName = 'initial';
        }
        else {
            this.iterationName = 'initial';
        }
    }
};
UserpaymentgatewayComponent.ctorParameters = () => [
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"] },
    { type: src_app_services_payment_service__WEBPACK_IMPORTED_MODULE_3__["PaymentService"] },
    { type: src_app_services_wallet_detail_service__WEBPACK_IMPORTED_MODULE_4__["WalletDetailService"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_6__["ToastrService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"] },
    { type: src_app_services_order_management_service__WEBPACK_IMPORTED_MODULE_7__["OrderManagementService"] },
    { type: src_app_services_pre_order_management_service__WEBPACK_IMPORTED_MODULE_8__["PreOrderManagementService"] },
    { type: ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_9__["BsModalService"] }
];
UserpaymentgatewayComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-userpaymentgateway',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./userpaymentgateway.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/User/userpaymentgateway/userpaymentgateway.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./userpaymentgateway.component.css */ "./src/app/User/userpaymentgateway/userpaymentgateway.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
        src_app_services_payment_service__WEBPACK_IMPORTED_MODULE_3__["PaymentService"],
        src_app_services_wallet_detail_service__WEBPACK_IMPORTED_MODULE_4__["WalletDetailService"],
        ngx_toastr__WEBPACK_IMPORTED_MODULE_6__["ToastrService"],
        _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
        src_app_services_order_management_service__WEBPACK_IMPORTED_MODULE_7__["OrderManagementService"],
        src_app_services_pre_order_management_service__WEBPACK_IMPORTED_MODULE_8__["PreOrderManagementService"], ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_9__["BsModalService"]])
], UserpaymentgatewayComponent);



/***/ }),

/***/ "./src/app/User/walletandrewards/walletandrewards.component.css":
/*!**********************************************************************!*\
  !*** ./src/app/User/walletandrewards/walletandrewards.component.css ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n\r\na.btn.btn-primary.btn-sm {\r\n    height: 80px;\r\n    width: 100%;\r\n    border-radius: 50px;\r\n    font-size: large;\r\n}\r\n\r\n\r\n.badge-info {\r\n    width: 100%;\r\n    height: 50px;\r\n    font-size: large;\r\n    font-weight: bold;\r\n    margin: 3px;\r\n    margin-top: 23px;\r\n}\r\n\r\n\r\na:not([href]):not([tabindex]) {\r\n    margin: 10px;\r\n    padding: 26px;\r\n    line-height: 24px;\r\n    margin-left: 0px;\r\n}\r\n\r\n\r\n.card\r\n{\r\n    background-color: white;\r\n    box-shadow: 5px 5px 5px 5px  grey;\r\n    margin: 12px;\r\n  }\r\n\r\n\r\n.badge-info {\r\n  \r\n    height: 50px;\r\n    width: 100%;\r\n    border-radius: 46px;\r\n\r\n}\r\n\r\n\r\np.text {\r\n    line-height: 42px;\r\n    font-size: large;\r\n    font-weight: bold;\r\n   \r\n}\r\n\r\n\r\np {\r\n    margin: 3px;\r\n    text-align: center;\r\n    font-size: xx-large;\r\n    font-weight: bold;\r\n    color: green;\r\n}\r\n\r\n\r\nh4{\r\n    margin-left:10px;\r\n}\r\n\r\n\r\n.card.current {\r\n    padding-top:10px;\r\n    padding-bottom: 10px;\r\n}\r\n\r\n\r\n/*  */\r\n\r\n\r\nbutton.btn.btn-primary.top{\r\n    width: 100%;\r\n    height: 60px;\r\n\r\n}\r\n\r\n\r\nbutton.btn.btn-primary.topup{\r\n    width: 100%;\r\n    height: 60px;\r\n    font-weight: bold;\r\n    font-size: 1.2rem;\r\n}\r\n\r\n\r\nbutton.btn.btn-primary.topup1{\r\n    width: 100%;\r\n    height: 60px;\r\n    margin-top: 26px;\r\n    font-weight: bold;\r\n    font-size: 1.2rem;\r\n}\r\n\r\n\r\n/* new */\r\n\r\n\r\n.balance\r\n{\r\n    text-align: center;\r\n    font-size: 30px;\r\n   \r\n}\r\n\r\n\r\nb.header-section {\r\n    color: green;\r\n    font-weight: bold;\r\n    margin-left: 18px;\r\n}\r\n\r\n\r\nh4.card-title.credit {\r\n    margin-right: -4px;\r\n}\r\n\r\n\r\nh4.card-title.due {\r\n    margin-right: 17px;\r\n}\r\n\r\n\r\nspan.dot {\r\n    margin-left: 40px;\r\n}\r\n\r\n\r\nspan.dot1 {\r\n    margin-left: 17px;\r\n}\r\n\r\n\r\nspan.dot2 {\r\n    margin-left: 3px;\r\n}\r\n\r\n\r\nbutton.btn.btn-primary.top-btn {\r\n    margin-top: -3px;\r\n    height: 50px;\r\n    color: white;\r\n}\r\n\r\n\r\ninput.form-control.top-input{\r\n    height: 48px;\r\n    font-weight: 800px;\r\n}\r\n\r\n\r\ninput.form-control.height {\r\n    height: 47px;\r\n    margin-top: 6px;\r\n}\r\n\r\n\r\nbutton.btn.btn-success.Proceed {\r\n    margin-top: -3px;\r\n}\r\n\r\n\r\n.row.other {\r\n    margin-left: -5px;\r\n    margin-top: -13px;\r\n}\r\n\r\n\r\nlabel.col-sm-3.col-form-label.other1 {\r\n    margin-top: 3px;\r\n    font-size: initial;\r\n    font-weight: bold;\r\n    margin-left: 0px;\r\n}\r\n\r\n\r\n.headersec {\r\n    margin-left: 27px;\r\n    font-size: initial;\r\n    font-weight: bold;\r\n    margin-top: 9px;\r\n}\r\n\r\n\r\nh4.card-header-title.mb-3 {\r\n    padding: 10px;\r\n    font-weight: bold;\r\n    margin-top: 10px;\r\n}\r\n\r\n\r\ninput[type=\"radio\"] {\r\n    -webkit-transform: scale(2.5);\r\n            transform: scale(2.5);\r\n}\r\n\r\n\r\n/* .container-fluid.wallet-top {\r\n    margin-top: 40px;\r\n} */\r\n\r\n\r\nlabel{\r\n    font-size: initial;\r\n    font-weight: 600;\r\n}\r\n\r\n\r\n/* blincking */\r\n\r\n\r\n.blinking{\r\n    -webkit-animation:blinkingText 1.2s infinite;\r\n            animation:blinkingText 1.2s infinite;\r\n}\r\n\r\n\r\n@-webkit-keyframes blinkingText{\r\n    0%{     color: red;    }\r\n    49%{    color:red; }\r\n    60%{    color: transparent; }\r\n    99%{    color:transparent;  }\r\n    100%{   color: red;    }\r\n}\r\n\r\n\r\n@keyframes blinkingText{\r\n    0%{     color: red;    }\r\n    49%{    color:red; }\r\n    60%{    color: transparent; }\r\n    99%{    color:transparent;  }\r\n    100%{   color: red;    }\r\n}\r\n\r\n\r\n.col-lg-4.walletbal {\r\n    margin-top: 25px;\r\n}\r\n\r\n\r\nimg.card-img-top.wallet {\r\n    margin-top: 20px;\r\n}\r\n\r\n\r\nb.custId {\r\n    margin-left: -54px;\r\n}\r\n\r\n\r\n.row.v1 {\r\n    margin-left: 4px;\r\n    margin-right: 8px;\r\n}\r\n\r\n\r\nb.color {\r\n    font-size: large;\r\n    color: chocolate;\r\n}\r\n\r\n\r\nb.color1{\r\n    font-size: large;\r\n    color: chocolate;\r\n    margin-left: -28px;\r\n}\r\n\r\n\r\nlabel.color {\r\n    color: chocolate;\r\n    font-size: large;\r\n}\r\n\r\n\r\n.row.btntopup {\r\n    margin-left: 9px;\r\n    margin-right: 6px;\r\n}\r\n\r\n\r\nbutton.btn.peach-gradient.btn-block {\r\n    font-size: large;\r\n    font-weight: bold;\r\n}\r\n\r\n\r\nbutton.btn.purple-gradient.btn-block {\r\n    font-size: large;\r\n    font-weight: bold;\r\n}\r\n\r\n\r\nbutton.btn.blue-gradient.btn-block {\r\n    font-size: large;\r\n    font-weight: bold;\r\n}\r\n\r\n\r\nbutton.btn.aqua-gradient.btn-block {\r\n    font-size: large;\r\n    font-weight: bold;\r\n}\r\n\r\n\r\nh4.btntopup1 {\r\n    font-size: x-large;\r\n    font-weight: bold;\r\n}\r\n\r\n\r\n/* media */\r\n\r\n\r\n@media only screen and (max-width: 479px) {\r\n    \r\nbutton.btn.btn-success.Proceed {\r\n    margin-top: 7px;\r\n}\r\n.row.v1 {\r\n    margin-top: 16px;\r\n    margin-left: 4px;\r\n    margin-right: -2px;\r\n}\r\n.col-md-3.th {\r\n    padding: 6px;\r\n}\r\n}\r\n\r\n\r\n.row.wall {\r\n    margin-left: 354px;\r\n}\r\n\r\n\r\n.card.t1 {\r\n    margin-top: 70px;\r\n    margin-left: 36px;\r\n    margin-right: 36px;\r\n}\r\n\r\n\r\n.container.t2 {\r\n    margin-top: 16px;\r\n}\r\n\r\n\r\nh4.filter{\r\n    font-weight: bold;\r\n    margin-left: 20px;\r\n    text-align: left;\r\n}\r\n\r\n\r\n.card-body.summ {\r\n    margin-left: 8px;\r\n    margin-right: 10px;\r\n}\r\n\r\n\r\n/* uss */\r\n\r\n\r\np.import-text {\r\n    text-align: center;\r\n    font-size: 24px;\r\n    line-height: 2.5rem;\r\n    font-weight: 400;\r\n    color: green;\r\n}\r\n\r\n\r\nh3.importdetail {\r\n    color: black;\r\n    font-size: 20px;\r\n    text-align: left;\r\n    line-height: 0.5rem;\r\n}\r\n\r\n\r\ndiv#importpaid {\r\n    font-size: 21px;\r\n    font-weight: bold;\r\n}\r\n\r\n\r\np.import-end {\r\n    font-size: 21px;\r\n    text-align: center;\r\n    font-weight: 600;\r\n    color: red;\r\n}\r\n\r\n\r\nlabel#importlabel {\r\n    font-weight: bold;\r\n    font-size: 20px;\r\n    margin-left: 12px;\r\n}\r\n\r\n\r\nlabel#importlabeltype {\r\n    margin-left: 32px;\r\n    font-size: 19px;\r\n}\r\n\r\n\r\ndiv#importpaid1 {\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    text-align: right;\r\n}\r\n\r\n\r\ndiv#importname {\r\n    text-align: right;\r\n    font-weight: 700;\r\n}\r\n\r\n\r\ndiv#importwallet {\r\n    font-size: 18px;\r\n}\r\n\r\n\r\ndiv#importwalletalue {\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    color: green;\r\n}\r\n\r\n\r\ndiv#wallet-1 {\r\n    margin-top: 5px;\r\n}\r\n\r\n\r\n.container.importct{\r\n    max-width: 1500px;\r\n}\r\n\r\n\r\n/*  */\r\n\r\n\r\ndiv#import {\r\n    padding: 2rem;\r\n    font-size: 19px;\r\n}\r\n\r\n\r\ndiv#importname {\r\n    text-align: right;\r\n    font-weight: 800;\r\n}\r\n\r\n\r\nh5.importinfo {\r\n    margin-top: -13px;\r\n    font-size: 24px;\r\n    font-weight: 500;\r\n}\r\n\r\n\r\n.container.importct {\r\n    max-width: 1748px;\r\n}\r\n\r\n\r\n.charge {\r\n    padding: 10px;\r\n}\r\n\r\n\r\n.card-header.view.view-cascade.gradient-card-header.blue-gradient {\r\n    font-size: 21px;\r\n    font-weight: bold;\r\n    color: #fff!important;\r\n    text-align: center;\r\n}\r\n\r\n\r\n.card-header.view.view-cascade.gradient-card-header.blue-gradient.imp {\r\n    margin-top: -33px;\r\n    width: 114%;\r\n    margin-left: -32px;\r\n}\r\n\r\n\r\nh4#addCharges{\r\n    line-height: 2.5rem;\r\n    margin-bottom: -25px;\r\n    text-transform: uppercase;\r\n    font-weight: 600;\r\n}\r\n\r\n\r\n.charges {\r\n    line-height: 1.5rem;\r\n    margin-top: 10px;\r\n}\r\n\r\n\r\nh4.importtr {\r\n    font-size: 25px;\r\n    text-align: left;\r\n    padding-bottom: 14px;\r\n    margin-left: -2px;\r\n    font-weight: 500;\r\n}\r\n\r\n\r\ndiv#importmove {\r\n    margin-top: 25px;\r\n}\r\n\r\n\r\nbutton.btn.waves-effect.btn-block {\r\n    line-height: 2rem;\r\n    font-size: 25px;\r\n    font-weight: bold;\r\n\r\n}\r\n\r\n\r\n.card-header.view.view-cascade.gradient-card-header.blue-gradient.importh {\r\n    margin-top: -33px;\r\n    margin: -33px -33px 10px -33px;\r\n}\r\n\r\n\r\nh4.importor {\r\n    margin-top: 33px;\r\n    font-weight: 600;\r\n}\r\n\r\n\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n}\r\n\r\n\r\ndiv#importbl {\r\n    margin-left: 113px;\r\n}\r\n\r\n\r\ndiv#importspan {\r\n    font-size: 20px;\r\n    font-weight: 900;\r\n    color: white;\r\n    margin-right: 12px;\r\n}\r\n\r\n\r\n.input-group-text {\r\n    height: 48px;\r\n    margin-top: 0px;\r\n    background: #fff;\r\n    border: 1px solid black;\r\n    border-right: none;\r\n}\r\n\r\n\r\n/*  */\r\n\r\n\r\n.input-vendor {\r\n    height: 50px;\r\n    background: #ebf4f9;\r\n}\r\n\r\n\r\n.card-body.vendor{\r\n    padding-right: 3rem;\r\n    padding-left: 3rem;\r\n}\r\n\r\n\r\ndiv#vendorrow {\r\n    padding-top: 0.5rem;\r\n}\r\n\r\n\r\nselect.form-control:not([size]):not([multiple]) {\r\n    height: 50px;\r\n    background-color:#ebf4f9; ;\r\n}\r\n\r\n\r\n/* Mobile Portrait Size to Mobile Landscape Size (devices and browsers)\r\n=================================================================== */\r\n\r\n\r\n@media only screen and (max-width: 479px) {\r\n    .row.wall {\r\n        margin-left: 0px;\r\n    }\r\n}\r\n\r\n\r\ni.fas.fa-wallet {\r\n    text-align: center;\r\n    padding: 10px;\r\n}\r\n\r\n\r\n.card.importcard {\r\n    box-shadow: 0px 0px 1px 1px;\r\n}\r\n\r\n\r\ni.fa.fa {\r\n    text-align: center;\r\n    padding: 10px;\r\n}\r\n\r\n\r\nh5{\r\n    padding: 10px 10px 0px 57px;\r\n}\r\n\r\n\r\nlabel#importbal {\r\n    font-size: 20px;\r\n    padding: 10px;\r\n}\r\n\r\n\r\nspan#importbal1 {\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n}\r\n\r\n\r\nh5#importsub {\r\n    font-weight: bold;\r\n}\r\n\r\n\r\n/* .card.importcard:hover{\r\n    transform: scale(1.05);\r\n    box-shadow: 0px 0px 1px 1px;\r\n} */\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvVXNlci93YWxsZXRhbmRyZXdhcmRzL3dhbGxldGFuZHJld2FyZHMuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBO0lBQ0ksWUFBWTtJQUNaLFdBQVc7SUFDWCxtQkFBbUI7SUFDbkIsZ0JBQWdCO0FBQ3BCOzs7QUFHQTtJQUNJLFdBQVc7SUFDWCxZQUFZO0lBQ1osZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixXQUFXO0lBQ1gsZ0JBQWdCO0FBQ3BCOzs7QUFFQTtJQUNJLFlBQVk7SUFDWixhQUFhO0lBQ2IsaUJBQWlCO0lBQ2pCLGdCQUFnQjtBQUNwQjs7O0FBQ0E7O0lBRUksdUJBQXVCO0lBQ3ZCLGlDQUFpQztJQUNqQyxZQUFZO0VBQ2Q7OztBQUVGOztJQUVJLFlBQVk7SUFDWixXQUFXO0lBQ1gsbUJBQW1COztBQUV2Qjs7O0FBRUE7SUFDSSxpQkFBaUI7SUFDakIsZ0JBQWdCO0lBQ2hCLGlCQUFpQjs7QUFFckI7OztBQUVBO0lBQ0ksV0FBVztJQUNYLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsaUJBQWlCO0lBQ2pCLFlBQVk7QUFDaEI7OztBQUVBO0lBQ0ksZ0JBQWdCO0FBQ3BCOzs7QUFFQTtJQUNJLGdCQUFnQjtJQUNoQixvQkFBb0I7QUFDeEI7OztBQUVBLEtBQUs7OztBQUNMO0lBQ0ksV0FBVztJQUNYLFlBQVk7O0FBRWhCOzs7QUFFQTtJQUNJLFdBQVc7SUFDWCxZQUFZO0lBQ1osaUJBQWlCO0lBQ2pCLGlCQUFpQjtBQUNyQjs7O0FBQ0E7SUFDSSxXQUFXO0lBQ1gsWUFBWTtJQUNaLGdCQUFnQjtJQUNoQixpQkFBaUI7SUFDakIsaUJBQWlCO0FBQ3JCOzs7QUFDQSxRQUFROzs7QUFFUjs7SUFFSSxrQkFBa0I7SUFDbEIsZUFBZTs7QUFFbkI7OztBQUNBO0lBQ0ksWUFBWTtJQUNaLGlCQUFpQjtJQUNqQixpQkFBaUI7QUFDckI7OztBQUVBO0lBQ0ksa0JBQWtCO0FBQ3RCOzs7QUFDQTtJQUNJLGtCQUFrQjtBQUN0Qjs7O0FBRUE7SUFDSSxpQkFBaUI7QUFDckI7OztBQUNBO0lBQ0ksaUJBQWlCO0FBQ3JCOzs7QUFDQTtJQUNJLGdCQUFnQjtBQUNwQjs7O0FBQ0E7SUFDSSxnQkFBZ0I7SUFDaEIsWUFBWTtJQUNaLFlBQVk7QUFDaEI7OztBQUVBO0lBQ0ksWUFBWTtJQUNaLGtCQUFrQjtBQUN0Qjs7O0FBQ0E7SUFDSSxZQUFZO0lBQ1osZUFBZTtBQUNuQjs7O0FBQ0E7SUFDSSxnQkFBZ0I7QUFDcEI7OztBQUNBO0lBQ0ksaUJBQWlCO0lBQ2pCLGlCQUFpQjtBQUNyQjs7O0FBRUE7SUFDSSxlQUFlO0lBQ2Ysa0JBQWtCO0lBQ2xCLGlCQUFpQjtJQUNqQixnQkFBZ0I7QUFDcEI7OztBQUNBO0lBQ0ksaUJBQWlCO0lBQ2pCLGtCQUFrQjtJQUNsQixpQkFBaUI7SUFDakIsZUFBZTtBQUNuQjs7O0FBQ0E7SUFDSSxhQUFhO0lBQ2IsaUJBQWlCO0lBQ2pCLGdCQUFnQjtBQUNwQjs7O0FBQ0E7SUFDSSw2QkFBcUI7WUFBckIscUJBQXFCO0FBQ3pCOzs7QUFDQTs7R0FFRzs7O0FBQ0g7SUFDSSxrQkFBa0I7SUFDbEIsZ0JBQWdCO0FBQ3BCOzs7QUFDQSxjQUFjOzs7QUFDZDtJQUNJLDRDQUFvQztZQUFwQyxvQ0FBb0M7QUFDeEM7OztBQUNBO0lBQ0ksUUFBUSxVQUFVLEtBQUs7SUFDdkIsUUFBUSxTQUFTLEVBQUU7SUFDbkIsUUFBUSxrQkFBa0IsRUFBRTtJQUM1QixRQUFRLGlCQUFpQixHQUFHO0lBQzVCLFFBQVEsVUFBVSxLQUFLO0FBQzNCOzs7QUFOQTtJQUNJLFFBQVEsVUFBVSxLQUFLO0lBQ3ZCLFFBQVEsU0FBUyxFQUFFO0lBQ25CLFFBQVEsa0JBQWtCLEVBQUU7SUFDNUIsUUFBUSxpQkFBaUIsR0FBRztJQUM1QixRQUFRLFVBQVUsS0FBSztBQUMzQjs7O0FBRUE7SUFDSSxnQkFBZ0I7QUFDcEI7OztBQUNBO0lBQ0ksZ0JBQWdCO0FBQ3BCOzs7QUFDQTtJQUNJLGtCQUFrQjtBQUN0Qjs7O0FBQ0E7SUFDSSxnQkFBZ0I7SUFDaEIsaUJBQWlCO0FBQ3JCOzs7QUFDQTtJQUNJLGdCQUFnQjtJQUNoQixnQkFBZ0I7QUFDcEI7OztBQUNBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGdCQUFnQjtJQUNoQixrQkFBa0I7QUFDdEI7OztBQUNBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGdCQUFnQjtBQUNwQjs7O0FBQ0E7SUFDSSxnQkFBZ0I7SUFDaEIsaUJBQWlCO0FBQ3JCOzs7QUFFQTtJQUNJLGdCQUFnQjtJQUNoQixpQkFBaUI7QUFDckI7OztBQUNBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGlCQUFpQjtBQUNyQjs7O0FBQ0E7SUFDSSxnQkFBZ0I7SUFDaEIsaUJBQWlCO0FBQ3JCOzs7QUFDQTtJQUNJLGdCQUFnQjtJQUNoQixpQkFBaUI7QUFDckI7OztBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLGlCQUFpQjtBQUNyQjs7O0FBQ0EsVUFBVTs7O0FBQ1Y7O0FBRUE7SUFDSSxlQUFlO0FBQ25CO0FBQ0E7SUFDSSxnQkFBZ0I7SUFDaEIsZ0JBQWdCO0lBQ2hCLGtCQUFrQjtBQUN0QjtBQUNBO0lBQ0ksWUFBWTtBQUNoQjtBQUNBOzs7QUFDQTtJQUNJLGtCQUFrQjtBQUN0Qjs7O0FBRUE7SUFDSSxnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLGtCQUFrQjtBQUN0Qjs7O0FBQ0E7SUFDSSxnQkFBZ0I7QUFDcEI7OztBQUNBO0lBQ0ksaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUNqQixnQkFBZ0I7QUFDcEI7OztBQUNBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGtCQUFrQjtBQUN0Qjs7O0FBRUEsUUFBUTs7O0FBRVI7SUFDSSxrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLG1CQUFtQjtJQUNuQixnQkFBZ0I7SUFDaEIsWUFBWTtBQUNoQjs7O0FBQ0E7SUFDSSxZQUFZO0lBQ1osZUFBZTtJQUNmLGdCQUFnQjtJQUNoQixtQkFBbUI7QUFDdkI7OztBQUlBO0lBQ0ksZUFBZTtJQUNmLGlCQUFpQjtBQUNyQjs7O0FBQ0E7SUFDSSxlQUFlO0lBQ2Ysa0JBQWtCO0lBQ2xCLGdCQUFnQjtJQUNoQixVQUFVO0FBQ2Q7OztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLGVBQWU7SUFDZixpQkFBaUI7QUFDckI7OztBQUNBO0lBQ0ksaUJBQWlCO0lBQ2pCLGVBQWU7QUFDbkI7OztBQUNBO0lBQ0ksZUFBZTtJQUNmLGlCQUFpQjtJQUNqQixpQkFBaUI7QUFDckI7OztBQUNBO0lBQ0ksaUJBQWlCO0lBQ2pCLGdCQUFnQjtBQUNwQjs7O0FBQ0E7SUFDSSxlQUFlO0FBQ25COzs7QUFFQTtJQUNJLGVBQWU7SUFDZixpQkFBaUI7SUFDakIsWUFBWTtBQUNoQjs7O0FBQ0E7SUFDSSxlQUFlO0FBQ25COzs7QUFDQTtJQUNJLGlCQUFpQjtBQUNyQjs7O0FBRUEsS0FBSzs7O0FBQ0w7SUFDSSxhQUFhO0lBQ2IsZUFBZTtBQUNuQjs7O0FBQ0E7SUFDSSxpQkFBaUI7SUFDakIsZ0JBQWdCO0FBQ3BCOzs7QUFFQTtJQUNJLGlCQUFpQjtJQUNqQixlQUFlO0lBQ2YsZ0JBQWdCO0FBQ3BCOzs7QUFDQTtJQUNJLGlCQUFpQjtBQUNyQjs7O0FBQ0E7SUFDSSxhQUFhO0FBQ2pCOzs7QUFDQTtJQUNJLGVBQWU7SUFDZixpQkFBaUI7SUFDakIscUJBQXFCO0lBQ3JCLGtCQUFrQjtBQUN0Qjs7O0FBR0E7SUFDSSxpQkFBaUI7SUFDakIsV0FBVztJQUNYLGtCQUFrQjtBQUN0Qjs7O0FBQ0E7SUFDSSxtQkFBbUI7SUFDbkIsb0JBQW9CO0lBQ3BCLHlCQUF5QjtJQUN6QixnQkFBZ0I7QUFDcEI7OztBQUNBO0lBQ0ksbUJBQW1CO0lBQ25CLGdCQUFnQjtBQUNwQjs7O0FBRUE7SUFDSSxlQUFlO0lBQ2YsZ0JBQWdCO0lBQ2hCLG9CQUFvQjtJQUNwQixpQkFBaUI7SUFDakIsZ0JBQWdCO0FBQ3BCOzs7QUFDQTtJQUNJLGdCQUFnQjtBQUNwQjs7O0FBQ0E7SUFDSSxpQkFBaUI7SUFDakIsZUFBZTtJQUNmLGlCQUFpQjs7QUFFckI7OztBQUdBO0lBQ0ksaUJBQWlCO0lBQ2pCLDhCQUE4QjtBQUNsQzs7O0FBQ0E7SUFDSSxnQkFBZ0I7SUFDaEIsZ0JBQWdCO0FBQ3BCOzs7QUFHQTtJQUNJLG9CQUFvQjtJQUNwQixlQUFlO0lBQ2YsaUJBQWlCO0FBQ3JCOzs7QUFJQTtJQUNJLGtCQUFrQjtBQUN0Qjs7O0FBSUE7SUFDSSxlQUFlO0lBQ2YsZ0JBQWdCO0lBQ2hCLFlBQVk7SUFDWixrQkFBa0I7QUFDdEI7OztBQUNBO0lBQ0ksWUFBWTtJQUNaLGVBQWU7SUFDZixnQkFBZ0I7SUFDaEIsdUJBQXVCO0lBQ3ZCLGtCQUFrQjtBQUN0Qjs7O0FBRUUsS0FBSzs7O0FBRUw7SUFDRSxZQUFZO0lBQ1osbUJBQW1CO0FBQ3ZCOzs7QUFDQTtJQUNJLG1CQUFtQjtJQUNuQixrQkFBa0I7QUFDdEI7OztBQUVBO0lBQ0ksbUJBQW1CO0FBQ3ZCOzs7QUFFQTtJQUNJLFlBQVk7SUFDWix3QkFBd0I7QUFDNUI7OztBQUNBO3FFQUNxRTs7O0FBQ3JFO0lBQ0k7UUFDSSxnQkFBZ0I7SUFDcEI7QUFDSjs7O0FBTUE7SUFDSSxrQkFBa0I7SUFDbEIsYUFBYTtBQUNqQjs7O0FBQ0E7SUFDSSwyQkFBMkI7QUFDL0I7OztBQUNBO0lBQ0ksa0JBQWtCO0lBQ2xCLGFBQWE7QUFDakI7OztBQUNBO0lBQ0ksMkJBQTJCO0FBQy9COzs7QUFFQTtJQUNJLGVBQWU7SUFDZixhQUFhO0FBQ2pCOzs7QUFDQTtJQUNJLGVBQWU7SUFDZixpQkFBaUI7QUFDckI7OztBQUVBO0lBQ0ksaUJBQWlCO0FBQ3JCOzs7QUFFQTs7O0dBR0ciLCJmaWxlIjoic3JjL2FwcC9Vc2VyL3dhbGxldGFuZHJld2FyZHMvd2FsbGV0YW5kcmV3YXJkcy5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG5hLmJ0bi5idG4tcHJpbWFyeS5idG4tc20ge1xyXG4gICAgaGVpZ2h0OiA4MHB4O1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1MHB4O1xyXG4gICAgZm9udC1zaXplOiBsYXJnZTtcclxufVxyXG5cclxuXHJcbi5iYWRnZS1pbmZvIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiA1MHB4O1xyXG4gICAgZm9udC1zaXplOiBsYXJnZTtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgbWFyZ2luOiAzcHg7XHJcbiAgICBtYXJnaW4tdG9wOiAyM3B4O1xyXG59XHJcblxyXG5hOm5vdChbaHJlZl0pOm5vdChbdGFiaW5kZXhdKSB7XHJcbiAgICBtYXJnaW46IDEwcHg7XHJcbiAgICBwYWRkaW5nOiAyNnB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IDI0cHg7XHJcbiAgICBtYXJnaW4tbGVmdDogMHB4O1xyXG59XHJcbi5jYXJkXHJcbntcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xyXG4gICAgYm94LXNoYWRvdzogNXB4IDVweCA1cHggNXB4ICBncmV5O1xyXG4gICAgbWFyZ2luOiAxMnB4O1xyXG4gIH1cclxuXHJcbi5iYWRnZS1pbmZvIHtcclxuICBcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNDZweDtcclxuXHJcbn1cclxuXHJcbnAudGV4dCB7XHJcbiAgICBsaW5lLWhlaWdodDogNDJweDtcclxuICAgIGZvbnQtc2l6ZTogbGFyZ2U7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgXHJcbn1cclxuXHJcbnAge1xyXG4gICAgbWFyZ2luOiAzcHg7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBmb250LXNpemU6IHh4LWxhcmdlO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBjb2xvcjogZ3JlZW47XHJcbn1cclxuXHJcbmg0e1xyXG4gICAgbWFyZ2luLWxlZnQ6MTBweDtcclxufVxyXG5cclxuLmNhcmQuY3VycmVudCB7XHJcbiAgICBwYWRkaW5nLXRvcDoxMHB4O1xyXG4gICAgcGFkZGluZy1ib3R0b206IDEwcHg7XHJcbn1cclxuXHJcbi8qICAqL1xyXG5idXR0b24uYnRuLmJ0bi1wcmltYXJ5LnRvcHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiA2MHB4O1xyXG5cclxufVxyXG5cclxuYnV0dG9uLmJ0bi5idG4tcHJpbWFyeS50b3B1cHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiA2MHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBmb250LXNpemU6IDEuMnJlbTtcclxufVxyXG5idXR0b24uYnRuLmJ0bi1wcmltYXJ5LnRvcHVwMXtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiA2MHB4O1xyXG4gICAgbWFyZ2luLXRvcDogMjZweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgZm9udC1zaXplOiAxLjJyZW07XHJcbn1cclxuLyogbmV3ICovXHJcblxyXG4uYmFsYW5jZVxyXG57XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBmb250LXNpemU6IDMwcHg7XHJcbiAgIFxyXG59XHJcbmIuaGVhZGVyLXNlY3Rpb24ge1xyXG4gICAgY29sb3I6IGdyZWVuO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBtYXJnaW4tbGVmdDogMThweDtcclxufVxyXG5cclxuaDQuY2FyZC10aXRsZS5jcmVkaXQge1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAtNHB4O1xyXG59XHJcbmg0LmNhcmQtdGl0bGUuZHVlIHtcclxuICAgIG1hcmdpbi1yaWdodDogMTdweDtcclxufVxyXG5cclxuc3Bhbi5kb3Qge1xyXG4gICAgbWFyZ2luLWxlZnQ6IDQwcHg7XHJcbn1cclxuc3Bhbi5kb3QxIHtcclxuICAgIG1hcmdpbi1sZWZ0OiAxN3B4O1xyXG59XHJcbnNwYW4uZG90MiB7XHJcbiAgICBtYXJnaW4tbGVmdDogM3B4O1xyXG59XHJcbmJ1dHRvbi5idG4uYnRuLXByaW1hcnkudG9wLWJ0biB7XHJcbiAgICBtYXJnaW4tdG9wOiAtM3B4O1xyXG4gICAgaGVpZ2h0OiA1MHB4O1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG59XHJcblxyXG5pbnB1dC5mb3JtLWNvbnRyb2wudG9wLWlucHV0e1xyXG4gICAgaGVpZ2h0OiA0OHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDgwMHB4O1xyXG59XHJcbmlucHV0LmZvcm0tY29udHJvbC5oZWlnaHQge1xyXG4gICAgaGVpZ2h0OiA0N3B4O1xyXG4gICAgbWFyZ2luLXRvcDogNnB4O1xyXG59XHJcbmJ1dHRvbi5idG4uYnRuLXN1Y2Nlc3MuUHJvY2VlZCB7XHJcbiAgICBtYXJnaW4tdG9wOiAtM3B4O1xyXG59XHJcbi5yb3cub3RoZXIge1xyXG4gICAgbWFyZ2luLWxlZnQ6IC01cHg7XHJcbiAgICBtYXJnaW4tdG9wOiAtMTNweDtcclxufVxyXG5cclxubGFiZWwuY29sLXNtLTMuY29sLWZvcm0tbGFiZWwub3RoZXIxIHtcclxuICAgIG1hcmdpbi10b3A6IDNweDtcclxuICAgIGZvbnQtc2l6ZTogaW5pdGlhbDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgbWFyZ2luLWxlZnQ6IDBweDtcclxufVxyXG4uaGVhZGVyc2VjIHtcclxuICAgIG1hcmdpbi1sZWZ0OiAyN3B4O1xyXG4gICAgZm9udC1zaXplOiBpbml0aWFsO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBtYXJnaW4tdG9wOiA5cHg7XHJcbn1cclxuaDQuY2FyZC1oZWFkZXItdGl0bGUubWItMyB7XHJcbiAgICBwYWRkaW5nOiAxMHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG59XHJcbmlucHV0W3R5cGU9XCJyYWRpb1wiXSB7XHJcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDIuNSk7XHJcbn1cclxuLyogLmNvbnRhaW5lci1mbHVpZC53YWxsZXQtdG9wIHtcclxuICAgIG1hcmdpbi10b3A6IDQwcHg7XHJcbn0gKi9cclxubGFiZWx7XHJcbiAgICBmb250LXNpemU6IGluaXRpYWw7XHJcbiAgICBmb250LXdlaWdodDogNjAwO1xyXG59XHJcbi8qIGJsaW5ja2luZyAqL1xyXG4uYmxpbmtpbmd7XHJcbiAgICBhbmltYXRpb246YmxpbmtpbmdUZXh0IDEuMnMgaW5maW5pdGU7XHJcbn1cclxuQGtleWZyYW1lcyBibGlua2luZ1RleHR7XHJcbiAgICAwJXsgICAgIGNvbG9yOiByZWQ7ICAgIH1cclxuICAgIDQ5JXsgICAgY29sb3I6cmVkOyB9XHJcbiAgICA2MCV7ICAgIGNvbG9yOiB0cmFuc3BhcmVudDsgfVxyXG4gICAgOTkleyAgICBjb2xvcjp0cmFuc3BhcmVudDsgIH1cclxuICAgIDEwMCV7ICAgY29sb3I6IHJlZDsgICAgfVxyXG59XHJcblxyXG4uY29sLWxnLTQud2FsbGV0YmFsIHtcclxuICAgIG1hcmdpbi10b3A6IDI1cHg7XHJcbn1cclxuaW1nLmNhcmQtaW1nLXRvcC53YWxsZXQge1xyXG4gICAgbWFyZ2luLXRvcDogMjBweDtcclxufVxyXG5iLmN1c3RJZCB7XHJcbiAgICBtYXJnaW4tbGVmdDogLTU0cHg7XHJcbn1cclxuLnJvdy52MSB7XHJcbiAgICBtYXJnaW4tbGVmdDogNHB4O1xyXG4gICAgbWFyZ2luLXJpZ2h0OiA4cHg7XHJcbn1cclxuYi5jb2xvciB7XHJcbiAgICBmb250LXNpemU6IGxhcmdlO1xyXG4gICAgY29sb3I6IGNob2NvbGF0ZTtcclxufVxyXG5iLmNvbG9yMXtcclxuICAgIGZvbnQtc2l6ZTogbGFyZ2U7XHJcbiAgICBjb2xvcjogY2hvY29sYXRlO1xyXG4gICAgbWFyZ2luLWxlZnQ6IC0yOHB4O1xyXG59XHJcbmxhYmVsLmNvbG9yIHtcclxuICAgIGNvbG9yOiBjaG9jb2xhdGU7XHJcbiAgICBmb250LXNpemU6IGxhcmdlO1xyXG59XHJcbi5yb3cuYnRudG9wdXAge1xyXG4gICAgbWFyZ2luLWxlZnQ6IDlweDtcclxuICAgIG1hcmdpbi1yaWdodDogNnB4O1xyXG59XHJcblxyXG5idXR0b24uYnRuLnBlYWNoLWdyYWRpZW50LmJ0bi1ibG9jayB7XHJcbiAgICBmb250LXNpemU6IGxhcmdlO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuYnV0dG9uLmJ0bi5wdXJwbGUtZ3JhZGllbnQuYnRuLWJsb2NrIHtcclxuICAgIGZvbnQtc2l6ZTogbGFyZ2U7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5idXR0b24uYnRuLmJsdWUtZ3JhZGllbnQuYnRuLWJsb2NrIHtcclxuICAgIGZvbnQtc2l6ZTogbGFyZ2U7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5idXR0b24uYnRuLmFxdWEtZ3JhZGllbnQuYnRuLWJsb2NrIHtcclxuICAgIGZvbnQtc2l6ZTogbGFyZ2U7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5cclxuaDQuYnRudG9wdXAxIHtcclxuICAgIGZvbnQtc2l6ZTogeC1sYXJnZTtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcbi8qIG1lZGlhICovXHJcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDc5cHgpIHtcclxuICAgIFxyXG5idXR0b24uYnRuLmJ0bi1zdWNjZXNzLlByb2NlZWQge1xyXG4gICAgbWFyZ2luLXRvcDogN3B4O1xyXG59XHJcbi5yb3cudjEge1xyXG4gICAgbWFyZ2luLXRvcDogMTZweDtcclxuICAgIG1hcmdpbi1sZWZ0OiA0cHg7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IC0ycHg7XHJcbn1cclxuLmNvbC1tZC0zLnRoIHtcclxuICAgIHBhZGRpbmc6IDZweDtcclxufVxyXG59XHJcbi5yb3cud2FsbCB7XHJcbiAgICBtYXJnaW4tbGVmdDogMzU0cHg7XHJcbn1cclxuXHJcbi5jYXJkLnQxIHtcclxuICAgIG1hcmdpbi10b3A6IDcwcHg7XHJcbiAgICBtYXJnaW4tbGVmdDogMzZweDtcclxuICAgIG1hcmdpbi1yaWdodDogMzZweDtcclxufVxyXG4uY29udGFpbmVyLnQyIHtcclxuICAgIG1hcmdpbi10b3A6IDE2cHg7XHJcbn1cclxuaDQuZmlsdGVye1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBtYXJnaW4tbGVmdDogMjBweDtcclxuICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbn1cclxuLmNhcmQtYm9keS5zdW1tIHtcclxuICAgIG1hcmdpbi1sZWZ0OiA4cHg7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XHJcbn1cclxuXHJcbi8qIHVzcyAqL1xyXG5cclxucC5pbXBvcnQtdGV4dCB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBmb250LXNpemU6IDI0cHg7XHJcbiAgICBsaW5lLWhlaWdodDogMi41cmVtO1xyXG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcclxuICAgIGNvbG9yOiBncmVlbjtcclxufVxyXG5oMy5pbXBvcnRkZXRhaWwge1xyXG4gICAgY29sb3I6IGJsYWNrO1xyXG4gICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgIGxpbmUtaGVpZ2h0OiAwLjVyZW07XHJcbn1cclxuXHJcblxyXG5cclxuZGl2I2ltcG9ydHBhaWQge1xyXG4gICAgZm9udC1zaXplOiAyMXB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxucC5pbXBvcnQtZW5kIHtcclxuICAgIGZvbnQtc2l6ZTogMjFweDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgICBjb2xvcjogcmVkO1xyXG59XHJcblxyXG5sYWJlbCNpbXBvcnRsYWJlbCB7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIG1hcmdpbi1sZWZ0OiAxMnB4O1xyXG59XHJcbmxhYmVsI2ltcG9ydGxhYmVsdHlwZSB7XHJcbiAgICBtYXJnaW4tbGVmdDogMzJweDtcclxuICAgIGZvbnQtc2l6ZTogMTlweDtcclxufVxyXG5kaXYjaW1wb3J0cGFpZDEge1xyXG4gICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcclxufVxyXG5kaXYjaW1wb3J0bmFtZSB7XHJcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcclxuICAgIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbn1cclxuZGl2I2ltcG9ydHdhbGxldCB7XHJcbiAgICBmb250LXNpemU6IDE4cHg7XHJcbn1cclxuXHJcbmRpdiNpbXBvcnR3YWxsZXRhbHVlIHtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgY29sb3I6IGdyZWVuO1xyXG59XHJcbmRpdiN3YWxsZXQtMSB7XHJcbiAgICBtYXJnaW4tdG9wOiA1cHg7XHJcbn1cclxuLmNvbnRhaW5lci5pbXBvcnRjdHtcclxuICAgIG1heC13aWR0aDogMTUwMHB4O1xyXG59XHJcblxyXG4vKiAgKi9cclxuZGl2I2ltcG9ydCB7XHJcbiAgICBwYWRkaW5nOiAycmVtO1xyXG4gICAgZm9udC1zaXplOiAxOXB4O1xyXG59XHJcbmRpdiNpbXBvcnRuYW1lIHtcclxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xyXG4gICAgZm9udC13ZWlnaHQ6IDgwMDtcclxufVxyXG5cclxuaDUuaW1wb3J0aW5mbyB7XHJcbiAgICBtYXJnaW4tdG9wOiAtMTNweDtcclxuICAgIGZvbnQtc2l6ZTogMjRweDtcclxuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XHJcbn1cclxuLmNvbnRhaW5lci5pbXBvcnRjdCB7XHJcbiAgICBtYXgtd2lkdGg6IDE3NDhweDtcclxufVxyXG4uY2hhcmdlIHtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbn1cclxuLmNhcmQtaGVhZGVyLnZpZXcudmlldy1jYXNjYWRlLmdyYWRpZW50LWNhcmQtaGVhZGVyLmJsdWUtZ3JhZGllbnQge1xyXG4gICAgZm9udC1zaXplOiAyMXB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBjb2xvcjogI2ZmZiFpbXBvcnRhbnQ7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxuXHJcblxyXG4uY2FyZC1oZWFkZXIudmlldy52aWV3LWNhc2NhZGUuZ3JhZGllbnQtY2FyZC1oZWFkZXIuYmx1ZS1ncmFkaWVudC5pbXAge1xyXG4gICAgbWFyZ2luLXRvcDogLTMzcHg7XHJcbiAgICB3aWR0aDogMTE0JTtcclxuICAgIG1hcmdpbi1sZWZ0OiAtMzJweDtcclxufVxyXG5oNCNhZGRDaGFyZ2Vze1xyXG4gICAgbGluZS1oZWlnaHQ6IDIuNXJlbTtcclxuICAgIG1hcmdpbi1ib3R0b206IC0yNXB4O1xyXG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbn1cclxuLmNoYXJnZXMge1xyXG4gICAgbGluZS1oZWlnaHQ6IDEuNXJlbTtcclxuICAgIG1hcmdpbi10b3A6IDEwcHg7XHJcbn1cclxuXHJcbmg0LmltcG9ydHRyIHtcclxuICAgIGZvbnQtc2l6ZTogMjVweDtcclxuICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogMTRweDtcclxuICAgIG1hcmdpbi1sZWZ0OiAtMnB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcclxufVxyXG5kaXYjaW1wb3J0bW92ZSB7XHJcbiAgICBtYXJnaW4tdG9wOiAyNXB4O1xyXG59XHJcbmJ1dHRvbi5idG4ud2F2ZXMtZWZmZWN0LmJ0bi1ibG9jayB7XHJcbiAgICBsaW5lLWhlaWdodDogMnJlbTtcclxuICAgIGZvbnQtc2l6ZTogMjVweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG5cclxufVxyXG5cclxuXHJcbi5jYXJkLWhlYWRlci52aWV3LnZpZXctY2FzY2FkZS5ncmFkaWVudC1jYXJkLWhlYWRlci5ibHVlLWdyYWRpZW50LmltcG9ydGgge1xyXG4gICAgbWFyZ2luLXRvcDogLTMzcHg7XHJcbiAgICBtYXJnaW46IC0zM3B4IC0zM3B4IDEwcHggLTMzcHg7XHJcbn1cclxuaDQuaW1wb3J0b3Ige1xyXG4gICAgbWFyZ2luLXRvcDogMzNweDtcclxuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbn1cclxuXHJcblxyXG4uYnRuLmJ0bi1sZyB7XHJcbiAgICBwYWRkaW5nOiAxcmVtIDIuNHJlbTtcclxuICAgIGZvbnQtc2l6ZTogMTdweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcblxyXG5cclxuXHJcbmRpdiNpbXBvcnRibCB7XHJcbiAgICBtYXJnaW4tbGVmdDogMTEzcHg7XHJcbn1cclxuXHJcblxyXG5cclxuZGl2I2ltcG9ydHNwYW4ge1xyXG4gICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDkwMDtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgIG1hcmdpbi1yaWdodDogMTJweDtcclxufVxyXG4uaW5wdXQtZ3JvdXAtdGV4dCB7XHJcbiAgICBoZWlnaHQ6IDQ4cHg7XHJcbiAgICBtYXJnaW4tdG9wOiAwcHg7XHJcbiAgICBiYWNrZ3JvdW5kOiAjZmZmO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XHJcbiAgICBib3JkZXItcmlnaHQ6IG5vbmU7XHJcbn1cclxuXHJcbiAgLyogICovXHJcbiAgXHJcbiAgLmlucHV0LXZlbmRvciB7XHJcbiAgICBoZWlnaHQ6IDUwcHg7XHJcbiAgICBiYWNrZ3JvdW5kOiAjZWJmNGY5O1xyXG59XHJcbi5jYXJkLWJvZHkudmVuZG9ye1xyXG4gICAgcGFkZGluZy1yaWdodDogM3JlbTtcclxuICAgIHBhZGRpbmctbGVmdDogM3JlbTtcclxufVxyXG5cclxuZGl2I3ZlbmRvcnJvdyB7XHJcbiAgICBwYWRkaW5nLXRvcDogMC41cmVtO1xyXG59XHJcblxyXG5zZWxlY3QuZm9ybS1jb250cm9sOm5vdChbc2l6ZV0pOm5vdChbbXVsdGlwbGVdKSB7XHJcbiAgICBoZWlnaHQ6IDUwcHg7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiNlYmY0Zjk7IDtcclxufVxyXG4vKiBNb2JpbGUgUG9ydHJhaXQgU2l6ZSB0byBNb2JpbGUgTGFuZHNjYXBlIFNpemUgKGRldmljZXMgYW5kIGJyb3dzZXJzKVxyXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDc5cHgpIHtcclxuICAgIC5yb3cud2FsbCB7XHJcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDBweDtcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcbmkuZmFzLmZhLXdhbGxldCB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBwYWRkaW5nOiAxMHB4O1xyXG59XHJcbi5jYXJkLmltcG9ydGNhcmQge1xyXG4gICAgYm94LXNoYWRvdzogMHB4IDBweCAxcHggMXB4O1xyXG59XHJcbmkuZmEuZmEge1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgcGFkZGluZzogMTBweDtcclxufVxyXG5oNXtcclxuICAgIHBhZGRpbmc6IDEwcHggMTBweCAwcHggNTdweDtcclxufVxyXG5cclxubGFiZWwjaW1wb3J0YmFsIHtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbn1cclxuc3BhbiNpbXBvcnRiYWwxIHtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcblxyXG5oNSNpbXBvcnRzdWIge1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuXHJcbi8qIC5jYXJkLmltcG9ydGNhcmQ6aG92ZXJ7XHJcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMDUpO1xyXG4gICAgYm94LXNoYWRvdzogMHB4IDBweCAxcHggMXB4O1xyXG59ICovIl19 */");

/***/ }),

/***/ "./src/app/User/walletandrewards/walletandrewards.component.ts":
/*!*********************************************************************!*\
  !*** ./src/app/User/walletandrewards/walletandrewards.component.ts ***!
  \*********************************************************************/
/*! exports provided: WalletandrewardsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WalletandrewardsComponent", function() { return WalletandrewardsComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_model_select__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/model/select */ "./src/app/model/select.ts");
/* harmony import */ var src_app_services_wallet_detail_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/wallet-detail.service */ "./src/app/services/wallet-detail.service.ts");
/* harmony import */ var src_app_services_credit_limit_management_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/services/credit-limit-management.service */ "./src/app/services/credit-limit-management.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/services/usermanagement.service */ "./src/app/services/usermanagement.service.ts");
/* harmony import */ var src_app_model_wallet_details__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/model/wallet-details */ "./src/app/model/wallet-details.ts");
/* harmony import */ var src_app_services_payment_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/services/payment.service */ "./src/app/services/payment.service.ts");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");
/* harmony import */ var src_app_services_order_management_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! src/app/services/order-management.service */ "./src/app/services/order-management.service.ts");
/* harmony import */ var src_app_services_pre_order_management_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! src/app/services/pre-order-management.service */ "./src/app/services/pre-order-management.service.ts");
/* harmony import */ var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ngx-bootstrap/modal */ "./node_modules/ngx-bootstrap/modal/fesm2015/ngx-bootstrap-modal.js");













let WalletandrewardsComponent = class WalletandrewardsComponent {
    constructor(paymentService, walletDetailService, creditLimitManagementService, router, route, userService, toastr, orderService, preOrderService, modalService) {
        this.paymentService = paymentService;
        this.walletDetailService = walletDetailService;
        this.creditLimitManagementService = creditLimitManagementService;
        this.router = router;
        this.route = route;
        this.userService = userService;
        this.toastr = toastr;
        this.orderService = orderService;
        this.preOrderService = preOrderService;
        this.modalService = modalService;
        this.sr = 0;
        this.ranges = new Array();
        this.range = "-1";
        this.date = new Date("01/01/2020");
        this.date1 = new Date();
        this.show = false;
        this.show1 = false;
        this.show2 = false;
        this.gender = 'male';
        this.no1 = 1000;
        this.no2 = 2000;
        this.no3 = 5000;
        this.no4 = 10000;
        this.creditLimit = 200.60;
        this.creditLimit1 = 100.60;
    }
    ngOnInit() {
        if (this.paymentService.getNotification() != null) {
            this.walletDetailService.getWalletDetailsForLoggedInUser()
                .subscribe((data) => {
                this.walletDetails = data;
                this.onHoldTransaction();
            });
        }
        if (this.walletDetailService.getSource() == "onPendingTransation()") {
            if (this.orderService.getSource() != null && this.orderService.getSource() == "saveOrder()") {
                this.router.navigate(['/create']);
            }
            if (this.preOrderService.getSource() != null && this.preOrderService.getSource() == "onTopupAndLock()") {
                this.router.navigate(['/pre-order']);
            }
            this.walletDetailService.setSource(null);
            this.onPendingTransation();
        }
        if (this.walletDetailService.getSource() == "onTopupWallet()") {
            this.walletDetailService.setSource(null);
            this.onTopupWallet();
        }
        if (this.walletDetailService.getSource() == "onPendingTopup()") {
            this.walletDetailService.setSource(null);
            this.onPendingTopup();
        }
        this.userService.getLoggedInUser()
            .subscribe((data) => {
            this.user = data;
        });
        let edit = this.route.snapshot.queryParamMap.get('edit');
        console.log("init called edit " + edit);
        let routTo = this.walletDetailService.getIteration();
        if (routTo == 1) {
            this.walletDetailService.changeIteration(0);
            this.onTopupWallet();
        }
        else {
            console.log("init else part ");
            this.iteration = "walletAndRewardsMainPage";
        }
    }
    goToWallet() {
        this.userService.getLoggedInUser()
            .subscribe((data) => {
            this.user = data;
            this.iteration = "walletAndRewardsMainPage";
        });
    }
    toggle() {
        this.show = !this.show;
    }
    toggle1() {
        this.show1 = !this.show1;
    }
    toggle2() {
        this.show2 = !this.show2;
    }
    onEditClick() {
        this.iteration = 'topupWallet';
    }
    onDeleteClick() {
        this.iteration = 'topupWallet';
    }
    onHoldTransaction() {
        this.userService.getLoggedInUser()
            .subscribe((data) => {
            this.user = data;
            this.paymentService.getAllHoldTopUp(this.user.uniqueUserId)
                .subscribe((data) => {
                console.log(data);
                this.pendingTopUpList = data;
                if (this.paymentService.getNotification() != null) {
                    let noti = this.paymentService.getNotification();
                    this.paymentService.setNotification(null);
                    for (let p of this.pendingTopUpList) {
                        if (noti.code == 'BANK' && noti.codeId == p.bankPayId) {
                            this.transaction = p;
                            this.onProceed();
                        }
                        else if (noti.code == 'CHEQUE' && noti.codeId == p.chequePayId) {
                            this.transaction = p;
                            this.onProceed();
                        }
                    }
                }
                else {
                    this.iteration = 'HOLD_TRANSACTION';
                }
            });
        });
    }
    onHoldTopup(p) {
        this.transaction = p;
        console.log(this.transaction);
    }
    onProceed() {
        if (this.transaction != null) {
            this.transaction = this.transaction;
            this.iteration = 'NOT_FOUND';
        }
        else {
            // alert("Please select Transaction")
            this.toastr.error('Please select Transaction', 'Held Transaction', { timeOut: 3000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
        }
    }
    onReProcessTransaction() {
        if (this.transaction.bankPayId != 0) {
            this.paymentService.reProcessBankPaymentHoldTransaction(this.transaction.bankPayId)
                .subscribe((data) => {
                this.toastr.success('Transaction Re-Processed Successfully!!!', 'Transaction', { timeOut: 10000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
                this.onHoldTransaction();
            });
        }
        else if (this.transaction.chequePayId != 0) {
            this.paymentService.reProcessChequePaymentHoldTransaction(this.transaction.chequePayId)
                .subscribe((data) => {
                this.toastr.success('Transaction Re-Processed Successfully!!!', 'Transaction', { timeOut: 10000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
                this.onHoldTransaction();
            });
        }
    }
    onEditTransaction() {
        if (this.transaction.bankPayId != 0) {
            this.paymentService.setSource("onProceed()");
            this.paymentService.setBankPayId(this.transaction.bankPayId);
            this.paymentService.setIteration("Bank Transfer");
            this.router.navigate(['/userpay']);
        }
        else if (this.transaction.chequePayId != 0) {
            this.paymentService.setSource("onProceed()");
            this.paymentService.setChequePayId(this.transaction.chequePayId);
            this.paymentService.setIteration("Cheque Payment");
            this.router.navigate(['/userpay']);
        }
    }
    onEdit() {
        if (this.transaction == null) {
            this.toastr.error('Select any Transaction', 'Transaction', {
                timeOut: 3000, positionClass: 'toast-top-center',
                progressBar: true, progressAnimation: 'increasing',
            });
        }
        else {
            if (this.transaction.bankPayId != 0) {
                this.paymentService.getBankPayment(this.transaction.bankPayId)
                    .subscribe((data) => {
                    this.bankPayment = data;
                    if (this.bankPayment != null) {
                        this.walletDetailService.getWalletDetailsForLoggedInUser()
                            .subscribe((data) => {
                            console.log(data);
                            this.walletDetails = data;
                            this.walletDetails.requiredAmount = 0;
                            this.walletDetails.topupAmount = this.bankPayment.topupAmount;
                            this.paymentService.setBankPayId(this.bankPayment.bankPayId);
                            this.curr = "fa-" + this.walletDetails.walletCurrency.toLowerCase();
                            console.log(this.curr);
                        });
                        this.iteration = "topupWallet";
                    }
                });
            }
            if (this.transaction.chequePayId != 0) {
                this.paymentService.getChequePayment(this.transaction.chequePayId)
                    .subscribe((data) => {
                    this.chequePayment = data;
                    if (this.chequePayment != null) {
                        this.walletDetailService.getWalletDetailsForLoggedInUser()
                            .subscribe((data) => {
                            this.walletDetails = data;
                            this.walletDetails.requiredAmount = 0;
                            this.walletDetails.topupAmount = this.chequePayment.topupAmount;
                            this.paymentService.setChequePayId(this.chequePayment.chequePayId);
                            this.curr = "fa-" + this.walletDetails.walletCurrency.toLowerCase();
                            console.log(this.curr);
                        });
                        this.iteration = "topupWallet";
                    }
                });
            }
        }
    }
    onCancelTransaction() {
        if (this.transaction.bankPayId != 0) {
            this.paymentService.cancelBankPaymentHoldTransaction(this.transaction.bankPayId)
                .subscribe((data) => {
                this.toastr.error('Transaction Cancelled', 'Transaction', { timeOut: 3000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
                this.onHoldTransaction();
            });
        }
        else if (this.transaction.chequePayId != 0) {
            this.paymentService.cancelChequePaymentHoldTransaction(this.transaction.chequePayId)
                .subscribe((data) => {
                this.toastr.error('Transaction Cancelled', 'Transaction', { timeOut: 3000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
                this.onHoldTransaction();
            });
        }
    }
    onBackClick() {
        if (this.iteration == 'PENDING_TOPUP') {
            this.iteration = 'walletDetail';
        }
        if (this.iteration == 'HOLD_TRANSACTION') {
            this.iteration = 'walletDetail';
        }
        if (this.iteration == 'NOT_FOUND') {
            this.onHoldTransaction();
        }
        if (this.iteration == 'PENDING_TRANSACTION') {
            this.iteration = 'walletDetail';
        }
        if (this.iteration == 'topupWallet') {
            this.iteration = 'walletAndRewardsMainPage';
        }
    }
    onWallet() {
        this.walletDetailService.getWalletDetailsForLoggedInUserAndAccountSummary()
            .subscribe((data) => {
            this.walletDetails = new src_app_model_wallet_details__WEBPACK_IMPORTED_MODULE_7__["WalletDetails"]();
            this.walletDetails = data;
            this.accountSummaryList = this.walletDetails.accountSummaryList;
            this.accountSummaryFilteredList = this.accountSummaryList;
            this.oldAccountSummary = this.accountSummaryList;
            this.uniqueUserIdList = new Array();
            if (this.walletDetails.user != null) {
                this.user = this.walletDetails.user;
                for (let ac of this.accountSummaryFilteredList) {
                    this.uniqueUserIdList.push(ac.user.uniqueUserId);
                }
                let unique3 = this.uniqueUserIdList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.uniqueUserIdList = unique3;
            }
            else {
                this.user = null;
            }
            this.sr++;
            this.iteration = "walletDetail";
        });
    }
    onAccountSummary() {
        this.customDate = false;
        this.range = -1;
        this.userService.getLoggedInUser()
            .subscribe((data) => {
            this.user = data;
            console.log(this.user);
            this.populateRange();
            this.region = null;
            this.state = null;
            this.city = null;
            this.office = null;
            this.customerId = null;
            this.accountSummaryFilteredList;
            console.log(this.accountSummaryFilteredList);
            this.regionList = new Array();
            this.regionList.push("All Region");
            this.stateList = new Array();
            this.stateList.push("All State");
            this.cityList = new Array();
            this.cityList.push("All City");
            this.officeList = new Array();
            this.officeList.push("All Office");
            this.uniqueUserIdList = new Array();
            this.uniqueUserIdList.push("All Customers");
            for (let ac of this.accountSummaryFilteredList) {
                if (ac.user.region != null) {
                    this.regionList.push(ac.user.region);
                }
                if (ac.user.state != null) {
                    this.stateList.push(ac.user.state);
                }
                if (ac.user.city != null) {
                    this.cityList.push(ac.user.city);
                }
                if (ac.user.officeName != null) {
                    this.officeList.push(ac.user.officeName);
                }
                this.uniqueUserIdList.push(ac.user.uniqueUserId);
            }
            let unique1 = this.regionList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.regionList = unique1;
            unique1 = this.stateList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.stateList = unique1;
            unique1 = this.cityList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.cityList = unique1;
            unique1 = this.uniqueUserIdList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.uniqueUserIdList = unique1;
            this.iteration = "accountSummary";
        });
    }
    onTopupWallet() {
        this.walletDetails = new src_app_model_wallet_details__WEBPACK_IMPORTED_MODULE_7__["WalletDetails"]();
        this.walletDetailService.getWalletDetailsForLoggedInUser()
            .subscribe((data) => {
            this.walletDetails = data;
            this.walletDetailService.getTopUpSequenceNo()
                .subscribe((data) => {
                this.walletDetails.topupRefNo = data;
                this.walletDetails.requiredAmount = 0;
                this.curr = "fa-" + this.walletDetails.walletCurrency.toLowerCase();
                console.log(this.curr);
                this.bankPayment = this.walletDetailService.getBankPayment();
                this.chequePayment = this.walletDetailService.getChequePayment();
                this.walletDetails.topupDate = null;
                this.walletDetails.topupDate = new Date();
                // if (this.orderService.getOrder() != null) {
                //   this.walletDetails.requiredAmount = this.orderService.getOrder().topupAmount;
                //   this.walletDetails.topupAmount = this.walletDetails.requiredAmount;
                // }
                if (this.orderService.getOrderDto() != null) {
                    this.walletDetails.requiredAmount = this.orderService.getOrderDto().requiredAmount;
                    this.walletDetails.topupAmount = this.walletDetails.requiredAmount;
                }
                // if (this.preOrderService.getPreOrder() != null) {
                //   this.walletDetails.requiredAmount = this.preOrderService.getPreOrder().requiredAmount;
                //   this.walletDetails.topupAmount = this.walletDetails.requiredAmount;
                // }
                if (this.preOrderService.getPreOrderDto() != null) {
                    this.walletDetails.requiredAmount = this.preOrderService.getPreOrderDto().requiredAmount;
                    this.walletDetails.topupAmount = this.walletDetails.requiredAmount;
                }
                if (this.chequePayment != null && this.chequePayment.editYN == true) {
                    console.log(this.chequePayment);
                    this.walletDetails.topupAmount = this.chequePayment.topupAmount;
                    this.walletDetails.topupRefNo = this.chequePayment.topupRefNo;
                    if (this.chequePayment.orderId != 0) {
                        this.walletDetails.orderId = this.chequePayment.orderId;
                    }
                    if (this.chequePayment.preOrderId != 0) {
                        this.walletDetails.preOrderId = this.chequePayment.preOrderId;
                    }
                }
            });
            this.iteration = "topupWallet";
        });
    }
    onbackClick() {
        if (this.iteration == 'walletDetail') {
            this.onWallet();
        }
        else if (this.iteration == 'creditSummary') {
            this.iteration = 'walletDetail';
        }
        else if (this.iteration == 'accountSummary') {
            this.iteration = 'walletDetail';
        }
        else if (this.iteration == 'creditSummary') {
            this.iteration = 'topupWallet';
        }
    }
    onTopUp() {
        if (this.walletDetails.requiredAmount != 0) {
            if (this.walletDetails.requiredAmount <= this.walletDetails.topupAmount) {
                this.walletDetailService.setWalletDetails(this.walletDetails);
                this.router.navigate(['/userpay']);
            }
            else {
                alert("Topup minimum amount");
                this.onTopupWallet();
            }
        }
        else {
            if (this.walletDetails.topupRefNo != null) {
                this.walletDetailService.setWalletDetails(this.walletDetails);
                this.router.navigate(['/userpay']);
            }
            else if (this.paymentService.getBankPayId() != 0) {
                console.log(this.paymentService.getBankPayId());
                this.paymentService.setSource("onProceed()");
                this.paymentService.setIteration("Bank Transfer");
                this.paymentService.setTopupAmount(this.walletDetails.topupAmount);
                this.walletDetails = null;
                this.router.navigate(['/userpay']);
            }
            else if (this.paymentService.getChequePayId() != 0) {
                this.paymentService.setSource("onProceed()");
                this.paymentService.setIteration("Cheque Payment");
                this.paymentService.setTopupAmount(this.walletDetails.topupAmount);
                this.walletDetails = null;
                this.router.navigate(['/userpay']);
            }
        }
    }
    populateRange() {
        let range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_2__["Select"];
        range.id = "1";
        range.value = "Custom Range";
        this.ranges[0] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_2__["Select"];
        range.id = "2";
        range.value = "15 Days";
        this.ranges[1] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_2__["Select"];
        range.id = "3";
        range.value = "Current Month";
        this.ranges[2] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_2__["Select"];
        range.id = "4";
        range.value = "3 Months";
        this.ranges[3] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_2__["Select"];
        range.id = "5";
        range.value = "6 Months";
        this.ranges[4] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_2__["Select"];
        range.id = "6";
        range.value = "1 Year";
        this.ranges[5] = range;
        console.log(this.ranges);
    }
    onSelect() {
        if (this.range != "-1") {
            if (this.range == "1") {
                this.customDate = true;
            }
            else {
                this.customDate = false;
            }
            this.filterList(this.range);
        }
        if (this.range == -1) {
            this.customDate = false;
            if (this.region != null || this.state != null || this.city != null || this.office != null || this.customerId != null) {
                this.accountSummaryFilteredList = this.accountSummaryList;
            }
            else {
                this.accountSummaryFilteredList = this.accountSummaryFilteredList;
            }
        }
    }
    onDateChange() {
        if (this.date != undefined && this.date1 != undefined) {
            if (this.date < this.date1 || this.date == this.date1) {
                this.filterList("1");
            }
            else {
                this.toastr.error('Please Select Valid Date Range', '', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                });
            }
        }
    }
    filterList(option) {
        this.accountSummaryFilteredList = new Array();
        let startDate = new Date();
        let endDate = new Date();
        if (option == "1") {
            startDate = this.date;
            endDate = this.date1;
        }
        else if (option == "2") {
            startDate.setDate(endDate.getDate() - 15);
        }
        else if (option == "3") {
            startDate.setDate(endDate.getDate() - 30);
        }
        else if (option == "4") {
            startDate.setDate(endDate.getDate() - 90);
        }
        else if (option == "5") {
            startDate.setDate(endDate.getDate() - 180);
        }
        else if (option == "6") {
            startDate.setDate(endDate.getDate() - 360);
        }
        console.log(" start Date :" + startDate);
        console.log("endDate : " + endDate);
        for (let a of this.accountSummaryList) {
            let dt = new Date(a.transactionDate);
            if (dt >= startDate && dt <= endDate) {
                this.accountSummaryFilteredList.push(a);
            }
        }
    }
    onCreditSummary() {
        this.creditLimitManagementService.getCreditSummaryListForLoggedInUser()
            .subscribe((data) => {
            console.log("----" + this.user);
            this.creditSummaryList = data;
            //console.log(this.creditSummaryList)
            this.iteration = 'creditSummary';
        });
    }
    onRegion() {
        if (this.region != null) {
            this.customDate = false;
            this.range = -1;
            if (this.region != "All Region") {
                this.accountSummaryList = this.oldAccountSummary;
                this.newAccountSummary = new Array();
                this.state = null;
                this.city = null;
                this.office = null;
                this.customerId = null;
                this.stateList = new Array();
                this.stateList.push("All State");
                this.cityList = new Array();
                this.cityList.push("All City");
                this.officeList = new Array();
                this.officeList.push("All Office");
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                for (let ac of this.accountSummaryList) {
                    if (ac.user.region == this.region) {
                        this.newAccountSummary.push(ac);
                        this.uniqueUserIdList.push(ac.uniqueUserId);
                        if (ac.user.state != null) {
                            this.stateList.push(ac.user.state);
                        }
                        if (ac.user.city != null) {
                            this.cityList.push(ac.user.city);
                        }
                        if (ac.user.officeName != null) {
                            this.officeList.push(ac.user.officeName);
                        }
                    }
                }
                this.accountSummaryList = this.newAccountSummary;
                let unique1 = this.uniqueUserIdList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.uniqueUserIdList = unique1;
                unique1 = this.stateList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.stateList = unique1;
                unique1 = this.cityList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.cityList = unique1;
                unique1 = this.officeList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.officeList = unique1;
            }
            if (this.region == "All Region") {
                this.accountSummaryList = this.oldAccountSummary;
                this.state = null;
                this.city = null;
                this.office = null;
                this.customerId = null;
                this.stateList = new Array();
                this.stateList.push("All State");
                this.cityList = new Array();
                this.cityList.push("All City");
                this.officeList = new Array();
                this.officeList.push("All Office");
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                this.newAccountSummary = new Array();
                for (let ac of this.accountSummaryList) {
                    this.newAccountSummary.push(ac);
                }
                this.accountSummaryList = this.newAccountSummary;
            }
            this.accountSummaryFilteredList = new Array();
            this.accountSummaryFilteredList = this.accountSummaryList;
        }
    }
    onState() {
        if (this.state != null) {
            this.customDate = false;
            this.range = -1;
            if (this.state != "All State") {
                this.city = null;
                this.office = null;
                this.customerId = null;
                this.accountSummaryList = this.oldAccountSummary;
                this.newAccountSummary = new Array();
                this.cityList = new Array();
                this.cityList.push("All City");
                this.officeList = new Array();
                this.officeList.push("All Office");
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                for (let ac of this.accountSummaryList) {
                    if (ac.user.state == this.state) {
                        this.newAccountSummary.push(ac);
                        this.uniqueUserIdList.push(ac.user.uniqueUserId);
                        if (ac.user.city != null) {
                            this.cityList.push(ac.user.city);
                        }
                        if (ac.user.officeName != null) {
                            this.officeList.push(ac.user.officeName);
                        }
                    }
                }
                this.accountSummaryList = this.newAccountSummary;
                let unique1 = this.uniqueUserIdList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.uniqueUserIdList = unique1;
                unique1 = this.cityList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.cityList = unique1;
                unique1 = this.officeList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.officeList = unique1;
            }
            if (this.state == "All State" && this.region != "All Region") {
                this.accountSummaryList = this.oldAccountSummary;
                this.city = null;
                this.office = null;
                this.customerId = null;
                this.cityList = new Array();
                this.cityList.push("All City");
                this.officeList = new Array();
                this.officeList.push("All Office");
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                this.newAccountSummary = new Array();
                for (let ac of this.accountSummaryList) {
                    if (this.region == ac.user.region) {
                        this.newAccountSummary.push(ac);
                    }
                }
                this.accountSummaryList = this.newAccountSummary;
            }
            this.accountSummaryFilteredList = new Array();
            this.accountSummaryFilteredList = this.accountSummaryList;
        }
    }
    onCity() {
        if (this.city != null) {
            this.customDate = false;
            this.range = -1;
            if (this.city != "All City") {
                this.office = null;
                this.customerId = null;
                this.accountSummaryList = this.oldAccountSummary;
                this.newAccountSummary = new Array();
                this.officeList = new Array();
                this.officeList.push("All Office");
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                for (let ac of this.accountSummaryList) {
                    if (ac.user.city == this.city) {
                        this.newAccountSummary.push(ac);
                        this.uniqueUserIdList.push(ac.user.uniqueUserId);
                        if (ac.user.officeName != null) {
                            this.officeList.push(ac.user.officeName);
                        }
                    }
                }
                this.accountSummaryList = this.newAccountSummary;
                let unique1 = this.uniqueUserIdList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.uniqueUserIdList = unique1;
                unique1 = this.officeList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.officeList = unique1;
            }
            if (this.city == "All City" && this.region != "All Region" && this.state != "All State") {
                this.accountSummaryList = this.oldAccountSummary;
                this.office = null;
                this.customerId = null;
                this.officeList = new Array();
                this.officeList.push("All Office");
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                this.newAccountSummary = new Array();
                for (let ac of this.accountSummaryList) {
                    if (this.region == ac.user.region && ac.user.state == this.state) {
                        this.newAccountSummary.push(ac);
                    }
                }
                this.accountSummaryList = this.newAccountSummary;
            }
            this.accountSummaryFilteredList = new Array();
            this.accountSummaryFilteredList = this.accountSummaryList;
        }
    }
    onOffice() {
        if (this.office != null) {
            this.customDate = false;
            this.range = -1;
            if (this.office != "All Office") {
                this.customerId = null;
                this.accountSummaryList = this.oldAccountSummary;
                this.newAccountSummary = new Array();
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                for (let ac of this.accountSummaryList) {
                    if (ac.user.officeName == this.office) {
                        this.newAccountSummary.push(ac);
                        this.uniqueUserIdList.push(ac.user.uniqueUserId);
                    }
                }
                this.accountSummaryList = this.newAccountSummary;
                let unique1 = this.uniqueUserIdList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.uniqueUserIdList = unique1;
            }
            if (this.office == "All Office" && this.region != "All Region" && this.state != "All State" && this.city != "All Office") {
                this.accountSummaryList = this.oldAccountSummary;
                this.customerId = null;
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                this.newAccountSummary = new Array();
                for (let ac of this.accountSummaryList) {
                    if (this.region == ac.user.region && ac.user.state == this.state && ac.user.city == this.city) {
                        this.newAccountSummary.push(ac);
                    }
                }
                this.accountSummaryList = this.newAccountSummary;
            }
            this.accountSummaryFilteredList = new Array();
            this.accountSummaryFilteredList = this.accountSummaryList;
        }
    }
    onCustomerId() {
        if (this.customerId != null) {
            this.customDate = false;
            this.range = -1;
            if (this.customerId != "All Customers") {
                this.accountSummaryList = this.oldAccountSummary;
                this.newAccountSummary = new Array();
                for (let ac of this.accountSummaryList) {
                    if (ac.user.uniqueUserId == this.customerId) {
                        this.newAccountSummary.push(ac);
                    }
                }
                this.accountSummaryList = this.newAccountSummary;
            }
            if (this.customerId == "All Customers" && this.office != "All Office" && this.region != "All Region" && this.state != "All State" && this.city != "All Office") {
                this.accountSummaryList = this.oldAccountSummary;
                this.newAccountSummary = new Array();
                for (let ac of this.accountSummaryList) {
                    if (this.region == ac.user.region && ac.user.state == this.state && ac.user.city == this.city && ac.user.officeName == this.office) {
                        this.newAccountSummary.push(ac);
                    }
                }
                this.accountSummaryList = this.newAccountSummary;
            }
            this.accountSummaryFilteredList = new Array();
            this.accountSummaryFilteredList = this.accountSummaryList;
        }
    }
    onPendingTransation() {
        this.walletDetailService.getWalletDetailsForLoggedInUser()
            .subscribe((data) => {
            this.walletDetails = data;
            console.log(this.walletDetails);
            if (this.walletDetails.customerId != null) {
                this.paymentService.getAllPendingTransaction(this.walletDetails.customerId, this.walletDetails.organisationRefNo)
                    .subscribe((data) => {
                    this.pendingTopUpList = data;
                    this.iteration = 'PENDING_TRANSACTION';
                });
            }
            else if (this.walletDetails.organisationRefNo != null) {
                this.paymentService.getAllPendingTransaction(this.walletDetails.customerId, this.walletDetails.organisationRefNo)
                    .subscribe((data) => {
                    this.pendingTopUpList = data;
                    this.iteration = 'PENDING_TRANSACTION';
                });
            }
        });
    }
    onPendingTopup() {
        this.transaction = null;
        this.walletDetailService.getWalletDetailsForLoggedInUser()
            .subscribe((data) => {
            this.walletDetails = data;
            console.log(this.walletDetails);
            if (this.walletDetails.customerId != null) {
                this.paymentService.getAllPendingTopup(this.walletDetails.customerId, this.walletDetails.organisationRefNo)
                    .subscribe((data) => {
                    this.pendingTopUpList = data;
                    this.iteration = 'PENDING_TOPUP';
                });
            }
            else if (this.walletDetails.organisationRefNo != null) {
                this.paymentService.getAllPendingTopup(this.walletDetails.customerId, this.walletDetails.organisationRefNo)
                    .subscribe((data) => {
                    this.pendingTopUpList = data;
                    this.iteration = 'PENDING_TOPUP';
                });
            }
        });
    }
    onDelete() {
        if (this.transaction != null) {
            if (this.transaction.bankPayId != 0) {
                this.paymentService.deleteBankPaymentTopup(this.transaction.bankPayId)
                    .subscribe((data) => {
                    this.toastr.error('Transaction Deleted!!', 'Transaction', { timeOut: 3000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
                    this.transaction = null;
                    this.onPendingTopup();
                });
            }
            else if (this.transaction.chequePayId != 0) {
                this.paymentService.deleteChequePaymentTopup(this.transaction.chequePayId)
                    .subscribe((data) => {
                    this.toastr.error('Transaction Deleted!!', 'Transaction', { timeOut: 3000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
                    this.transaction = null;
                    this.onPendingTopup();
                });
            }
        }
        else {
            this.toastr.error('Select any Transaction', 'Transaction', { timeOut: 3000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
        }
    }
    onUpdateInfo() {
        if (this.transaction != null) {
            if (this.transaction.bankPayId != 0) {
                this.paymentService.setSource("onProceed()");
                this.paymentService.setBankPayId(this.transaction.bankPayId);
                this.paymentService.setIteration("Bank Transfer");
                this.router.navigate(['/userpay']);
            }
            else if (this.transaction.chequePayId != 0) {
                this.paymentService.setSource("onProceed()");
                this.paymentService.setChequePayId(this.transaction.chequePayId);
                this.paymentService.setIteration("Cheque Payment");
                this.router.navigate(['/userpay']);
            }
        }
        else {
            this.toastr.error('Select any Transaction', 'Transaction', { timeOut: 3000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
        }
    }
    onTopUpRupeesClick(value, template) {
        console.log(value);
        this.walletDetails.topupAmount = value;
        if (this.walletDetails.requiredAmount != 0) {
            if (this.walletDetails.requiredAmount <= this.walletDetails.topupAmount) {
                this.walletDetailService.setWalletDetails(this.walletDetails);
                this.router.navigate(['/userpay']);
            }
            else {
                // alert("Topup minimum amount")
                this.modalRef = this.modalService.show(template, Object.assign({}, { class: 'gray modal-800px' }));
                this.onTopupWallet();
            }
        }
        else {
            if (this.walletDetails.topupRefNo != null) {
                this.walletDetailService.setWalletDetails(this.walletDetails);
                this.router.navigate(['/userpay']);
            }
            else if (this.paymentService.getBankPayId() != 0) {
                console.log(this.paymentService.getBankPayId());
                this.paymentService.setSource("onProceed()");
                this.paymentService.setIteration("Bank Transfer");
                this.paymentService.setTopupAmount(this.walletDetails.topupAmount);
                this.walletDetails = null;
                this.router.navigate(['/userpay']);
            }
            else if (this.paymentService.getChequePayId() != 0) {
                this.paymentService.setSource("onProceed()");
                this.paymentService.setIteration("Cheque Payment");
                this.paymentService.setTopupAmount(this.walletDetails.topupAmount);
                this.walletDetails = null;
                this.router.navigate(['/userpay']);
            }
        }
    }
    filterList1(fromDate, toDate) {
        console.log(fromDate, toDate);
    }
};
WalletandrewardsComponent.ctorParameters = () => [
    { type: src_app_services_payment_service__WEBPACK_IMPORTED_MODULE_8__["PaymentService"] },
    { type: src_app_services_wallet_detail_service__WEBPACK_IMPORTED_MODULE_3__["WalletDetailService"] },
    { type: src_app_services_credit_limit_management_service__WEBPACK_IMPORTED_MODULE_4__["CreditLimitManagementService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_5__["ActivatedRoute"] },
    { type: src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_6__["UsermanagementService"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_9__["ToastrService"] },
    { type: src_app_services_order_management_service__WEBPACK_IMPORTED_MODULE_10__["OrderManagementService"] },
    { type: src_app_services_pre_order_management_service__WEBPACK_IMPORTED_MODULE_11__["PreOrderManagementService"] },
    { type: ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_12__["BsModalService"] }
];
WalletandrewardsComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-walletandrewards',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./walletandrewards.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/User/walletandrewards/walletandrewards.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./walletandrewards.component.css */ "./src/app/User/walletandrewards/walletandrewards.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_payment_service__WEBPACK_IMPORTED_MODULE_8__["PaymentService"],
        src_app_services_wallet_detail_service__WEBPACK_IMPORTED_MODULE_3__["WalletDetailService"],
        src_app_services_credit_limit_management_service__WEBPACK_IMPORTED_MODULE_4__["CreditLimitManagementService"],
        _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"],
        _angular_router__WEBPACK_IMPORTED_MODULE_5__["ActivatedRoute"],
        src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_6__["UsermanagementService"],
        ngx_toastr__WEBPACK_IMPORTED_MODULE_9__["ToastrService"],
        src_app_services_order_management_service__WEBPACK_IMPORTED_MODULE_10__["OrderManagementService"],
        src_app_services_pre_order_management_service__WEBPACK_IMPORTED_MODULE_11__["PreOrderManagementService"], ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_12__["BsModalService"]])
], WalletandrewardsComponent);



/***/ }),

/***/ "./src/app/api/service.service.ts":
/*!****************************************!*\
  !*** ./src/app/api/service.service.ts ***!
  \****************************************/
/*! exports provided: ServiceService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServiceService", function() { return ServiceService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");



let ServiceService = class ServiceService {
    constructor(http) {
        this.http = http;
        // local 
        //  private baseUrl = 'https://localhost:8080/'; 
        // Production level 
        this.baseUrl = 'http://52.66.237.253:8182/';
    }
    getbaseUrl() {
        return this.baseUrl;
    }
    isAuthorized() {
        return true;
    }
};
ServiceService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] }
];
ServiceService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"]])
], ServiceService);



/***/ }),

/***/ "./src/app/app-routing.module.ts":
/*!***************************************!*\
  !*** ./src/app/app-routing.module.ts ***!
  \***************************************/
/*! exports provided: AppRoutingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppRoutingModule", function() { return AppRoutingModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var _layouts_auth_layout_auth_layout_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./layouts/auth-layout/auth-layout.component */ "./src/app/layouts/auth-layout/auth-layout.component.ts");
/* harmony import */ var _components_onetimepassword_onetimepassword_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/onetimepassword/onetimepassword.component */ "./src/app/components/onetimepassword/onetimepassword.component.ts");
/* harmony import */ var _components_dashboard_dashboard_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/dashboard/dashboard.component */ "./src/app/components/dashboard/dashboard.component.ts");
/* harmony import */ var _components_usermanagment_usermanagment_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/usermanagment/usermanagment.component */ "./src/app/components/usermanagment/usermanagment.component.ts");
/* harmony import */ var _components_vendormanagement_vendormanagement_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/vendormanagement/vendormanagement.component */ "./src/app/components/vendormanagement/vendormanagement.component.ts");
/* harmony import */ var _components_warehousemanagement_warehousemanagement_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/warehousemanagement/warehousemanagement.component */ "./src/app/components/warehousemanagement/warehousemanagement.component.ts");
/* harmony import */ var _components_genratealert_genratealert_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./components/genratealert/genratealert.component */ "./src/app/components/genratealert/genratealert.component.ts");
/* harmony import */ var _components_reconciliation_reconciliation_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./components/reconciliation/reconciliation.component */ "./src/app/components/reconciliation/reconciliation.component.ts");
/* harmony import */ var _components_pricemanagement_pricemanagement_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./components/pricemanagement/pricemanagement.component */ "./src/app/components/pricemanagement/pricemanagement.component.ts");
/* harmony import */ var _components_offers_offers_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./components/offers/offers.component */ "./src/app/components/offers/offers.component.ts");
/* harmony import */ var _components_rewardmanagement_rewardmanagement_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./components/rewardmanagement/rewardmanagement.component */ "./src/app/components/rewardmanagement/rewardmanagement.component.ts");
/* harmony import */ var _components_vendorreward_vendorreward_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./components/vendorreward/vendorreward.component */ "./src/app/components/vendorreward/vendorreward.component.ts");
/* harmony import */ var _components_viewgeneratedalerts_viewgeneratedalerts_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./components/viewgeneratedalerts/viewgeneratedalerts.component */ "./src/app/components/viewgeneratedalerts/viewgeneratedalerts.component.ts");
/* harmony import */ var _components_viewallactivealerts_viewallactivealerts_component__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./components/viewallactivealerts/viewallactivealerts.component */ "./src/app/components/viewallactivealerts/viewallactivealerts.component.ts");
/* harmony import */ var _components_showeventslist_showeventslist_component__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./components/showeventslist/showeventslist.component */ "./src/app/components/showeventslist/showeventslist.component.ts");
/* harmony import */ var _components_generatealertevent_generatealertevent_component__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./components/generatealertevent/generatealertevent.component */ "./src/app/components/generatealertevent/generatealertevent.component.ts");
/* harmony import */ var _vendoruser_payment_management_payment_management_component__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./vendoruser/payment-management/payment-management.component */ "./src/app/vendoruser/payment-management/payment-management.component.ts");
/* harmony import */ var _vendoruser_reconciliation_vendoruser_reconciliation_vendoruser_component__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./vendoruser/reconciliation-vendoruser/reconciliation-vendoruser.component */ "./src/app/vendoruser/reconciliation-vendoruser/reconciliation-vendoruser.component.ts");
/* harmony import */ var _vendoruser_reward_managment_reward_managment_component__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./vendoruser/reward-managment/reward-managment.component */ "./src/app/vendoruser/reward-managment/reward-managment.component.ts");
/* harmony import */ var _vendoruser_redeemreward_redeemreward_component__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./vendoruser/redeemreward/redeemreward.component */ "./src/app/vendoruser/redeemreward/redeemreward.component.ts");
/* harmony import */ var _components_editalert_editalert_component__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./components/editalert/editalert.component */ "./src/app/components/editalert/editalert.component.ts");
/* harmony import */ var _commoncomponents_registeruser_registeruser_component__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./commoncomponents/registeruser/registeruser.component */ "./src/app/commoncomponents/registeruser/registeruser.component.ts");
/* harmony import */ var _vendoruser_rewardpointhistory_rewardpointhistory_component__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./vendoruser/rewardpointhistory/rewardpointhistory.component */ "./src/app/vendoruser/rewardpointhistory/rewardpointhistory.component.ts");
/* harmony import */ var _vendoruser_reportgeneration_reportgeneration_component__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./vendoruser/reportgeneration/reportgeneration.component */ "./src/app/vendoruser/reportgeneration/reportgeneration.component.ts");
/* harmony import */ var _vendoruser_viewallorders_viewallorders_component__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./vendoruser/viewallorders/viewallorders.component */ "./src/app/vendoruser/viewallorders/viewallorders.component.ts");
/* harmony import */ var _vendoruser_proceed_proceed_component__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./vendoruser/proceed/proceed.component */ "./src/app/vendoruser/proceed/proceed.component.ts");
/* harmony import */ var _vendoruser_orderdetails_orderdetails_component__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./vendoruser/orderdetails/orderdetails.component */ "./src/app/vendoruser/orderdetails/orderdetails.component.ts");
/* harmony import */ var _warehouse_user_orderprocessing_orderprocessing_component__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./warehouse-user/orderprocessing/orderprocessing.component */ "./src/app/warehouse-user/orderprocessing/orderprocessing.component.ts");
/* harmony import */ var _warehouse_user_order_details_order_details_component__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./warehouse-user/order-details/order-details.component */ "./src/app/warehouse-user/order-details/order-details.component.ts");
/* harmony import */ var _components_content_management_content_management_component__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./components/content-management/content-management.component */ "./src/app/components/content-management/content-management.component.ts");
/* harmony import */ var _warehouse_user_reports_reports_component__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./warehouse-user/reports/reports.component */ "./src/app/warehouse-user/reports/reports.component.ts");
/* harmony import */ var _warehouse_user_process_order_process_order_component__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./warehouse-user/process-order/process-order.component */ "./src/app/warehouse-user/process-order/process-order.component.ts");
/* harmony import */ var _warehouse_user_reconcilation_warehouse_reconcilation_warehouse_component__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./warehouse-user/reconcilation-warehouse/reconcilation-warehouse.component */ "./src/app/warehouse-user/reconcilation-warehouse/reconcilation-warehouse.component.ts");
/* harmony import */ var _User_preorder_preorder_component__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./User/preorder/preorder.component */ "./src/app/User/preorder/preorder.component.ts");
/* harmony import */ var _User_paymentgateway_paymentgateway_component__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./User/paymentgateway/paymentgateway.component */ "./src/app/User/paymentgateway/paymentgateway.component.ts");
/* harmony import */ var _User_top_up_wallet_top_up_wallet_component__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./User/top-up-wallet/top-up-wallet.component */ "./src/app/User/top-up-wallet/top-up-wallet.component.ts");
/* harmony import */ var _User_walletandrewards_walletandrewards_component__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./User/walletandrewards/walletandrewards.component */ "./src/app/User/walletandrewards/walletandrewards.component.ts");
/* harmony import */ var _User_rewaradmanagementuser_rewaradmanagementuser_component__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./User/rewaradmanagementuser/rewaradmanagementuser.component */ "./src/app/User/rewaradmanagementuser/rewaradmanagementuser.component.ts");
/* harmony import */ var _User_redeemmangementuser_redeemmangementuser_component__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./User/redeemmangementuser/redeemmangementuser.component */ "./src/app/User/redeemmangementuser/redeemmangementuser.component.ts");
/* harmony import */ var _User_rewardpointhistoryuser_rewardpointhistoryuser_component__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./User/rewardpointhistoryuser/rewardpointhistoryuser.component */ "./src/app/User/rewardpointhistoryuser/rewardpointhistoryuser.component.ts");
/* harmony import */ var _User_orderuser_orderuser_component__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./User/orderuser/orderuser.component */ "./src/app/User/orderuser/orderuser.component.ts");
/* harmony import */ var _User_createorder_user_createorder_user_component__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./User/createorder-user/createorder-user.component */ "./src/app/User/createorder-user/createorder-user.component.ts");
/* harmony import */ var _User_currentwalletbalance_currentwalletbalance_component__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./User/currentwalletbalance/currentwalletbalance.component */ "./src/app/User/currentwalletbalance/currentwalletbalance.component.ts");
/* harmony import */ var _User_offersuser_offersuser_component__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./User/offersuser/offersuser.component */ "./src/app/User/offersuser/offersuser.component.ts");
/* harmony import */ var _components_editprofile_editprofile_component__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./components/editprofile/editprofile.component */ "./src/app/components/editprofile/editprofile.component.ts");
/* harmony import */ var _components_cooperate_cooperate_component__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./components/cooperate/cooperate.component */ "./src/app/components/cooperate/cooperate.component.ts");
/* harmony import */ var _User_userpaymentgateway_userpaymentgateway_component__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./User/userpaymentgateway/userpaymentgateway.component */ "./src/app/User/userpaymentgateway/userpaymentgateway.component.ts");
/* harmony import */ var _components_amdinpaymentgate_amdinpaymentgate_component__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./components/amdinpaymentgate/amdinpaymentgate.component */ "./src/app/components/amdinpaymentgate/amdinpaymentgate.component.ts");
/* harmony import */ var _components_notification_notification_component__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./components/notification/notification.component */ "./src/app/components/notification/notification.component.ts");
/* harmony import */ var _components_forgotpassword_forgotpassword_component__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./components/forgotpassword/forgotpassword.component */ "./src/app/components/forgotpassword/forgotpassword.component.ts");
/* harmony import */ var _vendoruser_vendorpayment_vendorpayment_component__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./vendoruser/vendorpayment/vendorpayment.component */ "./src/app/vendoruser/vendorpayment/vendorpayment.component.ts");
/* harmony import */ var _components_adminpayment_adminpayment_component__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./components/adminpayment/adminpayment.component */ "./src/app/components/adminpayment/adminpayment.component.ts");























































const routes = [
    {
        path: '',
        component: _layouts_auth_layout_auth_layout_component__WEBPACK_IMPORTED_MODULE_3__["AuthLayoutComponent"],
        children: [{
                path: '',
                loadChildren: 'src/app/moduels/auth/auth.module#AuthModule',
            }]
    },
    {
        path: 'login',
        component: _layouts_auth_layout_auth_layout_component__WEBPACK_IMPORTED_MODULE_3__["AuthLayoutComponent"],
        children: [{
                path: '',
                loadChildren: 'src/app/moduels/auth/auth.module#AuthModule',
            }]
    },
    {
        path: 'forgotpassword',
        component: _components_forgotpassword_forgotpassword_component__WEBPACK_IMPORTED_MODULE_52__["ForgotpasswordComponent"]
    },
    {
        path: 'onetime',
        component: _components_onetimepassword_onetimepassword_component__WEBPACK_IMPORTED_MODULE_4__["OnetimepasswordComponent"]
    },
    {
        path: 'editprofile',
        component: _components_editprofile_editprofile_component__WEBPACK_IMPORTED_MODULE_47__["EditprofileComponent"]
    },
    {
        path: 'dashboard',
        component: _components_dashboard_dashboard_component__WEBPACK_IMPORTED_MODULE_5__["DashboardComponent"]
    },
    {
        path: 'user',
        component: _components_usermanagment_usermanagment_component__WEBPACK_IMPORTED_MODULE_6__["UsermanagmentComponent"]
    },
    {
        path: 'vendor',
        component: _components_vendormanagement_vendormanagement_component__WEBPACK_IMPORTED_MODULE_7__["VendormanagementComponent"]
    },
    {
        path: 'warehouse',
        component: _components_warehousemanagement_warehousemanagement_component__WEBPACK_IMPORTED_MODULE_8__["WarehousemanagementComponent"]
    },
    {
        path: 'co-operate',
        component: _components_cooperate_cooperate_component__WEBPACK_IMPORTED_MODULE_48__["CooperateComponent"]
    },
    {
        path: 'content',
        component: _components_content_management_content_management_component__WEBPACK_IMPORTED_MODULE_32__["ContentManagementComponent"]
    },
    {
        path: 'genAlert',
        component: _components_genratealert_genratealert_component__WEBPACK_IMPORTED_MODULE_9__["GenratealertComponent"]
    },
    {
        path: 'editAlert',
        component: _components_editalert_editalert_component__WEBPACK_IMPORTED_MODULE_23__["EditalertComponent"]
    },
    {
        path: 'alert',
        component: _components_viewgeneratedalerts_viewgeneratedalerts_component__WEBPACK_IMPORTED_MODULE_15__["ViewgeneratedalertsComponent"]
    },
    {
        path: 'viewAllAlerts',
        component: _components_viewallactivealerts_viewallactivealerts_component__WEBPACK_IMPORTED_MODULE_16__["ViewallactivealertsComponent"]
    },
    {
        path: 'showEventsList',
        component: _components_showeventslist_showeventslist_component__WEBPACK_IMPORTED_MODULE_17__["ShoweventslistComponent"]
    },
    {
        path: 'generateAlertEvent',
        component: _components_generatealertevent_generatealertevent_component__WEBPACK_IMPORTED_MODULE_18__["GeneratealerteventComponent"]
    },
    {
        path: 'registerUser',
        component: _commoncomponents_registeruser_registeruser_component__WEBPACK_IMPORTED_MODULE_24__["RegisteruserComponent"]
    },
    {
        path: 'reconil',
        component: _components_reconciliation_reconciliation_component__WEBPACK_IMPORTED_MODULE_10__["ReconciliationComponent"]
    },
    {
        path: 'price',
        component: _components_pricemanagement_pricemanagement_component__WEBPACK_IMPORTED_MODULE_11__["PricemanagementComponent"]
    },
    {
        path: 'offer',
        component: _components_offers_offers_component__WEBPACK_IMPORTED_MODULE_12__["OffersComponent"]
    },
    {
        path: 'rewardmang',
        component: _components_rewardmanagement_rewardmanagement_component__WEBPACK_IMPORTED_MODULE_13__["RewardmanagementComponent"]
    },
    {
        path: 'vendorreward',
        component: _components_vendorreward_vendorreward_component__WEBPACK_IMPORTED_MODULE_14__["VendorrewardComponent"]
    },
    {
        path: 'paymanage',
        component: _vendoruser_payment_management_payment_management_component__WEBPACK_IMPORTED_MODULE_19__["PaymentManagementComponent"]
    },
    {
        path: 're',
        component: _vendoruser_reconciliation_vendoruser_reconciliation_vendoruser_component__WEBPACK_IMPORTED_MODULE_20__["ReconciliationVendoruserComponent"]
    },
    {
        path: 'rewardvendor',
        component: _vendoruser_reward_managment_reward_managment_component__WEBPACK_IMPORTED_MODULE_21__["RewardManagmentComponent"]
    },
    {
        path: 'redeemreward',
        component: _vendoruser_redeemreward_redeemreward_component__WEBPACK_IMPORTED_MODULE_22__["RedeemrewardComponent"]
    },
    {
        path: 'rewardpoint',
        component: _vendoruser_rewardpointhistory_rewardpointhistory_component__WEBPACK_IMPORTED_MODULE_25__["RewardpointhistoryComponent"]
    },
    {
        path: 'reportgen',
        component: _vendoruser_reportgeneration_reportgeneration_component__WEBPACK_IMPORTED_MODULE_26__["ReportgenerationComponent"]
    },
    {
        path: 'vieworder',
        component: _vendoruser_viewallorders_viewallorders_component__WEBPACK_IMPORTED_MODULE_27__["ViewallordersComponent"]
    },
    {
        path: 'proceed',
        component: _vendoruser_proceed_proceed_component__WEBPACK_IMPORTED_MODULE_28__["ProceedComponent"]
    },
    {
        path: 'order',
        component: _vendoruser_orderdetails_orderdetails_component__WEBPACK_IMPORTED_MODULE_29__["OrderdetailsComponent"]
    },
    {
        path: 'processorder',
        component: _warehouse_user_orderprocessing_orderprocessing_component__WEBPACK_IMPORTED_MODULE_30__["OrderprocessingComponent"]
    },
    {
        path: 'order-details',
        component: _warehouse_user_order_details_order_details_component__WEBPACK_IMPORTED_MODULE_31__["OrderDetailsComponent"]
    },
    {
        path: 'ware-report',
        component: _warehouse_user_reports_reports_component__WEBPACK_IMPORTED_MODULE_33__["ReportsComponent"]
    },
    {
        path: 'process-order',
        component: _warehouse_user_process_order_process_order_component__WEBPACK_IMPORTED_MODULE_34__["ProcessOrderComponent"]
    },
    {
        path: 'ware-reconcil',
        component: _warehouse_user_reconcilation_warehouse_reconcilation_warehouse_component__WEBPACK_IMPORTED_MODULE_35__["ReconcilationWarehouseComponent"]
    },
    {
        path: 'pre-order',
        component: _User_preorder_preorder_component__WEBPACK_IMPORTED_MODULE_36__["PreorderComponent"]
    },
    {
        path: 'pay',
        component: _User_paymentgateway_paymentgateway_component__WEBPACK_IMPORTED_MODULE_37__["PaymentgatewayComponent"]
    },
    {
        path: 'topup',
        component: _User_top_up_wallet_top_up_wallet_component__WEBPACK_IMPORTED_MODULE_38__["TopUpWalletComponent"]
    },
    {
        path: 'wallet',
        component: _User_walletandrewards_walletandrewards_component__WEBPACK_IMPORTED_MODULE_39__["WalletandrewardsComponent"]
    },
    {
        path: 'rewarduser',
        component: _User_rewaradmanagementuser_rewaradmanagementuser_component__WEBPACK_IMPORTED_MODULE_40__["RewaradmanagementuserComponent"]
    },
    {
        path: 'redeemuser',
        component: _User_redeemmangementuser_redeemmangementuser_component__WEBPACK_IMPORTED_MODULE_41__["RedeemmangementuserComponent"]
    },
    {
        path: 'historyuser',
        component: _User_rewardpointhistoryuser_rewardpointhistoryuser_component__WEBPACK_IMPORTED_MODULE_42__["RewardpointhistoryuserComponent"]
    },
    {
        path: 'orderuser',
        component: _User_orderuser_orderuser_component__WEBPACK_IMPORTED_MODULE_43__["OrderuserComponent"]
    },
    {
        path: 'create',
        component: _User_createorder_user_createorder_user_component__WEBPACK_IMPORTED_MODULE_44__["CreateorderUserComponent"]
    },
    {
        path: 'walletbalance',
        component: _User_currentwalletbalance_currentwalletbalance_component__WEBPACK_IMPORTED_MODULE_45__["CurrentwalletbalanceComponent"]
    },
    {
        path: 'offeruser',
        component: _User_offersuser_offersuser_component__WEBPACK_IMPORTED_MODULE_46__["OffersuserComponent"]
    },
    {
        path: 'userpay',
        component: _User_userpaymentgateway_userpaymentgateway_component__WEBPACK_IMPORTED_MODULE_49__["UserpaymentgatewayComponent"]
    },
    {
        path: 'adminpay',
        component: _components_amdinpaymentgate_amdinpaymentgate_component__WEBPACK_IMPORTED_MODULE_50__["AmdinpaymentgateComponent"]
    },
    {
        path: 'notification',
        component: _components_notification_notification_component__WEBPACK_IMPORTED_MODULE_51__["NotificationComponent"]
    },
    {
        path: 'adminVendorpayment',
        component: _components_adminpayment_adminpayment_component__WEBPACK_IMPORTED_MODULE_54__["AdminpaymentComponent"]
    },
    {
        path: 'vendorpayment',
        component: _vendoruser_vendorpayment_vendorpayment_component__WEBPACK_IMPORTED_MODULE_53__["VendorpaymentComponent"]
    }
];
let AppRoutingModule = class AppRoutingModule {
};
AppRoutingModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"].forRoot(routes)],
        exports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"]]
    })
], AppRoutingModule);



/***/ }),

/***/ "./src/app/app.component.css":
/*!***********************************!*\
  !*** ./src/app/app.component.css ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n\r\n:host {\r\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\r\n    font-size: 14px;\r\n    color: #333;\r\n    box-sizing: border-box;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }\r\n\r\n  h1,\r\n  h2,\r\n  h3,\r\n  h4,\r\n  h5,\r\n  h6 {\r\n    margin: 8px 0;\r\n  }\r\n\r\n  p {\r\n    margin: 0;\r\n  }\r\n\r\n  .spacer {\r\n    -webkit-box-flex: 1;\r\n            flex: 1;\r\n  }\r\n\r\n  .toolbar {\r\n    height: 60px;\r\n    margin: -8px;\r\n    display: -webkit-box;\r\n    display: flex;\r\n    -webkit-box-align: center;\r\n            align-items: center;\r\n    background-color: #1976d2;\r\n    color: white;\r\n    font-weight: 600;\r\n  }\r\n\r\n  .toolbar img {\r\n    margin: 0 16px;\r\n  }\r\n\r\n  .toolbar #twitter-logo {\r\n    height: 40px;\r\n    margin: 0 16px;\r\n  }\r\n\r\n  .toolbar #twitter-logo:hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  .content {\r\n    display: -webkit-box;\r\n    display: flex;\r\n    margin: 32px auto;\r\n    padding: 0 16px;\r\n    max-width: 960px;\r\n    -webkit-box-orient: vertical;\r\n    -webkit-box-direction: normal;\r\n            flex-direction: column;\r\n    -webkit-box-align: center;\r\n            align-items: center;\r\n  }\r\n\r\n  svg.material-icons {\r\n    height: 24px;\r\n    width: auto;\r\n  }\r\n\r\n  svg.material-icons:not(:last-child) {\r\n    margin-right: 8px;\r\n  }\r\n\r\n  .card svg.material-icons path {\r\n    fill: #888;\r\n  }\r\n\r\n  .card-container {\r\n    display: -webkit-box;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    -webkit-box-pack: center;\r\n            justify-content: center;\r\n    margin-top: 16px;\r\n  }\r\n\r\n  .card {\r\n    border-radius: 4px;\r\n    border: 1px solid #eee;\r\n    background-color: #fafafa;\r\n    height: 40px;\r\n    width: 200px;\r\n    margin: 0 8px 16px;\r\n    padding: 16px;\r\n    display: -webkit-box;\r\n    display: flex;\r\n    -webkit-box-orient: horizontal;\r\n    -webkit-box-direction: normal;\r\n            flex-direction: row;\r\n    -webkit-box-pack: center;\r\n            justify-content: center;\r\n    -webkit-box-align: center;\r\n            align-items: center;\r\n    -webkit-transition: all 0.2s ease-in-out;\r\n    transition: all 0.2s ease-in-out;\r\n    line-height: 24px;\r\n  }\r\n\r\n  .card-container .card:not(:last-child) {\r\n    margin-right: 0;\r\n  }\r\n\r\n  .card.card-small {\r\n    height: 16px;\r\n    width: 168px;\r\n  }\r\n\r\n  .card-container .card:not(.highlight-card) {\r\n    cursor: pointer;\r\n  }\r\n\r\n  .card-container .card:not(.highlight-card):hover {\r\n    -webkit-transform: translateY(-3px);\r\n            transform: translateY(-3px);\r\n    box-shadow: 0 4px 17px rgba(black, 0.35);\r\n  }\r\n\r\n  .card-container .card:not(.highlight-card):hover .material-icons path {\r\n    fill: rgb(105, 103, 103);\r\n  }\r\n\r\n  .card.highlight-card {\r\n    background-color: #1976d2;\r\n    color: white;\r\n    font-weight: 600;\r\n    border: none;\r\n    width: auto;\r\n    min-width: 30%;\r\n    position: relative;\r\n  }\r\n\r\n  .card.card.highlight-card span {\r\n    margin-left: 60px;\r\n  }\r\n\r\n  svg#rocket {\r\n    width: 80px;\r\n    position: absolute;\r\n    left: -10px;\r\n    top: -24px;\r\n  }\r\n\r\n  svg#rocket-smoke {\r\n    height: 100vh;\r\n    position: absolute;\r\n    top: 10px;\r\n    right: 180px;\r\n    z-index: -10;\r\n  }\r\n\r\n  a,\r\n  a:visited,\r\n  a:hover {\r\n    color: #1976d2;\r\n    text-decoration: none;\r\n  }\r\n\r\n  a:hover {\r\n    color: #125699;\r\n  }\r\n\r\n  .terminal {\r\n    position: relative;\r\n    width: 80%;\r\n    max-width: 600px;\r\n    border-radius: 6px;\r\n    padding-top: 45px;\r\n    margin-top: 8px;\r\n    overflow: hidden;\r\n    background-color: rgb(15, 15, 16);\r\n  }\r\n\r\n  .terminal::before {\r\n    content: \"\\2022 \\2022 \\2022\";\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    height: 4px;\r\n    background: rgb(58, 58, 58);\r\n    color: #c2c3c4;\r\n    width: 100%;\r\n    font-size: 2rem;\r\n    line-height: 0;\r\n    padding: 14px 0;\r\n    text-indent: 4px;\r\n  }\r\n\r\n  .terminal pre {\r\n    font-family: SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace;\r\n    color: white;\r\n    padding: 0 1rem 1rem;\r\n    margin: 0;\r\n  }\r\n\r\n  .circle-link {\r\n    height: 40px;\r\n    width: 40px;\r\n    border-radius: 40px;\r\n    margin: 8px;\r\n    background-color: white;\r\n    border: 1px solid #eeeeee;\r\n    display: -webkit-box;\r\n    display: flex;\r\n    -webkit-box-pack: center;\r\n            justify-content: center;\r\n    -webkit-box-align: center;\r\n            align-items: center;\r\n    cursor: pointer;\r\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\r\n    -webkit-transition: 1s ease-out;\r\n    transition: 1s ease-out;\r\n  }\r\n\r\n  .circle-link:hover {\r\n    -webkit-transform: translateY(-0.25rem);\r\n            transform: translateY(-0.25rem);\r\n    box-shadow: 0px 3px 15px rgba(0, 0, 0, 0.2);\r\n  }\r\n\r\n  footer {\r\n    margin-top: 8px;\r\n    display: -webkit-box;\r\n    display: flex;\r\n    -webkit-box-align: center;\r\n            align-items: center;\r\n    line-height: 20px;\r\n  }\r\n\r\n  footer a {\r\n    display: -webkit-box;\r\n    display: flex;\r\n    -webkit-box-align: center;\r\n            align-items: center;\r\n  }\r\n\r\n  .github-star-badge {\r\n    color: #24292e;\r\n    display: -webkit-box;\r\n    display: flex;\r\n    -webkit-box-align: center;\r\n            align-items: center;\r\n    font-size: 12px;\r\n    padding: 3px 10px;\r\n    border: 1px solid rgba(27,31,35,.2);\r\n    border-radius: 3px;\r\n    background-image: -webkit-gradient(linear,left top, left bottom,from(#fafbfc),color-stop(90%, #eff3f6));\r\n    background-image: linear-gradient(-180deg,#fafbfc,#eff3f6 90%);\r\n    margin-left: 4px;\r\n    font-weight: 600;\r\n    font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol;\r\n  }\r\n\r\n  .github-star-badge:hover {\r\n    background-image: -webkit-gradient(linear,left top, left bottom,from(#f0f3f6),color-stop(90%, #e6ebf1));\r\n    background-image: linear-gradient(-180deg,#f0f3f6,#e6ebf1 90%);\r\n    border-color: rgba(27,31,35,.35);\r\n    background-position: -.5em;\r\n  }\r\n\r\n  .github-star-badge .material-icons {\r\n    height: 16px;\r\n    width: 16px;\r\n    margin-right: 4px;\r\n  }\r\n\r\n  svg#clouds {\r\n    position: fixed;\r\n    bottom: -160px;\r\n    left: -230px;\r\n    z-index: -10;\r\n    width: 1920px;\r\n  }\r\n\r\n  /* Responsive Styles */\r\n\r\n  @media screen and (max-width: 767px) {\r\n\r\n    .card-container > *:not(.circle-link) ,\r\n    .terminal {\r\n      width: 100%;\r\n    }\r\n\r\n    .card:not(.highlight-card) {\r\n      height: 16px;\r\n      margin: 8px 0;\r\n    }\r\n\r\n    .card.highlight-card span {\r\n      margin-left: 72px;\r\n    }\r\n\r\n    svg#rocket-smoke {\r\n      right: 120px;\r\n      -webkit-transform: rotate(-5deg);\r\n              transform: rotate(-5deg);\r\n    }\r\n  }\r\n\r\n  @media screen and (max-width: 575px) {\r\n    svg#rocket-smoke {\r\n      display: none;\r\n      visibility: hidden;\r\n    }\r\n  }\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQTtJQUNJLDBKQUEwSjtJQUMxSixlQUFlO0lBQ2YsV0FBVztJQUNYLHNCQUFzQjtJQUN0QixtQ0FBbUM7SUFDbkMsa0NBQWtDO0VBQ3BDOztFQUVBOzs7Ozs7SUFNRSxhQUFhO0VBQ2Y7O0VBRUE7SUFDRSxTQUFTO0VBQ1g7O0VBRUE7SUFDRSxtQkFBTztZQUFQLE9BQU87RUFDVDs7RUFFQTtJQUNFLFlBQVk7SUFDWixZQUFZO0lBQ1osb0JBQWE7SUFBYixhQUFhO0lBQ2IseUJBQW1CO1lBQW5CLG1CQUFtQjtJQUNuQix5QkFBeUI7SUFDekIsWUFBWTtJQUNaLGdCQUFnQjtFQUNsQjs7RUFFQTtJQUNFLGNBQWM7RUFDaEI7O0VBRUE7SUFDRSxZQUFZO0lBQ1osY0FBYztFQUNoQjs7RUFFQTtJQUNFLFlBQVk7RUFDZDs7RUFFQTtJQUNFLG9CQUFhO0lBQWIsYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixlQUFlO0lBQ2YsZ0JBQWdCO0lBQ2hCLDRCQUFzQjtJQUF0Qiw2QkFBc0I7WUFBdEIsc0JBQXNCO0lBQ3RCLHlCQUFtQjtZQUFuQixtQkFBbUI7RUFDckI7O0VBRUE7SUFDRSxZQUFZO0lBQ1osV0FBVztFQUNiOztFQUVBO0lBQ0UsaUJBQWlCO0VBQ25COztFQUVBO0lBQ0UsVUFBVTtFQUNaOztFQUVBO0lBQ0Usb0JBQWE7SUFBYixhQUFhO0lBQ2IsZUFBZTtJQUNmLHdCQUF1QjtZQUF2Qix1QkFBdUI7SUFDdkIsZ0JBQWdCO0VBQ2xCOztFQUVBO0lBQ0Usa0JBQWtCO0lBQ2xCLHNCQUFzQjtJQUN0Qix5QkFBeUI7SUFDekIsWUFBWTtJQUNaLFlBQVk7SUFDWixrQkFBa0I7SUFDbEIsYUFBYTtJQUNiLG9CQUFhO0lBQWIsYUFBYTtJQUNiLDhCQUFtQjtJQUFuQiw2QkFBbUI7WUFBbkIsbUJBQW1CO0lBQ25CLHdCQUF1QjtZQUF2Qix1QkFBdUI7SUFDdkIseUJBQW1CO1lBQW5CLG1CQUFtQjtJQUNuQix3Q0FBZ0M7SUFBaEMsZ0NBQWdDO0lBQ2hDLGlCQUFpQjtFQUNuQjs7RUFFQTtJQUNFLGVBQWU7RUFDakI7O0VBRUE7SUFDRSxZQUFZO0lBQ1osWUFBWTtFQUNkOztFQUVBO0lBQ0UsZUFBZTtFQUNqQjs7RUFFQTtJQUNFLG1DQUEyQjtZQUEzQiwyQkFBMkI7SUFDM0Isd0NBQXdDO0VBQzFDOztFQUVBO0lBQ0Usd0JBQXdCO0VBQzFCOztFQUVBO0lBQ0UseUJBQXlCO0lBQ3pCLFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIsWUFBWTtJQUNaLFdBQVc7SUFDWCxjQUFjO0lBQ2Qsa0JBQWtCO0VBQ3BCOztFQUVBO0lBQ0UsaUJBQWlCO0VBQ25COztFQUVBO0lBQ0UsV0FBVztJQUNYLGtCQUFrQjtJQUNsQixXQUFXO0lBQ1gsVUFBVTtFQUNaOztFQUVBO0lBQ0UsYUFBYTtJQUNiLGtCQUFrQjtJQUNsQixTQUFTO0lBQ1QsWUFBWTtJQUNaLFlBQVk7RUFDZDs7RUFFQTs7O0lBR0UsY0FBYztJQUNkLHFCQUFxQjtFQUN2Qjs7RUFFQTtJQUNFLGNBQWM7RUFDaEI7O0VBRUE7SUFDRSxrQkFBa0I7SUFDbEIsVUFBVTtJQUNWLGdCQUFnQjtJQUNoQixrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCLGVBQWU7SUFDZixnQkFBZ0I7SUFDaEIsaUNBQWlDO0VBQ25DOztFQUVBO0lBQ0UsNEJBQTRCO0lBQzVCLGtCQUFrQjtJQUNsQixNQUFNO0lBQ04sT0FBTztJQUNQLFdBQVc7SUFDWCwyQkFBMkI7SUFDM0IsY0FBYztJQUNkLFdBQVc7SUFDWCxlQUFlO0lBQ2YsY0FBYztJQUNkLGVBQWU7SUFDZixnQkFBZ0I7RUFDbEI7O0VBRUE7SUFDRSxvRUFBb0U7SUFDcEUsWUFBWTtJQUNaLG9CQUFvQjtJQUNwQixTQUFTO0VBQ1g7O0VBRUE7SUFDRSxZQUFZO0lBQ1osV0FBVztJQUNYLG1CQUFtQjtJQUNuQixXQUFXO0lBQ1gsdUJBQXVCO0lBQ3ZCLHlCQUF5QjtJQUN6QixvQkFBYTtJQUFiLGFBQWE7SUFDYix3QkFBdUI7WUFBdkIsdUJBQXVCO0lBQ3ZCLHlCQUFtQjtZQUFuQixtQkFBbUI7SUFDbkIsZUFBZTtJQUNmLHdFQUF3RTtJQUN4RSwrQkFBdUI7SUFBdkIsdUJBQXVCO0VBQ3pCOztFQUVBO0lBQ0UsdUNBQStCO1lBQS9CLCtCQUErQjtJQUMvQiwyQ0FBMkM7RUFDN0M7O0VBRUE7SUFDRSxlQUFlO0lBQ2Ysb0JBQWE7SUFBYixhQUFhO0lBQ2IseUJBQW1CO1lBQW5CLG1CQUFtQjtJQUNuQixpQkFBaUI7RUFDbkI7O0VBRUE7SUFDRSxvQkFBYTtJQUFiLGFBQWE7SUFDYix5QkFBbUI7WUFBbkIsbUJBQW1CO0VBQ3JCOztFQUVBO0lBQ0UsY0FBYztJQUNkLG9CQUFhO0lBQWIsYUFBYTtJQUNiLHlCQUFtQjtZQUFuQixtQkFBbUI7SUFDbkIsZUFBZTtJQUNmLGlCQUFpQjtJQUNqQixtQ0FBbUM7SUFDbkMsa0JBQWtCO0lBQ2xCLHVHQUE4RDtJQUE5RCw4REFBOEQ7SUFDOUQsZ0JBQWdCO0lBQ2hCLGdCQUFnQjtJQUNoQixrSUFBa0k7RUFDcEk7O0VBRUE7SUFDRSx1R0FBOEQ7SUFBOUQsOERBQThEO0lBQzlELGdDQUFnQztJQUNoQywwQkFBMEI7RUFDNUI7O0VBRUE7SUFDRSxZQUFZO0lBQ1osV0FBVztJQUNYLGlCQUFpQjtFQUNuQjs7RUFFQTtJQUNFLGVBQWU7SUFDZixjQUFjO0lBQ2QsWUFBWTtJQUNaLFlBQVk7SUFDWixhQUFhO0VBQ2Y7O0VBR0Esc0JBQXNCOztFQUN0Qjs7SUFFRTs7TUFFRSxXQUFXO0lBQ2I7O0lBRUE7TUFDRSxZQUFZO01BQ1osYUFBYTtJQUNmOztJQUVBO01BQ0UsaUJBQWlCO0lBQ25COztJQUVBO01BQ0UsWUFBWTtNQUNaLGdDQUF3QjtjQUF4Qix3QkFBd0I7SUFDMUI7RUFDRjs7RUFFQTtJQUNFO01BQ0UsYUFBYTtNQUNiLGtCQUFrQjtJQUNwQjtFQUNGIiwiZmlsZSI6InNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbjpob3N0IHtcclxuICAgIGZvbnQtZmFtaWx5OiAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsIFwiU2Vnb2UgVUlcIiwgUm9ib3RvLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmLCBcIkFwcGxlIENvbG9yIEVtb2ppXCIsIFwiU2Vnb2UgVUkgRW1vamlcIiwgXCJTZWdvZSBVSSBTeW1ib2xcIjtcclxuICAgIGZvbnQtc2l6ZTogMTRweDtcclxuICAgIGNvbG9yOiAjMzMzO1xyXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xyXG4gICAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcclxuICB9XHJcblxyXG4gIGgxLFxyXG4gIGgyLFxyXG4gIGgzLFxyXG4gIGg0LFxyXG4gIGg1LFxyXG4gIGg2IHtcclxuICAgIG1hcmdpbjogOHB4IDA7XHJcbiAgfVxyXG5cclxuICBwIHtcclxuICAgIG1hcmdpbjogMDtcclxuICB9XHJcblxyXG4gIC5zcGFjZXIge1xyXG4gICAgZmxleDogMTtcclxuICB9XHJcblxyXG4gIC50b29sYmFyIHtcclxuICAgIGhlaWdodDogNjBweDtcclxuICAgIG1hcmdpbjogLThweDtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzE5NzZkMjtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgfVxyXG5cclxuICAudG9vbGJhciBpbWcge1xyXG4gICAgbWFyZ2luOiAwIDE2cHg7XHJcbiAgfVxyXG5cclxuICAudG9vbGJhciAjdHdpdHRlci1sb2dvIHtcclxuICAgIGhlaWdodDogNDBweDtcclxuICAgIG1hcmdpbjogMCAxNnB4O1xyXG4gIH1cclxuXHJcbiAgLnRvb2xiYXIgI3R3aXR0ZXItbG9nbzpob3ZlciB7XHJcbiAgICBvcGFjaXR5OiAwLjg7XHJcbiAgfVxyXG5cclxuICAuY29udGVudCB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgbWFyZ2luOiAzMnB4IGF1dG87XHJcbiAgICBwYWRkaW5nOiAwIDE2cHg7XHJcbiAgICBtYXgtd2lkdGg6IDk2MHB4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgfVxyXG5cclxuICBzdmcubWF0ZXJpYWwtaWNvbnMge1xyXG4gICAgaGVpZ2h0OiAyNHB4O1xyXG4gICAgd2lkdGg6IGF1dG87XHJcbiAgfVxyXG5cclxuICBzdmcubWF0ZXJpYWwtaWNvbnM6bm90KDpsYXN0LWNoaWxkKSB7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDhweDtcclxuICB9XHJcblxyXG4gIC5jYXJkIHN2Zy5tYXRlcmlhbC1pY29ucyBwYXRoIHtcclxuICAgIGZpbGw6ICM4ODg7XHJcbiAgfVxyXG5cclxuICAuY2FyZC1jb250YWluZXIge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtd3JhcDogd3JhcDtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgbWFyZ2luLXRvcDogMTZweDtcclxuICB9XHJcblxyXG4gIC5jYXJkIHtcclxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNlZWU7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmFmYWZhO1xyXG4gICAgaGVpZ2h0OiA0MHB4O1xyXG4gICAgd2lkdGg6IDIwMHB4O1xyXG4gICAgbWFyZ2luOiAwIDhweCAxNnB4O1xyXG4gICAgcGFkZGluZzogMTZweDtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZS1pbi1vdXQ7XHJcbiAgICBsaW5lLWhlaWdodDogMjRweDtcclxuICB9IFxyXG5cclxuICAuY2FyZC1jb250YWluZXIgLmNhcmQ6bm90KDpsYXN0LWNoaWxkKSB7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgfVxyXG5cclxuICAuY2FyZC5jYXJkLXNtYWxsIHtcclxuICAgIGhlaWdodDogMTZweDtcclxuICAgIHdpZHRoOiAxNjhweDtcclxuICB9XHJcblxyXG4gIC5jYXJkLWNvbnRhaW5lciAuY2FyZDpub3QoLmhpZ2hsaWdodC1jYXJkKSB7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgfVxyXG5cclxuICAuY2FyZC1jb250YWluZXIgLmNhcmQ6bm90KC5oaWdobGlnaHQtY2FyZCk6aG92ZXIge1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0zcHgpO1xyXG4gICAgYm94LXNoYWRvdzogMCA0cHggMTdweCByZ2JhKGJsYWNrLCAwLjM1KTtcclxuICB9XHJcblxyXG4gIC5jYXJkLWNvbnRhaW5lciAuY2FyZDpub3QoLmhpZ2hsaWdodC1jYXJkKTpob3ZlciAubWF0ZXJpYWwtaWNvbnMgcGF0aCB7XHJcbiAgICBmaWxsOiByZ2IoMTA1LCAxMDMsIDEwMyk7XHJcbiAgfVxyXG5cclxuICAuY2FyZC5oaWdobGlnaHQtY2FyZCB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTk3NmQyO1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcclxuICAgIGJvcmRlcjogbm9uZTtcclxuICAgIHdpZHRoOiBhdXRvO1xyXG4gICAgbWluLXdpZHRoOiAzMCU7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgfVxyXG5cclxuICAuY2FyZC5jYXJkLmhpZ2hsaWdodC1jYXJkIHNwYW4ge1xyXG4gICAgbWFyZ2luLWxlZnQ6IDYwcHg7XHJcbiAgfVxyXG5cclxuICBzdmcjcm9ja2V0IHtcclxuICAgIHdpZHRoOiA4MHB4O1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgbGVmdDogLTEwcHg7XHJcbiAgICB0b3A6IC0yNHB4O1xyXG4gIH1cclxuXHJcbiAgc3ZnI3JvY2tldC1zbW9rZSB7XHJcbiAgICBoZWlnaHQ6IDEwMHZoO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAxMHB4O1xyXG4gICAgcmlnaHQ6IDE4MHB4O1xyXG4gICAgei1pbmRleDogLTEwO1xyXG4gIH1cclxuXHJcbiAgYSxcclxuICBhOnZpc2l0ZWQsXHJcbiAgYTpob3ZlciB7XHJcbiAgICBjb2xvcjogIzE5NzZkMjtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICB9XHJcblxyXG4gIGE6aG92ZXIge1xyXG4gICAgY29sb3I6ICMxMjU2OTk7XHJcbiAgfVxyXG5cclxuICAudGVybWluYWwge1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgd2lkdGg6IDgwJTtcclxuICAgIG1heC13aWR0aDogNjAwcHg7XHJcbiAgICBib3JkZXItcmFkaXVzOiA2cHg7XHJcbiAgICBwYWRkaW5nLXRvcDogNDVweDtcclxuICAgIG1hcmdpbi10b3A6IDhweDtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTUsIDE1LCAxNik7XHJcbiAgfVxyXG5cclxuICAudGVybWluYWw6OmJlZm9yZSB7XHJcbiAgICBjb250ZW50OiBcIlxcMjAyMiBcXDIwMjIgXFwyMDIyXCI7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IDA7XHJcbiAgICBsZWZ0OiAwO1xyXG4gICAgaGVpZ2h0OiA0cHg7XHJcbiAgICBiYWNrZ3JvdW5kOiByZ2IoNTgsIDU4LCA1OCk7XHJcbiAgICBjb2xvcjogI2MyYzNjNDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgZm9udC1zaXplOiAycmVtO1xyXG4gICAgbGluZS1oZWlnaHQ6IDA7XHJcbiAgICBwYWRkaW5nOiAxNHB4IDA7XHJcbiAgICB0ZXh0LWluZGVudDogNHB4O1xyXG4gIH1cclxuXHJcbiAgLnRlcm1pbmFsIHByZSB7XHJcbiAgICBmb250LWZhbWlseTogU0ZNb25vLVJlZ3VsYXIsQ29uc29sYXMsTGliZXJhdGlvbiBNb25vLE1lbmxvLG1vbm9zcGFjZTtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgIHBhZGRpbmc6IDAgMXJlbSAxcmVtO1xyXG4gICAgbWFyZ2luOiAwO1xyXG4gIH1cclxuXHJcbiAgLmNpcmNsZS1saW5rIHtcclxuICAgIGhlaWdodDogNDBweDtcclxuICAgIHdpZHRoOiA0MHB4O1xyXG4gICAgYm9yZGVyLXJhZGl1czogNDBweDtcclxuICAgIG1hcmdpbjogOHB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZWVlZWVlO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgIGJveC1zaGFkb3c6IDAgMXB4IDNweCByZ2JhKDAsIDAsIDAsIDAuMTIpLCAwIDFweCAycHggcmdiYSgwLCAwLCAwLCAwLjI0KTtcclxuICAgIHRyYW5zaXRpb246IDFzIGVhc2Utb3V0O1xyXG4gIH1cclxuXHJcbiAgLmNpcmNsZS1saW5rOmhvdmVyIHtcclxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMC4yNXJlbSk7XHJcbiAgICBib3gtc2hhZG93OiAwcHggM3B4IDE1cHggcmdiYSgwLCAwLCAwLCAwLjIpO1xyXG4gIH1cclxuXHJcbiAgZm9vdGVyIHtcclxuICAgIG1hcmdpbi10b3A6IDhweDtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgbGluZS1oZWlnaHQ6IDIwcHg7XHJcbiAgfVxyXG5cclxuICBmb290ZXIgYSB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICB9XHJcblxyXG4gIC5naXRodWItc3Rhci1iYWRnZSB7XHJcbiAgICBjb2xvcjogIzI0MjkyZTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgZm9udC1zaXplOiAxMnB4O1xyXG4gICAgcGFkZGluZzogM3B4IDEwcHg7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDI3LDMxLDM1LC4yKTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDNweDtcclxuICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCgtMTgwZGVnLCNmYWZiZmMsI2VmZjNmNiA5MCUpO1xyXG4gICAgbWFyZ2luLWxlZnQ6IDRweDtcclxuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgICBmb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSxCbGlua01hY1N5c3RlbUZvbnQsU2Vnb2UgVUksSGVsdmV0aWNhLEFyaWFsLHNhbnMtc2VyaWYsQXBwbGUgQ29sb3IgRW1vamksU2Vnb2UgVUkgRW1vamksU2Vnb2UgVUkgU3ltYm9sO1xyXG4gIH1cclxuXHJcbiAgLmdpdGh1Yi1zdGFyLWJhZGdlOmhvdmVyIHtcclxuICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCgtMTgwZGVnLCNmMGYzZjYsI2U2ZWJmMSA5MCUpO1xyXG4gICAgYm9yZGVyLWNvbG9yOiByZ2JhKDI3LDMxLDM1LC4zNSk7XHJcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtLjVlbTtcclxuICB9XHJcblxyXG4gIC5naXRodWItc3Rhci1iYWRnZSAubWF0ZXJpYWwtaWNvbnMge1xyXG4gICAgaGVpZ2h0OiAxNnB4O1xyXG4gICAgd2lkdGg6IDE2cHg7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDRweDtcclxuICB9XHJcblxyXG4gIHN2ZyNjbG91ZHMge1xyXG4gICAgcG9zaXRpb246IGZpeGVkO1xyXG4gICAgYm90dG9tOiAtMTYwcHg7XHJcbiAgICBsZWZ0OiAtMjMwcHg7XHJcbiAgICB6LWluZGV4OiAtMTA7XHJcbiAgICB3aWR0aDogMTkyMHB4O1xyXG4gIH1cclxuXHJcblxyXG4gIC8qIFJlc3BvbnNpdmUgU3R5bGVzICovXHJcbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY3cHgpIHtcclxuXHJcbiAgICAuY2FyZC1jb250YWluZXIgPiAqOm5vdCguY2lyY2xlLWxpbmspICxcclxuICAgIC50ZXJtaW5hbCB7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgfVxyXG5cclxuICAgIC5jYXJkOm5vdCguaGlnaGxpZ2h0LWNhcmQpIHtcclxuICAgICAgaGVpZ2h0OiAxNnB4O1xyXG4gICAgICBtYXJnaW46IDhweCAwO1xyXG4gICAgfVxyXG5cclxuICAgIC5jYXJkLmhpZ2hsaWdodC1jYXJkIHNwYW4ge1xyXG4gICAgICBtYXJnaW4tbGVmdDogNzJweDtcclxuICAgIH1cclxuXHJcbiAgICBzdmcjcm9ja2V0LXNtb2tlIHtcclxuICAgICAgcmlnaHQ6IDEyMHB4O1xyXG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtNWRlZyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA1NzVweCkge1xyXG4gICAgc3ZnI3JvY2tldC1zbW9rZSB7XHJcbiAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcclxuICAgIH1cclxuICB9Il19 */");

/***/ }),

/***/ "./src/app/app.component.ts":
/*!**********************************!*\
  !*** ./src/app/app.component.ts ***!
  \**********************************/
/*! exports provided: AppComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppComponent", function() { return AppComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let AppComponent = class AppComponent {
    constructor() {
        this.title = 'onlinestore';
    }
};
AppComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-root',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./app.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/app.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./app.component.css */ "./src/app/app.component.css")).default]
    })
], AppComponent);



/***/ }),

/***/ "./src/app/app.module.ts":
/*!*******************************!*\
  !*** ./src/app/app.module.ts ***!
  \*******************************/
/*! exports provided: AppModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppModule", function() { return AppModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm2015/platform-browser.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _app_routing_module__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app-routing.module */ "./src/app/app-routing.module.ts");
/* harmony import */ var _app_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./app.component */ "./src/app/app.component.ts");
/* harmony import */ var _layouts_auth_layout_auth_layout_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./layouts/auth-layout/auth-layout.component */ "./src/app/layouts/auth-layout/auth-layout.component.ts");
/* harmony import */ var _moduels_auth_auth_module__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./moduels/auth/auth.module */ "./src/app/moduels/auth/auth.module.ts");
/* harmony import */ var _layouts_onetimepassword_layout_onetimepassword_layout_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./layouts/onetimepassword-layout/onetimepassword-layout.component */ "./src/app/layouts/onetimepassword-layout/onetimepassword-layout.component.ts");
/* harmony import */ var _components_onetimepassword_onetimepassword_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/onetimepassword/onetimepassword.component */ "./src/app/components/onetimepassword/onetimepassword.component.ts");
/* harmony import */ var _components_dashboard_dashboard_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./components/dashboard/dashboard.component */ "./src/app/components/dashboard/dashboard.component.ts");
/* harmony import */ var _layouts_usermanagement_layout_usermanagement_layout_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./layouts/usermanagement-layout/usermanagement-layout.component */ "./src/app/layouts/usermanagement-layout/usermanagement-layout.component.ts");
/* harmony import */ var _components_usermanagment_usermanagment_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./components/usermanagment/usermanagment.component */ "./src/app/components/usermanagment/usermanagment.component.ts");
/* harmony import */ var _components_vendormanagement_vendormanagement_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./components/vendormanagement/vendormanagement.component */ "./src/app/components/vendormanagement/vendormanagement.component.ts");
/* harmony import */ var _components_warehousemanagement_warehousemanagement_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./components/warehousemanagement/warehousemanagement.component */ "./src/app/components/warehousemanagement/warehousemanagement.component.ts");
/* harmony import */ var _components_genratealert_genratealert_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./components/genratealert/genratealert.component */ "./src/app/components/genratealert/genratealert.component.ts");
/* harmony import */ var _components_reconciliation_reconciliation_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./components/reconciliation/reconciliation.component */ "./src/app/components/reconciliation/reconciliation.component.ts");
/* harmony import */ var _components_pricemanagement_pricemanagement_component__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./components/pricemanagement/pricemanagement.component */ "./src/app/components/pricemanagement/pricemanagement.component.ts");
/* harmony import */ var _components_offers_offers_component__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./components/offers/offers.component */ "./src/app/components/offers/offers.component.ts");
/* harmony import */ var _components_rewardmanagement_rewardmanagement_component__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./components/rewardmanagement/rewardmanagement.component */ "./src/app/components/rewardmanagement/rewardmanagement.component.ts");
/* harmony import */ var _components_vendorreward_vendorreward_component__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./components/vendorreward/vendorreward.component */ "./src/app/components/vendorreward/vendorreward.component.ts");
/* harmony import */ var _services_auth_service__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./services/auth.service */ "./src/app/services/auth.service.ts");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var _services_custom_auth_http_interceptor_service__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./services/custom-auth-http-interceptor.service */ "./src/app/services/custom-auth-http-interceptor.service.ts");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var _components_navbar_navbar_component__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./components/navbar/navbar.component */ "./src/app/components/navbar/navbar.component.ts");
/* harmony import */ var _services_navbar_service__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./services/navbar.service */ "./src/app/services/navbar.service.ts");
/* harmony import */ var _components_viewgeneratedalerts_viewgeneratedalerts_component__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./components/viewgeneratedalerts/viewgeneratedalerts.component */ "./src/app/components/viewgeneratedalerts/viewgeneratedalerts.component.ts");
/* harmony import */ var _components_viewallactivealerts_viewallactivealerts_component__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./components/viewallactivealerts/viewallactivealerts.component */ "./src/app/components/viewallactivealerts/viewallactivealerts.component.ts");
/* harmony import */ var ngx_pagination__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ngx-pagination */ "./node_modules/ngx-pagination/dist/ngx-pagination.js");
/* harmony import */ var _components_showeventslist_showeventslist_component__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./components/showeventslist/showeventslist.component */ "./src/app/components/showeventslist/showeventslist.component.ts");
/* harmony import */ var _components_generatealertevent_generatealertevent_component__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./components/generatealertevent/generatealertevent.component */ "./src/app/components/generatealertevent/generatealertevent.component.ts");
/* harmony import */ var _vendoruser_payment_management_payment_management_component__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./vendoruser/payment-management/payment-management.component */ "./src/app/vendoruser/payment-management/payment-management.component.ts");
/* harmony import */ var _vendoruser_reconciliation_vendoruser_reconciliation_vendoruser_component__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./vendoruser/reconciliation-vendoruser/reconciliation-vendoruser.component */ "./src/app/vendoruser/reconciliation-vendoruser/reconciliation-vendoruser.component.ts");
/* harmony import */ var _vendoruser_reward_managment_reward_managment_component__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./vendoruser/reward-managment/reward-managment.component */ "./src/app/vendoruser/reward-managment/reward-managment.component.ts");
/* harmony import */ var _vendoruser_redeemreward_redeemreward_component__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./vendoruser/redeemreward/redeemreward.component */ "./src/app/vendoruser/redeemreward/redeemreward.component.ts");
/* harmony import */ var _components_editalert_editalert_component__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./components/editalert/editalert.component */ "./src/app/components/editalert/editalert.component.ts");
/* harmony import */ var _commoncomponents_registeruser_registeruser_component__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./commoncomponents/registeruser/registeruser.component */ "./src/app/commoncomponents/registeruser/registeruser.component.ts");
/* harmony import */ var _vendoruser_rewardpointhistory_rewardpointhistory_component__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./vendoruser/rewardpointhistory/rewardpointhistory.component */ "./src/app/vendoruser/rewardpointhistory/rewardpointhistory.component.ts");
/* harmony import */ var _vendoruser_reportgeneration_reportgeneration_component__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./vendoruser/reportgeneration/reportgeneration.component */ "./src/app/vendoruser/reportgeneration/reportgeneration.component.ts");
/* harmony import */ var _vendoruser_viewallorders_viewallorders_component__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./vendoruser/viewallorders/viewallorders.component */ "./src/app/vendoruser/viewallorders/viewallorders.component.ts");
/* harmony import */ var _vendoruser_proceed_proceed_component__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./vendoruser/proceed/proceed.component */ "./src/app/vendoruser/proceed/proceed.component.ts");
/* harmony import */ var _vendoruser_orderdetails_orderdetails_component__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./vendoruser/orderdetails/orderdetails.component */ "./src/app/vendoruser/orderdetails/orderdetails.component.ts");
/* harmony import */ var _warehouse_user_orderprocessing_orderprocessing_component__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./warehouse-user/orderprocessing/orderprocessing.component */ "./src/app/warehouse-user/orderprocessing/orderprocessing.component.ts");
/* harmony import */ var _warehouse_user_order_details_order_details_component__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./warehouse-user/order-details/order-details.component */ "./src/app/warehouse-user/order-details/order-details.component.ts");
/* harmony import */ var _components_content_management_content_management_component__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./components/content-management/content-management.component */ "./src/app/components/content-management/content-management.component.ts");
/* harmony import */ var _warehouse_user_reports_reports_component__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./warehouse-user/reports/reports.component */ "./src/app/warehouse-user/reports/reports.component.ts");
/* harmony import */ var _warehouse_user_process_order_process_order_component__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./warehouse-user/process-order/process-order.component */ "./src/app/warehouse-user/process-order/process-order.component.ts");
/* harmony import */ var _warehouse_user_reconcilation_warehouse_reconcilation_warehouse_component__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./warehouse-user/reconcilation-warehouse/reconcilation-warehouse.component */ "./src/app/warehouse-user/reconcilation-warehouse/reconcilation-warehouse.component.ts");
/* harmony import */ var _User_preorder_preorder_component__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./User/preorder/preorder.component */ "./src/app/User/preorder/preorder.component.ts");
/* harmony import */ var _User_paymentgateway_paymentgateway_component__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./User/paymentgateway/paymentgateway.component */ "./src/app/User/paymentgateway/paymentgateway.component.ts");
/* harmony import */ var _User_top_up_wallet_top_up_wallet_component__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./User/top-up-wallet/top-up-wallet.component */ "./src/app/User/top-up-wallet/top-up-wallet.component.ts");
/* harmony import */ var _User_walletandrewards_walletandrewards_component__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./User/walletandrewards/walletandrewards.component */ "./src/app/User/walletandrewards/walletandrewards.component.ts");
/* harmony import */ var _User_rewaradmanagementuser_rewaradmanagementuser_component__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./User/rewaradmanagementuser/rewaradmanagementuser.component */ "./src/app/User/rewaradmanagementuser/rewaradmanagementuser.component.ts");
/* harmony import */ var _User_redeemmangementuser_redeemmangementuser_component__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./User/redeemmangementuser/redeemmangementuser.component */ "./src/app/User/redeemmangementuser/redeemmangementuser.component.ts");
/* harmony import */ var _User_rewardpointhistoryuser_rewardpointhistoryuser_component__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./User/rewardpointhistoryuser/rewardpointhistoryuser.component */ "./src/app/User/rewardpointhistoryuser/rewardpointhistoryuser.component.ts");
/* harmony import */ var _User_orderuser_orderuser_component__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./User/orderuser/orderuser.component */ "./src/app/User/orderuser/orderuser.component.ts");
/* harmony import */ var _User_createorder_user_createorder_user_component__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./User/createorder-user/createorder-user.component */ "./src/app/User/createorder-user/createorder-user.component.ts");
/* harmony import */ var _User_currentwalletbalance_currentwalletbalance_component__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./User/currentwalletbalance/currentwalletbalance.component */ "./src/app/User/currentwalletbalance/currentwalletbalance.component.ts");
/* harmony import */ var _User_offersuser_offersuser_component__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./User/offersuser/offersuser.component */ "./src/app/User/offersuser/offersuser.component.ts");
/* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm2015/animations.js");
/* harmony import */ var _components_editprofile_editprofile_component__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./components/editprofile/editprofile.component */ "./src/app/components/editprofile/editprofile.component.ts");
/* harmony import */ var _services_unique_email_validator_directive__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./services/unique-email-validator.directive */ "./src/app/services/unique-email-validator.directive.ts");
/* harmony import */ var _components_cooperate_cooperate_component__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./components/cooperate/cooperate.component */ "./src/app/components/cooperate/cooperate.component.ts");
/* harmony import */ var ng_pick_datetime__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ng-pick-datetime */ "./node_modules/ng-pick-datetime/picker.js");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");
/* harmony import */ var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ngx-bootstrap/modal */ "./node_modules/ngx-bootstrap/modal/fesm2015/ngx-bootstrap-modal.js");
/* harmony import */ var _User_userpaymentgateway_userpaymentgateway_component__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./User/userpaymentgateway/userpaymentgateway.component */ "./src/app/User/userpaymentgateway/userpaymentgateway.component.ts");
/* harmony import */ var _components_amdinpaymentgate_amdinpaymentgate_component__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./components/amdinpaymentgate/amdinpaymentgate.component */ "./src/app/components/amdinpaymentgate/amdinpaymentgate.component.ts");
/* harmony import */ var _components_notification_notification_component__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./components/notification/notification.component */ "./src/app/components/notification/notification.component.ts");
/* harmony import */ var _components_forgotpassword_forgotpassword_component__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./components/forgotpassword/forgotpassword.component */ "./src/app/components/forgotpassword/forgotpassword.component.ts");
/* harmony import */ var _mustmatch_directive__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./mustmatch.directive */ "./src/app/mustmatch.directive.ts");
/* harmony import */ var _vendoruser_vendorpayment_vendorpayment_component__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./vendoruser/vendorpayment/vendorpayment.component */ "./src/app/vendoruser/vendorpayment/vendorpayment.component.ts");
/* harmony import */ var _components_adminpayment_adminpayment_component__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./components/adminpayment/adminpayment.component */ "./src/app/components/adminpayment/adminpayment.component.ts");
/* harmony import */ var _twodigitdecimalnumber_directive__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./twodigitdecimalnumber.directive */ "./src/app/twodigitdecimalnumber.directive.ts");










































































let AppModule = class AppModule {
};
AppModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"])({
        declarations: [
            _app_component__WEBPACK_IMPORTED_MODULE_4__["AppComponent"],
            _layouts_auth_layout_auth_layout_component__WEBPACK_IMPORTED_MODULE_5__["AuthLayoutComponent"],
            _layouts_onetimepassword_layout_onetimepassword_layout_component__WEBPACK_IMPORTED_MODULE_7__["OnetimepasswordLayoutComponent"],
            _components_onetimepassword_onetimepassword_component__WEBPACK_IMPORTED_MODULE_8__["OnetimepasswordComponent"],
            _components_dashboard_dashboard_component__WEBPACK_IMPORTED_MODULE_9__["DashboardComponent"],
            _layouts_usermanagement_layout_usermanagement_layout_component__WEBPACK_IMPORTED_MODULE_10__["UsermanagementLayoutComponent"],
            _components_usermanagment_usermanagment_component__WEBPACK_IMPORTED_MODULE_11__["UsermanagmentComponent"],
            _components_vendormanagement_vendormanagement_component__WEBPACK_IMPORTED_MODULE_12__["VendormanagementComponent"],
            _components_warehousemanagement_warehousemanagement_component__WEBPACK_IMPORTED_MODULE_13__["WarehousemanagementComponent"],
            _components_content_management_content_management_component__WEBPACK_IMPORTED_MODULE_44__["ContentManagementComponent"],
            _components_genratealert_genratealert_component__WEBPACK_IMPORTED_MODULE_14__["GenratealertComponent"],
            _components_reconciliation_reconciliation_component__WEBPACK_IMPORTED_MODULE_15__["ReconciliationComponent"],
            _components_pricemanagement_pricemanagement_component__WEBPACK_IMPORTED_MODULE_16__["PricemanagementComponent"],
            _components_offers_offers_component__WEBPACK_IMPORTED_MODULE_17__["OffersComponent"],
            _components_rewardmanagement_rewardmanagement_component__WEBPACK_IMPORTED_MODULE_18__["RewardmanagementComponent"],
            _components_vendorreward_vendorreward_component__WEBPACK_IMPORTED_MODULE_19__["VendorrewardComponent"],
            _components_navbar_navbar_component__WEBPACK_IMPORTED_MODULE_24__["NavbarComponent"],
            _components_viewgeneratedalerts_viewgeneratedalerts_component__WEBPACK_IMPORTED_MODULE_26__["ViewgeneratedalertsComponent"],
            _components_viewallactivealerts_viewallactivealerts_component__WEBPACK_IMPORTED_MODULE_27__["ViewallactivealertsComponent"],
            _components_showeventslist_showeventslist_component__WEBPACK_IMPORTED_MODULE_29__["ShoweventslistComponent"],
            _components_generatealertevent_generatealertevent_component__WEBPACK_IMPORTED_MODULE_30__["GeneratealerteventComponent"],
            _vendoruser_payment_management_payment_management_component__WEBPACK_IMPORTED_MODULE_31__["PaymentManagementComponent"],
            _vendoruser_reconciliation_vendoruser_reconciliation_vendoruser_component__WEBPACK_IMPORTED_MODULE_32__["ReconciliationVendoruserComponent"],
            _vendoruser_reward_managment_reward_managment_component__WEBPACK_IMPORTED_MODULE_33__["RewardManagmentComponent"],
            _vendoruser_redeemreward_redeemreward_component__WEBPACK_IMPORTED_MODULE_34__["RedeemrewardComponent"],
            _components_editalert_editalert_component__WEBPACK_IMPORTED_MODULE_35__["EditalertComponent"],
            _commoncomponents_registeruser_registeruser_component__WEBPACK_IMPORTED_MODULE_36__["RegisteruserComponent"],
            _vendoruser_rewardpointhistory_rewardpointhistory_component__WEBPACK_IMPORTED_MODULE_37__["RewardpointhistoryComponent"],
            _vendoruser_reportgeneration_reportgeneration_component__WEBPACK_IMPORTED_MODULE_38__["ReportgenerationComponent"],
            _vendoruser_viewallorders_viewallorders_component__WEBPACK_IMPORTED_MODULE_39__["ViewallordersComponent"],
            _vendoruser_proceed_proceed_component__WEBPACK_IMPORTED_MODULE_40__["ProceedComponent"],
            _vendoruser_orderdetails_orderdetails_component__WEBPACK_IMPORTED_MODULE_41__["OrderdetailsComponent"],
            _warehouse_user_orderprocessing_orderprocessing_component__WEBPACK_IMPORTED_MODULE_42__["OrderprocessingComponent"],
            _warehouse_user_order_details_order_details_component__WEBPACK_IMPORTED_MODULE_43__["OrderDetailsComponent"],
            _warehouse_user_reports_reports_component__WEBPACK_IMPORTED_MODULE_45__["ReportsComponent"],
            _warehouse_user_process_order_process_order_component__WEBPACK_IMPORTED_MODULE_46__["ProcessOrderComponent"],
            _warehouse_user_reconcilation_warehouse_reconcilation_warehouse_component__WEBPACK_IMPORTED_MODULE_47__["ReconcilationWarehouseComponent"],
            _User_preorder_preorder_component__WEBPACK_IMPORTED_MODULE_48__["PreorderComponent"],
            _User_paymentgateway_paymentgateway_component__WEBPACK_IMPORTED_MODULE_49__["PaymentgatewayComponent"],
            _User_top_up_wallet_top_up_wallet_component__WEBPACK_IMPORTED_MODULE_50__["TopUpWalletComponent"],
            _User_walletandrewards_walletandrewards_component__WEBPACK_IMPORTED_MODULE_51__["WalletandrewardsComponent"],
            _User_rewaradmanagementuser_rewaradmanagementuser_component__WEBPACK_IMPORTED_MODULE_52__["RewaradmanagementuserComponent"],
            _User_redeemmangementuser_redeemmangementuser_component__WEBPACK_IMPORTED_MODULE_53__["RedeemmangementuserComponent"],
            _User_rewardpointhistoryuser_rewardpointhistoryuser_component__WEBPACK_IMPORTED_MODULE_54__["RewardpointhistoryuserComponent"],
            _User_orderuser_orderuser_component__WEBPACK_IMPORTED_MODULE_55__["OrderuserComponent"],
            _User_createorder_user_createorder_user_component__WEBPACK_IMPORTED_MODULE_56__["CreateorderUserComponent"],
            _User_currentwalletbalance_currentwalletbalance_component__WEBPACK_IMPORTED_MODULE_57__["CurrentwalletbalanceComponent"],
            _User_offersuser_offersuser_component__WEBPACK_IMPORTED_MODULE_58__["OffersuserComponent"],
            _components_editprofile_editprofile_component__WEBPACK_IMPORTED_MODULE_60__["EditprofileComponent"],
            _services_unique_email_validator_directive__WEBPACK_IMPORTED_MODULE_61__["UniqueEmailValidatorDirective"],
            _components_cooperate_cooperate_component__WEBPACK_IMPORTED_MODULE_62__["CooperateComponent"],
            _User_userpaymentgateway_userpaymentgateway_component__WEBPACK_IMPORTED_MODULE_66__["UserpaymentgatewayComponent"],
            _components_amdinpaymentgate_amdinpaymentgate_component__WEBPACK_IMPORTED_MODULE_67__["AmdinpaymentgateComponent"],
            _components_notification_notification_component__WEBPACK_IMPORTED_MODULE_68__["NotificationComponent"],
            _components_forgotpassword_forgotpassword_component__WEBPACK_IMPORTED_MODULE_69__["ForgotpasswordComponent"],
            _mustmatch_directive__WEBPACK_IMPORTED_MODULE_70__["MustmatchDirective"],
            _vendoruser_vendorpayment_vendorpayment_component__WEBPACK_IMPORTED_MODULE_71__["VendorpaymentComponent"],
            _components_adminpayment_adminpayment_component__WEBPACK_IMPORTED_MODULE_72__["AdminpaymentComponent"],
            _twodigitdecimalnumber_directive__WEBPACK_IMPORTED_MODULE_73__["TwodigitdecimalnumberDirective"],
        ],
        imports: [
            _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["BrowserModule"],
            _app_routing_module__WEBPACK_IMPORTED_MODULE_3__["AppRoutingModule"],
            _moduels_auth_auth_module__WEBPACK_IMPORTED_MODULE_6__["AuthModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_23__["FormsModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_23__["ReactiveFormsModule"],
            _angular_common_http__WEBPACK_IMPORTED_MODULE_21__["HttpClientModule"],
            ngx_pagination__WEBPACK_IMPORTED_MODULE_28__["NgxPaginationModule"],
            _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_59__["BrowserAnimationsModule"],
            ngx_toastr__WEBPACK_IMPORTED_MODULE_64__["ToastrModule"].forRoot({
                preventDuplicates: true
            }),
            ng_pick_datetime__WEBPACK_IMPORTED_MODULE_63__["OwlDateTimeModule"],
            ng_pick_datetime__WEBPACK_IMPORTED_MODULE_63__["OwlNativeDateTimeModule"],
            ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_65__["ModalModule"].forRoot(),
        ],
        providers: [_services_auth_service__WEBPACK_IMPORTED_MODULE_20__["AuthService"], _services_navbar_service__WEBPACK_IMPORTED_MODULE_25__["NavbarService"],
            {
                provide: _angular_common_http__WEBPACK_IMPORTED_MODULE_21__["HTTP_INTERCEPTORS"], useClass: _services_custom_auth_http_interceptor_service__WEBPACK_IMPORTED_MODULE_22__["CustomAuthHttpInterceptorService"], multi: true
            }],
        bootstrap: [_app_component__WEBPACK_IMPORTED_MODULE_4__["AppComponent"]]
    })
], AppModule);



/***/ }),

/***/ "./src/app/commoncomponents/registeruser/registeruser.component.css":
/*!**************************************************************************!*\
  !*** ./src/app/commoncomponents/registeruser/registeruser.component.css ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n  /* .text-center {\r\n    margin-left: 47px;\r\n} */\r\n\r\nlabel{\r\n  font-weight: bold;\r\n  font-size: initial;\r\n}\r\n\r\n.card-body.reg {\r\n  margin-left: 10px;\r\n  margin-right: 2px;\r\n}\r\n\r\nem {\r\n  font-size: initial;\r\n  font-weight: bold;\r\n}\r\n\r\nem.id1{\r\n  margin-left: 117px;\r\n}\r\n\r\nem.id {\r\n  font-size: inherit;\r\n  font-weight: bold;\r\n}\r\n\r\n.container.regis{\r\n  margin-top:-43px;\r\n}\r\n\r\nem.subtitle {\r\n  margin-left: 0px;\r\n  font-weight: unset;\r\n}\r\n\r\n.s1 {\r\n  background-color: antiquewhite;\r\n  padding: 0 10px;\r\n}\r\n\r\n.btn.btn-lg {\r\n  padding: 1rem 2.4rem;\r\n  font-size: 17px;\r\n  font-weight: bold;\r\n}\r\n\r\n.input-vendor {\r\n  height: 50px;\r\n  background: #ebf4f9;\r\n}\r\n\r\n.card-body.vendor{\r\n  padding-right: 3rem;\r\n  padding-left: 3rem;\r\n}\r\n\r\ndiv#vendorrow {\r\n  padding-top: 0.5rem;\r\n}\r\n\r\nselect.form-control:not([size]):not([multiple]) {\r\n  height: 50px;\r\n  background-color:#ebf4f9; ;\r\n}\r\n\r\n/* Higher than 1440 (desktop devices)\r\n====================================================================== */\r\n\r\n@media only screen and (max-width: 1440px){ \r\n\r\n}\r\n\r\n/* Higher than 1200 (desktop devices)\r\n====================================================================== */\r\n\r\n@media only screen and (max-width: 1024px) {\r\n}\r\n\r\n/* Higher than 960 (desktop devices)\r\n====================================================================== */\r\n\r\n@media only screen and (min-width: 992px) and (max-width: 1199px){\r\n}\r\n\r\n/* Higher than 960 (desktop devices)\r\n====================================================================== */\r\n\r\n@media only screen and (min-width: 992px){\r\n}\r\n\r\n/* Tablet Portrait (devices and browsers)\r\n====================================================================== */\r\n\r\n@media only screen and (min-width: 768px) and (max-width: 991px) {\r\n}\r\n\r\n/* All Mobile Sizes (devices and browser)\r\n====================================================================== */\r\n\r\n@media only screen and (max-width: 767px) {\r\n\r\n}\r\n\r\n/* Mobile Landscape Size to Tablet Portrait (devices and browsers)\r\n====================================================================== */\r\n\r\n@media only screen and (max-width: 375px)  {\r\n\r\n\r\n\r\n}\r\n\r\n/*=================================*/\r\n\r\n@media only screen and (min-width: 320px) {\r\n\r\n\r\n}\r\n\r\n/* Mobile Portrait Size to Mobile Landscape Size (devices and browsers)\r\n=================================================================== */\r\n\r\n@media only screen and (max-width: 479px) {\r\n\r\n\r\n}\r\n\r\n@media only screen and (max-width: 667px) {\r\n\r\n}\r\n\r\n/* Higher than 1440 (desktop devices)\r\n====================================================================== */\r\n\r\n@media only screen and (max-width: 1440px){ \r\n  \r\n}\r\n\r\n/* Higher than 1200 (desktop devices)\r\n====================================================================== */\r\n\r\n@media only screen and (max-width: 1024px) {\r\n}\r\n\r\n/* Higher than 960 (desktop devices)\r\n====================================================================== */\r\n\r\n@media only screen and (min-width: 992px) and (max-width: 1199px){\r\n}\r\n\r\n/* Higher than 960 (desktop devices)\r\n====================================================================== */\r\n\r\n@media only screen and (min-width: 992px){\r\n}\r\n\r\n/* Tablet Portrait (devices and browsers)\r\n====================================================================== */\r\n\r\n@media only screen and (min-width: 768px) and (max-width: 991px) {\r\n}\r\n\r\n/* All Mobile Sizes (devices and browser)\r\n====================================================================== */\r\n\r\n@media only screen and (max-width: 767px) {\r\n\r\n}\r\n\r\n/* Mobile Landscape Size to Tablet Portrait (devices and browsers)\r\n====================================================================== */\r\n\r\n@media only screen and (max-width: 375px)  {\r\n\r\n\r\n\r\n}\r\n\r\n/*=================================*/\r\n\r\n@media only screen and (min-width: 320px) {\r\n \r\n\r\n}\r\n\r\n/* Mobile Portrait Size to Mobile Landscape Size (devices and browsers)\r\n=================================================================== */\r\n\r\n@media only screen and (max-width: 479px) {\r\n \r\n}\r\n\r\n@media only screen and (max-width: 667px) {\r\n\r\n}\r\n\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tbW9uY29tcG9uZW50cy9yZWdpc3RlcnVzZXIvcmVnaXN0ZXJ1c2VyLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtFQUNFOztHQUVDOztBQUVIO0VBQ0UsaUJBQWlCO0VBQ2pCLGtCQUFrQjtBQUNwQjs7QUFDQTtFQUNFLGlCQUFpQjtFQUNqQixpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsaUJBQWlCO0FBQ25COztBQUNBO0VBQ0Usa0JBQWtCO0FBQ3BCOztBQUdBO0VBQ0Usa0JBQWtCO0VBQ2xCLGlCQUFpQjtBQUNuQjs7QUFDQTtFQUNFLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixrQkFBa0I7QUFDcEI7O0FBQ0E7RUFDRSw4QkFBOEI7RUFDOUIsZUFBZTtBQUNqQjs7QUFDQTtFQUNFLG9CQUFvQjtFQUNwQixlQUFlO0VBQ2YsaUJBQWlCO0FBQ25COztBQUNBO0VBQ0UsWUFBWTtFQUNaLG1CQUFtQjtBQUNyQjs7QUFDQTtFQUNFLG1CQUFtQjtFQUNuQixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxZQUFZO0VBQ1osd0JBQXdCO0FBQzFCOztBQUNBO3dFQUN3RTs7QUFDeEU7O0FBRUE7O0FBRUE7d0VBQ3dFOztBQUN4RTtBQUNBOztBQUVBO3dFQUN3RTs7QUFDeEU7QUFDQTs7QUFFQTt3RUFDd0U7O0FBQ3hFO0FBQ0E7O0FBRUE7d0VBQ3dFOztBQUN4RTtBQUNBOztBQUVBO3dFQUN3RTs7QUFDeEU7O0FBRUE7O0FBRUE7d0VBQ3dFOztBQUN4RTs7OztBQUlBOztBQUNBLG9DQUFvQzs7QUFDcEM7OztBQUdBOztBQUNBO3FFQUNxRTs7QUFDckU7OztBQUdBOztBQUNBOztBQUVBOztBQUVBO3dFQUN3RTs7QUFDeEU7O0FBRUE7O0FBRUE7d0VBQ3dFOztBQUN4RTtBQUNBOztBQUVBO3dFQUN3RTs7QUFDeEU7QUFDQTs7QUFFQTt3RUFDd0U7O0FBQ3hFO0FBQ0E7O0FBRUE7d0VBQ3dFOztBQUN4RTtBQUNBOztBQUVBO3dFQUN3RTs7QUFDeEU7O0FBRUE7O0FBRUE7d0VBQ3dFOztBQUN4RTs7OztBQUlBOztBQUNBLG9DQUFvQzs7QUFDbkM7OztBQUdEOztBQUNBO3FFQUNxRTs7QUFDckU7O0FBRUE7O0FBRUE7O0FBRUEiLCJmaWxlIjoic3JjL2FwcC9jb21tb25jb21wb25lbnRzL3JlZ2lzdGVydXNlci9yZWdpc3RlcnVzZXIuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG4gIC8qIC50ZXh0LWNlbnRlciB7XHJcbiAgICBtYXJnaW4tbGVmdDogNDdweDtcclxufSAqL1xyXG5cclxubGFiZWx7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgZm9udC1zaXplOiBpbml0aWFsO1xyXG59XHJcbi5jYXJkLWJvZHkucmVnIHtcclxuICBtYXJnaW4tbGVmdDogMTBweDtcclxuICBtYXJnaW4tcmlnaHQ6IDJweDtcclxufVxyXG5cclxuZW0ge1xyXG4gIGZvbnQtc2l6ZTogaW5pdGlhbDtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5lbS5pZDF7XHJcbiAgbWFyZ2luLWxlZnQ6IDExN3B4O1xyXG59XHJcblxyXG5cclxuZW0uaWQge1xyXG4gIGZvbnQtc2l6ZTogaW5oZXJpdDtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG4uY29udGFpbmVyLnJlZ2lze1xyXG4gIG1hcmdpbi10b3A6LTQzcHg7XHJcbn1cclxuXHJcbmVtLnN1YnRpdGxlIHtcclxuICBtYXJnaW4tbGVmdDogMHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiB1bnNldDtcclxufVxyXG4uczEge1xyXG4gIGJhY2tncm91bmQtY29sb3I6IGFudGlxdWV3aGl0ZTtcclxuICBwYWRkaW5nOiAwIDEwcHg7XHJcbn1cclxuLmJ0bi5idG4tbGcge1xyXG4gIHBhZGRpbmc6IDFyZW0gMi40cmVtO1xyXG4gIGZvbnQtc2l6ZTogMTdweDtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG4uaW5wdXQtdmVuZG9yIHtcclxuICBoZWlnaHQ6IDUwcHg7XHJcbiAgYmFja2dyb3VuZDogI2ViZjRmOTtcclxufVxyXG4uY2FyZC1ib2R5LnZlbmRvcntcclxuICBwYWRkaW5nLXJpZ2h0OiAzcmVtO1xyXG4gIHBhZGRpbmctbGVmdDogM3JlbTtcclxufVxyXG5cclxuZGl2I3ZlbmRvcnJvdyB7XHJcbiAgcGFkZGluZy10b3A6IDAuNXJlbTtcclxufVxyXG5cclxuc2VsZWN0LmZvcm0tY29udHJvbDpub3QoW3NpemVdKTpub3QoW211bHRpcGxlXSkge1xyXG4gIGhlaWdodDogNTBweDtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiNlYmY0Zjk7IDtcclxufVxyXG4vKiBIaWdoZXIgdGhhbiAxNDQwIChkZXNrdG9wIGRldmljZXMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxNDQwcHgpeyBcclxuXHJcbn1cclxuXHJcbi8qIEhpZ2hlciB0aGFuIDEyMDAgKGRlc2t0b3AgZGV2aWNlcylcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjRweCkge1xyXG59XHJcblxyXG4vKiBIaWdoZXIgdGhhbiA5NjAgKGRlc2t0b3AgZGV2aWNlcylcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDk5MnB4KSBhbmQgKG1heC13aWR0aDogMTE5OXB4KXtcclxufVxyXG5cclxuLyogSGlnaGVyIHRoYW4gOTYwIChkZXNrdG9wIGRldmljZXMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA5OTJweCl7XHJcbn1cclxuXHJcbi8qIFRhYmxldCBQb3J0cmFpdCAoZGV2aWNlcyBhbmQgYnJvd3NlcnMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjhweCkgYW5kIChtYXgtd2lkdGg6IDk5MXB4KSB7XHJcbn1cclxuXHJcbi8qIEFsbCBNb2JpbGUgU2l6ZXMgKGRldmljZXMgYW5kIGJyb3dzZXIpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjdweCkge1xyXG5cclxufVxyXG5cclxuLyogTW9iaWxlIExhbmRzY2FwZSBTaXplIHRvIFRhYmxldCBQb3J0cmFpdCAoZGV2aWNlcyBhbmQgYnJvd3NlcnMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAzNzVweCkgIHtcclxuXHJcblxyXG5cclxufVxyXG4vKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXHJcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzIwcHgpIHtcclxuXHJcblxyXG59IFxyXG4vKiBNb2JpbGUgUG9ydHJhaXQgU2l6ZSB0byBNb2JpbGUgTGFuZHNjYXBlIFNpemUgKGRldmljZXMgYW5kIGJyb3dzZXJzKVxyXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDc5cHgpIHtcclxuXHJcblxyXG59XHJcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjY3cHgpIHtcclxuXHJcbn1cclxuXHJcbi8qIEhpZ2hlciB0aGFuIDE0NDAgKGRlc2t0b3AgZGV2aWNlcylcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDE0NDBweCl7IFxyXG4gIFxyXG59XHJcblxyXG4vKiBIaWdoZXIgdGhhbiAxMjAwIChkZXNrdG9wIGRldmljZXMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMDI0cHgpIHtcclxufVxyXG5cclxuLyogSGlnaGVyIHRoYW4gOTYwIChkZXNrdG9wIGRldmljZXMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA5OTJweCkgYW5kIChtYXgtd2lkdGg6IDExOTlweCl7XHJcbn1cclxuXHJcbi8qIEhpZ2hlciB0aGFuIDk2MCAoZGVza3RvcCBkZXZpY2VzKVxyXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogOTkycHgpe1xyXG59XHJcblxyXG4vKiBUYWJsZXQgUG9ydHJhaXQgKGRldmljZXMgYW5kIGJyb3dzZXJzKVxyXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY4cHgpIGFuZCAobWF4LXdpZHRoOiA5OTFweCkge1xyXG59XHJcblxyXG4vKiBBbGwgTW9iaWxlIFNpemVzIChkZXZpY2VzIGFuZCBicm93c2VyKVxyXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY3cHgpIHtcclxuXHJcbn1cclxuXHJcbi8qIE1vYmlsZSBMYW5kc2NhcGUgU2l6ZSB0byBUYWJsZXQgUG9ydHJhaXQgKGRldmljZXMgYW5kIGJyb3dzZXJzKVxyXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMzc1cHgpICB7XHJcblxyXG5cclxuXHJcbn1cclxuLyo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xyXG4gQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMjBweCkge1xyXG4gXHJcblxyXG59IFxyXG4vKiBNb2JpbGUgUG9ydHJhaXQgU2l6ZSB0byBNb2JpbGUgTGFuZHNjYXBlIFNpemUgKGRldmljZXMgYW5kIGJyb3dzZXJzKVxyXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDc5cHgpIHtcclxuIFxyXG59XHJcblxyXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDY2N3B4KSB7XHJcblxyXG59XHJcbiJdfQ== */");

/***/ }),

/***/ "./src/app/commoncomponents/registeruser/registeruser.component.ts":
/*!*************************************************************************!*\
  !*** ./src/app/commoncomponents/registeruser/registeruser.component.ts ***!
  \*************************************************************************/
/*! exports provided: RegisteruserComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RegisteruserComponent", function() { return RegisteruserComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_model_user__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/model/user */ "./src/app/model/user.ts");
/* harmony import */ var src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/auth.service */ "./src/app/services/auth.service.ts");
/* harmony import */ var src_app_services_country_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/services/country.service */ "./src/app/services/country.service.ts");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var src_app_model_address__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/model/address */ "./src/app/model/address.ts");
/* harmony import */ var src_app_services_equipment_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/services/equipment.service */ "./src/app/services/equipment.service.ts");
/* harmony import */ var src_app_model_equipment__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/model/equipment */ "./src/app/model/equipment.ts");
/* harmony import */ var src_app_services_master_product_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/services/master-product.service */ "./src/app/services/master-product.service.ts");
/* harmony import */ var src_app_shared_must_match_validator__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! src/app/shared/must-match.validator */ "./src/app/shared/must-match.validator.ts");
/* harmony import */ var src_app_model_master_products__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! src/app/model/master-products */ "./src/app/model/master-products.ts");
/* harmony import */ var src_app_services_product_category_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! src/app/services/product-category.service */ "./src/app/services/product-category.service.ts");
/* harmony import */ var src_app_model_EquipmentProductMapping__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! src/app/model/EquipmentProductMapping */ "./src/app/model/EquipmentProductMapping.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");















let RegisteruserComponent = class RegisteruserComponent {
    constructor(fb, authService, countryService, equipmentService, productService, productCategoryService, route) {
        this.fb = fb;
        this.authService = authService;
        this.countryService = countryService;
        this.equipmentService = equipmentService;
        this.productService = productService;
        this.productCategoryService = productCategoryService;
        this.route = route;
        this.continue = true;
        this.submitted = false;
    }
    ngOnInit() {
        this.regUser = new src_app_model_user__WEBPACK_IMPORTED_MODULE_2__["User"]();
        this.address = new src_app_model_address__WEBPACK_IMPORTED_MODULE_6__["Address"]();
        this.assignEquipment();
        this.iteration = 1;
        console.log("At " + this.iteration + " Iteration, The Object is: " + this.regUser);
        this.addressForm = this.fb.group({
            name: [null, [_angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].required]]
        });
        this.regForm = this.fb.group({
            email: [null, [_angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].email]],
            mobileNumber: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].minLength(10), _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].pattern("^((\\+91-?)|0)?[0-9]{10}$")]],
            password: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].required,
                    _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$')
                ]],
            retypedPass: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].minLength(6)]],
        }, {
            validator: Object(src_app_shared_must_match_validator__WEBPACK_IMPORTED_MODULE_10__["MustMatch"])('password', 'retypedPass')
        });
    }
    get f() {
        return this.regForm.controls;
    }
    onNextClick() {
        this.iteration++;
    }
    onBackClick() {
        this.iteration--;
    }
    onNextClickGenerateOtp() {
        this.submitted = true;
        // stop here if form is invalid
        if (this.regForm.invalid) {
            return;
        }
        //validate email
        this.authService.isUserExists(this.regUser.email).subscribe(data => {
            this.isEmailExists = data;
            console.log(this.isEmailExists);
            if (this.isEmailExists) {
                this.regForm.controls['email'].invalid;
                this.regForm.controls['email'].setErrors({
                    "emailExists": true
                });
                console.log("Invalid");
            }
            else {
                this.authService.generateRegistrationOtp(this.regUser.email);
                console.log(this.regUser.mobileNumber);
                this.mobileNo = this.regUser.mobileNumber.slice(0, 2) + '******' + this.regUser.mobileNumber.slice(8, 10);
                console.log(this.regUser.mobileNumber.slice(8, 10));
                console.log(this.mobileNo);
                this.iteration++;
            }
        });
    }
    onNextClickValidateOtp() {
        this.authService.validateRegistrationOtp(this.regUser.otp, this.regUser.email).subscribe(data => {
            if (data == "valid") {
                this.iteration++;
                let c = this.countryService.getCountriesForRegistration();
                c.subscribe((data) => {
                    this.countries = data;
                    this.address.countryId = 101;
                    this.countryService.getStatesForRegistration(this.address.countryId)
                        .subscribe(data => {
                        this.states = data;
                    });
                });
            }
            else {
                this.iteration++;
                let c = this.countryService.getCountriesForRegistration();
                c.subscribe((data) => {
                    this.countries = data;
                    this.address.countryId = 101;
                    this.countryService.getStatesForRegistration(this.address.countryId)
                        .subscribe(data => {
                        this.states = data;
                    });
                });
            }
        });
    }
    assignEquipment() {
        this.product = new src_app_model_master_products__WEBPACK_IMPORTED_MODULE_11__["MasterProducts"]();
        this.equipmentService.getAllMakersForRegistration()
            .subscribe((data) => {
            this.makers = data;
        });
        this.equipment = new src_app_model_equipment__WEBPACK_IMPORTED_MODULE_8__["Equipment"]();
        let p = this.productService.getAllProductManufacturingYears();
        p.subscribe((data) => this.manufacturedYears = data);
        let category = this.productCategoryService.getProductCategories();
        category.subscribe((data) => this.categories = data);
        this.iteration++;
    }
    onChangeMaker() {
        console.log("maker : " + this.equipment.equipmentMaker);
        this.equipmentService.getEquipmentNamesForRegistration(this.equipment.equipmentMaker)
            .subscribe((data) => {
            this.names = data;
        });
    }
    onChangeName() {
        console.log("eq name : " + this.equipment.equipmentName);
        this.equipmentService.getEquipmentsByMakerAndName(this.equipment.equipmentMaker, this.equipment.equipmentName)
            .subscribe((data) => {
            console.log("type : " + JSON.stringify(data));
            this.equipments = data;
        });
    }
    onChangeId() {
        for (let e of this.equipments) {
            if (e.uniqueEquipmentId == this.equipment.uniqueEquipmentId) {
                this.equipment.equipmentDesc = e.equipmentDesc;
                this.equipment.equipmentId = e.equipmentId;
            }
        }
    }
    onchangeCategory() {
        this.productService.getProductsByClassification(this.product.productCategory, this.product.manufactureYear)
            .subscribe((data) => {
            this.products = data;
        });
    }
    submitEquipment() {
        this.equipmentProduct = new src_app_model_EquipmentProductMapping__WEBPACK_IMPORTED_MODULE_13__["EquipmentProductMapping"]();
        this.equipmentProduct.equipmentId = this.equipment.equipmentId;
        this.equipmentProduct.productId = this.product.productId;
        this.equipmentProduct.preferredAccessType = this.accessType;
        this.equipmentProduct.mobileNo = this.mobileNumber;
        this.equipmentProduct.serialNo = this.serialNo;
        this.equipmentProduct.userId = this.regUser.userId;
        console.log(this.equipmentProduct);
        this.equipmentService.saveEquipmentProductMapping(this.equipmentProduct)
            .subscribe((data) => {
            //this.makers = data;
            console.log(data);
            alert("Equipment Added");
            //this.iteration = 1
            // this.route.navigate(['/']);
        });
    }
    submitUserData() {
        this.authService.registerUserData(this.regUser, this.address).subscribe(data => {
            console.log(data);
            if (data != null) {
                let d = JSON.stringify(data);
                let stringData = JSON.parse(d);
                console.log(stringData.uniqueUserId);
                this.uniqueId = stringData.uniqueUserId;
                this.regUser.userId = stringData.userId;
                this.regUser;
                this.iteration++;
            }
            else {
                this.addressForm.controls['name'].invalid;
                this.addressForm.controls['name'].setErrors({
                    "dataNotSaved": true
                });
            }
        }, error => {
            console.log(error);
            this.addressForm.controls['name'].invalid;
            this.addressForm.controls['name'].setErrors({
                "dataNotSaved": true
            });
        });
    }
    onChangeCountry() {
        if (this.address.countryId) {
            console.log("new country Id :" + this.address.countryId);
            this.countryService.getStatesForRegistration(this.address.countryId)
                .subscribe(data => {
                this.states = data;
                this.cities = null;
                if (this.states == null) {
                    alert("There are no states for this Country");
                }
            });
        }
    }
    onChangeState() {
        if (this.address.stateId) {
            this.countryService.getCitiesForRegistration(this.address.stateId)
                .subscribe(data => {
                this.cities = data;
                this.countryService.getStateByIdForRegistration(this.address.stateId)
                    .subscribe((data) => {
                    let state = data;
                    this.address.region = state.region;
                });
                if (this.cities == null) {
                    alert("There are no cities for this State");
                }
            });
        }
    }
    onResendOtp() {
        this.onNextClickValidateOtp();
    }
};
RegisteruserComponent.ctorParameters = () => [
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormBuilder"] },
    { type: src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_3__["AuthService"] },
    { type: src_app_services_country_service__WEBPACK_IMPORTED_MODULE_4__["CountryService"] },
    { type: src_app_services_equipment_service__WEBPACK_IMPORTED_MODULE_7__["EquipmentService"] },
    { type: src_app_services_master_product_service__WEBPACK_IMPORTED_MODULE_9__["MasterProductService"] },
    { type: src_app_services_product_category_service__WEBPACK_IMPORTED_MODULE_12__["ProductCategoryService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_14__["Router"] }
];
RegisteruserComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-registeruser',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./registeruser.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/commoncomponents/registeruser/registeruser.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./registeruser.component.css */ "./src/app/commoncomponents/registeruser/registeruser.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormBuilder"], src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_3__["AuthService"], src_app_services_country_service__WEBPACK_IMPORTED_MODULE_4__["CountryService"], src_app_services_equipment_service__WEBPACK_IMPORTED_MODULE_7__["EquipmentService"], src_app_services_master_product_service__WEBPACK_IMPORTED_MODULE_9__["MasterProductService"], src_app_services_product_category_service__WEBPACK_IMPORTED_MODULE_12__["ProductCategoryService"], _angular_router__WEBPACK_IMPORTED_MODULE_14__["Router"]])
], RegisteruserComponent);



/***/ }),

/***/ "./src/app/components/adminpayment/adminpayment.component.css":
/*!********************************************************************!*\
  !*** ./src/app/components/adminpayment/adminpayment.component.css ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (".btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n  }\r\nbutton.btn.waves-effect.btn-block {\r\n    line-height: 2rem;\r\n    font-size: 25px;\r\n    font-weight: bold;\r\n}\r\ndiv#import {\r\n    padding: 2rem;\r\n    font-size: 19px;\r\n}\r\n.card-header.view.view-cascade.gradient-card-header.blue-gradient {\r\n    font-size: 21px;\r\n    font-weight: bold;\r\n    color: #fff!important;\r\n    text-align: center;\r\n}\r\ndiv#import {\r\n    padding: 2rem;\r\n    font-size: 19px;\r\n}\r\ninput.form-control.top-input {\r\n    height: 48px;\r\n    \r\n}\r\ni.fa.fa {\r\n    text-align: center;\r\n    padding: 10px;\r\n}\r\n.input-group-text {\r\n    height: 48px;\r\n    margin-top: 0px;\r\n    background: #fff;\r\n    border: 1px solid black;\r\n    border-right: none;\r\n}\r\ndiv#importpre1 {\r\n    height: 48px;\r\n}\r\ndiv#importmove{\r\n    margin-top: 25px;\r\n}\r\nlabel#importlabel {\r\n    font-weight: bold;\r\n    font-size: 20px;\r\n    margin-left: 12px;\r\n}\r\nh4.importtr{\r\n    font-size: 25px;\r\n    text-align: left;\r\n    padding-bottom: 14px;\r\n    margin-left: -2px;\r\n    font-weight: 500;\r\n}\r\nbutton.btn.btn-success.Proceed {\r\n    margin-top: -3px;\r\n}\r\ndiv#importvendortopup {\r\n    padding: 2rem;\r\n    margin-top: -82px;\r\n}\r\nh4.importor {\r\n    margin-top: 33px;\r\n    font-weight: 600;\r\n}\r\ndiv#importvendordepo {\r\n    text-align: right;\r\n    font-size: 22px;\r\n    font-weight: 600;\r\n}\r\ndiv#importtr {\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    padding: 10px;\r\n    padding-left: 17px;\r\n    margin-top: -3px;\r\n}\r\nselect#importselect {\r\n    margin-left: -58px;\r\n}\r\nh4#importdeposit {\r\n    margin-top: 27px;\r\n    font-size: 25px;\r\n    font-weight: 800;\r\n}\r\nh4.card-header-title.mb-3.initial {\r\n    padding: 0px;\r\n}\r\n.card-header h5{\r\n    font-weight: bold;\r\n}\r\nbutton.btn.btn-primary.btn-block.verify{\r\n    border-radius: 30px;\r\n}\r\nlabel.custom-control-label.b {\r\n    font-weight: 600;\r\n}\r\np.import-text {\r\n    text-align: center;\r\n    font-size: 24px;\r\n    line-height: 2.5rem;\r\n    font-weight: bold;\r\n    color: green;\r\n}\r\nh3.importdetail {\r\n    color: black;\r\n    font-size: 20px;\r\n    text-align: left;\r\n    line-height: 0.5rem;\r\n    text-align: center;\r\n}\r\ndiv#importpaid {\r\n    font-size: 21px;\r\n    font-weight: bold;\r\n}\r\np.import-end {\r\n    font-size: 21px;\r\n    text-align: center;\r\n    font-weight: 600;\r\n    color: red;\r\n}\r\nlabel#importlabel {\r\n    font-weight: 400;\r\n}\r\nlabel#importlabeltype {\r\n    margin-left: 32px;\r\n    font-size: 19px;\r\n    font-weight: bold;\r\n}\r\ndiv#importpaid1 {\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    text-align: right;\r\n    color: #ff4444;\r\n}\r\n/* \r\nlabel.custom-control-label {\r\n    font-size: initial;\r\n    font-weight: bold;\r\n} */\r\n/* label {\r\n    font-size: initial;\r\n    font-weight: bold;\r\n} */\r\n.headersec {\r\n    margin-left: 31px;\r\n}\r\n.btn.btn-primary.paywallet{\r\n    width: 100%;\r\n}\r\nh4.card-header-title.mb-3 {\r\n    padding: 10px;\r\n    font-weight: bold;\r\n    margin-top: 10px;\r\n}\r\nh4.card-header-title.mb-3.initial {\r\n    font-weight: bold;\r\n    margin-top: 4px;\r\n    padding: 0px;\r\n}\r\nh5.outerheader {\r\n    font-size: initial;\r\n    font-weight: bold;\r\n    margin-left: 18px;\r\n}\r\n/* blincking */\r\n.blinking{\r\n    -webkit-animation:blinkingText 1.2s infinite;\r\n            animation:blinkingText 1.2s infinite;\r\n}\r\n@-webkit-keyframes blinkingText{\r\n    0%{     color: red;    }\r\n    49%{    color:red; }\r\n    60%{    color: transparent; }\r\n    99%{    color:transparent;  }\r\n    100%{   color: red;    }\r\n}\r\n@keyframes blinkingText{\r\n    0%{     color: red;    }\r\n    49%{    color:red; }\r\n    60%{    color: transparent; }\r\n    99%{    color:transparent;  }\r\n    100%{   color: red;    }\r\n}\r\nb.color {\r\n    font-size: larger;\r\n    color: chocolate;\r\n}\r\nlabel.color {\r\n    color: chocolate;\r\n    font-size: large;\r\n    margin-left: -11px;\r\n}\r\nb.dot {\r\n    padding: 10px;\r\n}\r\nspan.dot {\r\n    padding: 10px;\r\n}\r\nspan.dtt {\r\n    margin-left: 24px;\r\n}\r\nspan.dtt1 {\r\n    margin-left: 98px;\r\n}\r\nspan.dtt2 {\r\n    margin-left: 84px;\r\n}\r\nspan.dtt3 {\r\n    margin-left: 9px;\r\n}\r\nspan.dtt4 {\r\n    margin-left: 63px;\r\n}\r\n/*  */\r\ndiv#import {\r\n    padding: 2rem;\r\n    font-size: 19px;\r\n}\r\ndiv#importname {\r\n    text-align: right;\r\n    font-weight: 700;\r\n}\r\nh5.importinfo {\r\n    margin-top: -13px;\r\n    font-size: 24px;\r\n    font-weight: 500;\r\n}\r\n.container.importct {\r\n    max-width: 1673px;\r\n}\r\n.charge {\r\n    padding: 10px;\r\n}\r\n/* .card.first {\r\n    box-shadow: 2px 3px 3px #d6d5d5!important;\r\n} */\r\n.card-header.view.view-cascade.gradient-card-header.blue-gradient {\r\n    font-size: 21px;\r\n    font-weight: bold;\r\n    color: #fff!important;\r\n    text-align: center;\r\n}\r\n.card-header.view.view-cascade.gradient-card-header.blue-gradient.imp {\r\n    margin-top: -33px;\r\n    width: 114%;\r\n    margin-left: -32px;\r\n}\r\nh4#addCharges{\r\n    line-height: 2.5rem;\r\n    margin-bottom: -25px;\r\n    text-transform: uppercase;\r\n    font-weight: 600;\r\n    color: red;\r\n}\r\n.charges {\r\n    line-height: 1.5rem;\r\n    margin-top: 10px;\r\n}\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n}\r\nh4#importhead {\r\n    font-weight: bold;\r\n}\r\n.input-group-text {\r\n    border: 1px solid black;\r\n    background: #fff;\r\n}\r\n#toast-container > div {\r\n    width: 300px;\r\n}\r\n/*  */\r\n.input-vendor {\r\n    height: 50px;\r\n    background: #ebf4f9;\r\n}\r\n.card-body.vendor{\r\n    padding-right: 3rem;\r\n    padding-left: 3rem;\r\n}\r\ndiv#vendorrow {\r\n    padding-top: 0.5rem;\r\n}\r\nselect.form-control:not([size]):not([multiple]) {\r\n    height: 50px;\r\n    background-color:#ebf4f9; ;\r\n}\r\n.card.importcard{\r\n    box-shadow: 0px 0px 1px 1px;\r\n}\r\n.card {\r\n    background-color: white;\r\n    box-shadow: 5px 5px 5px 5px grey;\r\n    margin: 12px;\r\n}\r\ni.fas.fa-wallet {\r\n    text-align: center;\r\n    padding: 10px;\r\n}\r\nh5#importsub {\r\n    font-weight: bold;\r\n    text-align: center;\r\n\r\n}\r\n.card-header.view.view-cascade.gradient-card-header.blue-gradient {\r\n    font-size: 21px;\r\n    font-weight: bold;\r\n    color: #fff!important;\r\n    text-align: center;\r\n}\r\n/* Mobile Portrait Size to Mobile Landscape Size (devices and browsers)\r\n=================================================================== */\r\n@media only screen and (max-width: 479px) {\r\nbutton.btn.btn-primary.btn-block.verify{\r\n    border-radius: 30px;\r\n    margin-top: -1px;\r\n}\r\nbutton.btn.btn-default.btn-lg.back {\r\n    width: 100%;\r\n}\r\nbutton.btn.btn-primary.btn-lg.update {\r\n    width: 100%;\r\n}\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9hZG1pbnBheW1lbnQvYWRtaW5wYXltZW50LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxvQkFBb0I7SUFDcEIsZUFBZTtJQUNmLGlCQUFpQjtFQUNuQjtBQUNGO0lBQ0ksaUJBQWlCO0lBQ2pCLGVBQWU7SUFDZixpQkFBaUI7QUFDckI7QUFHQTtJQUNJLGFBQWE7SUFDYixlQUFlO0FBQ25CO0FBQ0E7SUFDSSxlQUFlO0lBQ2YsaUJBQWlCO0lBQ2pCLHFCQUFxQjtJQUNyQixrQkFBa0I7QUFDdEI7QUFFQTtJQUNJLGFBQWE7SUFDYixlQUFlO0FBQ25CO0FBRUE7SUFDSSxZQUFZOztBQUVoQjtBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLGFBQWE7QUFDakI7QUFDQTtJQUNJLFlBQVk7SUFDWixlQUFlO0lBQ2YsZ0JBQWdCO0lBQ2hCLHVCQUF1QjtJQUN2QixrQkFBa0I7QUFDdEI7QUFFQTtJQUNJLFlBQVk7QUFDaEI7QUFFQTtJQUNJLGdCQUFnQjtBQUNwQjtBQUNBO0lBQ0ksaUJBQWlCO0lBQ2pCLGVBQWU7SUFDZixpQkFBaUI7QUFDckI7QUFFQTtJQUNJLGVBQWU7SUFDZixnQkFBZ0I7SUFDaEIsb0JBQW9CO0lBQ3BCLGlCQUFpQjtJQUNqQixnQkFBZ0I7QUFDcEI7QUFFQTtJQUNJLGdCQUFnQjtBQUNwQjtBQUVBO0lBQ0ksYUFBYTtJQUNiLGlCQUFpQjtBQUNyQjtBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGdCQUFnQjtBQUNwQjtBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLGVBQWU7SUFDZixnQkFBZ0I7QUFDcEI7QUFFQTtJQUNJLGVBQWU7SUFDZixpQkFBaUI7SUFDakIsYUFBYTtJQUNiLGtCQUFrQjtJQUNsQixnQkFBZ0I7QUFDcEI7QUFFQTtJQUNJLGtCQUFrQjtBQUN0QjtBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGVBQWU7SUFDZixnQkFBZ0I7QUFDcEI7QUFHQTtJQUNJLFlBQVk7QUFDaEI7QUFFQTtJQUNJLGlCQUFpQjtBQUNyQjtBQUVBO0lBQ0ksbUJBQW1CO0FBQ3ZCO0FBR0E7SUFDSSxnQkFBZ0I7QUFDcEI7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixlQUFlO0lBQ2YsbUJBQW1CO0lBQ25CLGlCQUFpQjtJQUNqQixZQUFZO0FBQ2hCO0FBQ0E7SUFDSSxZQUFZO0lBQ1osZUFBZTtJQUNmLGdCQUFnQjtJQUNoQixtQkFBbUI7SUFDbkIsa0JBQWtCO0FBQ3RCO0FBSUE7SUFDSSxlQUFlO0lBQ2YsaUJBQWlCO0FBQ3JCO0FBQ0E7SUFDSSxlQUFlO0lBQ2Ysa0JBQWtCO0lBQ2xCLGdCQUFnQjtJQUNoQixVQUFVO0FBQ2Q7QUFFQTtJQUNJLGdCQUFnQjtBQUNwQjtBQUNBO0lBQ0ksaUJBQWlCO0lBQ2pCLGVBQWU7SUFDZixpQkFBaUI7QUFDckI7QUFDQTtJQUNJLGVBQWU7SUFDZixpQkFBaUI7SUFDakIsaUJBQWlCO0lBQ2pCLGNBQWM7QUFDbEI7QUFDQTs7OztHQUlHO0FBQ0g7OztHQUdHO0FBRUg7SUFDSSxpQkFBaUI7QUFDckI7QUFDQTtJQUNJLFdBQVc7QUFDZjtBQUNBO0lBQ0ksYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixnQkFBZ0I7QUFDcEI7QUFDQTtJQUNJLGlCQUFpQjtJQUNqQixlQUFlO0lBQ2YsWUFBWTtBQUNoQjtBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLGlCQUFpQjtJQUNqQixpQkFBaUI7QUFDckI7QUFDQSxjQUFjO0FBQ2Q7SUFDSSw0Q0FBb0M7WUFBcEMsb0NBQW9DO0FBQ3hDO0FBQ0E7SUFDSSxRQUFRLFVBQVUsS0FBSztJQUN2QixRQUFRLFNBQVMsRUFBRTtJQUNuQixRQUFRLGtCQUFrQixFQUFFO0lBQzVCLFFBQVEsaUJBQWlCLEdBQUc7SUFDNUIsUUFBUSxVQUFVLEtBQUs7QUFDM0I7QUFOQTtJQUNJLFFBQVEsVUFBVSxLQUFLO0lBQ3ZCLFFBQVEsU0FBUyxFQUFFO0lBQ25CLFFBQVEsa0JBQWtCLEVBQUU7SUFDNUIsUUFBUSxpQkFBaUIsR0FBRztJQUM1QixRQUFRLFVBQVUsS0FBSztBQUMzQjtBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLGdCQUFnQjtBQUNwQjtBQUNBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGdCQUFnQjtJQUNoQixrQkFBa0I7QUFDdEI7QUFDQTtJQUNJLGFBQWE7QUFDakI7QUFDQTtJQUNJLGFBQWE7QUFDakI7QUFDQTtJQUNJLGlCQUFpQjtBQUNyQjtBQUNBO0lBQ0ksaUJBQWlCO0FBQ3JCO0FBQ0E7SUFDSSxpQkFBaUI7QUFDckI7QUFDQTtJQUNJLGdCQUFnQjtBQUNwQjtBQUNBO0lBQ0ksaUJBQWlCO0FBQ3JCO0FBQ0EsS0FBSztBQUNMO0lBQ0ksYUFBYTtJQUNiLGVBQWU7QUFDbkI7QUFDQTtJQUNJLGlCQUFpQjtJQUNqQixnQkFBZ0I7QUFDcEI7QUFFQTtJQUNJLGlCQUFpQjtJQUNqQixlQUFlO0lBQ2YsZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxpQkFBaUI7QUFDckI7QUFDQTtJQUNJLGFBQWE7QUFDakI7QUFDQTs7R0FFRztBQUNIO0lBQ0ksZUFBZTtJQUNmLGlCQUFpQjtJQUNqQixxQkFBcUI7SUFDckIsa0JBQWtCO0FBQ3RCO0FBQ0E7SUFDSSxpQkFBaUI7SUFDakIsV0FBVztJQUNYLGtCQUFrQjtBQUN0QjtBQUNBO0lBQ0ksbUJBQW1CO0lBQ25CLG9CQUFvQjtJQUNwQix5QkFBeUI7SUFDekIsZ0JBQWdCO0lBQ2hCLFVBQVU7QUFDZDtBQUNBO0lBQ0ksbUJBQW1CO0lBQ25CLGdCQUFnQjtBQUNwQjtBQUNBO0lBQ0ksb0JBQW9CO0lBQ3BCLGVBQWU7SUFDZixpQkFBaUI7QUFDckI7QUFHQTtJQUNJLGlCQUFpQjtBQUNyQjtBQUVBO0lBQ0ksdUJBQXVCO0lBQ3ZCLGdCQUFnQjtBQUNwQjtBQUNBO0lBQ0ksWUFBWTtBQUNoQjtBQUdFLEtBQUs7QUFFTDtJQUNFLFlBQVk7SUFDWixtQkFBbUI7QUFDdkI7QUFDQTtJQUNJLG1CQUFtQjtJQUNuQixrQkFBa0I7QUFDdEI7QUFFQTtJQUNJLG1CQUFtQjtBQUN2QjtBQUVBO0lBQ0ksWUFBWTtJQUNaLHdCQUF3QjtBQUM1QjtBQUVBO0lBQ0ksMkJBQTJCO0FBQy9CO0FBQ0E7SUFDSSx1QkFBdUI7SUFDdkIsZ0NBQWdDO0lBQ2hDLFlBQVk7QUFDaEI7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixhQUFhO0FBQ2pCO0FBRUE7SUFDSSxpQkFBaUI7SUFDakIsa0JBQWtCOztBQUV0QjtBQUVBO0lBQ0ksZUFBZTtJQUNmLGlCQUFpQjtJQUNqQixxQkFBcUI7SUFDckIsa0JBQWtCO0FBQ3RCO0FBQ0E7cUVBQ3FFO0FBQ3JFO0FBQ0E7SUFDSSxtQkFBbUI7SUFDbkIsZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxXQUFXO0FBQ2Y7QUFDQTtJQUNJLFdBQVc7QUFDZjtBQUNBIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9hZG1pbnBheW1lbnQvYWRtaW5wYXltZW50LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuYnRuLmJ0bi1sZyB7XHJcbiAgICBwYWRkaW5nOiAxcmVtIDIuNHJlbTtcclxuICAgIGZvbnQtc2l6ZTogMTdweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIH1cclxuYnV0dG9uLmJ0bi53YXZlcy1lZmZlY3QuYnRuLWJsb2NrIHtcclxuICAgIGxpbmUtaGVpZ2h0OiAycmVtO1xyXG4gICAgZm9udC1zaXplOiAyNXB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuXHJcblxyXG5kaXYjaW1wb3J0IHtcclxuICAgIHBhZGRpbmc6IDJyZW07XHJcbiAgICBmb250LXNpemU6IDE5cHg7XHJcbn1cclxuLmNhcmQtaGVhZGVyLnZpZXcudmlldy1jYXNjYWRlLmdyYWRpZW50LWNhcmQtaGVhZGVyLmJsdWUtZ3JhZGllbnQge1xyXG4gICAgZm9udC1zaXplOiAyMXB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBjb2xvcjogI2ZmZiFpbXBvcnRhbnQ7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxuXHJcbmRpdiNpbXBvcnQge1xyXG4gICAgcGFkZGluZzogMnJlbTtcclxuICAgIGZvbnQtc2l6ZTogMTlweDtcclxufVxyXG5cclxuaW5wdXQuZm9ybS1jb250cm9sLnRvcC1pbnB1dCB7XHJcbiAgICBoZWlnaHQ6IDQ4cHg7XHJcbiAgICBcclxufVxyXG5cclxuaS5mYS5mYSB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBwYWRkaW5nOiAxMHB4O1xyXG59XHJcbi5pbnB1dC1ncm91cC10ZXh0IHtcclxuICAgIGhlaWdodDogNDhweDtcclxuICAgIG1hcmdpbi10b3A6IDBweDtcclxuICAgIGJhY2tncm91bmQ6ICNmZmY7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcclxuICAgIGJvcmRlci1yaWdodDogbm9uZTtcclxufVxyXG5cclxuZGl2I2ltcG9ydHByZTEge1xyXG4gICAgaGVpZ2h0OiA0OHB4O1xyXG59XHJcblxyXG5kaXYjaW1wb3J0bW92ZXtcclxuICAgIG1hcmdpbi10b3A6IDI1cHg7XHJcbn1cclxubGFiZWwjaW1wb3J0bGFiZWwge1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICBtYXJnaW4tbGVmdDogMTJweDtcclxufVxyXG5cclxuaDQuaW1wb3J0dHJ7XHJcbiAgICBmb250LXNpemU6IDI1cHg7XHJcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gICAgcGFkZGluZy1ib3R0b206IDE0cHg7XHJcbiAgICBtYXJnaW4tbGVmdDogLTJweDtcclxuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XHJcbn1cclxuXHJcbmJ1dHRvbi5idG4uYnRuLXN1Y2Nlc3MuUHJvY2VlZCB7XHJcbiAgICBtYXJnaW4tdG9wOiAtM3B4O1xyXG59XHJcblxyXG5kaXYjaW1wb3J0dmVuZG9ydG9wdXAge1xyXG4gICAgcGFkZGluZzogMnJlbTtcclxuICAgIG1hcmdpbi10b3A6IC04MnB4O1xyXG59XHJcblxyXG5oNC5pbXBvcnRvciB7XHJcbiAgICBtYXJnaW4tdG9wOiAzM3B4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcclxufVxyXG5cclxuZGl2I2ltcG9ydHZlbmRvcmRlcG8ge1xyXG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XHJcbiAgICBmb250LXNpemU6IDIycHg7XHJcbiAgICBmb250LXdlaWdodDogNjAwO1xyXG59XHJcblxyXG5kaXYjaW1wb3J0dHIge1xyXG4gICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBwYWRkaW5nOiAxMHB4O1xyXG4gICAgcGFkZGluZy1sZWZ0OiAxN3B4O1xyXG4gICAgbWFyZ2luLXRvcDogLTNweDtcclxufVxyXG5cclxuc2VsZWN0I2ltcG9ydHNlbGVjdCB7XHJcbiAgICBtYXJnaW4tbGVmdDogLTU4cHg7XHJcbn1cclxuXHJcbmg0I2ltcG9ydGRlcG9zaXQge1xyXG4gICAgbWFyZ2luLXRvcDogMjdweDtcclxuICAgIGZvbnQtc2l6ZTogMjVweDtcclxuICAgIGZvbnQtd2VpZ2h0OiA4MDA7XHJcbn1cclxuXHJcblxyXG5oNC5jYXJkLWhlYWRlci10aXRsZS5tYi0zLmluaXRpYWwge1xyXG4gICAgcGFkZGluZzogMHB4O1xyXG59XHJcblxyXG4uY2FyZC1oZWFkZXIgaDV7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5cclxuYnV0dG9uLmJ0bi5idG4tcHJpbWFyeS5idG4tYmxvY2sudmVyaWZ5e1xyXG4gICAgYm9yZGVyLXJhZGl1czogMzBweDtcclxufVxyXG5cclxuXHJcbmxhYmVsLmN1c3RvbS1jb250cm9sLWxhYmVsLmIge1xyXG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcclxufVxyXG5cclxucC5pbXBvcnQtdGV4dCB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBmb250LXNpemU6IDI0cHg7XHJcbiAgICBsaW5lLWhlaWdodDogMi41cmVtO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBjb2xvcjogZ3JlZW47XHJcbn1cclxuaDMuaW1wb3J0ZGV0YWlsIHtcclxuICAgIGNvbG9yOiBibGFjaztcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICBsaW5lLWhlaWdodDogMC41cmVtO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcblxyXG5cclxuXHJcbmRpdiNpbXBvcnRwYWlkIHtcclxuICAgIGZvbnQtc2l6ZTogMjFweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcbnAuaW1wb3J0LWVuZCB7XHJcbiAgICBmb250LXNpemU6IDIxcHg7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBmb250LXdlaWdodDogNjAwO1xyXG4gICAgY29sb3I6IHJlZDtcclxufVxyXG5cclxubGFiZWwjaW1wb3J0bGFiZWwge1xyXG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcclxufVxyXG5sYWJlbCNpbXBvcnRsYWJlbHR5cGUge1xyXG4gICAgbWFyZ2luLWxlZnQ6IDMycHg7XHJcbiAgICBmb250LXNpemU6IDE5cHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5kaXYjaW1wb3J0cGFpZDEge1xyXG4gICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcclxuICAgIGNvbG9yOiAjZmY0NDQ0O1xyXG59XHJcbi8qIFxyXG5sYWJlbC5jdXN0b20tY29udHJvbC1sYWJlbCB7XHJcbiAgICBmb250LXNpemU6IGluaXRpYWw7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufSAqL1xyXG4vKiBsYWJlbCB7XHJcbiAgICBmb250LXNpemU6IGluaXRpYWw7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufSAqL1xyXG5cclxuLmhlYWRlcnNlYyB7XHJcbiAgICBtYXJnaW4tbGVmdDogMzFweDtcclxufVxyXG4uYnRuLmJ0bi1wcmltYXJ5LnBheXdhbGxldHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG59XHJcbmg0LmNhcmQtaGVhZGVyLXRpdGxlLm1iLTMge1xyXG4gICAgcGFkZGluZzogMTBweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxufVxyXG5oNC5jYXJkLWhlYWRlci10aXRsZS5tYi0zLmluaXRpYWwge1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBtYXJnaW4tdG9wOiA0cHg7XHJcbiAgICBwYWRkaW5nOiAwcHg7XHJcbn1cclxuXHJcbmg1Lm91dGVyaGVhZGVyIHtcclxuICAgIGZvbnQtc2l6ZTogaW5pdGlhbDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgbWFyZ2luLWxlZnQ6IDE4cHg7XHJcbn1cclxuLyogYmxpbmNraW5nICovXHJcbi5ibGlua2luZ3tcclxuICAgIGFuaW1hdGlvbjpibGlua2luZ1RleHQgMS4ycyBpbmZpbml0ZTtcclxufVxyXG5Aa2V5ZnJhbWVzIGJsaW5raW5nVGV4dHtcclxuICAgIDAleyAgICAgY29sb3I6IHJlZDsgICAgfVxyXG4gICAgNDkleyAgICBjb2xvcjpyZWQ7IH1cclxuICAgIDYwJXsgICAgY29sb3I6IHRyYW5zcGFyZW50OyB9XHJcbiAgICA5OSV7ICAgIGNvbG9yOnRyYW5zcGFyZW50OyAgfVxyXG4gICAgMTAwJXsgICBjb2xvcjogcmVkOyAgICB9XHJcbn1cclxuXHJcbmIuY29sb3Ige1xyXG4gICAgZm9udC1zaXplOiBsYXJnZXI7XHJcbiAgICBjb2xvcjogY2hvY29sYXRlO1xyXG59XHJcbmxhYmVsLmNvbG9yIHtcclxuICAgIGNvbG9yOiBjaG9jb2xhdGU7XHJcbiAgICBmb250LXNpemU6IGxhcmdlO1xyXG4gICAgbWFyZ2luLWxlZnQ6IC0xMXB4O1xyXG59XHJcbmIuZG90IHtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbn1cclxuc3Bhbi5kb3Qge1xyXG4gICAgcGFkZGluZzogMTBweDtcclxufVxyXG5zcGFuLmR0dCB7XHJcbiAgICBtYXJnaW4tbGVmdDogMjRweDtcclxufVxyXG5zcGFuLmR0dDEge1xyXG4gICAgbWFyZ2luLWxlZnQ6IDk4cHg7XHJcbn1cclxuc3Bhbi5kdHQyIHtcclxuICAgIG1hcmdpbi1sZWZ0OiA4NHB4O1xyXG59XHJcbnNwYW4uZHR0MyB7XHJcbiAgICBtYXJnaW4tbGVmdDogOXB4O1xyXG59XHJcbnNwYW4uZHR0NCB7XHJcbiAgICBtYXJnaW4tbGVmdDogNjNweDtcclxufVxyXG4vKiAgKi9cclxuZGl2I2ltcG9ydCB7XHJcbiAgICBwYWRkaW5nOiAycmVtO1xyXG4gICAgZm9udC1zaXplOiAxOXB4O1xyXG59XHJcbmRpdiNpbXBvcnRuYW1lIHtcclxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xyXG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcclxufVxyXG5cclxuaDUuaW1wb3J0aW5mbyB7XHJcbiAgICBtYXJnaW4tdG9wOiAtMTNweDtcclxuICAgIGZvbnQtc2l6ZTogMjRweDtcclxuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XHJcbn1cclxuLmNvbnRhaW5lci5pbXBvcnRjdCB7XHJcbiAgICBtYXgtd2lkdGg6IDE2NzNweDtcclxufVxyXG4uY2hhcmdlIHtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbn1cclxuLyogLmNhcmQuZmlyc3Qge1xyXG4gICAgYm94LXNoYWRvdzogMnB4IDNweCAzcHggI2Q2ZDVkNSFpbXBvcnRhbnQ7XHJcbn0gKi9cclxuLmNhcmQtaGVhZGVyLnZpZXcudmlldy1jYXNjYWRlLmdyYWRpZW50LWNhcmQtaGVhZGVyLmJsdWUtZ3JhZGllbnQge1xyXG4gICAgZm9udC1zaXplOiAyMXB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBjb2xvcjogI2ZmZiFpbXBvcnRhbnQ7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxuLmNhcmQtaGVhZGVyLnZpZXcudmlldy1jYXNjYWRlLmdyYWRpZW50LWNhcmQtaGVhZGVyLmJsdWUtZ3JhZGllbnQuaW1wIHtcclxuICAgIG1hcmdpbi10b3A6IC0zM3B4O1xyXG4gICAgd2lkdGg6IDExNCU7XHJcbiAgICBtYXJnaW4tbGVmdDogLTMycHg7XHJcbn1cclxuaDQjYWRkQ2hhcmdlc3tcclxuICAgIGxpbmUtaGVpZ2h0OiAyLjVyZW07XHJcbiAgICBtYXJnaW4tYm90dG9tOiAtMjVweDtcclxuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbiAgICBmb250LXdlaWdodDogNjAwO1xyXG4gICAgY29sb3I6IHJlZDtcclxufVxyXG4uY2hhcmdlcyB7XHJcbiAgICBsaW5lLWhlaWdodDogMS41cmVtO1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxufVxyXG4uYnRuLmJ0bi1sZyB7XHJcbiAgICBwYWRkaW5nOiAxcmVtIDIuNHJlbTtcclxuICAgIGZvbnQtc2l6ZTogMTdweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcblxyXG5cclxuaDQjaW1wb3J0aGVhZCB7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5cclxuLmlucHV0LWdyb3VwLXRleHQge1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XHJcbiAgICBiYWNrZ3JvdW5kOiAjZmZmO1xyXG59XHJcbiN0b2FzdC1jb250YWluZXIgPiBkaXYge1xyXG4gICAgd2lkdGg6IDMwMHB4O1xyXG59XHJcblxyXG5cclxuICAvKiAgKi9cclxuICBcclxuICAuaW5wdXQtdmVuZG9yIHtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIGJhY2tncm91bmQ6ICNlYmY0Zjk7XHJcbn1cclxuLmNhcmQtYm9keS52ZW5kb3J7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAzcmVtO1xyXG4gICAgcGFkZGluZy1sZWZ0OiAzcmVtO1xyXG59XHJcblxyXG5kaXYjdmVuZG9ycm93IHtcclxuICAgIHBhZGRpbmctdG9wOiAwLjVyZW07XHJcbn1cclxuXHJcbnNlbGVjdC5mb3JtLWNvbnRyb2w6bm90KFtzaXplXSk6bm90KFttdWx0aXBsZV0pIHtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6I2ViZjRmOTsgO1xyXG59XHJcblxyXG4uY2FyZC5pbXBvcnRjYXJke1xyXG4gICAgYm94LXNoYWRvdzogMHB4IDBweCAxcHggMXB4O1xyXG59XHJcbi5jYXJkIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xyXG4gICAgYm94LXNoYWRvdzogNXB4IDVweCA1cHggNXB4IGdyZXk7XHJcbiAgICBtYXJnaW46IDEycHg7XHJcbn1cclxuXHJcbmkuZmFzLmZhLXdhbGxldCB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBwYWRkaW5nOiAxMHB4O1xyXG59XHJcblxyXG5oNSNpbXBvcnRzdWIge1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcblxyXG59XHJcblxyXG4uY2FyZC1oZWFkZXIudmlldy52aWV3LWNhc2NhZGUuZ3JhZGllbnQtY2FyZC1oZWFkZXIuYmx1ZS1ncmFkaWVudCB7XHJcbiAgICBmb250LXNpemU6IDIxcHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIGNvbG9yOiAjZmZmIWltcG9ydGFudDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG4vKiBNb2JpbGUgUG9ydHJhaXQgU2l6ZSB0byBNb2JpbGUgTGFuZHNjYXBlIFNpemUgKGRldmljZXMgYW5kIGJyb3dzZXJzKVxyXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDc5cHgpIHtcclxuYnV0dG9uLmJ0bi5idG4tcHJpbWFyeS5idG4tYmxvY2sudmVyaWZ5e1xyXG4gICAgYm9yZGVyLXJhZGl1czogMzBweDtcclxuICAgIG1hcmdpbi10b3A6IC0xcHg7XHJcbn1cclxuYnV0dG9uLmJ0bi5idG4tZGVmYXVsdC5idG4tbGcuYmFjayB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxufVxyXG5idXR0b24uYnRuLmJ0bi1wcmltYXJ5LmJ0bi1sZy51cGRhdGUge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbn1cclxufSJdfQ== */");

/***/ }),

/***/ "./src/app/components/adminpayment/adminpayment.component.ts":
/*!*******************************************************************!*\
  !*** ./src/app/components/adminpayment/adminpayment.component.ts ***!
  \*******************************************************************/
/*! exports provided: AdminpaymentComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AdminpaymentComponent", function() { return AdminpaymentComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_services_payment_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/payment.service */ "./src/app/services/payment.service.ts");
/* harmony import */ var src_app_services_master_organisation_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/master-organisation.service */ "./src/app/services/master-organisation.service.ts");
/* harmony import */ var src_app_services_master_paramters_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/services/master-paramters.service */ "./src/app/services/master-paramters.service.ts");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");
/* harmony import */ var src_app_services_wallet_detail_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/services/wallet-detail.service */ "./src/app/services/wallet-detail.service.ts");
/* harmony import */ var src_app_model_master_parameters__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/model/master-parameters */ "./src/app/model/master-parameters.ts");
/* harmony import */ var src_app_model_cheque_payment__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/model/cheque-payment */ "./src/app/model/cheque-payment.ts");
/* harmony import */ var src_app_model_bank_payment__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/model/bank-payment */ "./src/app/model/bank-payment.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");











let AdminpaymentComponent = class AdminpaymentComponent {
    constructor(masterOrganisationService, masterService, toastr, paymentService, router, walletDetailService) {
        this.masterOrganisationService = masterOrganisationService;
        this.masterService = masterService;
        this.toastr = toastr;
        this.paymentService = paymentService;
        this.router = router;
        this.walletDetailService = walletDetailService;
        this.vendors = new Array();
        this.no1 = 10000;
        this.no2 = 20000;
        this.no3 = 50000;
        this.no4 = 100000;
        this.allVenodr = false;
    }
    ;
    ngOnInit() {
        console.log(this.vendors.length);
        if (this.vendors == null || this.vendors.length == 0) {
            let a = this.masterOrganisationService.getInternalVendorType();
            let parameter = new src_app_model_master_parameters__WEBPACK_IMPORTED_MODULE_7__["MasterParameters"]();
            a.subscribe((data) => {
                console.log(data);
                parameter = data;
                let org = this.masterOrganisationService.getVendorsForSelectedType(parameter.paramId);
                org.subscribe((data) => {
                    this.vendors = JSON.parse(JSON.stringify(data));
                    console.log(data);
                });
            });
        }
        this.masterService.getParametersByParamType("BASE_CURRENCY")
            .subscribe((data) => {
            this.basecurrency = data[0];
            console.log(this.basecurrency.paramName);
            this.curr = "fa-" + this.basecurrency.paramName.toLowerCase();
        });
        this.iteration = "walletDetail";
        /*
        if (this.paymentService.getPendingAdminTopup() == "ADMIN_PENDING_TOPUPS") {
          this.paymentService.getAllPendingAdminTopup().subscribe((data) => {
            this.pendingTopUpList = data;
            this.adminPayment = null;
            console.log(this.pendingTopUpList)
            this.allVenodr = true;
            this.iteration = "PENDING_TRANSACTION";
          })
        } else {
          this.allVenodr = false;
          let a = this.masterOrganisationService.getInternalVendorType();
          let parameter: any = new MasterParameters();
          a.subscribe((data) => {
            console.log(data)
            parameter = data;
            let org = this.masterOrganisationService.getVendorsForSelectedType(parameter.paramId)
            org.subscribe((data) => {
              this.vendors = JSON.parse(JSON.stringify(data));
              console.log(data)
            });
          });
          this.masterService.getParametersByParamType("BASE_CURRENCY")
            .subscribe((data) => {
              this.basecurrency = data[0];
              console.log(this.basecurrency.paramName);
              this.curr = "fa-" + this.basecurrency.paramName.toLowerCase();
            })
          this.iteration = "initial"
        }
        */
    }
    onPendingTransation() {
        this.paymentService.getAllPendingAdminTopup().subscribe((data) => {
            this.pendingTopUpList = data;
            this.adminPayment = null;
            console.log(this.pendingTopUpList);
            this.allVenodr = true;
            this.iteration = "PENDING_TRANSACTION";
        });
    }
    onTopupWallet() {
        this.allVenodr = false;
        /*let a = this.masterOrganisationService.getInternalVendorType();
        let parameter: any = new MasterParameters();
        a.subscribe((data) => {
          console.log(data)
          parameter = data;
          let org = this.masterOrganisationService.getVendorsForSelectedType(parameter.paramId)
          org.subscribe((data) => {
            this.vendors = JSON.parse(JSON.stringify(data));
            console.log(data)
          });
        });
        this.masterService.getParametersByParamType("BASE_CURRENCY")
          .subscribe((data) => {
            this.basecurrency = data[0];
            console.log(this.basecurrency.paramName);
            this.curr = "fa-" + this.basecurrency.paramName.toLowerCase();
          })*/
        this.iteration = "initial";
    }
    pendingTopup() {
        this.paymentService.getAllPendingAdminTopup().subscribe((data) => {
            this.pendingTopUpList = data;
            console.log(this.pendingTopUpList);
            this.toastr.success('Cheque Details Updated  Successfully. Sent for Vendor Approval', 'Cheque Payment', { timeOut: 10000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
            this.iteration = "PENDING_TRANSACTION";
        });
    }
    onTopUpRupeesClick(value, template) {
        console.log(value);
        this.topupAmount = value;
        this.paymentOptions();
    }
    onChangeVendor() {
        console.log(this.vendorId);
        console.log(this.vendors);
        for (let v of this.vendors) {
            if (v.organisationId == this.vendorId) {
                this.vendor = v;
                console.log(this.vendor);
            }
        }
        this.paymentService.getAdminWallet(this.vendorId).subscribe((data) => {
            console.log(data);
            if (data == null) {
                this.walletBalance = 0;
                this.walletCurrency = this.basecurrency.paramName;
            }
            else {
                this.adminWallet = data;
                console.log(this.adminWallet);
                this.walletBalance = this.adminWallet.walletBalance;
                this.walletCurrency = this.adminWallet.walletCurrency;
            }
        });
    }
    paymentOptions() {
        console.log(this.topupAmount);
        this.paymentService.getPaymentMethods()
            .subscribe((data) => {
            this.paymentMethods = data;
            console.log(data);
            this.iteration = 'paymentoptions';
        });
    }
    onPaymentSelection(p) {
        console.log(p);
        this.paymentMode = p;
    }
    onProceed() {
        console.log(this.paymentMethod);
        let bankName = "";
        this.banks = new Array();
        this.walletDetailService.getAdminBankDetails().subscribe((data) => {
            bankName = JSON.parse(JSON.stringify(data)).bankName;
            this.banks.push(data);
            console.log(this.banks);
        });
        if (this.paymentMethod == 'Bank Transfer') {
            console.log(this.vendor);
            this.walletDetailService.getVendorAccountDetails(this.vendor.organisationRefNo).subscribe((data) => {
                console.log(data);
                this.accountDetials = data;
                this.walletDetailService.getAdminTopUpSequenceNo().subscribe((data) => {
                    this.bankPayment = new src_app_model_bank_payment__WEBPACK_IMPORTED_MODULE_9__["BankPayment"]();
                    this.bankPayment.topupRefNo = data;
                    console.log(bankName);
                    this.bankPayment.vendorId = this.vendor.organisationId;
                    this.bankPayment.paymentMode = "BANK";
                    this.bankPayment.topupAmount = this.topupAmount;
                    this.bankPayment.remittingName = "Singapore Infotech Pvt. Ltd.";
                    this.bankPayment.remittingBank = bankName;
                    this.paymentService.saveVendorOfflinePayment(this.bankPayment)
                        .subscribe((data) => {
                        console.log(data);
                        this.bankPayment = data;
                        this.bankPayment.organisationRefNo = this.vendor.organisationRefNo;
                        this.bankPayment.topupDate = new Date();
                        this.bankPayment.paidAmount = this.topupAmount;
                        this.iteration = "SHOW_TOPUP";
                    });
                });
            });
        }
        else if (this.paymentMethod == 'Cheque Payment') {
            this.walletDetailService.getAdminTopUpSequenceNo().subscribe((data) => {
                this.chequePayment = new src_app_model_cheque_payment__WEBPACK_IMPORTED_MODULE_8__["ChequePayment"]();
                this.chequePayment.topupRefNo = data;
                console.log(data);
                this.chequePayment.vendorId = this.vendor.organisationId;
                this.chequePayment.chequeIssuingBank = bankName;
                this.chequePayment.chequeAmount = this.topupAmount;
                this.chequePayment.organisationRefNo = this.vendor.organisationRefNo;
                this.chequePayment.chequeIssuerName = "Singapore Infotech Pvt. Ltd.";
                this.chequePayment.paymentMode = "CHEQUE";
                this.chequePayment.topupAmount = this.topupAmount;
                console.log(this.chequePayment);
                this.paymentService.saveVendorOfflinePayment(this.chequePayment)
                    .subscribe((data) => {
                    console.log(data);
                    this.chequePayment = data;
                    this.chequePayment.topupDate = new Date();
                    this.chequePayment.paidAmount = this.topupAmount;
                    this.iteration = "CHEQUE";
                });
                /*/
                this.masterOrganisationService.getVendor(this.vendorId)
                  .subscribe((data) => {
                    console.log(data);
                    let vendor = JSON.parse(JSON.stringify(data));
                    this.chequePayment.organisationRefNo = vendor.organisationRefNo;
                    this.chequePayment.topupDate = new Date();
                    this.chequePayment.topupAmount = this.topupAmount;
                    this.iteration = "CHEQUE";
                  })*/
            });
        }
        else {
            this.toastr.error('Topup Details Not Found Please Try Again !!', 'TopUp', {
                timeOut: 10000,
                positionClass: 'toast-top-center',
                progressBar: true,
                progressAnimation: 'increasing'
            });
        }
    }
    onBackPayment() {
        this.iteration = 'walletDetail';
    }
    updatePaymntInfo() {
        console.log("Update Payment info");
        this.iteration = 'SHOW_UPDATE_PAYMENT_INFO';
    }
    onBankPayment() {
        this.bankPayment.vendorId = this.vendorId;
        this.bankPayment.paymentMode = "BANK";
        console.log(this.bankPayment);
        this.paymentService.saveVendorOfflinePayment(this.bankPayment)
            .subscribe((data) => {
            this.adminPayment = JSON.parse(JSON.stringify(data));
            console.log(this.adminPayment);
            this.paymentService.getAllPendingAdminTopup().subscribe((data) => {
                this.pendingTopUpList = data;
                console.log(this.pendingTopUpList);
                this.toastr.success('Cheque Details Updated  Successfully. Sent for Vendor Approval', 'Cheque Payment', { timeOut: 10000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
                this.iteration = "PENDING_TRANSACTION";
            });
        });
    }
    onSaveCheque() {
        this.chequePayment.vendorId = this.vendorId;
        console.log(this.chequePayment);
        this.chequePayment.paymentMode = "CHEQUE";
        this.paymentService.saveVendorOfflinePayment(this.chequePayment)
            .subscribe((data) => {
            this.adminPayment = JSON.parse(JSON.stringify(data));
            console.log(this.adminPayment);
            this.paymentService.getAllPendingAdminTopup().subscribe((data) => {
                this.pendingTopUpList = data;
                console.log(this.pendingTopUpList);
                this.toastr.success('Cheque Details Updated  Successfully. Sent for Vendor Approval', 'Cheque Payment', { timeOut: 10000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
                this.iteration = "PENDING_TRANSACTION";
            });
        });
    }
    onAccountSummary() {
        this.router.navigate(['/reconil'], { queryParams: { iteration: 'accountSummary' } });
    }
    onBackClick() {
        this.iteration = 'walletDetail';
    }
    onPendingTopup() {
        this.paymentService.getAllVendorPendingTopup()
            .subscribe((data) => {
            this.pendingTopUpList = data;
            this.iteration = 'PENDING_TOPUP';
        });
    }
    onHoldTopup(p) {
        this.transaction = p;
        console.log(this.transaction);
    }
    onDelete() {
        if (this.transaction != null) {
            console.log(this.transaction.adminVendorPaymentId);
            if (this.transaction.adminVendorPaymentId != 0) {
                this.paymentService.deleteVendorPendingPayment(this.transaction.adminVendorPaymentId)
                    .subscribe((data) => {
                    this.toastr.error('Transaction Deleted!!', 'Transaction', { timeOut: 3000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
                    this.transaction = null;
                    this.onPendingTopup();
                });
            }
        }
        else {
            this.toastr.error('Select any Transaction', 'Transaction', { timeOut: 3000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
        }
    }
    onUpdateInfo() {
        if (this.transaction != null) {
            console.log(this.transaction);
            let organisationRefNo = "";
            console.log(this.vendors);
            for (let v of this.vendors) {
                if (v.organisationId == this.transaction.vendorId) {
                    organisationRefNo = v.organisationRefNo;
                    this.vendorId = v.organisationId;
                    this.vendor = v;
                }
            }
            this.banks = new Array();
            this.walletDetailService.getAdminBankDetails().subscribe((data) => {
                let bankName = JSON.parse(JSON.stringify(data)).bankName;
                this.banks.push(data);
                console.log(this.banks);
                if (this.transaction.paymentType == "BANK") {
                    this.bankPayment = this.transaction;
                    this.bankPayment.remittingName = "Singapore Infotech Pvt. Ltd.";
                    this.bankPayment.remittingBank = bankName;
                    this.bankPayment.organisationRefNo = organisationRefNo;
                    this.bankPayment.paidAmount = this.bankPayment.topupAmount;
                    this.iteration = 'SHOW_UPDATE_PAYMENT_INFO';
                }
                else {
                    this.chequePayment = this.transaction;
                    this.chequePayment.chequeIssuingBank = bankName;
                    this.chequePayment.chequeAmount = this.chequePayment.topupAmount;
                    this.chequePayment.organisationRefNo = organisationRefNo;
                    this.chequePayment.chequeIssuerName = "Singapore Infotech Pvt. Ltd.";
                    this.iteration = 'CHEQUE';
                }
            });
        }
        else {
            this.toastr.error('Select any Transaction', 'Transaction', { timeOut: 3000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
        }
    }
};
AdminpaymentComponent.ctorParameters = () => [
    { type: src_app_services_master_organisation_service__WEBPACK_IMPORTED_MODULE_3__["MasterOrganisationService"] },
    { type: src_app_services_master_paramters_service__WEBPACK_IMPORTED_MODULE_4__["MasterParamtersService"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_5__["ToastrService"] },
    { type: src_app_services_payment_service__WEBPACK_IMPORTED_MODULE_2__["PaymentService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_10__["Router"] },
    { type: src_app_services_wallet_detail_service__WEBPACK_IMPORTED_MODULE_6__["WalletDetailService"] }
];
AdminpaymentComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-adminpayment',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./adminpayment.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/adminpayment/adminpayment.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./adminpayment.component.css */ "./src/app/components/adminpayment/adminpayment.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_master_organisation_service__WEBPACK_IMPORTED_MODULE_3__["MasterOrganisationService"], src_app_services_master_paramters_service__WEBPACK_IMPORTED_MODULE_4__["MasterParamtersService"],
        ngx_toastr__WEBPACK_IMPORTED_MODULE_5__["ToastrService"], src_app_services_payment_service__WEBPACK_IMPORTED_MODULE_2__["PaymentService"], _angular_router__WEBPACK_IMPORTED_MODULE_10__["Router"], src_app_services_wallet_detail_service__WEBPACK_IMPORTED_MODULE_6__["WalletDetailService"]])
], AdminpaymentComponent);



/***/ }),

/***/ "./src/app/components/amdinpaymentgate/amdinpaymentgate.component.css":
/*!****************************************************************************!*\
  !*** ./src/app/components/amdinpaymentgate/amdinpaymentgate.component.css ***!
  \****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("input[type=\"radio\"] { \r\n    -webkit-transform: scale(2.5); \r\n    transform: scale(2.5);\r\n}\r\n\r\ninput#exampleRadios2 {\r\n    margin-top: 10px;\r\n}\r\n\r\ninput.form-check-input.hide1 {\r\n    margin-top: 4px;\r\n}\r\n\r\nlabel.form-check-label.hidelabel {\r\n    font-weight: 800;\r\n    margin-left: 18px;\r\n    margin-top: 4px;\r\n    font-size: 20px;\r\n}\r\n\r\n.card-header h5{\r\n    font-weight: bold;\r\n}\r\n\r\ninput[type=\"checkbox\"] {\r\n    width: 30px;\r\n    height: 30px;\r\n    margin-top: -4px;\r\n}\r\n\r\nh4.card-header-title.mb-3 {\r\n    padding: 10px;\r\n    margin-top: 10px;\r\n}\r\n\r\nlabel {\r\n    font-size: initial;\r\n    font-weight: bold;\r\n}\r\n\r\np.bname {\r\n    font-size: initial;\r\n    font-weight: bold;\r\n    margin-left: -84px;\r\n    color: chocolate;\r\n}\r\n\r\np.bname1 {\r\n    font-size: initial;\r\n    font-weight: bold;\r\n    margin-left: -73px;\r\n    color: chocolate;\r\n}\r\n\r\np.acc {\r\n    font-size: initial;\r\n    font-weight: bold;\r\n    margin-left: -22px;\r\n    color: chocolate;\r\n}\r\n\r\n/* blincking */\r\n\r\n.blinking{\r\n    -webkit-animation:blinkingText 1.2s infinite;\r\n            animation:blinkingText 1.2s infinite;\r\n}\r\n\r\n@-webkit-keyframes blinkingText{\r\n    0%{     color: red;    }\r\n    49%{    color:red; }\r\n    60%{    color: transparent; }\r\n    99%{    color:transparent;  }\r\n    100%{   color: red;    }\r\n}\r\n\r\n@keyframes blinkingText{\r\n    0%{     color: red;    }\r\n    49%{    color:red; }\r\n    60%{    color: transparent; }\r\n    99%{    color:transparent;  }\r\n    100%{   color: red;    }\r\n}\r\n\r\nlabel.color {\r\n    color: chocolate;\r\n    font-size: large;\r\n}\r\n\r\nb.color {\r\n    font-size: larger;\r\n    color: chocolate;\r\n}\r\n\r\nbutton.btn.btn-success.upload {\r\n    font-size: initial;  \r\n}\r\n\r\nbutton.btn-info.upload {\r\n    font-size: initial;\r\n}\r\n\r\n.button-section.check {\r\n    margin-right: 23px;\r\n}\r\n\r\n.button-section.approve {\r\n    margin-top: -9px;\r\n}\r\n\r\nlabel.form-check-label.hidelabel1 {\r\n    margin-left: 23px;\r\n}\r\n\r\n.container.in {\r\n    margin-top: 23px;\r\n}\r\n\r\n.card.pay {\r\n    margin-top: 102px;\r\n    margin-left: 40px;\r\n    margin-right: 40px;\r\n}\r\n\r\n.form-group.select {\r\n    margin-right: 19px;\r\n    margin-left: -101px;\r\n}\r\n\r\n.match {\r\n    margin-left: 32px;\r\n}\r\n\r\n.col-md-2.aggree {\r\n    margin-top: 6px;\r\n}\r\n\r\nbutton.btn.btn-dark-green.match {\r\n    margin-top: 15px;\r\n    margin-left: -28px;\r\n    height: 56px;\r\n}\r\n\r\ninput#cp1 {\r\n    margin-top: -15px;\r\n}\r\n\r\nselect.form-control.importpay{\r\n    margin-top: 15px;\r\n}\r\n\r\nlabel#importdeposit {\r\n    margin-left: 16px;\r\n}\r\n\r\n.form-check.p1 {\r\n    margin-top: 10px;\r\n    margin-left: -14px;\r\n}\r\n\r\np.acc1 {\r\n    margin-top: 3px;\r\n    font-size: initial;\r\n    font-weight: bold;\r\n    color: chocolate;\r\n    margin-left: -117px;\r\n}\r\n\r\nlabel.pay1 {\r\n    margin-top: 5px;\r\n}\r\n\r\ninput#dfgh {\r\n    margin-top: 5px;\r\n}\r\n\r\n.collect1 {\r\n    margin-left: 16px;\r\n}\r\n\r\n.form-check.check1 {\r\n    margin-top: 10px;\r\n    margin-right: 14px;\r\n}\r\n\r\n.table-head.import {\r\n    margin-left: 21px;\r\n}\r\n\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n  }\r\n\r\nimg#importimg {\r\n    margin-top: -15px;\r\n}\r\n\r\ndiv#importhead {\r\n    font-weight: bold;\r\n    font-size: 20px;\r\n    padding: 14px 0px 10px 62px;\r\n    text-align: center;\r\n}\r\n\r\np#importbal {\r\n    line-height: 3.5rem;\r\n    color: orangered;\r\n}\r\n\r\np.import-text {\r\n    text-align: center;\r\n    font-size: 24px;\r\n    line-height: 2.5rem;\r\n    font-weight: 400;\r\n    color: green;\r\n}\r\n\r\nh3.importdetail {\r\n    color: black;\r\n    font-size: 20px;\r\n    text-align: left;\r\n    line-height: 0.5rem;\r\n}\r\n\r\ndiv#importpaid {\r\n    font-size: 21px;\r\n    font-weight: bold;\r\n}\r\n\r\np.import-end {\r\n    font-size: 21px;\r\n    text-align: center;\r\n    font-weight: 600;\r\n    color: red;\r\n}\r\n\r\nlabel#importlabel {\r\n    font-weight: bold;\r\n    font-size: 20px;\r\n    margin-left: 12px;\r\n}\r\n\r\nlabel#importlabeltype {\r\n    margin-left: 32px;\r\n    font-size: 19px;\r\n}\r\n\r\ndiv#importpaid1 {\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    text-align: right;\r\n}\r\n\r\ndiv#importname {\r\n    text-align: right;\r\n    font-weight: 700;\r\n}\r\n\r\ndiv#importwallet {\r\n    font-size: 18px;\r\n}\r\n\r\ndiv#importwalletalue {\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    color: green;\r\n}\r\n\r\ndiv#wallet-1 {\r\n    margin-top: 5px;\r\n}\r\n\r\n.container.importct{\r\n    max-width: 1500px;\r\n}\r\n\r\n/*  */\r\n\r\ndiv#import {\r\n    padding: 2rem;\r\n    font-size: 19px;\r\n}\r\n\r\ndiv#importname {\r\n    text-align: right;\r\n    font-weight: 800;\r\n}\r\n\r\nh5.importinfo {\r\n    margin-top: -13px;\r\n    font-size: 24px;\r\n    font-weight: 500;\r\n}\r\n\r\n.container.importct {\r\n    max-width: 1748px;\r\n}\r\n\r\n.charge {\r\n    padding: 10px;\r\n}\r\n\r\n.card-header.view.view-cascade.gradient-card-header.blue-gradient {\r\n    font-size: 21px;\r\n    font-weight: bold;\r\n    color: #fff!important;\r\n    text-align: center;\r\n}\r\n\r\n.card-header.view.view-cascade.gradient-card-header.blue-gradient.imp {\r\n    margin-top: -33px;\r\n    width: 114%;\r\n    margin-left: -32px;\r\n}\r\n\r\nh4#addCharges{\r\n    line-height: 2.5rem;\r\n    margin-bottom: -25px;\r\n    text-transform: uppercase;\r\n    font-weight: 600;\r\n}\r\n\r\n.charges {\r\n    line-height: 1.5rem;\r\n    margin-top: 10px;\r\n}\r\n\r\nh4.importtr {\r\n    font-size: 25px;\r\n    text-align: left;\r\n    padding-bottom: 14px;\r\n    margin-left: -2px;\r\n    font-weight: 500;\r\n}\r\n\r\ndiv#importmove {\r\n    margin-top: 25px;\r\n}\r\n\r\nbutton.btn.waves-effect.btn-block {\r\n    line-height: 2rem;\r\n    font-size: 25px;\r\n    font-weight: bold;\r\n\r\n}\r\n\r\n.card-header.view.view-cascade.gradient-card-header.blue-gradient.importh {\r\n    margin-top: -33px;\r\n    margin: -33px -33px 10px -33px;\r\n}\r\n\r\nh4.importor {\r\n    margin-top: 33px;\r\n    font-weight: 600;\r\n}\r\n\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n}\r\n\r\nbutton.btn.upload {\r\n    height: 64px;\r\n}\r\n\r\ndiv#importbl {\r\n    margin-left: 113px;\r\n}\r\n\r\ndiv#importspan {\r\n    font-size: 20px;\r\n    font-weight: 900;\r\n    color: white;\r\n    margin-right: 12px;\r\n}\r\n\r\n.input-group-text {\r\n    height: 48px;\r\n    margin-top: 0px;\r\n    background: #fff;\r\n    border: 1px solid black;\r\n    border-right: none;\r\n}\r\n\r\n/*  */\r\n\r\n.input-vendor {\r\n    height: 50px;\r\n    background: #ebf4f9;\r\n}\r\n\r\n.card-body.vendor{\r\n    padding-right: 3rem;\r\n    padding-left: 3rem;\r\n}\r\n\r\ndiv#vendorrow {\r\n    padding-top: 0.5rem;\r\n}\r\n\r\nselect.form-control:not([size]):not([multiple]) {\r\n    height: 50px;\r\n    background-color:#ebf4f9; ;\r\n}\r\n\r\n/* Mobile Portrait Size to Mobile Landscape Size (devices and browsers)\r\n=================================================================== */\r\n\r\n@media only screen and (max-width: 479px) {\r\n    .col-md-3.hidetrans {\r\n        margin-left: 10px;\r\n    }\r\n    \r\np.acno {\r\n    position: absolute;\r\n    right: 0;\r\n    left: -47px;\r\n    top: 0;\r\n    font-weight: 800;\r\n}\r\n.row.dummy {\r\n    margin-top: -111px;\r\n}\r\n.card-body.banrecon{\r\n    margin-top:107px;\r\n}\r\np.bname {\r\n    margin-left: 0px;\r\n}\r\np.bname1 {\r\n    margin-left: 0px;\r\n}\r\np.acc {\r\n    margin-left: 0px;\r\n}\r\n.form-check {\r\n    margin-left: 8px;\r\n}\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9hbWRpbnBheW1lbnRnYXRlL2FtZGlucGF5bWVudGdhdGUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUVJLDZCQUE2QjtJQUM3QixxQkFBcUI7QUFDekI7O0FBRUE7SUFDSSxnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxlQUFlO0FBQ25COztBQUNBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixlQUFlO0lBQ2YsZUFBZTtBQUNuQjs7QUFDQTtJQUNJLGlCQUFpQjtBQUNyQjs7QUFDQTtJQUNJLFdBQVc7SUFDWCxZQUFZO0lBQ1osZ0JBQWdCO0FBQ3BCOztBQUNBO0lBQ0ksYUFBYTtJQUNiLGdCQUFnQjtBQUNwQjs7QUFDQTtJQUNJLGtCQUFrQjtJQUNsQixpQkFBaUI7QUFDckI7O0FBQ0E7SUFDSSxrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCLGtCQUFrQjtJQUNsQixnQkFBZ0I7QUFDcEI7O0FBQ0E7SUFDSSxrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCLGtCQUFrQjtJQUNsQixnQkFBZ0I7QUFDcEI7O0FBQ0E7SUFDSSxrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCLGtCQUFrQjtJQUNsQixnQkFBZ0I7QUFDcEI7O0FBQ0EsY0FBYzs7QUFDZDtJQUNJLDRDQUFvQztZQUFwQyxvQ0FBb0M7QUFDeEM7O0FBQ0E7SUFDSSxRQUFRLFVBQVUsS0FBSztJQUN2QixRQUFRLFNBQVMsRUFBRTtJQUNuQixRQUFRLGtCQUFrQixFQUFFO0lBQzVCLFFBQVEsaUJBQWlCLEdBQUc7SUFDNUIsUUFBUSxVQUFVLEtBQUs7QUFDM0I7O0FBTkE7SUFDSSxRQUFRLFVBQVUsS0FBSztJQUN2QixRQUFRLFNBQVMsRUFBRTtJQUNuQixRQUFRLGtCQUFrQixFQUFFO0lBQzVCLFFBQVEsaUJBQWlCLEdBQUc7SUFDNUIsUUFBUSxVQUFVLEtBQUs7QUFDM0I7O0FBQ0E7SUFDSSxnQkFBZ0I7SUFDaEIsZ0JBQWdCO0FBQ3BCOztBQUNBO0lBQ0ksaUJBQWlCO0lBQ2pCLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLGtCQUFrQjtBQUN0Qjs7QUFHQTtJQUNJLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLGdCQUFnQjtBQUNwQjs7QUFJQTtJQUNJLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLGdCQUFnQjtBQUNwQjs7QUFDQTtJQUNJLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsa0JBQWtCO0FBQ3RCOztBQUdBO0lBQ0ksa0JBQWtCO0lBQ2xCLG1CQUFtQjtBQUN2Qjs7QUFDQTtJQUNJLGlCQUFpQjtBQUNyQjs7QUFHQTtJQUNJLGVBQWU7QUFDbkI7O0FBR0E7SUFDSSxnQkFBZ0I7SUFDaEIsa0JBQWtCO0lBQ2xCLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSxpQkFBaUI7QUFDckI7O0FBQ0E7SUFDSSxnQkFBZ0I7QUFDcEI7O0FBR0E7SUFDSSxpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxnQkFBZ0I7SUFDaEIsa0JBQWtCO0FBQ3RCOztBQUNBO0lBQ0ksZUFBZTtJQUNmLGtCQUFrQjtJQUNsQixpQkFBaUI7SUFDakIsZ0JBQWdCO0lBQ2hCLG1CQUFtQjtBQUN2Qjs7QUFHQTtJQUNJLGVBQWU7QUFDbkI7O0FBQ0E7SUFDSSxlQUFlO0FBQ25COztBQUVBO0lBQ0ksaUJBQWlCO0FBQ3JCOztBQUNBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGtCQUFrQjtBQUN0Qjs7QUFHQTtJQUNJLGlCQUFpQjtBQUNyQjs7QUFDQTtJQUNJLG9CQUFvQjtJQUNwQixlQUFlO0lBQ2YsaUJBQWlCO0VBQ25COztBQUVGO0lBQ0ksaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLGVBQWU7SUFDZiwyQkFBMkI7SUFDM0Isa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksbUJBQW1CO0lBQ25CLGdCQUFnQjtBQUNwQjs7QUFHQTtJQUNJLGtCQUFrQjtJQUNsQixlQUFlO0lBQ2YsbUJBQW1CO0lBQ25CLGdCQUFnQjtJQUNoQixZQUFZO0FBQ2hCOztBQUNBO0lBQ0ksWUFBWTtJQUNaLGVBQWU7SUFDZixnQkFBZ0I7SUFDaEIsbUJBQW1CO0FBQ3ZCOztBQUlBO0lBQ0ksZUFBZTtJQUNmLGlCQUFpQjtBQUNyQjs7QUFDQTtJQUNJLGVBQWU7SUFDZixrQkFBa0I7SUFDbEIsZ0JBQWdCO0lBQ2hCLFVBQVU7QUFDZDs7QUFFQTtJQUNJLGlCQUFpQjtJQUNqQixlQUFlO0lBQ2YsaUJBQWlCO0FBQ3JCOztBQUNBO0lBQ0ksaUJBQWlCO0lBQ2pCLGVBQWU7QUFDbkI7O0FBQ0E7SUFDSSxlQUFlO0lBQ2YsaUJBQWlCO0lBQ2pCLGlCQUFpQjtBQUNyQjs7QUFDQTtJQUNJLGlCQUFpQjtJQUNqQixnQkFBZ0I7QUFDcEI7O0FBQ0E7SUFDSSxlQUFlO0FBQ25COztBQUVBO0lBQ0ksZUFBZTtJQUNmLGlCQUFpQjtJQUNqQixZQUFZO0FBQ2hCOztBQUNBO0lBQ0ksZUFBZTtBQUNuQjs7QUFDQTtJQUNJLGlCQUFpQjtBQUNyQjs7QUFFQSxLQUFLOztBQUNMO0lBQ0ksYUFBYTtJQUNiLGVBQWU7QUFDbkI7O0FBQ0E7SUFDSSxpQkFBaUI7SUFDakIsZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLGVBQWU7SUFDZixnQkFBZ0I7QUFDcEI7O0FBQ0E7SUFDSSxpQkFBaUI7QUFDckI7O0FBQ0E7SUFDSSxhQUFhO0FBQ2pCOztBQUNBO0lBQ0ksZUFBZTtJQUNmLGlCQUFpQjtJQUNqQixxQkFBcUI7SUFDckIsa0JBQWtCO0FBQ3RCOztBQUdBO0lBQ0ksaUJBQWlCO0lBQ2pCLFdBQVc7SUFDWCxrQkFBa0I7QUFDdEI7O0FBQ0E7SUFDSSxtQkFBbUI7SUFDbkIsb0JBQW9CO0lBQ3BCLHlCQUF5QjtJQUN6QixnQkFBZ0I7QUFDcEI7O0FBQ0E7SUFDSSxtQkFBbUI7SUFDbkIsZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksZUFBZTtJQUNmLGdCQUFnQjtJQUNoQixvQkFBb0I7SUFDcEIsaUJBQWlCO0lBQ2pCLGdCQUFnQjtBQUNwQjs7QUFDQTtJQUNJLGdCQUFnQjtBQUNwQjs7QUFDQTtJQUNJLGlCQUFpQjtJQUNqQixlQUFlO0lBQ2YsaUJBQWlCOztBQUVyQjs7QUFHQTtJQUNJLGlCQUFpQjtJQUNqQiw4QkFBOEI7QUFDbEM7O0FBQ0E7SUFDSSxnQkFBZ0I7SUFDaEIsZ0JBQWdCO0FBQ3BCOztBQUdBO0lBQ0ksb0JBQW9CO0lBQ3BCLGVBQWU7SUFDZixpQkFBaUI7QUFDckI7O0FBR0E7SUFDSSxZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksa0JBQWtCO0FBQ3RCOztBQUlBO0lBQ0ksZUFBZTtJQUNmLGdCQUFnQjtJQUNoQixZQUFZO0lBQ1osa0JBQWtCO0FBQ3RCOztBQUNBO0lBQ0ksWUFBWTtJQUNaLGVBQWU7SUFDZixnQkFBZ0I7SUFDaEIsdUJBQXVCO0lBQ3ZCLGtCQUFrQjtBQUN0Qjs7QUFFRSxLQUFLOztBQUVMO0lBQ0UsWUFBWTtJQUNaLG1CQUFtQjtBQUN2Qjs7QUFDQTtJQUNJLG1CQUFtQjtJQUNuQixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osd0JBQXdCO0FBQzVCOztBQUdBO3FFQUNxRTs7QUFDckU7SUFDSTtRQUNJLGlCQUFpQjtJQUNyQjs7QUFFSjtJQUNJLGtCQUFrQjtJQUNsQixRQUFRO0lBQ1IsV0FBVztJQUNYLE1BQU07SUFDTixnQkFBZ0I7QUFDcEI7QUFDQTtJQUNJLGtCQUFrQjtBQUN0QjtBQUNBO0lBQ0ksZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxnQkFBZ0I7QUFDcEI7QUFDQTtJQUNJLGdCQUFnQjtBQUNwQjtBQUNBO0lBQ0ksZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxnQkFBZ0I7QUFDcEI7QUFDQSIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvYW1kaW5wYXltZW50Z2F0ZS9hbWRpbnBheW1lbnRnYXRlLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpbnB1dFt0eXBlPVwicmFkaW9cIl0ge1xyXG4gICAgLW1zLXRyYW5zZm9ybTogc2NhbGUoMi41KTsgXHJcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMi41KTsgXHJcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDIuNSk7XHJcbn1cclxuXHJcbmlucHV0I2V4YW1wbGVSYWRpb3MyIHtcclxuICAgIG1hcmdpbi10b3A6IDEwcHg7XHJcbn1cclxuXHJcbmlucHV0LmZvcm0tY2hlY2staW5wdXQuaGlkZTEge1xyXG4gICAgbWFyZ2luLXRvcDogNHB4O1xyXG59XHJcbmxhYmVsLmZvcm0tY2hlY2stbGFiZWwuaGlkZWxhYmVsIHtcclxuICAgIGZvbnQtd2VpZ2h0OiA4MDA7XHJcbiAgICBtYXJnaW4tbGVmdDogMThweDtcclxuICAgIG1hcmdpbi10b3A6IDRweDtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxufVxyXG4uY2FyZC1oZWFkZXIgaDV7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5pbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0ge1xyXG4gICAgd2lkdGg6IDMwcHg7XHJcbiAgICBoZWlnaHQ6IDMwcHg7XHJcbiAgICBtYXJnaW4tdG9wOiAtNHB4O1xyXG59XHJcbmg0LmNhcmQtaGVhZGVyLXRpdGxlLm1iLTMge1xyXG4gICAgcGFkZGluZzogMTBweDtcclxuICAgIG1hcmdpbi10b3A6IDEwcHg7XHJcbn1cclxubGFiZWwge1xyXG4gICAgZm9udC1zaXplOiBpbml0aWFsO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxucC5ibmFtZSB7XHJcbiAgICBmb250LXNpemU6IGluaXRpYWw7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIG1hcmdpbi1sZWZ0OiAtODRweDtcclxuICAgIGNvbG9yOiBjaG9jb2xhdGU7XHJcbn1cclxucC5ibmFtZTEge1xyXG4gICAgZm9udC1zaXplOiBpbml0aWFsO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBtYXJnaW4tbGVmdDogLTczcHg7XHJcbiAgICBjb2xvcjogY2hvY29sYXRlO1xyXG59XHJcbnAuYWNjIHtcclxuICAgIGZvbnQtc2l6ZTogaW5pdGlhbDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgbWFyZ2luLWxlZnQ6IC0yMnB4O1xyXG4gICAgY29sb3I6IGNob2NvbGF0ZTtcclxufVxyXG4vKiBibGluY2tpbmcgKi9cclxuLmJsaW5raW5ne1xyXG4gICAgYW5pbWF0aW9uOmJsaW5raW5nVGV4dCAxLjJzIGluZmluaXRlO1xyXG59XHJcbkBrZXlmcmFtZXMgYmxpbmtpbmdUZXh0e1xyXG4gICAgMCV7ICAgICBjb2xvcjogcmVkOyAgICB9XHJcbiAgICA0OSV7ICAgIGNvbG9yOnJlZDsgfVxyXG4gICAgNjAleyAgICBjb2xvcjogdHJhbnNwYXJlbnQ7IH1cclxuICAgIDk5JXsgICAgY29sb3I6dHJhbnNwYXJlbnQ7ICB9XHJcbiAgICAxMDAleyAgIGNvbG9yOiByZWQ7ICAgIH1cclxufVxyXG5sYWJlbC5jb2xvciB7XHJcbiAgICBjb2xvcjogY2hvY29sYXRlO1xyXG4gICAgZm9udC1zaXplOiBsYXJnZTtcclxufVxyXG5iLmNvbG9yIHtcclxuICAgIGZvbnQtc2l6ZTogbGFyZ2VyO1xyXG4gICAgY29sb3I6IGNob2NvbGF0ZTtcclxufVxyXG5cclxuYnV0dG9uLmJ0bi5idG4tc3VjY2Vzcy51cGxvYWQge1xyXG4gICAgZm9udC1zaXplOiBpbml0aWFsOyAgXHJcbn1cclxuXHJcbmJ1dHRvbi5idG4taW5mby51cGxvYWQge1xyXG4gICAgZm9udC1zaXplOiBpbml0aWFsO1xyXG59XHJcblxyXG5cclxuLmJ1dHRvbi1zZWN0aW9uLmNoZWNrIHtcclxuICAgIG1hcmdpbi1yaWdodDogMjNweDtcclxufVxyXG5cclxuLmJ1dHRvbi1zZWN0aW9uLmFwcHJvdmUge1xyXG4gICAgbWFyZ2luLXRvcDogLTlweDtcclxufVxyXG5cclxuXHJcblxyXG5sYWJlbC5mb3JtLWNoZWNrLWxhYmVsLmhpZGVsYWJlbDEge1xyXG4gICAgbWFyZ2luLWxlZnQ6IDIzcHg7XHJcbn1cclxuXHJcbi5jb250YWluZXIuaW4ge1xyXG4gICAgbWFyZ2luLXRvcDogMjNweDtcclxufVxyXG4uY2FyZC5wYXkge1xyXG4gICAgbWFyZ2luLXRvcDogMTAycHg7XHJcbiAgICBtYXJnaW4tbGVmdDogNDBweDtcclxuICAgIG1hcmdpbi1yaWdodDogNDBweDtcclxufVxyXG5cclxuXHJcbi5mb3JtLWdyb3VwLnNlbGVjdCB7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDE5cHg7XHJcbiAgICBtYXJnaW4tbGVmdDogLTEwMXB4O1xyXG59XHJcbi5tYXRjaCB7XHJcbiAgICBtYXJnaW4tbGVmdDogMzJweDtcclxufVxyXG5cclxuXHJcbi5jb2wtbWQtMi5hZ2dyZWUge1xyXG4gICAgbWFyZ2luLXRvcDogNnB4O1xyXG59XHJcblxyXG5cclxuYnV0dG9uLmJ0bi5idG4tZGFyay1ncmVlbi5tYXRjaCB7XHJcbiAgICBtYXJnaW4tdG9wOiAxNXB4O1xyXG4gICAgbWFyZ2luLWxlZnQ6IC0yOHB4O1xyXG4gICAgaGVpZ2h0OiA1NnB4O1xyXG59XHJcblxyXG5pbnB1dCNjcDEge1xyXG4gICAgbWFyZ2luLXRvcDogLTE1cHg7XHJcbn1cclxuc2VsZWN0LmZvcm0tY29udHJvbC5pbXBvcnRwYXl7XHJcbiAgICBtYXJnaW4tdG9wOiAxNXB4O1xyXG59XHJcblxyXG5cclxubGFiZWwjaW1wb3J0ZGVwb3NpdCB7XHJcbiAgICBtYXJnaW4tbGVmdDogMTZweDtcclxufVxyXG5cclxuLmZvcm0tY2hlY2sucDEge1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxuICAgIG1hcmdpbi1sZWZ0OiAtMTRweDtcclxufVxyXG5wLmFjYzEge1xyXG4gICAgbWFyZ2luLXRvcDogM3B4O1xyXG4gICAgZm9udC1zaXplOiBpbml0aWFsO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBjb2xvcjogY2hvY29sYXRlO1xyXG4gICAgbWFyZ2luLWxlZnQ6IC0xMTdweDtcclxufVxyXG5cclxuXHJcbmxhYmVsLnBheTEge1xyXG4gICAgbWFyZ2luLXRvcDogNXB4O1xyXG59XHJcbmlucHV0I2RmZ2gge1xyXG4gICAgbWFyZ2luLXRvcDogNXB4O1xyXG59XHJcblxyXG4uY29sbGVjdDEge1xyXG4gICAgbWFyZ2luLWxlZnQ6IDE2cHg7XHJcbn1cclxuLmZvcm0tY2hlY2suY2hlY2sxIHtcclxuICAgIG1hcmdpbi10b3A6IDEwcHg7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDE0cHg7XHJcbn1cclxuXHJcblxyXG4udGFibGUtaGVhZC5pbXBvcnQge1xyXG4gICAgbWFyZ2luLWxlZnQ6IDIxcHg7XHJcbn1cclxuLmJ0bi5idG4tbGcge1xyXG4gICAgcGFkZGluZzogMXJlbSAyLjRyZW07XHJcbiAgICBmb250LXNpemU6IDE3cHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICB9XHJcbiAgXHJcbmltZyNpbXBvcnRpbWcge1xyXG4gICAgbWFyZ2luLXRvcDogLTE1cHg7XHJcbn1cclxuXHJcbmRpdiNpbXBvcnRoZWFkIHtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgcGFkZGluZzogMTRweCAwcHggMTBweCA2MnB4O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcblxyXG5wI2ltcG9ydGJhbCB7XHJcbiAgICBsaW5lLWhlaWdodDogMy41cmVtO1xyXG4gICAgY29sb3I6IG9yYW5nZXJlZDtcclxufVxyXG5cclxuXHJcbnAuaW1wb3J0LXRleHQge1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgZm9udC1zaXplOiAyNHB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IDIuNXJlbTtcclxuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XHJcbiAgICBjb2xvcjogZ3JlZW47XHJcbn1cclxuaDMuaW1wb3J0ZGV0YWlsIHtcclxuICAgIGNvbG9yOiBibGFjaztcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICBsaW5lLWhlaWdodDogMC41cmVtO1xyXG59XHJcblxyXG5cclxuXHJcbmRpdiNpbXBvcnRwYWlkIHtcclxuICAgIGZvbnQtc2l6ZTogMjFweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcbnAuaW1wb3J0LWVuZCB7XHJcbiAgICBmb250LXNpemU6IDIxcHg7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBmb250LXdlaWdodDogNjAwO1xyXG4gICAgY29sb3I6IHJlZDtcclxufVxyXG5cclxubGFiZWwjaW1wb3J0bGFiZWwge1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICBtYXJnaW4tbGVmdDogMTJweDtcclxufVxyXG5sYWJlbCNpbXBvcnRsYWJlbHR5cGUge1xyXG4gICAgbWFyZ2luLWxlZnQ6IDMycHg7XHJcbiAgICBmb250LXNpemU6IDE5cHg7XHJcbn1cclxuZGl2I2ltcG9ydHBhaWQxIHtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XHJcbn1cclxuZGl2I2ltcG9ydG5hbWUge1xyXG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XHJcbiAgICBmb250LXdlaWdodDogNzAwO1xyXG59XHJcbmRpdiNpbXBvcnR3YWxsZXQge1xyXG4gICAgZm9udC1zaXplOiAxOHB4O1xyXG59XHJcblxyXG5kaXYjaW1wb3J0d2FsbGV0YWx1ZSB7XHJcbiAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIGNvbG9yOiBncmVlbjtcclxufVxyXG5kaXYjd2FsbGV0LTEge1xyXG4gICAgbWFyZ2luLXRvcDogNXB4O1xyXG59XHJcbi5jb250YWluZXIuaW1wb3J0Y3R7XHJcbiAgICBtYXgtd2lkdGg6IDE1MDBweDtcclxufVxyXG5cclxuLyogICovXHJcbmRpdiNpbXBvcnQge1xyXG4gICAgcGFkZGluZzogMnJlbTtcclxuICAgIGZvbnQtc2l6ZTogMTlweDtcclxufVxyXG5kaXYjaW1wb3J0bmFtZSB7XHJcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcclxuICAgIGZvbnQtd2VpZ2h0OiA4MDA7XHJcbn1cclxuXHJcbmg1LmltcG9ydGluZm8ge1xyXG4gICAgbWFyZ2luLXRvcDogLTEzcHg7XHJcbiAgICBmb250LXNpemU6IDI0cHg7XHJcbiAgICBmb250LXdlaWdodDogNTAwO1xyXG59XHJcbi5jb250YWluZXIuaW1wb3J0Y3Qge1xyXG4gICAgbWF4LXdpZHRoOiAxNzQ4cHg7XHJcbn1cclxuLmNoYXJnZSB7XHJcbiAgICBwYWRkaW5nOiAxMHB4O1xyXG59XHJcbi5jYXJkLWhlYWRlci52aWV3LnZpZXctY2FzY2FkZS5ncmFkaWVudC1jYXJkLWhlYWRlci5ibHVlLWdyYWRpZW50IHtcclxuICAgIGZvbnQtc2l6ZTogMjFweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgY29sb3I6ICNmZmYhaW1wb3J0YW50O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcblxyXG5cclxuLmNhcmQtaGVhZGVyLnZpZXcudmlldy1jYXNjYWRlLmdyYWRpZW50LWNhcmQtaGVhZGVyLmJsdWUtZ3JhZGllbnQuaW1wIHtcclxuICAgIG1hcmdpbi10b3A6IC0zM3B4O1xyXG4gICAgd2lkdGg6IDExNCU7XHJcbiAgICBtYXJnaW4tbGVmdDogLTMycHg7XHJcbn1cclxuaDQjYWRkQ2hhcmdlc3tcclxuICAgIGxpbmUtaGVpZ2h0OiAyLjVyZW07XHJcbiAgICBtYXJnaW4tYm90dG9tOiAtMjVweDtcclxuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbiAgICBmb250LXdlaWdodDogNjAwO1xyXG59XHJcbi5jaGFyZ2VzIHtcclxuICAgIGxpbmUtaGVpZ2h0OiAxLjVyZW07XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG59XHJcblxyXG5oNC5pbXBvcnR0ciB7XHJcbiAgICBmb250LXNpemU6IDI1cHg7XHJcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gICAgcGFkZGluZy1ib3R0b206IDE0cHg7XHJcbiAgICBtYXJnaW4tbGVmdDogLTJweDtcclxuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XHJcbn1cclxuZGl2I2ltcG9ydG1vdmUge1xyXG4gICAgbWFyZ2luLXRvcDogMjVweDtcclxufVxyXG5idXR0b24uYnRuLndhdmVzLWVmZmVjdC5idG4tYmxvY2sge1xyXG4gICAgbGluZS1oZWlnaHQ6IDJyZW07XHJcbiAgICBmb250LXNpemU6IDI1cHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuXHJcbn1cclxuXHJcblxyXG4uY2FyZC1oZWFkZXIudmlldy52aWV3LWNhc2NhZGUuZ3JhZGllbnQtY2FyZC1oZWFkZXIuYmx1ZS1ncmFkaWVudC5pbXBvcnRoIHtcclxuICAgIG1hcmdpbi10b3A6IC0zM3B4O1xyXG4gICAgbWFyZ2luOiAtMzNweCAtMzNweCAxMHB4IC0zM3B4O1xyXG59XHJcbmg0LmltcG9ydG9yIHtcclxuICAgIG1hcmdpbi10b3A6IDMzcHg7XHJcbiAgICBmb250LXdlaWdodDogNjAwO1xyXG59XHJcblxyXG5cclxuLmJ0bi5idG4tbGcge1xyXG4gICAgcGFkZGluZzogMXJlbSAyLjRyZW07XHJcbiAgICBmb250LXNpemU6IDE3cHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5cclxuXHJcbmJ1dHRvbi5idG4udXBsb2FkIHtcclxuICAgIGhlaWdodDogNjRweDtcclxufVxyXG5cclxuZGl2I2ltcG9ydGJsIHtcclxuICAgIG1hcmdpbi1sZWZ0OiAxMTNweDtcclxufVxyXG5cclxuXHJcblxyXG5kaXYjaW1wb3J0c3BhbiB7XHJcbiAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICBmb250LXdlaWdodDogOTAwO1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAxMnB4O1xyXG59XHJcbi5pbnB1dC1ncm91cC10ZXh0IHtcclxuICAgIGhlaWdodDogNDhweDtcclxuICAgIG1hcmdpbi10b3A6IDBweDtcclxuICAgIGJhY2tncm91bmQ6ICNmZmY7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcclxuICAgIGJvcmRlci1yaWdodDogbm9uZTtcclxufVxyXG5cclxuICAvKiAgKi9cclxuICBcclxuICAuaW5wdXQtdmVuZG9yIHtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIGJhY2tncm91bmQ6ICNlYmY0Zjk7XHJcbn1cclxuLmNhcmQtYm9keS52ZW5kb3J7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAzcmVtO1xyXG4gICAgcGFkZGluZy1sZWZ0OiAzcmVtO1xyXG59XHJcblxyXG5kaXYjdmVuZG9ycm93IHtcclxuICAgIHBhZGRpbmctdG9wOiAwLjVyZW07XHJcbn1cclxuXHJcbnNlbGVjdC5mb3JtLWNvbnRyb2w6bm90KFtzaXplXSk6bm90KFttdWx0aXBsZV0pIHtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6I2ViZjRmOTsgO1xyXG59XHJcblxyXG5cclxuLyogTW9iaWxlIFBvcnRyYWl0IFNpemUgdG8gTW9iaWxlIExhbmRzY2FwZSBTaXplIChkZXZpY2VzIGFuZCBicm93c2VycylcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQ3OXB4KSB7XHJcbiAgICAuY29sLW1kLTMuaGlkZXRyYW5zIHtcclxuICAgICAgICBtYXJnaW4tbGVmdDogMTBweDtcclxuICAgIH1cclxuICAgIFxyXG5wLmFjbm8ge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgcmlnaHQ6IDA7XHJcbiAgICBsZWZ0OiAtNDdweDtcclxuICAgIHRvcDogMDtcclxuICAgIGZvbnQtd2VpZ2h0OiA4MDA7XHJcbn1cclxuLnJvdy5kdW1teSB7XHJcbiAgICBtYXJnaW4tdG9wOiAtMTExcHg7XHJcbn1cclxuLmNhcmQtYm9keS5iYW5yZWNvbntcclxuICAgIG1hcmdpbi10b3A6MTA3cHg7XHJcbn1cclxucC5ibmFtZSB7XHJcbiAgICBtYXJnaW4tbGVmdDogMHB4O1xyXG59XHJcbnAuYm5hbWUxIHtcclxuICAgIG1hcmdpbi1sZWZ0OiAwcHg7XHJcbn1cclxucC5hY2Mge1xyXG4gICAgbWFyZ2luLWxlZnQ6IDBweDtcclxufVxyXG4uZm9ybS1jaGVjayB7XHJcbiAgICBtYXJnaW4tbGVmdDogOHB4O1xyXG59XHJcbn0iXX0= */");

/***/ }),

/***/ "./src/app/components/amdinpaymentgate/amdinpaymentgate.component.ts":
/*!***************************************************************************!*\
  !*** ./src/app/components/amdinpaymentgate/amdinpaymentgate.component.ts ***!
  \***************************************************************************/
/*! exports provided: AmdinpaymentgateComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AmdinpaymentgateComponent", function() { return AmdinpaymentgateComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_services_payment_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/payment.service */ "./src/app/services/payment.service.ts");
/* harmony import */ var src_app_services_wallet_detail_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/wallet-detail.service */ "./src/app/services/wallet-detail.service.ts");
/* harmony import */ var src_app_model_bank_payment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/model/bank-payment */ "./src/app/model/bank-payment.ts");
/* harmony import */ var src_app_model_cheque_payment__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/model/cheque-payment */ "./src/app/model/cheque-payment.ts");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");
/* harmony import */ var src_app_model_select__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/model/select */ "./src/app/model/select.ts");
/* harmony import */ var src_app_services_upload_file_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/services/upload-file.service */ "./src/app/services/upload-file.service.ts");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ngx-bootstrap/modal */ "./node_modules/ngx-bootstrap/modal/fesm2015/ngx-bootstrap-modal.js");
/* harmony import */ var src_app_model_online_payment__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! src/app/model/online-payment */ "./src/app/model/online-payment.ts");












let AmdinpaymentgateComponent = class AmdinpaymentgateComponent {
    constructor(paymentService, walletService, toastr, uploadService, modalService) {
        this.paymentService = paymentService;
        this.walletService = walletService;
        this.toastr = toastr;
        this.uploadService = uploadService;
        this.modalService = modalService;
        this.ranges = new Array();
        this.cDate = new Date("01/01/2020");
        this.cDate1 = new Date();
        this.cRange = "-1";
        this.bRange = "-1";
        this.bDate = new Date("01/01/2020");
        this.bDate1 = new Date();
        this.date = new Date("01/01/2020");
        this.date1 = new Date();
        this.range = "-1";
        this.progress = 0;
        this.message = '';
        this.errmessage = "";
        this.matchingBankPayments = false;
        this.matchingChequePayments = false;
        this.dateOP = new Date("01/01/2020");
        this.date1OP = new Date();
        this.dateAgr = new Date("01/01/2020");
        this.date1Agr = new Date();
        this.selectAllMatchingBankPayment = false;
        this.selectAllMatchingChequePayment = false;
        this.matchingRecordOfAgre = false;
        this.today = new Date();
        this.upcoming = new Date();
        this.message1 = false;
    }
    ngOnInit() {
        this.buttonValue = "Auto Match";
        this.paymentService.getPaymentMethods()
            .subscribe((data) => {
            this.upcoming.setDate(this.today.getDate() + 3);
            this.iterationName = 'initial';
        });
    }
    // ----- Start initial Methods ---- 
    onPaymentReconciliation() {
        this.iterationName = 'Payment_Reconciliation';
    }
    onPaymentByCheque() {
        this.iterationName = 'Payment_By_Cheque';
    }
    populateRange() {
        let range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_7__["Select"];
        range.id = "1";
        range.value = "Custom Range";
        this.ranges[0] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_7__["Select"];
        range.id = "2";
        range.value = "Today";
        this.ranges[1] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_7__["Select"];
        range.id = "3";
        range.value = "1 Week";
        this.ranges[2] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_7__["Select"];
        range.id = "4";
        range.value = "15 Days";
        this.ranges[3] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_7__["Select"];
        range.id = "5";
        range.value = "Current Month";
        this.ranges[4] = range;
    }
    getStartDate(date, date1, endDate, option) {
        let startDate = new Date();
        if (option == "1") {
            startDate = date;
            endDate = date1;
        }
        else if (option == "2") {
            startDate.setDate(endDate.getDate() - 1);
        }
        else if (option == "3") {
            startDate.setDate(endDate.getDate() - 7);
        }
        else if (option == "4") {
            startDate.setDate(endDate.getDate() - 15);
        }
        else if (option == "5") {
            startDate.setDate(endDate.getDate() - 30);
        }
        return startDate;
    }
    //---- End initial Methods ----
    // --- Start (Bank Statement Methods) ---- 
    onBankStatement(b) {
        if (b.selectedBankStmt == true) {
            this.selectedBankStatement = b;
        }
        if (b.selectedBankStmt == false) {
            this.selectedBankStatement = null;
        }
    }
    onHideTransaction() {
        this.hideTransaction = !this.hideTransaction;
        if (this.hideTransaction) {
            this.newBankStatementList = new Array();
            for (let b of this.oldBankStatementList) {
                if (b.debitAmount == null || b.debitAmount == 0) {
                    this.newBankStatementList.push(b);
                }
                this.bankStatementList = this.newBankStatementList;
            }
        }
        if (!this.hideTransaction) {
            this.bankStatementList = this.oldBankStatementList;
        }
    }
    onSelectRangeBank() {
        if (this.bRange != "-1") {
            if (this.bRange == "1") {
                this.bCustomDate = true;
                this.bDate = new Date("01/01/2020");
                this.bDate1 = new Date();
            }
            else {
                this.bCustomDate = false;
            }
            this.filterListBankStmt(this.bRange);
        }
        else {
            this.bankStatementList = this.oldBankStatementList;
            this.bCustomDate = false;
        }
    }
    filterListBankStmt(option) {
        this.newBankStatementList = new Array();
        let startDate = new Date();
        let endDate = new Date();
        if (this.bCustomDate) {
            endDate = this.bDate1;
        }
        startDate = this.getStartDate(this.bDate, this.bDate1, endDate, option);
        //startDate.setHours(0,0,0,0);
        //endDate.setHours(0,0,0,0);
        console.log(startDate);
        console.log(endDate);
        for (let b of this.oldBankStatementList) {
            let dt = new Date(b.createdDate);
            dt.setHours(0, 0, 0, 0);
            if (dt >= startDate && dt <= endDate) {
                this.newBankStatementList.push(b);
            }
        }
        this.bankStatementList = this.newBankStatementList;
    }
    onDateChangeBank() {
        this.particulars = null;
        this.filterListBankStmt("1");
    }
    onParticulars() {
        if (this.bRange != -1) {
            this.filterListBankStmt(this.bRange);
            this.newBankStatementList = JSON.parse(JSON.stringify(this.bankStatementList));
        }
        else {
            this.newBankStatementList = JSON.parse(JSON.stringify(this.oldBankStatementList));
        }
        if (this.particulars != "") {
            if (this.particulars.length > this.particulength) {
                this.bankStatementList = this.newBankStatementList.filter(res => {
                    return res.particulars.match(this.particulars);
                });
            }
            else {
                this.bankStatementList = this.newBankStatementList.filter(res => {
                    return res.particulars.match(this.particulars);
                });
            }
        }
        else if (this.particulars == "") {
            this.bankStatementList = this.newBankStatementList;
        }
        this.particulength = this.particulars.length;
    }
    // End (Bank Statement Methods)
    // ----- Start (Bank Payment Methods)----
    onBankTransfer() {
        this.iterationName = 'Bank_Transfer';
    }
    onBankPaymentReconciliation() {
        this.matchingBankPayments = false;
        this.paymentService.getAllPendingBankPayment()
            .subscribe((data) => {
            this.bankPaymentList = data;
            this.oldBankPaymentList = JSON.parse(JSON.stringify(data));
            this.paymentService.getPendingBankStatement()
                .subscribe((data) => {
                this.bankStatementList = data;
                this.oldBankStatementList = data;
                this.walletService.getAdminBankDetails()
                    .subscribe((data) => {
                    this.accountDetails = data;
                    this.customDate = false;
                    this.range = -1;
                    this.bRange = -1;
                    this.bCustomDate = false;
                    this.custNamelength = 0;
                    this.particulength = 0;
                    this.newBankPaymentList = new Array();
                    this.newBankStatementList = new Array();
                    this.populateRange();
                    this.buttonValue = "Auto Match";
                    this.iterationName = 'Bank_Payment_Reconciliation';
                });
            });
        });
    }
    onBankPaymentReport() {
        this.paymentService.getApprovedBankPaymentList()
            .subscribe((data) => {
            this.bankPaymentList = data;
            this.bankStatementList = JSON.parse(JSON.stringify(data));
            this.oldBankStatementList = new Array();
            this.totalPaidAmount = 0;
            this.totalPaidAmount = this.getTotalPaidAmount(this.bankPaymentList);
            this.oldBankPaymentList = JSON.parse(JSON.stringify(data));
            this.customDate = false;
            this.range = -1;
            this.bRange = -1;
            this.bCustomDate = false;
            this.custNamelength = 0;
            this.particulength = 0;
            this.newBankPaymentList = new Array();
            this.newBankStatementList = new Array();
            this.populateRange();
            this.iterationName = 'Bank_Payment_Report';
        });
    }
    onBankPayment(p) {
        if (p.selectedBankPay == true) {
            this.selectedBankPayment = p;
        }
        if (p.selectedBankPay == false) {
            this.selectedBankPayment = null;
        }
    }
    onApproveBankPayment() {
        this.bankPayment = new src_app_model_bank_payment__WEBPACK_IMPORTED_MODULE_4__["BankPayment"]();
        this.bankPayment = this.selectedBankPayment;
        this.bankPayment.bankStatement = this.selectedBankStatement;
        if (this.bankPayment.selectedBankPay == true && this.selectedBankStatement.selectedBankStmt == true && this.bankPayment.bankStatement.particulars.includes(this.bankPayment.utrNo) && this.bankPayment.paidAmount == this.bankPayment.bankStatement.creditAmount) {
            console.log(this.bankPayment);
            this.bankPayment.approveYN = true;
            this.bankPayment.bankStatement.approveYN = true;
            this.paymentService.saveBankPayment(this.bankPayment)
                .subscribe((data) => {
                this.toastr.success('Transaction Approved!!!', 'Bank Reconciliation', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
                if (this.iterationName == 'Hold_Bank_Payment') {
                    this.onHoldBankPaymentTransaction();
                }
                else {
                    this.onBankPaymentReconciliation();
                }
            });
        }
        else {
            this.toastr.error('Please check UTR No & Amount', 'Bank Statement', { timeOut: 10000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
        }
    }
    onHoldBankPayment() {
        this.bankPayment = this.selectedBankPayment;
        this.bankPayment.holdYN = true;
        this.paymentService.saveBankPayment(this.bankPayment)
            .subscribe((data) => {
            this.toastr.error('Transaction is On Hold', 'Bank Reconciliation', {
                timeOut: 10000,
                positionClass: 'toast-top-center',
                progressBar: true,
                progressAnimation: 'increasing'
            });
            this.onHoldBankPaymentTransaction();
        });
    }
    onHoldBankPaymentTransaction() {
        this.paymentService.getAllHoldBankPayment()
            .subscribe((data) => {
            this.bankPaymentList = data;
            this.oldBankPaymentList = data;
            console.log(data);
            this.paymentService.getPendingBankStatement()
                .subscribe((data) => {
                this.bankStatementList = data;
                this.oldBankStatementList = data;
                this.walletService.getAdminBankDetails()
                    .subscribe((data) => {
                    this.accountDetails = data;
                    this.customDate = false;
                    this.range = -1;
                    this.bRange = -1;
                    this.bCustomDate = false;
                    this.custNamelength = 0;
                    this.particulength = 0;
                    this.newBankPaymentList = new Array();
                    this.newBankStatementList = new Array();
                    this.populateRange();
                    this.iterationName = 'Hold_Bank_Payment';
                });
            });
        });
    }
    onBankPayAmountMismatch() {
        this.bankPayment = this.selectedBankPayment;
        this.bankPayment.amtMismatchYN = true;
        this.bankPayment.bankStatement = this.selectedBankStatement;
        this.bankPayment.approvedAmount = this.bankPayment.bankStatement.creditAmount;
        this.bankPayment.bankStatement.approveYN = true;
        this.paymentService.saveBankPayment(this.bankPayment)
            .subscribe((data) => {
            this.toastr.error('Transaction Amount Mismatched', 'Bank Reconciliation', {
                timeOut: 10000,
                positionClass: 'toast-top-center',
                progressBar: true,
                progressAnimation: 'increasing'
            });
            this.onHoldBankPaymentTransaction();
        });
    }
    onBankPayNotFound() {
        this.bankPayment = this.selectedBankPayment;
        this.bankPayment.notFoundYN = true;
        this.paymentService.saveBankPayment(this.bankPayment)
            .subscribe((data) => {
            this.toastr.error('Transaction Not Found', 'Bank Reconciliation', {
                timeOut: 10000,
                positionClass: 'toast-top-center',
                progressBar: true,
                progressAnimation: 'increasing'
            });
            this.onHoldBankPaymentTransaction();
        });
    }
    showMatchingBankPayments() {
        this.matchingBankPayments = !this.matchingBankPayments;
        if (this.matchingBankPayments) {
            this.buttonValue = "Unmatch";
        }
        else {
            this.buttonValue = "Auto Match";
        }
        if (this.matchingBankPayments) {
            this.bankPaymentListAutoMatch = new Array();
            let bankPaylist = JSON.parse(JSON.stringify(this.oldBankPaymentList));
            for (let b of bankPaylist) {
                for (let stmt of this.oldBankStatementList) {
                    if (stmt.particulars.includes(b.utrNo) && b.paidAmount == stmt.creditAmount) {
                        let bankPayment = new src_app_model_bank_payment__WEBPACK_IMPORTED_MODULE_4__["BankPayment"];
                        bankPayment = b;
                        bankPayment.bankStmtId = stmt.bankStmtId;
                        bankPayment.particulars = stmt.particulars;
                        bankPayment.creditAmount = stmt.creditAmount;
                        this.bankPaymentListAutoMatch.push(bankPayment);
                    }
                }
            }
            this.bankPaymentList = this.bankPaymentListAutoMatch;
            this.selectAllMatchingBankPayment = false;
            this.iterationName = 'Bank_Payment_Reconciliation_Auto_Match';
        }
    }
    selectAllMatchingBankPay() {
        this.selectAllMatchingBankPayment = !this.selectAllMatchingBankPayment;
        this.newBankPaymentList = new Array();
        this.newBankPaymentList = JSON.parse(JSON.stringify(this.bankPaymentListAutoMatch));
        for (let b of this.newBankPaymentList) {
            b.selectedBankPay = this.selectAllMatchingBankPayment;
        }
        this.bankPaymentList = this.newBankPaymentList;
    }
    onAutoApproveBankPayment() {
        let bankPaymentList = new Array();
        for (let b of this.bankPaymentList) {
            if (b.selectedBankPay == true) {
                let bankPayment = new src_app_model_bank_payment__WEBPACK_IMPORTED_MODULE_4__["BankPayment"];
                bankPayment.bankPayId = b.bankPayId;
                bankPayment.bankStmtId = b.bankStmtId;
                bankPaymentList.push(bankPayment);
            }
        }
        if (bankPaymentList.length != 0) {
            this.paymentService.saveMultipleBankPayment(bankPaymentList)
                .subscribe((data) => {
                this.toastr.success('Transaction Approved!!!', 'Bank Reconciliation', { timeOut: 10000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
                this.onBankPaymentReconciliation();
            });
        }
        else {
            this.toastr.error('Select Record', 'Bank Statement', { timeOut: 10000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
        }
    }
    // --- Start Filters for Bank Payment ------
    onSelectRange() {
        this.customerName = null;
        this.utrNo = null;
        if (this.range != "-1") {
            if (this.range == "1") {
                this.customDate = true;
                this.date = new Date("01/01/2020");
                this.date1 = new Date();
            }
            else {
                this.customDate = false;
            }
            this.filterList(this.range);
        }
        else {
            this.bankPaymentList = this.oldBankPaymentList;
            this.customDate = false;
        }
    }
    filterList(option) {
        this.newBankPaymentList = new Array();
        let startDate = new Date();
        let endDate = new Date();
        this.totalPaidAmount = 0;
        if (this.customDate) {
            endDate = this.date1;
        }
        startDate = this.getStartDate(this.date, this.date1, endDate, option);
        for (let b of this.oldBankPaymentList) {
            let dt = new Date(b.remittingDate);
            dt.setHours(0, 0, 0, 0);
            if (dt >= startDate && dt <= endDate) {
                this.newBankPaymentList.push(b);
                this.totalPaidAmount = this.totalPaidAmount + b.paidAmount;
            }
        }
        this.bankPaymentList = this.newBankPaymentList;
    }
    onDateChange() {
        this.customerName = null;
        this.utrNo = null;
        this.filterList("1");
    }
    onCustomerName() {
        if (this.range != -1) {
            this.filterList(this.range);
            this.newBankPaymentList = JSON.parse(JSON.stringify(this.bankPaymentList));
        }
        else {
            this.newBankPaymentList = JSON.parse(JSON.stringify(this.oldBankPaymentList));
        }
        if (this.customerName != "") {
            if (this.customerName.length > this.custNamelength) {
                this.bankPaymentList = this.newBankPaymentList.filter(res => {
                    return res.customerName.match(this.customerName);
                });
            }
            else {
                this.bankPaymentList = this.newBankPaymentList.filter(res => {
                    return res.customerName.match(this.customerName);
                });
            }
        }
        else if (this.customerName == "") {
            this.bankPaymentList = this.newBankPaymentList;
        }
        this.totalPaidAmount = this.getTotalPaidAmount(this.bankPaymentList);
        this.custNamelength = this.customerName.length;
    }
    onUtrNo() {
        if (this.customerName != null) {
            this.onCustomerName();
            this.newBankPaymentList = JSON.parse(JSON.stringify(this.bankPaymentList));
        }
        else {
            this.newBankPaymentList = JSON.parse(JSON.stringify(this.oldBankPaymentList));
        }
        if (this.utrNo != "") {
            if (this.utrNo.length > this.utrNolength) {
                this.bankPaymentList = this.newBankPaymentList.filter(res => {
                    return res.utrNo.match(this.utrNo);
                });
                this.onUtrWithParticilarSearch(this.utrNo);
            }
            else {
                this.bankPaymentList = this.newBankPaymentList.filter(res => {
                    return res.utrNo.match(this.utrNo);
                });
                this.onUtrWithParticilarSearch(this.utrNo);
            }
        }
        else if (this.utrNo == "") {
            this.bankPaymentList = this.newBankPaymentList;
            this.bankStatementList = this.oldBankStatementList;
        }
        else {
            this.bankPaymentList = this.newBankPaymentList.filter(res => {
                return res.utrNo.match(this.utrNo);
            });
            this.onUtrWithParticilarSearch(this.utrNo);
        }
        this.totalPaidAmount = this.getTotalPaidAmount(this.bankPaymentList);
        this.utrNolength = this.utrNo.length;
    }
    getTotalPaidAmount(list) {
        this.totalPaidAmount = 0;
        for (let b of list) {
            this.totalPaidAmount = this.totalPaidAmount + b.paidAmount;
        }
        return this.totalPaidAmount;
    }
    onUtrWithParticilarSearch(utrNo) {
        this.newBankStatementList = this.oldBankStatementList.filter(res => {
            return res.particulars.match(utrNo);
        });
        this.bankStatementList = this.newBankStatementList;
    }
    // --- Start Filters for Bank Payment ------
    // ----- End (Bank Payment Methods) ------
    // ----- Start (Cheque Payment Methods)-----
    onChequeTransfer() {
        this.iterationName = 'Cheque_Transfer';
    }
    // ----- Start Cheque Reconciliation Methods -----
    onChequePaymentReconcilation() {
        this.matchingChequePayments = false;
        this.paymentService.getDepositeChequeList()
            .subscribe((data) => {
            this.chequePaymentList = data;
            this.oldChequePaymentList = JSON.parse(JSON.stringify(data));
            this.paymentService.getPendingBankStatement()
                .subscribe((data) => {
                this.bankStatementList = data;
                this.oldBankStatementList = data;
                this.walletService.getAdminBankDetails()
                    .subscribe((data) => {
                    this.accountDetails = data;
                    this.cCustomDate = false;
                    this.cRange = -1;
                    this.bRange = -1;
                    this.bCustomDate = false;
                    this.custNamelength = 0;
                    this.particulength = 0;
                    this.newChequePaymentList = new Array();
                    this.newBankStatementList = new Array();
                    this.populateRange();
                    this.buttonValue = "Auto Match";
                    this.iterationName = 'Cheque_Payment_Reconciliation';
                });
            });
        });
    }
    onChequePaymentReport() {
        this.paymentService.getApprovedChequePaymentList()
            .subscribe((data) => {
            this.chequePaymentList = data;
            this.chequePaymentList = data;
            this.oldChequePaymentList = data;
            this.totalChequeAmount = 0;
            for (let c of this.chequePaymentList) {
                this.totalChequeAmount = this.totalChequeAmount + c.chequeAmount;
            }
            this.cCustomDate = false;
            this.cRange = -1;
            this.customerName = null;
            this.custNamelength = 0;
            this.chequeNumber = null;
            this.chequeNumlength = 0;
            this.collectedOn = new Date();
            this.populateRange();
            this.newChequePaymentList = new Array();
            this.iterationName = 'Cheque_Payment_Report';
        });
    }
    onChequePayment(c) {
        if (c.selectedChequePay == true) {
            this.selectedCheque = c;
        }
        if (c.selectedChequePay == false) {
            this.selectedCheque = null;
        }
    }
    onApproveChequePayment() {
        if (this.matchingChequePayments == true) {
            this.onAutoApproveChequePayment();
        }
        if (this.matchingChequePayments == false) {
            this.chequePayment = new src_app_model_cheque_payment__WEBPACK_IMPORTED_MODULE_5__["ChequePayment"];
            this.chequePayment = this.selectedCheque;
            this.chequePayment.bankStatement = this.selectedBankStatement;
            if (this.chequePayment.selectedChequePay == true && this.selectedBankStatement.selectedBankStmt == true && this.chequePayment.bankStatement.particulars.includes(this.chequePayment.chequeNumber) && this.chequePayment.chequeAmount == this.chequePayment.bankStatement.creditAmount) {
                this.chequePayment.approveYN = true;
                this.chequePayment.bankStatement.approveYN = true;
                this.paymentService.saveChequePayment(this.chequePayment)
                    .subscribe((data) => {
                    this.chequePayment = data;
                    this.toastr.success('Transaction Approved!!!', 'Bank Reconciliation', {
                        timeOut: 10000,
                        positionClass: 'toast-top-center',
                        progressBar: true,
                        progressAnimation: 'increasing'
                    });
                    if (this.iterationName == 'Hold_Bank_Payment') {
                        this.selectedCheque = this.chequePayment;
                        this.onHoldChequePaymentTransaction();
                    }
                    else {
                        this.selectedCheque = this.chequePayment;
                        this.onChequePaymentReconcilation();
                    }
                });
            }
            else {
                this.toastr.error('Please check Cheque Number & Amount', 'Bank Statement', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
            }
        }
    }
    onHoldChequePayment() {
        this.chequePayment = this.selectedCheque;
        this.chequePayment.holdYN = true;
        this.paymentService.saveChequePayment(this.chequePayment)
            .subscribe((data) => {
            this.toastr.error('Transaction is On Hold', 'Bank Reconciliation', {
                timeOut: 10000,
                positionClass: 'toast-top-center',
                progressBar: true,
                progressAnimation: 'increasing'
            });
            this.onHoldChequePaymentTransaction();
        });
    }
    onHoldChequePaymentTransaction() {
        this.paymentService.getAllHoldChequePayment()
            .subscribe((data) => {
            this.chequePaymentList = data;
            this.oldChequePaymentList = data;
            console.log(data);
            this.paymentService.getPendingBankStatement()
                .subscribe((data) => {
                this.bankStatementList = data;
                this.oldBankStatementList = data;
                this.walletService.getAdminBankDetails()
                    .subscribe((data) => {
                    this.accountDetails = data;
                    this.cCustomDate = false;
                    this.cRange = -1;
                    this.bRange = -1;
                    this.bCustomDate = false;
                    this.custNamelength = 0;
                    this.particulength = 0;
                    this.newChequePaymentList = new Array();
                    this.newBankStatementList = new Array();
                    this.populateRange();
                    this.iterationName = 'Hold_Cheque_Payment';
                });
            });
        });
    }
    onChequePayAmountMismatch() {
        this.chequePayment = this.selectedCheque;
        this.chequePayment.amtMismatchYN = true;
        this.chequePayment.bankStatement = this.selectedBankStatement;
        this.chequePayment.approvedAmount = this.chequePayment.bankStatement.creditAmount;
        this.chequePayment.bankStatement.approveYN = true;
        this.paymentService.saveChequePayment(this.chequePayment)
            .subscribe((data) => {
            this.toastr.error('Transaction Amount Mismatched', 'Bank Reconciliation', {
                timeOut: 10000,
                positionClass: 'toast-top-center',
                progressBar: true,
                progressAnimation: 'increasing'
            });
            this.onHoldChequePaymentTransaction();
        });
    }
    onChequePayNotFound() {
        this.chequePayment = this.selectedCheque;
        this.chequePayment.notFoundYN = true;
        this.paymentService.saveChequePayment(this.chequePayment)
            .subscribe((data) => {
            this.toastr.error('Transaction Not Found', 'Bank Reconciliation', {
                timeOut: 10000,
                positionClass: 'toast-top-center',
                progressBar: true,
                progressAnimation: 'increasing'
            });
            this.onHoldChequePaymentTransaction();
        });
    }
    showMatchingChequePayments() {
        this.matchingChequePayments = !this.matchingChequePayments;
        if (this.matchingChequePayments) {
            this.buttonValue = "Unmatch";
        }
        else {
            this.buttonValue = "Auto Match";
        }
        if (this.matchingChequePayments) {
            this.chequePaymentListAutoMatch = new Array();
            let chequePaylist = JSON.parse(JSON.stringify(this.oldChequePaymentList));
            for (let c of chequePaylist) {
                for (let stmt of this.oldBankStatementList) {
                    if (stmt.particulars.includes(c.chequeNumber) && c.chequeAmount == stmt.creditAmount) {
                        let chequePayment = new src_app_model_cheque_payment__WEBPACK_IMPORTED_MODULE_5__["ChequePayment"];
                        chequePayment = c;
                        chequePayment.bankStmtId = stmt.bankStmtId;
                        chequePayment.particulars = stmt.particulars;
                        chequePayment.creditAmount = stmt.creditAmount;
                        this.chequePaymentListAutoMatch.push(chequePayment);
                    }
                }
            }
            this.chequePaymentList = this.chequePaymentListAutoMatch;
            this.selectAllMatchingChequePayment = false;
            this.iterationName = 'Cheque_Payment_Reconciliation_Auto_Match';
        }
    }
    selectAllMatchingChequePay() {
        this.selectAllMatchingChequePayment = !this.selectAllMatchingChequePayment;
        this.newChequePaymentList = new Array();
        this.newChequePaymentList = JSON.parse(JSON.stringify(this.chequePaymentListAutoMatch));
        for (let b of this.newChequePaymentList) {
            b.selectedChequePay = this.selectAllMatchingChequePayment;
        }
        this.chequePaymentList = this.newChequePaymentList;
    }
    onAutoApproveChequePayment() {
        let chequePaymentList = new Array();
        for (let c of this.chequePaymentList) {
            if (c.selectedChequePay == true) {
                let chequePayment = new src_app_model_cheque_payment__WEBPACK_IMPORTED_MODULE_5__["ChequePayment"];
                chequePayment.chequePayId = c.chequePayId;
                chequePayment.bankStmtId = c.bankStmtId;
                chequePaymentList.push(chequePayment);
            }
        }
        if (chequePaymentList.length != 0) {
            this.paymentService.saveMultipleChequePayment(chequePaymentList)
                .subscribe((data) => {
                this.toastr.success('Transaction Approved!!!', 'Bank Reconciliation', { timeOut: 10000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
                this.onChequePaymentReconcilation();
            });
        }
        else {
            this.toastr.error('Select Record', 'Bank Statement', { timeOut: 10000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
        }
    }
    // ----- Start Filters Cheque Payment Deposited On-----
    onSelectRangeCheque() {
        this.customerName = null;
        this.chequeNumber = null;
        if (this.cRange != "-1") {
            if (this.cRange == "1") {
                this.cCustomDate = true;
                this.cDate = new Date("01/01/2020");
                this.cDate1 = new Date();
            }
            else {
                this.cCustomDate = false;
            }
            this.filterListChequeDepositedOn(this.cRange);
        }
        else {
            this.chequePaymentList = this.oldChequePaymentList;
            this.cCustomDate = false;
        }
    }
    filterListChequeDepositedOn(option) {
        this.newChequePaymentList = new Array();
        let startDate = new Date();
        let endDate = new Date();
        if (this.cCustomDate) {
            endDate = this.cDate1;
        }
        startDate = this.getStartDate(this.cDate, this.cDate1, endDate, option);
        for (let b of this.oldChequePaymentList) {
            let dt = new Date(b.depositedOn);
            dt.setHours(0, 0, 0, 0);
            if (dt >= startDate && dt <= endDate) {
                this.newChequePaymentList.push(b);
            }
        }
        console.log(this.newChequePaymentList);
        this.chequePaymentList = this.newChequePaymentList;
    }
    onDateChangeCheque() {
        this.customerName = null;
        this.chequeNumber = null;
        this.filterListChequeDepositedOn("1");
    }
    onChequeCustomerName() {
        if (this.customerName != null) {
            this.chequeNumber = null;
            this.filterListCustNameDepoOn();
        }
    }
    filterListCustNameDepoOn() {
        if (this.cRange != -1) {
            this.filterListChequeDepositedOn(this.cRange);
            this.newChequePaymentList = this.chequePaymentList;
        }
        else {
            this.newChequePaymentList = this.oldChequePaymentList;
        }
        console.log(this.newChequePaymentList);
        if (this.customerName != "") {
            if (this.customerName.length > this.custNamelength) {
                this.chequePaymentList = this.newChequePaymentList.filter(res => {
                    return res.customerName.match(this.customerName);
                });
            }
            else {
                this.chequePaymentList = this.newChequePaymentList.filter(res => {
                    return res.customerName.match(this.customerName);
                });
            }
        }
        else if (this.customerName == "") {
            this.chequePaymentList = this.newChequePaymentList;
        }
        this.custNamelength = this.customerName.length;
        this.pendingChequeDepo = false;
        this.filteredChequePaymentList = new Array();
        this.filteredChequePaymentList = this.chequePaymentList;
    }
    onChequeNumber() {
        if (this.chequeNumber != null) {
            this.filterListChequNoDepoOn();
        }
    }
    filterListChequNoDepoOn() {
        if (this.cRange != -1 && this.customerName == null) {
            this.filterListChequeDepositedOn(this.cRange);
            this.newChequePaymentList = this.chequePaymentList;
        }
        else if (this.cRange != -1 && this.customerName != null) {
            this.filterListCustNameDepoOn();
            this.newChequePaymentList = this.chequePaymentList;
        }
        else if (this.cRange == -1 && this.customerName != null) {
            this.filterListCustNameDepoOn();
            this.newChequePaymentList = this.chequePaymentList;
        }
        else {
            this.newChequePaymentList = this.oldChequePaymentList;
        }
        if (this.chequeNumber != "") {
            if (this.chequeNumber.length > this.chequeNumlength) {
                this.chequePaymentList = this.newChequePaymentList.filter(res => {
                    return res.chequeNumber.match(this.chequeNumber);
                });
                this.onChequeNumberWithParticilarSearch(this.chequeNumber);
            }
            else {
                this.chequePaymentList = this.newChequePaymentList.filter(res => {
                    return res.chequeNumber.match(this.chequeNumber);
                });
                this.onChequeNumberWithParticilarSearch(this.chequeNumber);
            }
        }
        else if (this.chequeNumber == "") {
            this.chequePaymentList = this.newChequePaymentList;
            this.bankStatementList = this.oldBankStatementList;
        }
        else {
            this.chequePaymentList = this.newChequePaymentList.filter(res => {
                return res.chequeNumber.match(this.chequeNumber);
            });
            this.onChequeNumberWithParticilarSearch(this.chequeNumber);
        }
        this.chequeNumlength = this.chequeNumber.length;
        this.pendingChequeDepo = false;
        this.filteredChequePaymentList = new Array();
        this.filteredChequePaymentList = this.chequePaymentList;
    }
    onChequeNumberWithParticilarSearch(chequeNumber) {
        this.newBankStatementList = this.oldBankStatementList.filter(res => {
            return res.particulars.match(chequeNumber);
        });
        this.bankStatementList = this.newBankStatementList;
    }
    // ----- End Filters-----
    // ----- Start Aprroved Cheque List Filters ---- 
    onSelectRangeApprCheque() {
        this.customerName = null;
        this.chequeNumber = null;
        if (this.cRange != "-1") {
            if (this.cRange == "1") {
                this.cCustomDate = true;
                this.cDate = new Date("01/01/2020");
                this.cDate1 = new Date();
            }
            else {
                this.cCustomDate = false;
            }
            this.filterListApprChequeDate(this.cRange);
        }
        else {
            this.chequePaymentList = this.oldChequePaymentList;
            this.cCustomDate = false;
        }
    }
    filterListApprChequeDate(option) {
        this.newChequePaymentList = new Array();
        let startDate = new Date();
        let endDate = new Date();
        if (this.cCustomDate) {
            endDate = this.cDate1;
        }
        startDate = this.getStartDate(this.cDate, this.cDate1, endDate, option);
        for (let b of this.oldChequePaymentList) {
            let dt = new Date(b.clearingDate);
            dt.setHours(0, 0, 0, 0);
            if (dt >= startDate && dt <= endDate) {
                this.newChequePaymentList.push(b);
            }
        }
        this.chequePaymentList = this.newChequePaymentList;
        this.totalChequeAmount = this.getTotalChequeAmount(this.chequePaymentList);
    }
    onDateChangeApprCheque() {
        this.customerName = null;
        this.chequeNumber = null;
        this.filterListApprChequeDate("1");
    }
    onApprChequeCustomerName() {
        if (this.customerName != null) {
            this.chequeNumber = null;
            this.filterListApprChequeCustomerName();
        }
    }
    filterListApprChequeCustomerName() {
        if (this.cRange != -1) {
            this.filterListApprChequeDate(this.cRange);
            this.newChequePaymentList = this.chequePaymentList;
        }
        else {
            this.newChequePaymentList = this.oldChequePaymentList;
        }
        if (this.customerName != "") {
            if (this.customerName.length > this.custNamelength) {
                this.chequePaymentList = this.newChequePaymentList.filter(res => {
                    return res.customerName.match(this.customerName);
                });
            }
            else {
                this.chequePaymentList = this.newChequePaymentList.filter(res => {
                    return res.customerName.match(this.customerName);
                });
            }
        }
        else if (this.customerName == "") {
            this.chequePaymentList = this.newChequePaymentList;
        }
        this.totalChequeAmount = this.getTotalChequeAmount(this.chequePaymentList);
        console.log(this.totalChequeAmount);
        this.custNamelength = this.customerName.length;
    }
    onApprChequeChequeNumber() {
        if (this.chequeNumber != null) {
            this.filterListApprChequeChequeNumber();
        }
    }
    filterListApprChequeChequeNumber() {
        if (this.cRange != -1 && this.customerName == null) {
            this.filterListApprChequeDate(this.cRange);
            this.newChequePaymentList = this.chequePaymentList;
        }
        else if (this.cRange != -1 && this.customerName != null) {
            this.filterListApprChequeCustomerName();
            this.newChequePaymentList = this.chequePaymentList;
        }
        else if (this.cRange == -1 && this.customerName != null) {
            this.filterListApprChequeCustomerName();
            this.newChequePaymentList = this.chequePaymentList;
        }
        else {
            this.newChequePaymentList = this.oldChequePaymentList;
        }
        if (this.chequeNumber != "") {
            if (this.chequeNumber.length > this.chequeNumlength) {
                this.chequePaymentList = this.newChequePaymentList.filter(res => {
                    return res.chequeNumber.match(this.chequeNumber);
                });
            }
            else {
                this.chequePaymentList = this.newChequePaymentList.filter(res => {
                    return res.chequeNumber.match(this.chequeNumber);
                });
            }
        }
        else if (this.chequeNumber == "") {
            this.chequePaymentList = this.newChequePaymentList;
            this.bankStatementList = this.oldBankStatementList;
        }
        else {
            this.chequePaymentList = this.newChequePaymentList.filter(res => {
                return res.chequeNumber.match(this.chequeNumber);
            });
        }
        this.totalChequeAmount = this.getTotalChequeAmount(this.chequePaymentList);
        this.chequeNumlength = this.chequeNumber.length;
    }
    getTotalChequeAmount(list) {
        this.totalChequeAmount = 0;
        for (let c of list) {
            this.totalChequeAmount = this.totalChequeAmount + c.chequeAmount;
        }
        return this.totalChequeAmount;
    }
    // ----- End Aprroved Cheque List Filters ---- 
    // ----- End Cheque Reconciliation Methods -----
    // ----- Start Payment By Cheque -----
    onChequeDelivery() {
        this.paymentService.getChequeDeliveryModeChequeList()
            .subscribe((data) => {
            this.chequePaymentList = data;
            this.today.setHours(0, 0, 0, 0);
            this.upcoming = new Date();
            this.upcoming.setDate(this.upcoming.getDate() + 3);
            this.upcoming.setHours(0, 0, 0, 0);
            this.oldChequePaymentList = data;
            this.cCustomDate = false;
            this.cRange = -1;
            this.customerName = null;
            this.custNamelength = 0;
            this.region = null;
            this.state = null;
            this.city = null;
            this.selectedRegion = new Array();
            this.selectedState = new Array();
            this.selectedCity = new Array();
            for (let c of this.chequePaymentList) {
                c.toBeDeliveredOn = new Date(c.toBeDeliveredOn);
                c.toBeDeliveredOn.setHours(0, 0, 0, 0);
                this.selectedRegion.push(c.region);
            }
            console.log(this.chequePaymentList);
            let unique1 = this.selectedRegion.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedRegion = unique1;
            this.collectedOn = new Date();
            this.populateRange();
            this.newChequePaymentList = new Array();
            this.iterationName = 'Cheque_Delivery';
        });
    }
    downloadChequeDelivery() {
        alert("delivery");
    }
    onChequePayment1(c) {
        this.selectedCheque = c;
    }
    onBackCheque(c) {
        if (c.toBeCollectedOn != null) {
            this.onChequeCollection();
        }
        if (c.toBeDeliveredOn != null) {
            this.onChequeDelivery();
        }
    }
    onChequeCollection() {
        this.paymentService.getChequeCollectionModeChequeList()
            .subscribe((data) => {
            this.chequePaymentList = data;
            this.oldChequePaymentList = data;
            this.cCustomDate = false;
            this.cRange = -1;
            this.customerName = null;
            this.custNamelength = 0;
            this.region = null;
            this.state = null;
            this.city = null;
            this.selectedRegion = new Array();
            this.selectedState = new Array();
            this.selectedCity = new Array();
            this.pendingChequeColl = false;
            this.today.setHours(0, 0, 0, 0);
            this.upcoming = new Date();
            this.upcoming.setDate(this.upcoming.getDate() + 3);
            this.upcoming.setHours(0, 0, 0, 0);
            for (let c of this.oldChequePaymentList) {
                this.selectedRegion.push(c.region);
                c.toBeCollectedOn = new Date(c.toBeCollectedOn);
                c.toBeCollectedOn.setHours(0, 0, 0, 0);
                //console.log(c.toBeCollectedOn)
                //console.log(c.toBeCollectedOn.setHours(0,0,0,0)>this.today.setHours(0,0,0,0) && c.toBeCollectedOn.setHours(0,0,0,0)<=this.upcoming.setHours(0,0,0,0))
            }
            let unique1 = this.selectedRegion.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedRegion = unique1;
            this.collectedOn = new Date();
            this.populateRange();
            this.newChequePaymentList = new Array();
            this.iterationName = 'Cheque_Collection';
        });
    }
    onChangeCollected() {
        this.pendingChequeColl = !this.pendingChequeColl;
        let chequeList;
        if (this.cRange == -1 && this.customerName == null && this.region == null && this.state == null && this.city == null) {
            chequeList = this.oldChequePaymentList;
        }
        else {
            chequeList = this.filteredChequePaymentList;
        }
        if (this.pendingChequeColl) {
            this.newChequePaymentList = new Array();
            for (let c of chequeList) {
                if (c.collectedOn == null && c.receivedOn == null) {
                    this.newChequePaymentList.push(c);
                }
            }
            this.chequePaymentList = this.newChequePaymentList;
        }
        if (!this.pendingChequeColl) {
            this.chequePaymentList = chequeList;
        }
    }
    onChequeCollectionSubmit() {
        this.chequePayment = new src_app_model_cheque_payment__WEBPACK_IMPORTED_MODULE_5__["ChequePayment"]();
        this.chequePayment = this.selectedCheque;
        console.log(this.chequePayment);
        if (this.chequePayment.toBeDeliveredOn == null) {
            this.chequePayment.collectedOn = new Date();
        }
        if (this.chequePayment.toBeCollectedOn == null) {
            this.chequePayment.receivedOn = new Date();
        }
        this.chequePayment.chequeDate = new Date(this.chequePayment.chequeDate);
        this.iterationName = 'Collected_Cheque_Details';
    }
    onConformCollectedCheque() {
        if (this.iterationName == 'Collected_Cheque_Details') {
            if (this.chequePayment.toBeCollectedOn != null) {
                this.chequePayment.chequeCollectedYN = true;
            }
            if (this.chequePayment.toBeDeliveredOn != null) {
                this.chequePayment.chequeReceivedYN = true;
            }
        }
        this.paymentService.saveChequePayment(this.chequePayment)
            .subscribe((data) => {
            if (this.chequePayment.toBeCollectedOn != null) {
                this.toastr.success('Cheque Collected Successfully!!!', 'Cheque Collection', { timeOut: 10000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
            }
            if (this.chequePayment.toBeDeliveredOn != null) {
                this.toastr.success('Cheque Received Successfully!!!', 'Cheque Collection', { timeOut: 10000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
            }
            this.chequePayment = new src_app_model_cheque_payment__WEBPACK_IMPORTED_MODULE_5__["ChequePayment"]();
            this.chequePayment = JSON.parse(JSON.stringify(data));
            console.log(this.chequePayment);
            this.iterationName = 'Collected_Cheque_Sucess_Page';
        });
    }
    onChequeDeposit() {
        this.paymentService.getCollectionAndDeliveryModeChequeList()
            .subscribe((data) => {
            this.chequePaymentList = data;
            this.oldChequePaymentList = data;
            for (let c of this.chequePaymentList) {
                c.toBeDepositedOn = new Date(c.toBeDepositedOn);
                c.toBeDepositedOn.setHours(0, 0, 0, 0);
                if (c.chequeStatus == "DEPOSITED") {
                    c.seq = 3;
                }
                else if (c.chequeStatus == "COLLECTED") {
                    c.seq = 1;
                }
                else if (c.chequeStatus == "RECEIVED") {
                    c.seq = 2;
                }
            }
            this.newChequePaymentList = new Array();
            this.cCustomDate = false;
            this.cRange = -1;
            this.customerName = null;
            this.custNamelength = 0;
            this.chequeNumber = null;
            this.chequeNumlength = 0;
            this.collectedOn = new Date();
            this.pendingChequeColl = false;
            this.populateRange();
            this.pendingChequeDepo = false;
            this.newChequePaymentList = new Array();
            this.iterationName = 'Cheque_Deposit';
        });
    }
    downloadChequeDeposit() {
        alert("Deposit");
    }
    onCheckedChequePayment(c) {
        //   var index = this.newChequePaymentList.indexOf(c);
        //  if(index === -1){
        //    this.newChequePaymentList.push(c);
        //  }else{
        //    this.newChequePaymentList.splice(index,1);
        //  }
        //  console.log(this.newChequePaymentList)
        this.selectedCheque = c;
    }
    onPendingDeposited() {
        this.pendingChequeDepo = !this.pendingChequeDepo;
        let chequeList;
        if (this.cRange == -1 && this.customerName == null && this.region == null && this.state == null && this.city == null) {
            chequeList = JSON.parse(JSON.stringify(this.oldChequePaymentList));
        }
        else {
            chequeList = JSON.parse(JSON.stringify(this.filteredChequePaymentList));
        }
        this.newChequePaymentList = new Array();
        for (let c of chequeList) {
            if (this.pendingChequeDepo) {
                if (c.depositedOn == null) {
                    c.selectedChequePay = this.pendingChequeDepo;
                    c.toBeDepositedOn = new Date(c.toBeDepositedOn);
                    c.toBeDepositedOn.setHours(0, 0, 0, 0);
                    this.newChequePaymentList.push(c);
                }
            }
            else {
                c.selectedChequePay = this.pendingChequeDepo;
                c.toBeDepositedOn = new Date(c.toBeDepositedOn);
                c.toBeDepositedOn.setHours(0, 0, 0, 0);
                this.newChequePaymentList.push(c);
            }
        }
        this.chequePaymentList = this.newChequePaymentList;
    }
    onProceedChequeDeposit() {
        this.depositedOn = new Date();
    }
    onConformMultipleChequeDepositSubmit() {
        console.log(this.chequePaymentList);
        let chequePaymentList = new Array();
        for (let c of this.chequePaymentList) {
            if (c.selectedChequePay != null && c.selectedChequePay == true) {
                let chequePayment = new src_app_model_cheque_payment__WEBPACK_IMPORTED_MODULE_5__["ChequePayment"];
                chequePayment.chequePayId = c.chequePayId;
                chequePayment.depositedOn = this.depositedOn;
                chequePaymentList.push(chequePayment);
            }
        }
        if (chequePaymentList.length != 0) {
            this.paymentService.saveMultipleDepositChequePayment(chequePaymentList)
                .subscribe((data) => {
                this.toastr.success('Cheque Deposited Successfully!!!', 'Cheque Deposit', { timeOut: 10000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
                this.onPaymentByCheque();
            });
        }
    }
    // -- Filter for Cheque To Be Deposit On ---
    onSelectRangeChequeToBeDep() {
        this.customerName = null;
        this.chequeNumber = null;
        if (this.cRange != "-1") {
            if (this.cRange == "1") {
                this.cCustomDate = true;
                this.cDate = new Date("01/01/2020");
                this.cDate1 = new Date();
            }
            else {
                this.cCustomDate = false;
            }
            this.filterListToBeChequeDep(this.cRange);
        }
        else {
            this.chequePaymentList = this.oldChequePaymentList;
            this.cCustomDate = false;
        }
    }
    filterListToBeChequeDep(option) {
        this.newChequePaymentList = new Array();
        let startDate = new Date();
        let endDate = new Date();
        if (this.cCustomDate) {
            endDate = this.cDate1;
        }
        startDate = this.getStartDate(this.cDate, this.cDate1, endDate, option);
        for (let b of this.oldChequePaymentList) {
            let dt = new Date(b.toBeDepositedOn);
            dt.setHours(0, 0, 0, 0);
            if (dt >= startDate && dt <= endDate) {
                this.newChequePaymentList.push(b);
            }
        }
        this.chequePaymentList = this.newChequePaymentList;
        this.pendingChequeDepo = false;
        this.filteredChequePaymentList = new Array();
        this.filteredChequePaymentList = this.chequePaymentList;
    }
    onDateChangeChequeToBeDep() {
        this.customerName = null;
        this.chequeNumber = null;
        this.filterListToBeChequeDep("1");
    }
    onChequeToBeCustomerName() {
        if (this.customerName != null) {
            this.chequeNumber = null;
            this.filterListCustNameToBeDepoOn();
        }
    }
    filterListCustNameToBeDepoOn() {
        if (this.cRange != -1) {
            this.filterListToBeChequeDep(this.cRange);
            this.newChequePaymentList = this.chequePaymentList;
        }
        else {
            this.newChequePaymentList = this.oldChequePaymentList;
        }
        console.log(this.newChequePaymentList);
        if (this.customerName != "") {
            if (this.customerName.length > this.custNamelength) {
                this.chequePaymentList = this.newChequePaymentList.filter(res => {
                    return res.customerName.match(this.customerName);
                });
            }
            else {
                this.chequePaymentList = this.newChequePaymentList.filter(res => {
                    return res.customerName.match(this.customerName);
                });
            }
        }
        else if (this.customerName == "") {
            this.chequePaymentList = this.newChequePaymentList;
        }
        this.custNamelength = this.customerName.length;
        this.pendingChequeDepo = false;
        this.filteredChequePaymentList = new Array();
        this.filteredChequePaymentList = this.chequePaymentList;
    }
    onChequeNumberToBe() {
        if (this.chequeNumber != null) {
            this.filterListChequNoToBeDepoOn();
        }
    }
    filterListChequNoToBeDepoOn() {
        if (this.cRange != -1 && this.customerName == null) {
            this.filterListChequeDepositedOn(this.cRange);
            this.newChequePaymentList = this.chequePaymentList;
        }
        else if (this.cRange != -1 && this.customerName != null) {
            this.filterListCustNameToBeDepoOn();
            this.newChequePaymentList = this.chequePaymentList;
        }
        else if (this.cRange == -1 && this.customerName != null) {
            this.filterListCustNameToBeDepoOn();
            this.newChequePaymentList = this.chequePaymentList;
        }
        else {
            this.newChequePaymentList = this.oldChequePaymentList;
        }
        if (this.chequeNumber != "") {
            if (this.chequeNumber.length > this.chequeNumlength) {
                this.chequePaymentList = this.newChequePaymentList.filter(res => {
                    return res.chequeNumber.match(this.chequeNumber);
                });
            }
            else {
                this.chequePaymentList = this.newChequePaymentList.filter(res => {
                    return res.chequeNumber.match(this.chequeNumber);
                });
            }
        }
        else if (this.chequeNumber == "") {
            this.chequePaymentList = this.newChequePaymentList;
            this.bankStatementList = this.oldBankStatementList;
        }
        else {
            this.chequePaymentList = this.newChequePaymentList.filter(res => {
                return res.chequeNumber.match(this.chequeNumber);
            });
        }
        this.chequeNumlength = this.chequeNumber.length;
        this.pendingChequeDepo = false;
        this.filteredChequePaymentList = new Array();
        this.filteredChequePaymentList = this.chequePaymentList;
    }
    // --- Filters For Cheque Collection & Delivery ---
    onSelectRangeChequeCol() {
        this.customerName = null;
        this.region = null;
        this.state = null;
        this.city = null;
        this.selectedRegion = new Array();
        this.selectedState = new Array();
        this.selectedCity = new Array();
        if (this.cRange != "-1") {
            if (this.cRange == "1") {
                this.cCustomDate = true;
                this.cDate = new Date("01/01/2020");
                this.cDate1 = new Date();
            }
            else {
                this.cCustomDate = false;
            }
            this.filterListChequeCol(this.cRange);
        }
        else {
            this.chequePaymentList = this.oldChequePaymentList;
            for (let c of this.oldChequePaymentList) {
                this.selectedRegion.push(c.region);
            }
            let unique1 = this.selectedRegion.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedRegion = unique1;
            this.cCustomDate = false;
        }
    }
    filterListChequeCol(option) {
        this.newChequePaymentList = new Array();
        let startDate = new Date();
        let endDate = new Date();
        if (this.cCustomDate) {
            endDate = this.cDate1;
        }
        startDate = this.getStartDate(this.cDate, this.cDate1, endDate, option);
        this.selectedRegion = new Array();
        for (let b of this.oldChequePaymentList) {
            let dt;
            if (b.toBeCollectedOn != null) {
                dt = new Date(b.toBeCollectedOn);
                dt.setHours(0, 0, 0, 0);
            }
            else if (b.toBeDeliveredOn != null) {
                dt = new Date(b.toBeDeliveredOn);
            }
            if (dt >= startDate && dt <= endDate) {
                this.newChequePaymentList.push(b);
                this.selectedRegion.push(b.region);
            }
        }
        let unique1 = this.selectedRegion.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
        this.selectedRegion = unique1;
        this.chequePaymentList = this.newChequePaymentList;
        this.pendingChequeColl = false;
        this.filteredChequePaymentList = new Array();
        this.filteredChequePaymentList = this.chequePaymentList;
    }
    onDateChangeChequeCol() {
        this.customerName = null;
        this.filterListChequeCol("1");
    }
    onChequeustomerNameCol() {
        this.region = null;
        this.state = null;
        this.city = null;
        this.selectedRegion = new Array();
        this.selectedState = new Array();
        this.selectedCity = new Array();
        this.onFilterCustomerName();
    }
    onFilterCustomerName() {
        if (this.cRange != -1) {
            this.filterListChequeCol(this.cRange);
            this.newChequePaymentList = this.chequePaymentList;
        }
        else {
            this.newChequePaymentList = this.oldChequePaymentList;
        }
        if (this.customerName != "") {
            if (this.customerName.length > this.custNamelength) {
                this.chequePaymentList = this.newChequePaymentList.filter(res => {
                    return res.customerName.match(this.customerName);
                });
            }
            else {
                this.chequePaymentList = this.newChequePaymentList.filter(res => {
                    return res.customerName.match(this.customerName);
                });
            }
        }
        else if (this.customerName == "") {
            this.chequePaymentList = this.newChequePaymentList;
        }
        this.custNamelength = this.customerName.length;
        this.selectedRegion = new Array();
        for (let c of this.chequePaymentList) {
            this.selectedRegion.push(c.region);
        }
        let unique1 = this.selectedRegion.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
        this.selectedRegion = unique1;
        this.pendingChequeColl = false;
        this.filteredChequePaymentList = new Array();
        this.filteredChequePaymentList = this.chequePaymentList;
    }
    onSelectRegion() {
        this.newChequePaymentList = new Array();
        this.selectedState = new Array();
        this.selectedCity = new Array();
        this.state = null;
        this.city = null;
        this.onFilterRegion();
    }
    onFilterRegion() {
        if (this.region != null) {
            if (this.customerName != null && this.cRange != "-1") {
                this.onFilterCustomerName();
                this.newChequePaymentList = this.chequePaymentList;
            }
            else if (this.customerName != null && this.cRange == "-1") {
                this.onFilterCustomerName();
                this.newChequePaymentList = this.chequePaymentList;
            }
            else if (this.customerName == null && this.cRange != "-1") {
                this.filterListChequeCol(this.cRange);
                this.newChequePaymentList = this.chequePaymentList;
            }
            else if (this.customerName == null && this.cRange == "-1") {
                this.newChequePaymentList = this.oldChequePaymentList;
            }
            this.newChequePaymentList = this.newChequePaymentList.filter(res => {
                return res.region.match(this.region);
            });
            this.chequePaymentList = this.newChequePaymentList;
            for (let c of this.chequePaymentList) {
                this.selectedState.push(c.state);
            }
            let unique1 = this.selectedState.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedState = unique1;
        }
        else {
            if (this.customerName != null) {
                this.onFilterCustomerName();
            }
            else if (this.cRange != '-1') {
                this.filterListChequeCol(this.cRange);
            }
            else if (this.cRange == '-1' && this.customerName == null) {
                this.chequePaymentList = this.oldChequePaymentList;
            }
        }
        this.pendingChequeColl = false;
        this.filteredChequePaymentList = new Array();
        this.filteredChequePaymentList = this.chequePaymentList;
    }
    onSelectState() {
        this.newChequePaymentList = new Array();
        this.selectedCity = new Array();
        this.city = null;
        this.onFilterState();
    }
    onFilterState() {
        if (this.state != null) {
            if (this.region != null) {
                this.onFilterRegion();
                this.newChequePaymentList = this.chequePaymentList;
            }
            this.newChequePaymentList = this.newChequePaymentList.filter(res => {
                return res.state.match(this.state);
            });
            this.chequePaymentList = this.newChequePaymentList;
            for (let c of this.chequePaymentList) {
                this.selectedCity.push(c.city);
            }
            let unique1 = this.selectedCity.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedCity = unique1;
        }
        else {
            this.onFilterRegion();
        }
        this.pendingChequeColl = false;
        this.filteredChequePaymentList = new Array();
        this.filteredChequePaymentList = this.chequePaymentList;
    }
    onSelectCity() {
        this.newChequePaymentList = new Array();
        if (this.city != null) {
            if (this.state != null) {
                this.onFilterState();
                this.newChequePaymentList = this.chequePaymentList;
            }
            this.newChequePaymentList = this.newChequePaymentList.filter(res => {
                return res.city.match(this.city);
            });
            this.chequePaymentList = this.newChequePaymentList;
        }
        else {
            this.onFilterState();
        }
        this.pendingChequeColl = false;
        this.filteredChequePaymentList = new Array();
        this.filteredChequePaymentList = this.chequePaymentList;
    }
    // ----- End (Cheque Payment Methods)
    // ----- Start (Agreegator Reconciliation Methods) ----
    onAggregator() {
        this.iterationName = 'AGREEGATOR';
    }
    onAgreegatorPaymentReconciliation() {
        this.paymentService.getAllPendingOnlinePayment()
            .subscribe((data) => {
            this.onlinePaymentList = data;
            this.newOnlinePaymentList = new Array();
            this.oldOnlinePaymentList = this.onlinePaymentList;
            this.newOnlinePaymentList = new Array();
            this.paymentService.getPendingBankStatement()
                .subscribe((data) => {
                this.bankStatementList = data;
                this.oldBankStatementList = data;
                this.walletService.getAdminBankDetails()
                    .subscribe((data) => {
                    this.accountDetails = data;
                    this.orderId = null;
                    this.paymentMode = null;
                    this.customerName = null;
                    this.rangeOP = -1;
                    this.customDateOP = false;
                    this.custNamelength = 0;
                    this.orderIdLength = 0;
                    this.paymentModeLength = 0;
                    this.particulars = null;
                    this.bRange = -1;
                    this.bCustomDate = false;
                    this.paymentModeAgr = null;
                    this.orderIdAgr = null;
                    this.rangeAgr = -1;
                    this.customDateAgr = false;
                    this.orderIdLengthAgr = 0;
                    this.paymentModeLengthAgr = 0;
                    this.newBankPaymentList = new Array();
                    this.newBankStatementList = new Array();
                    this.paymentRefNo = null;
                    this.matchingRecordOfAgre = false;
                    this.populateRange();
                    this.paymentService.getAllPendingAgreegatorPayment()
                        .subscribe((data) => {
                        this.agreegatorPaymentList = data;
                        if (this.agreegatorPaymentList != null) {
                            this.paymentRefNoList = new Array();
                            for (let a of this.agreegatorPaymentList) {
                                this.paymentRefNoList.push(a.paymentRefNo);
                            }
                        }
                        this.agreegatorPayment = null;
                        this.newAgreegatorSettlementList = new Array();
                        this.buttonValue = "Auto Match";
                        this.iterationName = 'AGGREGATOR_RECONCILATION';
                    });
                });
            });
        });
    }
    onAgreegatorPaymentReport() {
        this.paymentService.getApprovedOnlinePaymentList()
            .subscribe((data) => {
            this.onlinePaymentList = data;
            this.newOnlinePaymentList = new Array();
            this.totalSettlementAmount = 0;
            this.totalPaidAmount = 0;
            this.totalTopupAmount = 0;
            this.oldOnlinePaymentList = this.onlinePaymentList;
            for (let o of this.onlinePaymentList) {
                this.totalTopupAmount = this.totalTopupAmount + o.topupAmount;
                this.totalPaidAmount = this.totalPaidAmount + o.paidAmount;
                if (o.settlement) {
                    this.totalSettlementAmount = this.totalSettlementAmount + o.settlement;
                }
            }
            this.newOnlinePaymentList = new Array();
            this.orderId = null;
            this.paymentMode = null;
            this.customerName = null;
            this.rangeOP = -1;
            this.customDateOP = false;
            this.custNamelength = 0;
            this.orderIdLength = 0;
            this.paymentModeLength = 0;
            this.particulars = null;
            this.bRange = -1;
            this.bCustomDate = false;
            this.paymentModeAgr = null;
            this.orderIdAgr = null;
            this.rangeAgr = -1;
            this.customDateAgr = false;
            this.orderIdLengthAgr = 0;
            this.paymentModeLengthAgr = 0;
            this.newBankPaymentList = new Array();
            this.newBankStatementList = new Array();
            this.paymentRefNo = null;
            this.populateRange();
            this.iterationName = 'AGGREGATOR_REPORT';
        });
    }
    onSelectRangeOP() {
        this.customerName = null;
        this.orderId = null;
        this.paymentMode = null;
        if (this.rangeOP != "-1") {
            if (this.rangeOP == "1") {
                this.customDateOP = true;
                this.dateOP = new Date("01/01/2020");
                this.date1OP = new Date();
            }
            else {
                this.customDateOP = false;
            }
            this.filterListOP(this.rangeOP);
        }
        else {
            this.onlinePaymentList = this.oldOnlinePaymentList;
            this.customDateOP = false;
        }
    }
    filterListOP(option) {
        this.newOnlinePaymentList = new Array();
        let startDate = new Date();
        let endDate = new Date();
        if (this.customDateOP) {
            endDate = this.date1OP;
        }
        startDate = this.getStartDate(this.dateOP, this.date1OP, endDate, option);
        this.newOnlinePaymentList = new Array();
        for (let o of this.oldOnlinePaymentList) {
            let dt = new Date(o.topupDate);
            dt.setHours(0, 0, 0, 0);
            if (dt >= startDate && dt <= endDate) {
                this.newOnlinePaymentList.push(o);
            }
        }
        this.onlinePaymentList = this.newOnlinePaymentList;
        this.getTotalOnlineReport(this.onlinePaymentList);
    }
    onDateChangeOP() {
        this.customerName = null;
        this.orderId = null;
        this.paymentMode = null;
        this.filterListOP("1");
    }
    onCustomerNameOnline() {
        if (this.customerName != null) {
            this.orderId = null;
            this.paymentMode = null;
            this.onCustomerNameOnlineFilter();
        }
    }
    onCustomerNameOnlineFilter() {
        let list = JSON.parse(JSON.stringify(this.oldOnlinePaymentList));
        if (this.rangeOP != -1) {
            this.filterListOP(this.rangeOP);
            list = JSON.parse(JSON.stringify(this.onlinePaymentList));
        }
        else {
            list = JSON.parse(JSON.stringify(this.oldOnlinePaymentList));
        }
        if (this.customerName != "") {
            if (this.customerName.length > this.custNamelength) {
                this.onlinePaymentList = list.filter(res => {
                    return res.customerName.match(this.customerName);
                });
            }
            else {
                this.onlinePaymentList = list.filter(res => {
                    return res.customerName.match(this.customerName);
                });
            }
        }
        else if (this.customerName == "") {
            this.onlinePaymentList = list;
        }
        this.custNamelength = this.customerName.length;
        this.getTotalOnlineReport(this.onlinePaymentList);
    }
    onOrderId() {
        if (this.orderId != null) {
            this.paymentMode = null;
            this.onOnlineIdFilter();
        }
    }
    onOnlineIdFilter() {
        let list;
        if (this.customerName != null) {
            this.onCustomerNameOnlineFilter();
            list = JSON.parse(JSON.stringify(this.onlinePaymentList));
        }
        else {
            list = JSON.parse(JSON.stringify(this.oldOnlinePaymentList));
        }
        if (this.orderId != "") {
            if (this.orderId.length > this.orderIdLength) {
                this.onlinePaymentList = list.filter(res => {
                    return res.orderId.match(this.orderId);
                });
            }
            else {
                this.onlinePaymentList = list.filter(res => {
                    return res.orderId.match(this.orderId);
                });
            }
            for (let a of this.agreegatorPaymentList) {
                for (let s of a.agreegatorSettlement) {
                    if (this.orderId.match(s.orderId)) {
                        this.agreegatorPayment = JSON.parse(JSON.stringify(a));
                        this.oldAgreegatorPayment = JSON.parse(JSON.stringify(a));
                        this.paymentRefNo = a.paymentRefNo;
                    }
                }
            }
        }
        else if (this.orderId == "") {
            this.onlinePaymentList = list;
            this.agreegatorPayment = null;
            this.paymentRefNo = null;
        }
        this.orderIdLength = this.orderId.length;
        this.getTotalOnlineReport(this.onlinePaymentList);
    }
    onPaymentMode() {
        let list;
        if (this.orderId != null) {
            this.onOnlineIdFilter();
            list = JSON.parse(JSON.stringify(this.onlinePaymentList));
        }
        else {
            list = JSON.parse(JSON.stringify(this.oldOnlinePaymentList));
        }
        if (this.paymentMode != "") {
            if (this.paymentMode.length > this.paymentModeLength) {
                this.onlinePaymentList = list.filter(res => {
                    return res.paymentMode.match(this.paymentMode);
                });
            }
            else {
                this.onlinePaymentList = list.filter(res => {
                    return res.paymentMode.match(this.paymentMode);
                });
            }
        }
        else if (this.paymentMode == "") {
            this.onlinePaymentList = list;
        }
        this.paymentModeLength = this.paymentMode.length;
        this.getTotalOnlineReport(this.onlinePaymentList);
    }
    getTotalOnlineReport(list) {
        this.totalTopupAmount = 0;
        this.totalSettlementAmount = 0;
        this.totalPaidAmount = 0;
        for (let o of list) {
            this.totalTopupAmount = this.totalTopupAmount + o.topupAmount;
            this.totalPaidAmount = this.totalPaidAmount + o.paidAmount;
            if (o.settlement) {
                this.totalSettlementAmount = this.totalSettlementAmount + o.settlement;
            }
        }
    }
    onSelectRangeAgr() {
        if (this.rangeAgr != "-1") {
            if (this.rangeAgr == "1") {
                this.customDateAgr = true;
                this.dateAgr = new Date("01/01/2020");
                this.date1Agr = new Date();
            }
            else {
                this.customDateAgr = false;
                this.agreegatorPayment = JSON.parse(JSON.stringify(this.oldAgreegatorPayment));
            }
            this.filterListAgr(this.rangeAgr);
        }
        else {
            this.customDateAgr = false;
            this.agreegatorPayment = JSON.parse(JSON.stringify(this.oldAgreegatorPayment));
        }
    }
    filterListAgr(option) {
        let startDate = new Date();
        let endDate = new Date();
        if (this.customDateAgr) {
            endDate = this.date1Agr;
        }
        startDate = this.getStartDate(this.dateAgr, this.date1Agr, endDate, option);
        this.newAgreegatorSettlementList = new Array();
        let list = JSON.parse(JSON.stringify(this.oldAgreegatorPayment.agreegatorSettlement));
        for (let s of list) {
            let dt = new Date(s.transactionDate);
            dt.setHours(0, 0, 0, 0);
            if (dt >= startDate && dt <= endDate) {
                this.newAgreegatorSettlementList.push(s);
            }
        }
        this.agreegatorPayment.agreegatorSettlement = this.newAgreegatorSettlementList;
    }
    onDateChangeAgr() {
        this.orderIdAgr = null;
        this.paymentModeAgr = null;
        this.filterListAgr("1");
    }
    onOrderIdAgr() {
        if (this.orderIdAgr != null) {
            this.paymentModeAgr = null;
            this.onOrderIDAgrFilter();
        }
    }
    onOrderIDAgrFilter() {
        let list;
        if (this.rangeAgr != -1) {
            this.filterListAgr(this.rangeAgr);
            list = JSON.parse(JSON.stringify(this.agreegatorPayment.agreegatorSettlement));
        }
        else {
            list = JSON.parse(JSON.stringify(this.oldAgreegatorPayment.agreegatorSettlement));
        }
        this.newAgreegatorSettlementList = new Array();
        if (this.orderIdAgr != "") {
            if (this.orderIdAgr.length > this.orderIdLengthAgr) {
                this.newAgreegatorSettlementList = list.filter(res => {
                    return res.orderId.match(this.orderIdAgr);
                });
            }
            else {
                this.newAgreegatorSettlementList = list.filter(res => {
                    return res.orderId.match(this.orderIdAgr);
                });
            }
        }
        else if (this.orderId == "") {
            this.newAgreegatorSettlementList = this.oldAgreegatorPayment.agreegatorSettlement;
        }
        this.orderIdLengthAgr = this.orderIdAgr.length;
        this.agreegatorPayment.agreegatorSettlement = this.newAgreegatorSettlementList;
    }
    onPaymentModeAgr() {
        let list;
        if (this.orderIdAgr != null) {
            this.onOrderIDAgrFilter();
            list = JSON.parse(JSON.stringify(this.agreegatorPayment.agreegatorSettlement));
        }
        else {
            list = JSON.parse(JSON.stringify(this.oldAgreegatorPayment.agreegatorSettlement));
        }
        this.newAgreegatorSettlementList = new Array();
        if (this.paymentModeAgr != "") {
            if (this.paymentModeAgr.length > this.paymentModeLengthAgr) {
                this.newAgreegatorSettlementList = list.filter(res => {
                    return res.paymentMethod.match(this.paymentModeAgr);
                });
            }
            else {
                this.newAgreegatorSettlementList = list.filter(res => {
                    return res.paymentMethod.match(this.paymentModeAgr);
                });
            }
        }
        else if (this.paymentModeAgr == "") {
            this.newAgreegatorSettlementList = this.oldAgreegatorPayment.agreegatorSettlement;
        }
        this.paymentModeLengthAgr = this.paymentModeAgr.length;
        this.agreegatorPayment.agreegatorSettlement = this.newAgreegatorSettlementList;
    }
    onSelectPaymentRefNo() {
        this.matchingRecordOfAgre = false;
        this.orderIdLengthAgr = 0;
        if (this.agreegatorPayment != null) {
            for (let a of this.agreegatorPayment.agreegatorSettlement) {
                for (let o of this.onlinePaymentList) {
                    if (o.orderId == a.orderId && o.paidAmount == a.amount) {
                        a.selectedAgreeSettlement = false;
                        o.selectedOnlinePay = false;
                    }
                }
            }
            for (let b of this.bankStatementList) {
                if (this.agreegatorPayment.totalAmount == b.creditAmount && b.particulars.includes(this.agreegatorPayment.paymentRefNo)) {
                    b.selectedBankStmt = false;
                }
            }
        }
        if (this.paymentRefNo != null) {
            this.rangeAgr = -1;
            this.orderIdAgr = null;
            this.paymentModeAgr = null;
            this.customDateAgr = false;
            for (let a of this.agreegatorPaymentList) {
                if (this.paymentRefNo == a.paymentRefNo) {
                    this.agreegatorPayment = JSON.parse(JSON.stringify(a));
                    this.oldAgreegatorPayment = JSON.parse(JSON.stringify(this.agreegatorPayment));
                }
            }
        }
        if (this.paymentRefNo == null) {
            this.agreegatorPayment = null;
            this.oldAgreegatorPayment = null;
            this.customDateAgr = false;
            this.rangeAgr = -1;
        }
    }
    onCheckedMatchingRecordOfAgre() {
        this.matchingRecordOfAgre = !this.matchingRecordOfAgre;
        if (this.matchingRecordOfAgre) {
            this.buttonValue = "Unmatch";
        }
        else {
            this.buttonValue = "Auto Match";
        }
        this.onlinePaymentListAutoMatch = new Array();
        if (this.matchingRecordOfAgre == true) {
            if (this.agreegatorPayment != null) {
                this.selectedAgreegatorPayment = this.agreegatorPayment;
                for (let b of this.bankStatementList) {
                    if (this.agreegatorPayment.totalAmount == b.creditAmount && b.particulars.includes(this.agreegatorPayment.paymentRefNo)) {
                        b.selectedBankStmt = true;
                        this.selectedBankStmt = b;
                    }
                }
                this.totalSettlementAmount = 0;
                let agreegatorPayment = JSON.parse(JSON.stringify(this.agreegatorPayment));
                for (let a of agreegatorPayment.agreegatorSettlement) {
                    for (let o of this.onlinePaymentList) {
                        if (o.orderId == a.orderId && o.paidAmount == a.amount) {
                            //a.selectedAgreeSettlement = true;
                            //o.selectedOnlinePay = true;
                            if (this.selectedBankStmt != null) {
                                let onlinePay = new src_app_model_online_payment__WEBPACK_IMPORTED_MODULE_11__["OnlinePayment"]();
                                onlinePay = o;
                                onlinePay.paymentRefNo = this.agreegatorPayment.paymentRefNo;
                                onlinePay.settlement = a.settlement;
                                this.totalSettlementAmount = this.totalSettlementAmount * 1 + 1 * a.settlement;
                                console.log(this.totalSettlementAmount);
                                onlinePay.aggPayId = this.agreegatorPayment.aggPayId;
                                onlinePay.aggSettlementId = a.aggSettlementId;
                                onlinePay.bankStmtId = this.selectedBankStmt.bankStmtId;
                                onlinePay.particulars = this.selectedBankStmt.particulars;
                                onlinePay.creditAmount = this.selectedBankStmt.creditAmount;
                                onlinePay.selectedOnlinePay = true;
                                this.onlinePaymentListAutoMatch.push(onlinePay);
                            }
                        }
                    }
                }
            }
        }
        if (this.onlinePaymentListAutoMatch.length != this.agreegatorPayment.agreegatorSettlement.length || this.selectedBankStmt == null) {
            this.toastr.error('No Matching Record Found ', 'Bank Statement', {
                timeOut: 10000,
                positionClass: 'toast-top-center',
                progressBar: true,
                progressAnimation: 'increasing'
            });
            this.onAgreegatorPaymentReconciliation();
        }
        else {
            this.onlinePaymentList = this.onlinePaymentListAutoMatch;
            this.matchingRecordOfAgre = true;
            this.iterationName = 'AGGREGATOR_RECONCILATION_AUTOMATCH';
        }
    }
    // selectAllMatchingOnlinePay(){
    //   this.matchingRecordOfAgre = !this.matchingRecordOfAgre
    //   console.log(this.matchingRecordOfAgre)
    //     for(let o of  this.onlinePaymentList){  
    //         o.selectedOnlinePay = this.matchingRecordOfAgre;
    //     }
    // }
    onCheckedBankStatement(b) {
        this.selectedBankStmt = b;
    }
    onCheckedOnlinePayment(p) {
    }
    onCheckedAgreeSettlement(a) {
        this.selectedAgreegatorPayment = this.agreegatorPayment;
        for (let s of this.selectedAgreegatorPayment.agreegatorSettlement) {
            if (s.aggSettlementId == a.aggSettlementId) {
                s.selectedAgreeSettlement = true;
            }
        }
    }
    onAutoApproveOnlinePayment() {
        let onlinePayIds = new Array();
        let count = 0;
        for (let o of this.onlinePaymentList) {
            if (o.selectedOnlinePay == true) {
                count++;
                onlinePayIds.push(o.onlinePayId);
            }
        }
        let onlinePay = this.onlinePaymentList[0];
        if (onlinePayIds.length == this.selectedAgreegatorPayment.agreegatorSettlement.length && onlinePayIds.length == count) {
            let onlinePay = this.onlinePaymentList[0];
            this.paymentService.saveApprovedOnlinePayment(onlinePay.bankStmtId, onlinePayIds, onlinePay.aggPayId).subscribe((data) => {
                this.toastr.success('Transaction Approved!!!', 'Bank Reconciliation', { timeOut: 10000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
                this.onAgreegatorPaymentReconciliation();
            });
        }
        else {
            this.toastr.error('Please Select All ', 'Bank Statement', {
                timeOut: 10000,
                positionClass: 'toast-top-center',
                progressBar: true,
                progressAnimation: 'increasing'
            });
        }
    }
    onApproveOnlinePayment() {
        let onlinePayIds;
        if (this.selectedBankStmt != null && this.selectedAgreegatorPayment != null && this.selectedAgreegatorPayment.totalAmount == this.selectedBankStmt.creditAmount && this.selectedBankStmt.particulars.includes(this.selectedAgreegatorPayment.paymentRefNo)) {
            let count = 0;
            onlinePayIds = new Array();
            for (let a of this.selectedAgreegatorPayment.agreegatorSettlement) {
                for (let o of this.onlinePaymentList) {
                    if (o.orderId == a.orderId && o.paidAmount == a.amount) {
                        if (a.selectedAgreeSettlement == true && o.selectedOnlinePay == true) {
                            count++;
                            onlinePayIds.push(o.onlinePayId);
                        }
                    }
                }
            }
            if (onlinePayIds.length == this.selectedAgreegatorPayment.agreegatorSettlement.length && onlinePayIds.length == count) {
                this.paymentService.saveApprovedOnlinePayment(this.selectedBankStmt.bankStmtId, onlinePayIds, this.agreegatorPayment.aggPayId).subscribe((data) => {
                    this.toastr.success('Transaction Approved!!!', 'Bank Reconciliation', { timeOut: 10000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
                    this.onAggregator();
                });
            }
            else {
                this.toastr.error('Please check Payment Ref No & Amount', 'Bank Statement', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
            }
        }
        else {
            this.toastr.error('Please check Payment Ref No & Amount', 'Bank Statement', {
                timeOut: 10000,
                positionClass: 'toast-top-center',
                progressBar: true,
                progressAnimation: 'increasing'
            });
        }
    }
    // ----- End (Agreegator Reconciliation Methods) ----
    // --- Start(Back Clicks Method) ---
    onBack() {
        this.onChequeDeposit();
    }
    onBackClick() {
        if (this.iterationName == 'Payment_Reconciliation' || this.iterationName == 'Payment_By_Cheque') {
            this.iterationName = 'initial';
        }
        else if (this.iterationName == 'Bank_Transfer' || this.iterationName == 'Cheque_Transfer' || this.iterationName == 'AGREEGATOR' || this.iterationName == 'STATEMENT_UPLOAD' || this.iterationName == 'SETTLEMENT_UPLOAD' || this.iterationName == 'RECONCILIATION') {
            this.iterationName = 'Payment_Reconciliation';
        }
        else if (this.iterationName == 'Bank_Payment_Reconciliation' || this.iterationName == 'Hold_Bank_Payment' || this.iterationName == 'Bank_Payment_Report') {
            this.iterationName = 'Bank_Transfer';
        }
        else if (this.iterationName == 'Cheque_Payment_Reconciliation' || this.iterationName == 'Hold_Cheque_Payment' || this.iterationName == 'Cheque_Payment_Report') {
            this.iterationName = 'Cheque_Transfer';
        }
        else if (this.iterationName == 'Cheque_Delivery' || this.iterationName == 'Cheque_Collection' || this.iterationName == 'Cheque_Deposit') {
            this.iterationName = 'Payment_By_Cheque';
        }
        else if (this.iterationName == 'Collected_Cheque_Details') {
            this.iterationName = 'Cheque_Collection';
        }
        else if (this.iterationName == 'Bank_Payment_Reconciliation_Auto_Match') {
            this.onBankPaymentReconciliation();
        }
        else if (this.iterationName == 'Cheque_Payment_Reconciliation_Auto_Match') {
            this.onChequePaymentReconcilation();
        }
        else if (this.iterationName == 'AGGREGATOR_REPORT' || this.iterationName == 'AGGREGATOR_RECONCILATION') {
            this.onAggregator();
        }
        else if (this.iterationName == 'AGGREGATOR_RECONCILATION_AUTOMATCH') {
            this.onAgreegatorPaymentReconciliation();
        }
    }
    // --- End (Back Clicks Method) ---
    // ----  Start (Bank Statement Upload Methods )------
    uploadBankStatement() {
        this.message = "";
        this.errmessage = "";
        this.progress = 0;
        this.currentFile = null;
        this.fileDataList = this.getBankStmtFileList();
        this.iterationName = 'STATEMENT_UPLOAD';
    }
    selectFile(event) {
        this.selectedFiles = event.target.files;
        this.message = '';
    }
    upload() {
        this.progress = 0;
        this.message = "";
        this.errmessage = "";
        this.currentFile = this.selectedFiles.item(0);
        this.uploadService.upload(this.currentFile).subscribe(event => {
            console.log(event);
            if (event.type === _angular_common_http__WEBPACK_IMPORTED_MODULE_9__["HttpEventType"].UploadProgress) {
                this.progress = Math.round(100 * event.loaded / event.total);
                console.log(this.progress);
            }
            else if (event instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_9__["HttpResponse"]) {
                if (event.body != null) {
                    console.log(event.body);
                    if (event.body.message != null) {
                        this.currentFile = undefined;
                        this.errmessage = event.body.message;
                    }
                    else {
                        this.message = "File " + event.body.name + " uploaded successfully";
                        this.paymentService.getPendingBankStatement()
                            .subscribe((data) => {
                            this.bankStatementList = data;
                            this.oldBankStatementList = data;
                            this.walletService.getAdminBankDetails()
                                .subscribe((data) => {
                                this.accountDetails = data;
                                this.customDate = false;
                                this.range = -1;
                                this.bRange = -1;
                                this.bCustomDate = false;
                            });
                        });
                        //this.fileDataList = this.getBankStmtFileList();
                    }
                }
                else {
                    this.currentFile = undefined;
                    this.errmessage = "Please upload excel file in proper format";
                }
            }
        }, err => {
            this.progress = 0;
            this.errmessage = 'Could not upload the file!';
            this.currentFile = undefined;
        });
        this.selectedFiles = undefined;
    }
    // ---- End (Bank Statement Upload Methods) ------
    getBankStmtFileList() {
        this.paymentService.getBankStmtFileDataList()
            .subscribe((data) => {
            this.fileDataList = data;
            return this.fileDataList;
        });
    }
    getAllBankStatement() {
        this.paymentService.getBankStatementList()
            .subscribe((data) => {
            this.bankStatementList = data;
            this.oldBankStatementList = new Array();
            this.oldBankStatementList = data;
            this.hideTransaction = false;
            this.bRange = -1;
            this.bCustomDate = false;
            this.type = null;
            this.populateRange();
            this.paymentService.getBankStatementCategoryList()
                .subscribe((data) => {
                this.categoryList = data;
                this.category = null;
                this.iterationName = "category";
            });
        });
    }
    onSelectRangeBankStmt() {
        this.type = null;
        this.hideTransaction = false;
        this.onSelectRangeBank();
    }
    onCreditDebit() {
        this.hideTransaction = false;
        this.onFilterCreditDebit();
    }
    onFilterCreditDebit() {
        let bankList = new Array();
        if (this.bRange != '-1') {
            this.filterListBankStmt(this.bRange);
            bankList = this.bankStatementList;
        }
        else {
            bankList = this.oldBankStatementList;
        }
        if (this.type == "Credit Only") {
            this.newBankStatementList = new Array();
            for (let b of bankList) {
                if (b.creditAmount != null) {
                    this.newBankStatementList.push(b);
                }
            }
            this.bankStatementList = this.newBankStatementList;
        }
        if (this.type == "Debit Only") {
            this.newBankStatementList = new Array();
            for (let b of bankList) {
                if (b.debitAmount != null) {
                    this.newBankStatementList.push(b);
                }
            }
            this.bankStatementList = this.newBankStatementList;
        }
        if (this.type == null) {
            this.bankStatementList = bankList;
        }
    }
    onHideMatchedTransaction() {
        let bankList = new Array();
        if (this.bRange != '-1' && this.type == null) {
            this.filterListBankStmt(this.bRange);
            bankList = this.bankStatementList;
        }
        else if (this.bRange != '-1' && this.type != null) {
            this.onFilterCreditDebit();
            bankList = this.bankStatementList;
        }
        else if (this.bRange == '-1' && this.type != null) {
            this.onFilterCreditDebit();
            bankList = this.bankStatementList;
        }
        else if (this.bRange == '-1' && this.type == null) {
            bankList = this.oldBankStatementList;
        }
        this.hideTransaction = !this.hideTransaction;
        if (this.hideTransaction) {
            this.newBankStatementList = new Array();
            for (let b of bankList) {
                if (b.status == null || b.status != 'APPROVED') {
                    this.newBankStatementList.push(b);
                }
                this.bankStatementList = this.newBankStatementList;
            }
        }
        if (!this.hideTransaction) {
            this.bankStatementList = bankList;
        }
    }
    onCategory() {
        console.log(this.category);
        for (let b of this.bankStatementList) {
            if (b.selectedBankStmt)
                console.log(b.particulars);
        }
    }
    onSaveCatogory() {
        let bankStmtIds = new Array();
        let categoryIds = new Array();
        for (let b of this.bankStatementList) {
            if (b.selectedBankStmt) {
                b.categoryId = this.category.paramId;
                //bankStmtIds.push(this.category.paramId)
                bankStmtIds.push(b.bankStmtId);
                console.log(this.category);
            }
            categoryIds.push(this.category.paramId);
        }
        this.category.bankStmtIds = new Array();
        this.category.bankStmtIds = bankStmtIds;
        this.category.fileId = this.fileId;
        this.paymentService.assignCategoryoBankStatements(this.category).
            subscribe((data) => {
            this.toastr.success('Record Updated Successfully !!!', 'Bank Statement', {
                timeOut: 10000,
                positionClass: 'toast-top-center',
                progressBar: true,
                progressAnimation: 'increasing'
            });
            //this.onBankStmtFileName(this.fileName);
            this.getAllBankStatement();
        });
    }
    // ----  Start (Agreegator Settlement Upload Methods )------
    uploadAggregatorSettlement() {
        this.iterationName = 'SETTLEMENT_UPLOAD';
    }
    selectFile1(event) {
        this.selectedFiles = event.target.files;
    }
    uploadSettlement() {
        this.progress = 0;
        this.currentFile = this.selectedFiles.item(0);
        this.uploadService.settlementFileUpload(this.currentFile).subscribe(event => {
            console.log(event);
            if (event.type === _angular_common_http__WEBPACK_IMPORTED_MODULE_9__["HttpEventType"].UploadProgress) {
                this.progress = Math.round(100 * event.loaded / event.total);
                console.log(this.progress);
            }
            else if (event instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_9__["HttpResponse"]) {
                if (event.body != null) {
                    this.message = "File " + event.body.name + " uploaded successfully";
                    console.log(event.body.name);
                }
                else {
                    this.currentFile = undefined;
                    this.message = "Please upload excel file in proper format";
                }
            }
        }, err => {
            this.progress = 0;
            this.message = 'Could not upload the file!';
            this.currentFile = undefined;
        });
        this.selectedFiles = undefined;
    }
    // ---- End (Agreegator Settlement Upload Methods) ------
    // ---- start Reconciliation -----------
    onReconciliation() {
        this.paymentService.getAllTransaction()
            .subscribe((data) => {
            this.transaction = new Array();
            this.transaction = JSON.parse(JSON.stringify(data));
            this.transactionTotalAmount = this.getTotalTransactionAmount(this.transaction);
            this.oldTransaction = new Array();
            this.oldTransaction = JSON.parse(JSON.stringify(data));
            this.paymentService.getBankStatementList()
                .subscribe((data) => {
                this.bankStatementList = JSON.parse(JSON.stringify(data));
                this.oldBankStatementList = JSON.parse(JSON.stringify(data));
                this.bankTotalAmount = this.getTotalBankStmtAmount(this.bankStatementList);
                this.walletService.getAdminBankDetails()
                    .subscribe((data) => {
                    this.accountDetails = data;
                    this.select = null;
                    this.year = null;
                    this.quater = null;
                    this.month = null;
                    this.status = null;
                    this.paymentType = null;
                    this.customDate = false;
                    this.selectOptions = new Array();
                    this.selectOptions.push("Custom Range");
                    this.selectOptions.push("Year Wise");
                    this.selectOptions.push("Quater Wise");
                    this.selectOptions.push("Month Wise");
                    this.iterationName = 'RECONCILIATION';
                    this.statusList = new Array();
                    this.statusList.push("PENDING");
                    this.statusList.push("APPROVED");
                    this.paymentTypeList = new Array();
                    this.paymentTypeList.push("Bank Transfer");
                    this.paymentTypeList.push("Cheque Payment");
                    this.paymentTypeList.push("Online Payment");
                });
            });
        });
    }
    onSelect() {
        let date = new Date();
        let year = date.getFullYear();
        let month = date.getMonth();
        this.status = null;
        this.paymentType = null;
        month = month + 1;
        if (this.select == 'Custom Range') {
            this.date = new Date("01/01/2019");
            this.date1 = new Date();
            this.customDate = true;
            this.filterListAllTrans(this.select);
        }
        if (this.select == 'Year Wise') {
            this.yearList = this.getYear(year);
            this.month = null;
            this.quater = null;
            this.customDate = false;
            this.transaction = JSON.parse(JSON.stringify(this.oldTransaction));
        }
        if (this.select == 'Quater Wise') {
            this.quaterList = this.getQuater(month);
            this.month = null;
            this.year = null;
            this.customDate = false;
            this.transaction = JSON.parse(JSON.stringify(this.oldTransaction));
        }
        if (this.select == 'Month Wise') {
            this.year = null;
            this.quater = null;
            this.customDate = false;
            this.monthList = this.getMonths(month);
            this.transaction = JSON.parse(JSON.stringify(this.oldTransaction));
        }
        if (this.select == null) {
            this.transaction = JSON.parse(JSON.stringify(this.oldTransaction));
            this.transactionTotalAmount = this.getTotalTransactionAmount(this.transaction);
            this.customDate = false;
        }
    }
    filterListAllTrans(select) {
        let date = new Date();
        let year = date.getFullYear();
        let month = date.getMonth() + 1;
        let day = date.getDate();
        let quater = this.getCurrectQuater(month);
        this.newOnlinePaymentList = new Array();
        let startDate = new Date();
        let endDate = new Date();
        if (this.customDate && select == 'Custom Range') {
            startDate = this.date;
            endDate = this.date1;
        }
        if (select == 'Year Wise') {
            if (this.year) {
                this.yearList = this.getYear(year);
                for (let yr of this.yearList) {
                    if (yr == this.year) {
                        if (this.year == year) {
                            startDate.setDate(1);
                            startDate.setMonth(0);
                            startDate.setHours(0, 0, 0, 0);
                            endDate.setHours(0, 0, 0, 0);
                            console.log(startDate);
                            console.log(endDate);
                        }
                        if (this.year < year) {
                            startDate.setDate(1);
                            startDate.setMonth(0);
                            startDate.setFullYear(this.year);
                            startDate.setHours(0, 0, 0, 0);
                            endDate.setFullYear(this.year);
                            endDate.setDate(31);
                            endDate.setMonth(11);
                            endDate.setHours(0, 0, 0, 0);
                            console.log(startDate);
                            console.log(endDate);
                        }
                    }
                }
            }
        }
        if (select == 'Quater Wise') {
            let list = this.getQuater(month);
            for (let q of list) {
                if (q == this.quater) {
                    startDate.setDate(1);
                    startDate.setFullYear(year);
                    startDate.setHours(0, 0, 0, 0);
                    endDate.setFullYear(year);
                    if (this.quater == 'Q1') {
                        startDate.setMonth(0);
                        endDate.setDate(31);
                    }
                    else if (this.quater == 'Q2') {
                        startDate.setMonth(3);
                        endDate.setDate(30);
                    }
                    else if (this.quater == 'Q3') {
                        startDate.setMonth(6);
                        endDate.setDate(30);
                    }
                    else if (this.quater == 'Q4') {
                        startDate.setMonth(9);
                        endDate.setDate(31);
                    }
                    if (this.quater == quater) {
                        endDate = new Date();
                        endDate.setHours(0, 0, 0, 0);
                    }
                    else {
                        endDate.setMonth(startDate.getMonth() + 2);
                        endDate.setHours(0, 0, 0, 0);
                    }
                    console.log(startDate);
                    console.log(endDate);
                }
            }
        }
        if (select == 'Month Wise') {
            let list = this.getMonths(month);
            for (let m of list) {
                if (m == this.month) {
                    startDate.setDate(1);
                    startDate.setFullYear(year);
                    startDate.setHours(0, 0, 0, 0);
                    if (this.month == 'Jan') {
                        startDate.setMonth(0);
                    }
                    else if (this.month == 'Feb') {
                        startDate.setMonth(1);
                    }
                    else if (this.month == 'Mar') {
                        startDate.setMonth(2);
                    }
                    else if (this.month == 'Apr') {
                        startDate.setMonth(3);
                    }
                    else if (this.month == 'May') {
                        startDate.setMonth(4);
                    }
                    else if (this.month == 'Jun') {
                        startDate.setMonth(5);
                    }
                    else if (this.month == 'Jul') {
                        startDate.setMonth(6);
                    }
                    else if (this.month == 'Aug') {
                        startDate.setMonth(7);
                    }
                    else if (this.month == 'Sep') {
                        startDate.setMonth(8);
                    }
                    else if (this.month == 'Oct') {
                        startDate.setMonth(9);
                    }
                    else if (this.month == 'Nov') {
                        startDate.setMonth(10);
                    }
                    else if (this.month == 'Dec') {
                        startDate.setMonth(11);
                    }
                    if (startDate.getMonth() + 1 == month) {
                        endDate = new Date();
                        endDate.setHours(0, 0, 0, 0);
                    }
                    else {
                        let dt = new Date(startDate);
                        dt.setMonth(startDate.getMonth() + 1);
                        dt.setDate(dt.getDate() - 1);
                        endDate = dt;
                    }
                    console.log(startDate);
                    console.log(endDate);
                }
            }
            this.monthList = this.getMonths(month);
        }
        this.newTransaction = new Array();
        let list = JSON.parse(JSON.stringify(this.oldTransaction));
        for (let o of list) {
            let dt = new Date(o.approvedDate);
            dt.setHours(0, 0, 0, 0);
            if (dt >= startDate && dt <= endDate) {
                this.newTransaction.push(o);
            }
        }
        this.transaction = this.newTransaction;
        this.transactionTotalAmount = this.getTotalTransactionAmount(this.transaction);
        this.newBankStatementList = new Array();
        let list1 = JSON.parse(JSON.stringify(this.oldBankStatementList));
        for (let b of list1) {
            let dt = new Date(b.createdDate);
            dt.setHours(0, 0, 0, 0);
            if (dt >= startDate && dt <= endDate) {
                this.newBankStatementList.push(b);
            }
        }
        this.bankStatementList = this.newBankStatementList;
        this.bankTotalAmount = this.getTotalBankStmtAmount(this.bankStatementList);
    }
    onRecDateChange() {
        this.status = null;
        this.paymentType = null;
        this.filterListAllTrans(this.select);
    }
    getYear(year) {
        this.yearList = new Array();
        this.yearList.push(year - 1);
        this.yearList.push(year);
        return this.yearList;
    }
    getQuater(month) {
        this.quaterList = new Array();
        if (month > 9) {
            this.quaterList.push("Q1");
            this.quaterList.push("Q2");
            this.quaterList.push("Q3");
            this.quaterList.push("Q4");
        }
        else if (month > 6 && month <= 9) {
            this.quaterList.push("Q1");
            this.quaterList.push("Q2");
            this.quaterList.push("Q3");
        }
        else if (month > 3 && month <= 6) {
            this.quaterList.push("Q1");
            this.quaterList.push("Q2");
        }
        else if (month <= 3) {
            this.quaterList.push("Q1");
        }
        return this.quaterList;
    }
    getCurrectQuater(month) {
        if (month > 9)
            return "Q4";
        else if (month > 6 && month <= 9)
            return "Q3";
        else if (month > 3 && month <= 6)
            return "Q2";
        else if (month <= 3)
            return "Q1";
        else
            return null;
    }
    getMonths(month) {
        let monthList = new Array();
        monthList.push("Jan");
        monthList.push("Feb");
        monthList.push("Mar");
        monthList.push("Apr");
        monthList.push("May");
        monthList.push("Jun");
        monthList.push("Jul");
        monthList.push("Aug");
        monthList.push("Sep");
        monthList.push("Oct");
        monthList.push("Nov");
        monthList.push("Dec");
        let list = new Array();
        let count = 1;
        this.monthList = new Array();
        for (let m of monthList) {
            if (count <= month) {
                list.push(m);
                count++;
            }
        }
        return list;
    }
    onYearWise() {
        this.status = null;
        this.paymentType = null;
        if (this.year != null) {
            this.filterListAllTrans(this.select);
        }
        else {
            this.transaction = JSON.parse(JSON.stringify(this.oldTransaction));
            this.transactionTotalAmount = this.getTotalTransactionAmount(this.transaction);
        }
    }
    onQuaterWise() {
        this.status = null;
        this.paymentType = null;
        if (this.quater != null) {
            this.filterListAllTrans(this.select);
        }
        else {
            this.transaction = JSON.parse(JSON.stringify(this.oldTransaction));
            this.transactionTotalAmount = this.getTotalTransactionAmount(this.transaction);
        }
    }
    onMonthWise() {
        this.status = null;
        this.paymentType = null;
        if (this.month != null) {
            this.filterListAllTrans(this.select);
        }
        else {
            this.transaction = JSON.parse(JSON.stringify(this.oldTransaction));
            this.transactionTotalAmount = this.getTotalTransactionAmount(this.transaction);
        }
    }
    onStatus() {
        let list = new Array();
        this.paymentType = null;
        if (this.select != null) {
            this.filterListAllTrans(this.select);
            list = JSON.parse(JSON.stringify(this.transaction));
        }
        else {
            list = JSON.parse(JSON.stringify(this.oldTransaction));
        }
        if (this.status != null) {
            this.newTransaction = new Array();
            for (let t of list) {
                if (t.status == this.status) {
                    this.newTransaction.push(t);
                }
            }
            this.transaction = this.newTransaction;
            this.transactionTotalAmount = this.getTotalTransactionAmount(this.transaction);
        }
        if (this.status == null) {
            if (this.select != null) {
                this.filterListAllTrans(this.select);
            }
            else {
                this.transaction = JSON.parse(JSON.stringify(this.oldTransaction));
                this.transactionTotalAmount = this.getTotalTransactionAmount(this.transaction);
            }
        }
    }
    onPaymentType() {
        if (this.paymentType) {
        }
    }
    getTotalTransactionAmount(transaction) {
        this.transactionTotalAmount = 0;
        for (let t of transaction) {
            this.transactionTotalAmount = this.transactionTotalAmount + t.topupAmount;
        }
        return this.transactionTotalAmount;
    }
    getTotalBankStmtAmount(bankStatementList) {
        this.bankTotalAmount = 0;
        this.openingBalance = 0;
        this.totalTradeCredit = 0;
        this.totalOtherCredit = 0;
        this.otherDb = 0;
        this.closingBalance = 0;
        for (let t of bankStatementList) {
            if (t.creditAmount) {
                this.bankTotalAmount = this.bankTotalAmount + t.creditAmount;
            }
            if (t.debitAmount) {
                this.bankTotalAmount = this.bankTotalAmount - t.debitAmount;
                this.otherDb = this.otherDb + t.debitAmount;
            }
            this.closingBalance = t.balance;
            if (t.categoryName == "Bank Charges/Credit Interest") {
                this.totalOtherCredit = this.totalOtherCredit * 1 + 1 * t.creditAmount;
            }
            else {
                this.totalTradeCredit = this.totalTradeCredit + t.creditAmount;
            }
        }
        if (bankStatementList[0].creditAmount) {
            this.openingBalance = bankStatementList[0].balance - bankStatementList[0].creditAmount;
        }
        if (bankStatementList[0].debitAmount) {
            this.openingBalance = bankStatementList[0].balance + bankStatementList[0].debitAmount;
        }
        return this.bankTotalAmount;
    }
    // ----- End Reconciliation
    exportBankStatement($event) {
        $event.stopPropagation();
        $event.preventDefault();
        let chequeList = new Array();
        for (let c of this.chequePaymentList) {
            let chequePayment = new src_app_model_cheque_payment__WEBPACK_IMPORTED_MODULE_5__["ChequePayment"]();
            chequePayment.customerName = c.customerName;
            chequePayment.chequeNumber = c.chequeNumber;
            chequePayment.chequeAmount = c.chequeAmount;
            chequePayment.address = c.address;
            chequePayment.region = c.region;
            chequePayment.state = c.state;
            chequePayment.city = c.city;
            chequePayment.chequeType = c.chequeType;
            chequePayment.chequeStatus = c.chequeStatus;
            chequePayment.toBeCollectedOn = c.toBeCollectedOn;
            chequeList.push(chequePayment);
        }
        var result = this.paymentService.download(chequeList);
        let fileName = "customers.xlsx";
        result.subscribe((success) => {
            console.log(success._body);
            var blob = new Blob([success], { type: 'application/vnd.ms-excel' });
            console.log(blob);
            if (window.navigator && window.navigator.msSaveOrOpenBlob) {
                window.navigator.msSaveOrOpenBlob(blob, fileName);
            }
            else {
                console.log("else");
                var a = document.createElement('a');
                a.href = URL.createObjectURL(blob);
                a.download = fileName;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
            }
        }, err => {
            console.log(err);
            alert("Error while downloading. File Not Found on the Server");
        });
    }
};
AmdinpaymentgateComponent.ctorParameters = () => [
    { type: src_app_services_payment_service__WEBPACK_IMPORTED_MODULE_2__["PaymentService"] },
    { type: src_app_services_wallet_detail_service__WEBPACK_IMPORTED_MODULE_3__["WalletDetailService"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_6__["ToastrService"] },
    { type: src_app_services_upload_file_service__WEBPACK_IMPORTED_MODULE_8__["UploadFileService"] },
    { type: ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_10__["BsModalService"] }
];
AmdinpaymentgateComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-amdinpaymentgate',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./amdinpaymentgate.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/amdinpaymentgate/amdinpaymentgate.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./amdinpaymentgate.component.css */ "./src/app/components/amdinpaymentgate/amdinpaymentgate.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_payment_service__WEBPACK_IMPORTED_MODULE_2__["PaymentService"],
        src_app_services_wallet_detail_service__WEBPACK_IMPORTED_MODULE_3__["WalletDetailService"],
        ngx_toastr__WEBPACK_IMPORTED_MODULE_6__["ToastrService"], src_app_services_upload_file_service__WEBPACK_IMPORTED_MODULE_8__["UploadFileService"],
        ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_10__["BsModalService"]])
], AmdinpaymentgateComponent);



/***/ }),

/***/ "./src/app/components/content-management/content-management.component.css":
/*!********************************************************************************!*\
  !*** ./src/app/components/content-management/content-management.component.css ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n.nav-tabs {\r\n    margin-top: 30px;\r\n}\r\nlabel {\r\n    margin-top: 7px;\r\n    font-weight: bold;\r\n}\r\n.card.card-cascade.addpro{\r\n    margin-top: -77px;\r\n}\r\nh4.card-header-title.mb-3 {\r\n    padding: 10px;\r\n    font-weight: bold;\r\n    margin-top: 10px;\r\n}\r\n.card.card-cascade.up {\r\n    margin-top: -92px;\r\n}\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n  }\r\n/*  */\r\n.input-vendor {\r\n        height: 50px;\r\n        background: #ebf4f9;\r\n    }\r\n.card-body.vendor{\r\n        padding-right: 3rem;\r\n        padding-left: 3rem;\r\n    }\r\ndiv#vendorrow {\r\n        padding-top: 0.5rem;\r\n    }\r\nselect.form-control:not([size]):not([multiple]) {\r\n        height: 50px;\r\n        background-color:#ebf4f9; ;\r\n    }\r\nselect.form-control[multiple], select.form-control[size] {\r\n    height: 50px;\r\n    background-color:#ebf4f9; \r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9jb250ZW50LW1hbmFnZW1lbnQvY29udGVudC1tYW5hZ2VtZW50LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0lBQ0ksZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxlQUFlO0lBQ2YsaUJBQWlCO0FBQ3JCO0FBQ0E7SUFDSSxpQkFBaUI7QUFDckI7QUFFQTtJQUNJLGFBQWE7SUFDYixpQkFBaUI7SUFDakIsZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxpQkFBaUI7QUFDckI7QUFDQTtJQUNJLG9CQUFvQjtJQUNwQixlQUFlO0lBQ2YsaUJBQWlCO0VBQ25CO0FBQ0UsS0FBSztBQUNMO1FBQ0ksWUFBWTtRQUNaLG1CQUFtQjtJQUN2QjtBQUNBO1FBQ0ksbUJBQW1CO1FBQ25CLGtCQUFrQjtJQUN0QjtBQUVBO1FBQ0ksbUJBQW1CO0lBQ3ZCO0FBRUE7UUFDSSxZQUFZO1FBQ1osd0JBQXdCO0lBQzVCO0FBR0o7SUFDSSxZQUFZO0lBQ1osd0JBQXdCO0FBQzVCIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9jb250ZW50LW1hbmFnZW1lbnQvY29udGVudC1tYW5hZ2VtZW50LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLm5hdi10YWJzIHtcclxuICAgIG1hcmdpbi10b3A6IDMwcHg7XHJcbn1cclxubGFiZWwge1xyXG4gICAgbWFyZ2luLXRvcDogN3B4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuLmNhcmQuY2FyZC1jYXNjYWRlLmFkZHByb3tcclxuICAgIG1hcmdpbi10b3A6IC03N3B4O1xyXG59XHJcblxyXG5oNC5jYXJkLWhlYWRlci10aXRsZS5tYi0zIHtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIG1hcmdpbi10b3A6IDEwcHg7XHJcbn1cclxuLmNhcmQuY2FyZC1jYXNjYWRlLnVwIHtcclxuICAgIG1hcmdpbi10b3A6IC05MnB4O1xyXG59XHJcbi5idG4uYnRuLWxnIHtcclxuICAgIHBhZGRpbmc6IDFyZW0gMi40cmVtO1xyXG4gICAgZm9udC1zaXplOiAxN3B4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgfVxyXG4gICAgLyogICovXHJcbiAgICAuaW5wdXQtdmVuZG9yIHtcclxuICAgICAgICBoZWlnaHQ6IDUwcHg7XHJcbiAgICAgICAgYmFja2dyb3VuZDogI2ViZjRmOTtcclxuICAgIH1cclxuICAgIC5jYXJkLWJvZHkudmVuZG9ye1xyXG4gICAgICAgIHBhZGRpbmctcmlnaHQ6IDNyZW07XHJcbiAgICAgICAgcGFkZGluZy1sZWZ0OiAzcmVtO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBkaXYjdmVuZG9ycm93IHtcclxuICAgICAgICBwYWRkaW5nLXRvcDogMC41cmVtO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBzZWxlY3QuZm9ybS1jb250cm9sOm5vdChbc2l6ZV0pOm5vdChbbXVsdGlwbGVdKSB7XHJcbiAgICAgICAgaGVpZ2h0OiA1MHB4O1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6I2ViZjRmOTsgO1xyXG4gICAgfVxyXG4gICAgXHJcblxyXG5zZWxlY3QuZm9ybS1jb250cm9sW211bHRpcGxlXSwgc2VsZWN0LmZvcm0tY29udHJvbFtzaXplXSB7XHJcbiAgICBoZWlnaHQ6IDUwcHg7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiNlYmY0Zjk7IFxyXG59Il19 */");

/***/ }),

/***/ "./src/app/components/content-management/content-management.component.ts":
/*!*******************************************************************************!*\
  !*** ./src/app/components/content-management/content-management.component.ts ***!
  \*******************************************************************************/
/*! exports provided: ContentManagementComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContentManagementComponent", function() { return ContentManagementComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var src_app_services_master_product_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/master-product.service */ "./src/app/services/master-product.service.ts");
/* harmony import */ var src_app_services_equipment_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/services/equipment.service */ "./src/app/services/equipment.service.ts");
/* harmony import */ var src_app_model_master_products__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/model/master-products */ "./src/app/model/master-products.ts");
/* harmony import */ var src_app_services_master_paramters_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/services/master-paramters.service */ "./src/app/services/master-paramters.service.ts");
/* harmony import */ var src_app_services_product_category_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/services/product-category.service */ "./src/app/services/product-category.service.ts");
/* harmony import */ var src_app_model_equipment__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/model/equipment */ "./src/app/model/equipment.ts");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");
/* harmony import */ var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ngx-bootstrap/modal */ "./node_modules/ngx-bootstrap/modal/fesm2015/ngx-bootstrap-modal.js");











let ContentManagementComponent = class ContentManagementComponent {
    constructor(productCategoryService, productService, masterParameterService, router, equipmentService, toastr, modalService) {
        this.productCategoryService = productCategoryService;
        this.productService = productService;
        this.masterParameterService = masterParameterService;
        this.router = router;
        this.equipmentService = equipmentService;
        this.toastr = toastr;
        this.modalService = modalService;
    }
    ngOnInit() {
        this.equipmentService.getAllEquipments()
            .subscribe((res) => {
            this.equipments = res;
            this.productService.getAllProducts()
                .subscribe((data) => {
                this.products = data;
                this.productId = null;
                this.iteration = 'initial';
            });
        });
    }
    openModalWithClass(template) {
        this.modalRef = this.modalService.show(template, Object.assign({}, { class: 'gray modal-800px' }));
    }
    refreshEquipmentList() {
        let a = this.equipmentService.getAllEquipments();
        a.subscribe((res) => this.equipments = res);
        this.iteration = 'initial';
    }
    refreshProductList() {
        this.productService.getAllProducts()
            .subscribe((data) => {
            this.products = data;
            this.iteration = 'initial';
        });
    }
    addProduct() {
        let category1 = this.productCategoryService.getProductCategories();
        category1.subscribe((data) => this.categories = data);
        let p = this.masterParameterService.getProductUnits();
        p.subscribe((data) => this.units = data);
        let sp = this.productService.getAllProducts();
        sp.subscribe((data) => this.similarProducts = data);
        this.product = new src_app_model_master_products__WEBPACK_IMPORTED_MODULE_5__["MasterProducts"]();
        this.product.productCategory = 0;
        this.product.productUnit = 0;
        this.iteration = 'addProduct';
    }
    onSubmit() {
        if (this.productId != null && this.products != null && this.iteration == 'editProduct') {
            this.productService.updateProduct(this.productId, this.products)
                .subscribe((data) => {
                this.toastr.success('Product updated successfully...!', '', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
                this.refreshProductList();
            });
        }
        else if (this.product != null && this.productId == null && this.iteration == 'addProduct') {
            this.productService.saveMasterProduct(this.product)
                .subscribe((data) => {
                // alert("Product Saved !");
                this.toastr.success('Product Saved Successfully...!', 'Content Management', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
                this.refreshProductList();
            });
        }
        else if (this.equipments != null && this.iteration == 'addEquipment') {
            this.equipmentService.saveEquipment(this.equipments)
                .subscribe((data) => {
                // alert("Equipment saved !");
                this.toastr.success('Equipment Added Successfully...!', '', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
                this.refreshEquipmentList();
            });
        }
        else if (this.equipmentId != null && this.equipments != null && this.iteration == 'editEquipment') {
            this.equipmentService.updateEquipment(this.equipmentId, this.equipments)
                .subscribe((data) => {
                // alert("Equipment updated !");
                this.toastr.success('Equipment updated Successfully...!', '', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
                this.refreshEquipmentList();
            });
        }
        else {
            this.ngOnInit();
        }
    }
    deleteProduct(productId) {
        this.productService.deleteProduct(productId).subscribe(data => {
            console.log("====Data==>>>>" + JSON.stringify(data));
            console.log(JSON.stringify(data) === JSON.stringify("Success"));
            if (JSON.stringify(data) === JSON.stringify("Success")) {
                this.toastr.error('Product Deleted Successfully', 'Product Management', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
                this.refreshProductList();
            }
            else {
                console.log("Failure");
            }
        });
    }
    editProduct(productId) {
        let product1 = this.productService.getProduct(productId);
        product1.subscribe((data) => this.products = data);
        let category1 = this.productCategoryService.getProductCategories();
        category1.subscribe((data) => this.categories = data);
        let p = this.masterParameterService.getProductUnits();
        p.subscribe((data) => this.units = data);
        let sp = this.productService.getAllSimilarProducts(productId);
        sp.subscribe((data) => this.similarProducts = data);
        this.productId = productId;
        this.iteration = 'editProduct';
    }
    addEquipment() {
        this.equipmentService.getAllMakers()
            .subscribe((data) => {
            this.makers = data;
        });
        this.equipments = new src_app_model_equipment__WEBPACK_IMPORTED_MODULE_8__["Equipment"]();
        this.iteration = 'addEquipment';
    }
    deleteEquipment(equipmentId) {
        this.equipmentService.deleteEquipment(equipmentId).subscribe(data => {
            console.log("====Data==>>>>" + JSON.stringify(data));
            console.log(JSON.stringify(data) === JSON.stringify("Success"));
            if (JSON.stringify(data) === JSON.stringify("Success")) {
                // alert("Equipment deleted!!!")
                this.toastr.error('Equipment Deleted Successfully', 'Equipment Management', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
                this.refreshEquipmentList();
            }
            else {
                console.log("Failure");
                // alert("Can't Delete this Equipment !")
                this.toastr.warning('Cant Delete this Equipment !', '', {
                    timeOut: 3000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
                this.refreshEquipmentList();
            }
        });
    }
    editEquipment(equipmentId) {
        this.equipmentService.getEquipment(equipmentId)
            .subscribe((data) => {
            this.equipments = data;
            this.equipmentId = equipmentId;
            this.iteration = 'editEquipment';
        });
    }
    onBackClick() {
        this.ngOnInit();
    }
    onChangeMaker() {
        console.log("maker : " + this.equipments.equipmentMaker);
        this.equipmentService.getEquipmentNames(this.equipments.equipmentMaker)
            .subscribe((data) => {
            this.names = data;
            this.equipments.equipmentType = null;
        });
    }
    onChangeName() {
        console.log("eq name : " + this.equipments.equipmentName);
        this.equipmentService.getEquipmentByType(this.equipments.equipmentName)
            .subscribe((data) => {
            console.log("type : " + data);
            this.equipments = data;
            this.equipmentId = this.equipments.equipmentId;
            console.log("Type :  " + this.equipments.equipmentType);
        });
    }
};
ContentManagementComponent.ctorParameters = () => [
    { type: src_app_services_product_category_service__WEBPACK_IMPORTED_MODULE_7__["ProductCategoryService"] },
    { type: src_app_services_master_product_service__WEBPACK_IMPORTED_MODULE_3__["MasterProductService"] },
    { type: src_app_services_master_paramters_service__WEBPACK_IMPORTED_MODULE_6__["MasterParamtersService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"] },
    { type: src_app_services_equipment_service__WEBPACK_IMPORTED_MODULE_4__["EquipmentService"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_9__["ToastrService"] },
    { type: ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_10__["BsModalService"] }
];
ContentManagementComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-content-management',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./content-management.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/content-management/content-management.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./content-management.component.css */ "./src/app/components/content-management/content-management.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_product_category_service__WEBPACK_IMPORTED_MODULE_7__["ProductCategoryService"],
        src_app_services_master_product_service__WEBPACK_IMPORTED_MODULE_3__["MasterProductService"],
        src_app_services_master_paramters_service__WEBPACK_IMPORTED_MODULE_6__["MasterParamtersService"],
        _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"], src_app_services_equipment_service__WEBPACK_IMPORTED_MODULE_4__["EquipmentService"], ngx_toastr__WEBPACK_IMPORTED_MODULE_9__["ToastrService"],
        ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_10__["BsModalService"]])
], ContentManagementComponent);



/***/ }),

/***/ "./src/app/components/cooperate/cooperate.component.css":
/*!**************************************************************!*\
  !*** ./src/app/components/cooperate/cooperate.component.css ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("label{\r\n    font-weight: bold;\r\n    word-break: break-all;\r\n    font-size: initial;\r\n    margin-top: 7px;\r\n}\r\n.form-group.row {\r\n    display: -webkit-box;\r\n    display: flex;\r\n    -webkit-box-align: center;\r\n            align-items: center;\r\n    -webkit-box-pack: center;\r\n            justify-content: center;\r\n}\r\n/* .card.card-cascade.narrower.body-section {\r\n    margin-top: -32px;\r\n} */\r\n.card.card-cascade.coporate {\r\n    margin-top: -65px;\r\n}\r\nh4.card-header-title.mb-3 {\r\n    padding: 10px;\r\n    font-weight: bold;\r\n    margin-top: 10px;\r\n}\r\n.row.v1 {\r\n    margin-top: 16px;\r\n    margin-left: -3px;\r\n    margin-right: 1px;\r\n}\r\n.card.card-cascade.narrower.body-section.reg {\r\n    margin-top: 30px;\r\n}\r\nh4.filter {\r\n    font-weight: bold;\r\n}\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n  }\r\n/*  */\r\nbutton.btn-block.btn-lg.cor1{\r\n    margin-top: 33px;\r\n}\r\n.input-vendor {\r\n    height: 50px;\r\n    background: #ebf4f9;\r\n}\r\n.card-body.vendor{\r\n    padding-right: 3rem;\r\n    padding-left: 3rem;\r\n}\r\nbutton.btn.btn-deep-orange.pull-right.btn-block.cor{\r\n    margin-top: 33px;\r\n}\r\nbutton.btn-block.edit{\r\n    margin-top: 33px;\r\n}\r\ndiv#vendorrow {\r\n    padding-top: 0.5rem;\r\n}\r\nselect.form-control:not([size]):not([multiple]) {\r\n    height: 50px;\r\n    background-color:#ebf4f9; ;\r\n}\r\nsection#variableInputs {\r\n    margin-top: 2rem;\r\n}\r\ndiv#addInputs {\r\n    position: absolute;\r\n    margin-top: -6.14rem;\r\n    margin-left: 35rem;\r\n}\r\n\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9jb29wZXJhdGUvY29vcGVyYXRlLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxpQkFBaUI7SUFDakIscUJBQXFCO0lBQ3JCLGtCQUFrQjtJQUNsQixlQUFlO0FBQ25CO0FBQ0E7SUFDSSxvQkFBYTtJQUFiLGFBQWE7SUFDYix5QkFBbUI7WUFBbkIsbUJBQW1CO0lBQ25CLHdCQUF1QjtZQUF2Qix1QkFBdUI7QUFDM0I7QUFDQTs7R0FFRztBQUNIO0lBQ0ksaUJBQWlCO0FBQ3JCO0FBRUE7SUFDSSxhQUFhO0lBQ2IsaUJBQWlCO0lBQ2pCLGdCQUFnQjtBQUNwQjtBQUNBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixpQkFBaUI7QUFDckI7QUFDQTtJQUNJLGdCQUFnQjtBQUNwQjtBQUNBO0lBQ0ksaUJBQWlCO0FBQ3JCO0FBQ0E7SUFDSSxvQkFBb0I7SUFDcEIsZUFBZTtJQUNmLGlCQUFpQjtFQUNuQjtBQUNFLEtBQUs7QUFHVDtJQUNJLGdCQUFnQjtBQUNwQjtBQUNBO0lBQ0ksWUFBWTtJQUNaLG1CQUFtQjtBQUN2QjtBQUNBO0lBQ0ksbUJBQW1CO0lBQ25CLGtCQUFrQjtBQUN0QjtBQUdBO0lBQ0ksZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxnQkFBZ0I7QUFDcEI7QUFDQTtJQUNJLG1CQUFtQjtBQUN2QjtBQUVBO0lBQ0ksWUFBWTtJQUNaLHdCQUF3QjtBQUM1QjtBQUNBO0lBQ0ksZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxrQkFBa0I7SUFDbEIsb0JBQW9CO0lBQ3BCLGtCQUFrQjtBQUN0QiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY29vcGVyYXRlL2Nvb3BlcmF0ZS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsibGFiZWx7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcclxuICAgIGZvbnQtc2l6ZTogaW5pdGlhbDtcclxuICAgIG1hcmdpbi10b3A6IDdweDtcclxufVxyXG4uZm9ybS1ncm91cC5yb3cge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxufVxyXG4vKiAuY2FyZC5jYXJkLWNhc2NhZGUubmFycm93ZXIuYm9keS1zZWN0aW9uIHtcclxuICAgIG1hcmdpbi10b3A6IC0zMnB4O1xyXG59ICovXHJcbi5jYXJkLmNhcmQtY2FzY2FkZS5jb3BvcmF0ZSB7XHJcbiAgICBtYXJnaW4tdG9wOiAtNjVweDtcclxufVxyXG5cclxuaDQuY2FyZC1oZWFkZXItdGl0bGUubWItMyB7XHJcbiAgICBwYWRkaW5nOiAxMHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG59XHJcbi5yb3cudjEge1xyXG4gICAgbWFyZ2luLXRvcDogMTZweDtcclxuICAgIG1hcmdpbi1sZWZ0OiAtM3B4O1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAxcHg7XHJcbn1cclxuLmNhcmQuY2FyZC1jYXNjYWRlLm5hcnJvd2VyLmJvZHktc2VjdGlvbi5yZWcge1xyXG4gICAgbWFyZ2luLXRvcDogMzBweDtcclxufVxyXG5oNC5maWx0ZXIge1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuLmJ0bi5idG4tbGcge1xyXG4gICAgcGFkZGluZzogMXJlbSAyLjRyZW07XHJcbiAgICBmb250LXNpemU6IDE3cHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICB9XHJcbiAgICAvKiAgKi9cclxuICBcclxuXHJcbmJ1dHRvbi5idG4tYmxvY2suYnRuLWxnLmNvcjF7XHJcbiAgICBtYXJnaW4tdG9wOiAzM3B4O1xyXG59XHJcbi5pbnB1dC12ZW5kb3Ige1xyXG4gICAgaGVpZ2h0OiA1MHB4O1xyXG4gICAgYmFja2dyb3VuZDogI2ViZjRmOTtcclxufVxyXG4uY2FyZC1ib2R5LnZlbmRvcntcclxuICAgIHBhZGRpbmctcmlnaHQ6IDNyZW07XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDNyZW07XHJcbn1cclxuXHJcblxyXG5idXR0b24uYnRuLmJ0bi1kZWVwLW9yYW5nZS5wdWxsLXJpZ2h0LmJ0bi1ibG9jay5jb3J7XHJcbiAgICBtYXJnaW4tdG9wOiAzM3B4O1xyXG59XHJcbmJ1dHRvbi5idG4tYmxvY2suZWRpdHtcclxuICAgIG1hcmdpbi10b3A6IDMzcHg7XHJcbn1cclxuZGl2I3ZlbmRvcnJvdyB7XHJcbiAgICBwYWRkaW5nLXRvcDogMC41cmVtO1xyXG59XHJcblxyXG5zZWxlY3QuZm9ybS1jb250cm9sOm5vdChbc2l6ZV0pOm5vdChbbXVsdGlwbGVdKSB7XHJcbiAgICBoZWlnaHQ6IDUwcHg7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiNlYmY0Zjk7IDtcclxufVxyXG5zZWN0aW9uI3ZhcmlhYmxlSW5wdXRzIHtcclxuICAgIG1hcmdpbi10b3A6IDJyZW07XHJcbn1cclxuZGl2I2FkZElucHV0cyB7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBtYXJnaW4tdG9wOiAtNi4xNHJlbTtcclxuICAgIG1hcmdpbi1sZWZ0OiAzNXJlbTtcclxufVxyXG4iXX0= */");

/***/ }),

/***/ "./src/app/components/cooperate/cooperate.component.ts":
/*!*************************************************************!*\
  !*** ./src/app/components/cooperate/cooperate.component.ts ***!
  \*************************************************************/
/*! exports provided: CooperateComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CooperateComponent", function() { return CooperateComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_model_master_organisation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/model/master-organisation */ "./src/app/model/master-organisation.ts");
/* harmony import */ var src_app_model_address__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/model/address */ "./src/app/model/address.ts");
/* harmony import */ var src_app_services_country_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/services/country.service */ "./src/app/services/country.service.ts");
/* harmony import */ var src_app_services_master_organisation_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/services/master-organisation.service */ "./src/app/services/master-organisation.service.ts");
/* harmony import */ var src_app_model_Office__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/model/Office */ "./src/app/model/Office.ts");
/* harmony import */ var src_app_services_master_product_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/services/master-product.service */ "./src/app/services/master-product.service.ts");
/* harmony import */ var src_app_services_equipment_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/services/equipment.service */ "./src/app/services/equipment.service.ts");
/* harmony import */ var src_app_model_equipment__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/model/equipment */ "./src/app/model/equipment.ts");
/* harmony import */ var src_app_services_product_category_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! src/app/services/product-category.service */ "./src/app/services/product-category.service.ts");
/* harmony import */ var src_app_model_master_products__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! src/app/model/master-products */ "./src/app/model/master-products.ts");
/* harmony import */ var src_app_model_EquipmentProductMapping__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! src/app/model/EquipmentProductMapping */ "./src/app/model/EquipmentProductMapping.ts");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");
/* harmony import */ var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ngx-bootstrap/modal */ "./node_modules/ngx-bootstrap/modal/fesm2015/ngx-bootstrap-modal.js");
/* harmony import */ var src_app_model_credit_limit_management__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! src/app/model/credit-limit-management */ "./src/app/model/credit-limit-management.ts");
/* harmony import */ var src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! src/app/services/auth.service */ "./src/app/services/auth.service.ts");
/* harmony import */ var src_app_model_EquipmentLinkedMobile__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! src/app/model/EquipmentLinkedMobile */ "./src/app/model/EquipmentLinkedMobile.ts");


















let CooperateComponent = class CooperateComponent {
    constructor(countryService, masterOrganisationService, equipmentService, productService, productCategoryService, toastr, modalService, authService) {
        this.countryService = countryService;
        this.masterOrganisationService = masterOrganisationService;
        this.equipmentService = equipmentService;
        this.productService = productService;
        this.productCategoryService = productCategoryService;
        this.toastr = toastr;
        this.modalService = modalService;
        this.authService = authService;
        this.type = "CORPORATE";
        this.selectedCities = new Array();
        this.selectedStates = new Array();
        this.selectedRegion = new Array();
        this.newVendorsList = new Array();
        this.oldVendorList = new Array();
        this.offices = new Array();
        // push input field
        this.addresses = [{
                mobileNumber: '',
            }];
    }
    ngOnInit() {
        let a = this.masterOrganisationService.getAllVendors(this.type);
        a.subscribe((data) => {
            this.corporates = data;
            this.oldVendorList = this.corporates;
            for (let v of this.corporates) {
                if (v.address != null) {
                    this.selectedRegion.push(v.address.state.region);
                }
            }
            let unique2 = this.selectedRegion.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedRegion = unique2;
            this.selectedCities = null;
            this.selectedStates = null;
        });
        this.iteration = "initial";
        this.offices = new Array();
        //this.offices.push(new Office());
        this.office = new src_app_model_Office__WEBPACK_IMPORTED_MODULE_6__["Office"]();
        this.officeEdit = false;
        this.showOfficeDiv = false;
    }
    addAddress() {
        this.addresses.push({
            id: this.addresses.length + 1,
            mobileNumber: '',
        });
    }
    removeAddress(i) {
        this.addresses.splice(i, 1);
    }
    onBackClick() {
        this.ngOnInit();
    }
    openModalWithClass(template) {
        this.modalRef = this.modalService.show(template, Object.assign({}, { class: 'gray modal-800px' }));
    }
    addCorporate() {
        this.corporate = new src_app_model_master_organisation__WEBPACK_IMPORTED_MODULE_2__["MasterOrganisation"]();
        this.address = new src_app_model_address__WEBPACK_IMPORTED_MODULE_3__["Address"]();
        let c = this.countryService.getAllCountries();
        c.subscribe((data) => this.countries = data);
        let d = this.masterOrganisationService.getVendorTypes();
        d.subscribe((data) => this.types = data);
        this.iteration = "ADD_CORPORATE";
    }
    onAddCorporate() {
        let parameters = this.masterOrganisationService.getParametersByParamType("CORPORATE");
        parameters.subscribe((data) => {
            this.corporate.organisationType = data[0].paramId;
            this.corporate.address = this.address;
            this.corporate.offices = this.offices;
            console.log(this.corporate);
            if (this.creditLimitManagement != null) {
                this.corporate.creditLimitManagement = this.creditLimitManagement;
            }
            let a1 = this.masterOrganisationService.registerVendor(this.corporate);
            if (a1 != null) {
                a1.subscribe((data) => {
                    this.toastr.success('Organization created Successfully!', 'Corporate Management', {
                        timeOut: 10000,
                        positionClass: 'toast-top-center',
                        progressBar: true,
                        progressAnimation: 'increasing'
                    });
                    this.ngOnInit();
                });
            }
            else {
                // alert("Organization creation failed..");
                this.toastr.error('Organization creation failed.....!', '', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
            }
        });
    }
    editCorporate(corporateId) {
        this.address = new src_app_model_address__WEBPACK_IMPORTED_MODULE_3__["Address"]();
        this.offices = new Array();
        this.masterOrganisationService.getVendor(corporateId)
            .subscribe((data) => {
            // console.log(data)
            this.corporate = data;
            if (this.corporate.creditLimitManagement == null) {
                this.creditApprovedYN = false;
            }
            else {
                this.creditApprovedYN = true;
            }
            // console.log(this.corporate.offices)
            for (let i = 0; i < this.corporate.offices.length; i++) {
                console.log(this.corporate.offices[i]);
                this.officeView = this.corporate.offices[i];
                this.offices.push(this.officeView);
            }
            // this.offices = this.corporate.offices;
            //this.offices.push(this.officeView);
            console.log(this.offices);
            this.address = this.corporate.address;
            let c = this.countryService.getAllCountries();
            c.subscribe((data) => this.countries = data);
            let s = this.countryService.getStates(this.address.countryId);
            s.subscribe((data) => this.states = data);
            let b = this.countryService.getCities(this.address.stateId);
            b.subscribe((data) => this.cities = data);
            let p = this.masterOrganisationService.getAllVendors(this.type);
            p.subscribe((data) => this.corporates = data);
            this.corporateId = corporateId;
            this.iteration = "EDIT_CORPORATE";
        });
    }
    onEditCorporate() {
        console.log(this.corporate.address);
        console.log(this.address);
        console.log(this.offices);
        this.corporate.offices = this.offices;
        this.corporate.address = this.address;
        if (this.creditLimitManagement != null) {
            this.corporate.creditLimitManagement = this.creditLimitManagement;
        }
        this.masterOrganisationService.updateVendor(this.corporateId, this.corporate)
            .subscribe((data) => {
            // alert("Corporate updated !");
            this.toastr.success('Corporate Updated Successfully....!', 'Corporate Management', {
                timeOut: 10000,
                positionClass: 'toast-top-center',
                progressBar: true,
                progressAnimation: 'increasing'
            });
            this.ngOnInit();
        });
    }
    onChangeCountry() {
        if (this.address.countryId) {
            console.log("new country Id :" + this.address.countryId);
            this.countryService.getStatesForRegistration(this.address.countryId)
                .subscribe(data => {
                this.states = data;
                this.cities = null;
                if (this.states == null) {
                    // alert("There are no states for this Country");
                    this.toastr.warning('There are no states for this Country !', '', {
                        timeOut: 3000,
                        positionClass: 'toast-top-center',
                        progressBar: true,
                        progressAnimation: 'increasing'
                    });
                }
            });
        }
    }
    onChangeState() {
        if (this.address.stateId) {
            console.log("State Id :" + this.address.stateId);
            this.countryService.getStateById(this.address.stateId)
                .subscribe((data) => {
                this.state = data;
                this.address.region = this.state.region;
            });
            this.countryService.getCitiesForRegistration(this.address.stateId)
                .subscribe(data => {
                this.cities = data;
                if (this.cities == null) {
                    // alert("There are no cities for this State");
                    this.toastr.warning('There are no cities for this State !', '', {
                        timeOut: 3000,
                        positionClass: 'toast-top-center',
                        progressBar: true,
                        progressAnimation: 'increasing'
                    });
                }
            });
        }
    }
    onSelectCity(c) {
        console.log(c);
        this.corporates = this.oldVendorList;
        this.newVendorsList = new Array();
        for (let v of this.corporates) {
            if (v.address.city.cityName == c) {
                this.newVendorsList.push(v);
            }
        }
        this.corporates = null;
        this.corporates = this.newVendorsList;
    }
    onSelectState(s) {
        console.log(s);
        if (s == null) {
            this.selectedCities = null;
            this.corporates = this.oldVendorList;
        }
        else {
            this.corporates = this.oldVendorList;
            this.newVendorsList = new Array();
            this.selectedCities = new Array();
            for (let v of this.corporates) {
                if (v.address.state.stateName == s) {
                    this.newVendorsList.push(v);
                    if (v.address.city.stateId == v.address.state.stateId) {
                        this.selectedCities.push(v.address.city.cityName);
                    }
                }
            }
            this.corporates = null;
            this.corporates = this.newVendorsList;
            let unique1 = this.selectedStates.filter((item1, i1, ar1) => ar1.indexOf(item1) === i1);
            this.selectedStates = unique1;
        }
    }
    onSelectRegion(r) {
        console.log(r);
        if (r == null) {
            this.selectedCities = null;
            this.selectedStates = null;
            this.corporates = this.oldVendorList;
        }
        else {
            this.page = 1;
            this.corporates = this.oldVendorList;
            this.newVendorsList = new Array();
            this.selectedStates = new Array();
            this.selectedCities = new Array();
            for (let v of this.corporates) {
                if (v.address.state.region == r) {
                    this.newVendorsList.push(v);
                    this.selectedStates.push(v.address.state.stateName);
                    this.selectedCities.push(v.address.city.cityName);
                }
            }
            let s1 = this.selectedStates.filter((item1, i1, ar1) => ar1.indexOf(item1) === i1);
            this.selectedStates = s1;
            let c1 = this.selectedCities.filter((item, i, ar) => ar.indexOf(item) === i);
            this.selectedCities = c1;
            this.corporates = null;
            this.corporates = this.newVendorsList;
        }
    }
    onOfficeStateChange(stateId) {
        console.log("stateId = " + stateId);
        if (stateId) {
            this.countryService.getStateById(stateId)
                .subscribe((data) => {
                this.officeState = data;
                console.log(this.officeState.region);
                this.office.officeRegion = this.officeState.region;
                this.office.state = this.officeState;
                console.log(this.office);
            });
            this.countryService.getCities(stateId)
                .subscribe(data => {
                this.officeCities = data;
                if (this.officeCities == null) {
                    // alert("There are no cities for this State");
                    this.toastr.warning('There are no cities for this State !', '', {
                        timeOut: 3000,
                        positionClass: 'toast-top-center',
                        progressBar: true,
                        progressAnimation: 'increasing'
                    });
                }
            });
        }
    }
    showOfficeEntry() {
        this.showOfficeDiv = true;
    }
    onOfficeCityChange(cityId) {
        if (cityId != null) {
            this.countryService.getCityById(cityId).subscribe(data => {
                this.office.city = data;
            });
        }
    }
    addOffice() {
        this.officeView = this.office;
        this.officeView.countryId = this.address.countryId;
        this.offices.push(this.officeView);
        console.log(this.officeView);
        this.office = new src_app_model_Office__WEBPACK_IMPORTED_MODULE_6__["Office"]();
        this.showOfficeDiv = false;
    }
    deleteCorporateOffice(officeData) {
        if (officeData != null) {
            this.offices = this.offices.filter(order => order !== officeData);
            console.log(this.offices);
        }
    }
    editCorporateOffice(officeData) {
        if (officeData != null) {
            console.log(officeData.stateId);
            this.countryService.getCities(officeData.stateId)
                .subscribe(data => {
                this.officeCities = data;
            });
        }
        this.office = officeData;
        this.officeEdit = true;
        this.showOfficeDiv = true;
    }
    editOffice() {
        this.office = new src_app_model_Office__WEBPACK_IMPORTED_MODULE_6__["Office"]();
        this.officeEdit = false;
        this.showOfficeDiv = false;
    }
    /*Equipment */
    addEquipment() {
        this.product = new src_app_model_master_products__WEBPACK_IMPORTED_MODULE_11__["MasterProducts"]();
        this.equipmentService.getAllMakersForRegistration()
            .subscribe((data) => {
            this.makers = data;
        });
        this.equipment = new src_app_model_equipment__WEBPACK_IMPORTED_MODULE_9__["Equipment"]();
        let p = this.productService.getAllProductManufacturingYears();
        p.subscribe((data) => this.manufacturedYears = data);
        let category = this.productCategoryService.getProductCategories();
        category.subscribe((data) => this.categories = data);
        this.iteration = "EQUIPMENT";
    }
    onChangeMaker() {
        console.log("maker : " + this.equipment.equipmentMaker);
        this.equipmentService.getEquipmentNamesForRegistration(this.equipment.equipmentMaker)
            .subscribe((data) => {
            this.names = data;
            this.equipment.equipmentType = null;
        });
    }
    onChangeName() {
        console.log("eq name : " + this.equipment.equipmentName);
        this.equipmentService.getEquipmentsByMakerAndName(this.equipment.equipmentMaker, this.equipment.equipmentName)
            .subscribe((data) => {
            console.log("type : " + JSON.stringify(data));
            this.equipments = data;
            // this.equipmentId = this.equipment.equipmentId;
            console.log("Type :  " + this.equipment);
        });
    }
    onChangeId() {
        console.log("eq name : " + this.equipment.uniqueEquipmentId);
        for (let e of this.equipments) {
            console.log(e.uniqueEquipmentId);
            if (e.uniqueEquipmentId == this.equipment.uniqueEquipmentId) {
                console.log(e);
                this.equipment.equipmentDesc = e.equipmentDesc;
                this.equipment.equipmentId = e.equipmentId;
            }
        }
    }
    onchangeCategory() {
        console.log(this.product.productCategory);
        console.log(this.product.manufactureYear);
        this.productService.getProductsByClassification(this.product.productCategory, this.product.manufactureYear)
            .subscribe((data) => {
            this.products = data;
        });
    }
    submitEquipment() {
        this.equipmentProduct = new src_app_model_EquipmentProductMapping__WEBPACK_IMPORTED_MODULE_12__["EquipmentProductMapping"]();
        this.equipmentProduct.equipmentId = this.equipment.equipmentId;
        this.equipmentProduct.productId = this.product.productId;
        this.equipmentProduct.organisationId = this.corporate.organisationId;
        this.equipmentProduct.preferredAccessType = this.accessType;
        this.equipmentProduct.mobileNo = this.mobileNumber;
        this.equipmentProduct.serialNo = this.serialNo;
        this.equipmentProduct.corporateOfficeId = this.selectedOfficeId;
        console.log(this.equipmentProduct);
        this.equipmentService.saveEquipmentProductMapping(this.equipmentProduct)
            .subscribe((data) => {
            //this.makers = data;
            console.log(data);
            alert("Equipment Added");
            this.toastr.success('Equipment Added Successfully !', '', {
                timeOut: 3000,
                positionClass: 'toast-top-center',
                progressBar: true,
                progressAnimation: 'increasing'
            });
            this.iteration = "EDIT_CORPORATE";
        });
    }
    viewEquipment(office) {
        console.log(office.officeId);
        this.equipmentService.getRegisteredCorporateMobiles(office.officeId)
            .subscribe((data) => {
            this.registeredMobileList = data;
        });
        this.selectedOfficeId = office.officeId;
        this.equipmentService.getEquipmentProducts(office.officeId)
            .subscribe((data) => {
            //this.makers = data;
            console.log(data);
            this.equipmentProducts = data;
            for (let e of this.equipmentProducts) {
                e.linkedMobiles = new Array();
                for (let m of e.registeredMobiles) {
                    e.linkedMobiles.push(m.registeredMobileId);
                }
            }
            this.iteration = "EQUIPMENT_PRODUCT_LIST";
        });
    }
    onCreditManagement() {
        this.creditLimitManagement = new src_app_model_credit_limit_management__WEBPACK_IMPORTED_MODULE_15__["CreditLimitManagement"]();
        this.creditLimitManagement.organisationId = this.corporate.organisationId;
        this.creditLimitManagement.organisationName = this.corporate.organisationName;
        this.iteration = "Premium_Member";
    }
    onBack() {
        this.iteration = "ADD_CORPORATE";
    }
    onApprove() {
        if (this.creditApprovedYN == false) {
            this.iteration = "EDIT_CORPORATE";
        }
        else {
            this.iteration = "ADD_CORPORATE";
        }
    }
    onShowCredit() {
        this.creditLimitManagement = this.corporate.creditLimitManagement;
        this.iteration = "Show_Premium_Member";
    }
    onBack1() {
        this.iteration = "EDIT_CORPORATE";
    }
    registerMobile() {
        console.log("Register mobile");
        console.log(this.selectedOfficeId);
        this.equipmentService.getRegisteredCorporateMobiles(this.selectedOfficeId)
            .subscribe((data) => {
            console.log(data);
            this.registeredMobileList = data;
            this.iteration = 'REGISTERED_MOBILE';
        });
    }
    onSaveMobile() {
        // this.authService.generateRegistrationOtp(this.mobileNo);
        this.iteration = 'MOBILE_OTP';
    }
    onNextClickValidateOtp() {
        // this.authService.validateRegistrationOtp(this.otp, this.mobileNo).subscribe(data => {
        //   console.log(data)
        //   if (data == "valid") {
        this.toastr.success('Mobile validation successfull', 'Mobile Registration', { timeOut: 6000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
        this.equipmentService.registeredCorporateMobile(this.selectedOfficeId, this.mobileNo).subscribe(data => {
            this.equipmentService.getRegisteredCorporateMobiles(this.selectedOfficeId)
                .subscribe((data) => {
                this.registeredMobileList = data;
                this.iteration = 'REGISTERED_MOBILE';
            });
        });
        //   }else{
        //     this.toastr.error('OTP not validated, please enter valid OTP', 'Mobile Registration', {timeOut: 10000, positionClass: 'toast-top-center', progressBar: true,progressAnimation: 'increasing' })
        //   }
        // });      
    }
    onMobileLink(equipmentLink) {
        let equipmentLinkedMobile = new src_app_model_EquipmentLinkedMobile__WEBPACK_IMPORTED_MODULE_17__["EquipmentLinkedMobile"]();
        equipmentLinkedMobile.equipmentProductId = equipmentLink.equipmentProductId;
        equipmentLinkedMobile.registeredMobileIds = new Array();
        equipmentLinkedMobile.registeredMobileIds = equipmentLink.linkedMobiles;
        console.log(equipmentLinkedMobile);
        this.equipmentService.linkRegisteredUserMobile(equipmentLinkedMobile)
            .subscribe((data) => {
            console.log(data);
            this.toastr.success('Mobile Linking successfull', 'Equipment Mobile Linking', { timeOut: 6000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
        });
    }
};
CooperateComponent.ctorParameters = () => [
    { type: src_app_services_country_service__WEBPACK_IMPORTED_MODULE_4__["CountryService"] },
    { type: src_app_services_master_organisation_service__WEBPACK_IMPORTED_MODULE_5__["MasterOrganisationService"] },
    { type: src_app_services_equipment_service__WEBPACK_IMPORTED_MODULE_8__["EquipmentService"] },
    { type: src_app_services_master_product_service__WEBPACK_IMPORTED_MODULE_7__["MasterProductService"] },
    { type: src_app_services_product_category_service__WEBPACK_IMPORTED_MODULE_10__["ProductCategoryService"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_13__["ToastrService"] },
    { type: ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_14__["BsModalService"] },
    { type: src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_16__["AuthService"] }
];
CooperateComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-cooperate',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./cooperate.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/cooperate/cooperate.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./cooperate.component.css */ "./src/app/components/cooperate/cooperate.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_country_service__WEBPACK_IMPORTED_MODULE_4__["CountryService"],
        src_app_services_master_organisation_service__WEBPACK_IMPORTED_MODULE_5__["MasterOrganisationService"],
        src_app_services_equipment_service__WEBPACK_IMPORTED_MODULE_8__["EquipmentService"],
        src_app_services_master_product_service__WEBPACK_IMPORTED_MODULE_7__["MasterProductService"],
        src_app_services_product_category_service__WEBPACK_IMPORTED_MODULE_10__["ProductCategoryService"],
        ngx_toastr__WEBPACK_IMPORTED_MODULE_13__["ToastrService"],
        ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_14__["BsModalService"],
        src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_16__["AuthService"]])
], CooperateComponent);



/***/ }),

/***/ "./src/app/components/dashboard/dashboard.component.css":
/*!**************************************************************!*\
  !*** ./src/app/components/dashboard/dashboard.component.css ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n.card {\r\nwidth: 100%;\r\nheight: 200px;\r\npadding: 10px;\r\nbox-shadow: 3px 3px 12px;\r\nborder: 2px solid white;\r\nmargin:8px;\r\n\r\n}\r\n.mb-3, .my-3 {\r\n    margin-top: 8px;\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n}\r\nimg.card-img-top {\r\n    margin-left: -18px;\r\n}\r\n\r\n\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9kYXNoYm9hcmQvZGFzaGJvYXJkLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0EsV0FBVztBQUNYLGFBQWE7QUFDYixhQUFhO0FBQ2Isd0JBQXdCO0FBQ3hCLHVCQUF1QjtBQUN2QixVQUFVOztBQUVWO0FBQ0E7SUFDSSxlQUFlO0lBQ2YsZUFBZTtJQUNmLGlCQUFpQjtBQUNyQjtBQUNBO0lBQ0ksa0JBQWtCO0FBQ3RCIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9kYXNoYm9hcmQvZGFzaGJvYXJkLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLmNhcmQge1xyXG53aWR0aDogMTAwJTtcclxuaGVpZ2h0OiAyMDBweDtcclxucGFkZGluZzogMTBweDtcclxuYm94LXNoYWRvdzogM3B4IDNweCAxMnB4O1xyXG5ib3JkZXI6IDJweCBzb2xpZCB3aGl0ZTtcclxubWFyZ2luOjhweDtcclxuXHJcbn1cclxuLm1iLTMsIC5teS0zIHtcclxuICAgIG1hcmdpbi10b3A6IDhweDtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcbmltZy5jYXJkLWltZy10b3Age1xyXG4gICAgbWFyZ2luLWxlZnQ6IC0xOHB4O1xyXG59XHJcblxyXG4iXX0= */");

/***/ }),

/***/ "./src/app/components/dashboard/dashboard.component.ts":
/*!*************************************************************!*\
  !*** ./src/app/components/dashboard/dashboard.component.ts ***!
  \*************************************************************/
/*! exports provided: DashboardComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DashboardComponent", function() { return DashboardComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/usermanagement.service */ "./src/app/services/usermanagement.service.ts");



let DashboardComponent = class DashboardComponent {
    constructor(userService) {
        this.userService = userService;
        this.role = sessionStorage.getItem('role');
    }
    ngOnInit() {
        this.userService.getLoggedInUser()
            .subscribe((data) => {
            this.user = data;
            console.log(this.user.userName);
            this.iteration = 'initial';
        });
    }
};
DashboardComponent.ctorParameters = () => [
    { type: src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_2__["UsermanagementService"] }
];
DashboardComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-dashboard',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./dashboard.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/dashboard/dashboard.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./dashboard.component.css */ "./src/app/components/dashboard/dashboard.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_2__["UsermanagementService"]])
], DashboardComponent);



/***/ }),

/***/ "./src/app/components/editalert/editalert.component.css":
/*!**************************************************************!*\
  !*** ./src/app/components/editalert/editalert.component.css ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (".card {\r\n    margin-top: 20px;\r\n}\r\nlabel {\r\n    font-weight: bold;\r\n    font-size: initial;\r\n    word-break: break-all;\r\n    margin-top: 7px;\r\n}\r\nh4.card-header-title.mb-3 {\r\n    padding: 10px;\r\n    font-weight: bold;\r\n    margin-top: 10px;\r\n}\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n  }\r\n/*  */\r\n.input-vendor {\r\n    height: 50px;\r\n    background: #ebf4f9;\r\n}\r\n.card-body.vendor{\r\n    padding-right: 3rem;\r\n    padding-left: 3rem;\r\n}\r\ndiv#vendorrow {\r\n    padding-top: 0.5rem;\r\n}\r\nselect.form-control:not([size]):not([multiple]) {\r\n    height: 50px;\r\n    background-color:#ebf4f9; ;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9lZGl0YWxlcnQvZWRpdGFsZXJ0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxnQkFBZ0I7QUFDcEI7QUFDQTtJQUNJLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIscUJBQXFCO0lBQ3JCLGVBQWU7QUFDbkI7QUFDQTtJQUNJLGFBQWE7SUFDYixpQkFBaUI7SUFDakIsZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxvQkFBb0I7SUFDcEIsZUFBZTtJQUNmLGlCQUFpQjtFQUNuQjtBQUdBLEtBQUs7QUFFUDtJQUNJLFlBQVk7SUFDWixtQkFBbUI7QUFDdkI7QUFDQTtJQUNJLG1CQUFtQjtJQUNuQixrQkFBa0I7QUFDdEI7QUFFQTtJQUNJLG1CQUFtQjtBQUN2QjtBQUVBO0lBQ0ksWUFBWTtJQUNaLHdCQUF3QjtBQUM1QiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZWRpdGFsZXJ0L2VkaXRhbGVydC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmNhcmQge1xyXG4gICAgbWFyZ2luLXRvcDogMjBweDtcclxufVxyXG5sYWJlbCB7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIGZvbnQtc2l6ZTogaW5pdGlhbDtcclxuICAgIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcclxuICAgIG1hcmdpbi10b3A6IDdweDtcclxufVxyXG5oNC5jYXJkLWhlYWRlci10aXRsZS5tYi0zIHtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIG1hcmdpbi10b3A6IDEwcHg7XHJcbn1cclxuLmJ0bi5idG4tbGcge1xyXG4gICAgcGFkZGluZzogMXJlbSAyLjRyZW07XHJcbiAgICBmb250LXNpemU6IDE3cHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICB9XHJcblxyXG4gIFxyXG4gIC8qICAqL1xyXG4gIFxyXG4uaW5wdXQtdmVuZG9yIHtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIGJhY2tncm91bmQ6ICNlYmY0Zjk7XHJcbn1cclxuLmNhcmQtYm9keS52ZW5kb3J7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAzcmVtO1xyXG4gICAgcGFkZGluZy1sZWZ0OiAzcmVtO1xyXG59XHJcblxyXG5kaXYjdmVuZG9ycm93IHtcclxuICAgIHBhZGRpbmctdG9wOiAwLjVyZW07XHJcbn1cclxuXHJcbnNlbGVjdC5mb3JtLWNvbnRyb2w6bm90KFtzaXplXSk6bm90KFttdWx0aXBsZV0pIHtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6I2ViZjRmOTsgO1xyXG59Il19 */");

/***/ }),

/***/ "./src/app/components/editalert/editalert.component.ts":
/*!*************************************************************!*\
  !*** ./src/app/components/editalert/editalert.component.ts ***!
  \*************************************************************/
/*! exports provided: EditalertComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditalertComponent", function() { return EditalertComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/alert.service */ "./src/app/services/alert.service.ts");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var src_app_model_alert__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/model/alert */ "./src/app/model/alert.ts");
/* harmony import */ var src_app_services_alertmanagement_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/services/alertmanagement.service */ "./src/app/services/alertmanagement.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");








let EditalertComponent = class EditalertComponent {
    constructor(alertservice, alertManService, router, toastr) {
        this.alertservice = alertservice;
        this.alertManService = alertManService;
        this.router = router;
        this.toastr = toastr;
        this.submitted = false;
        this.alertsaveform = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormGroup"]({
            alertName: new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].minLength(2)]),
            alertEvent: new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"](),
            role: new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"](),
            sendVia: new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"](),
            remarks: new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]()
        });
        const navigation = this.router.getCurrentNavigation();
        const state = navigation.extras.state;
        this.data = state.data;
        console.log(JSON.stringify(this.data.alert.alertName));
        if (JSON.stringify(this.data) != null) {
            this.alert = this.data.alert;
            // this.alert.selectedAlertEvent = this.data.alert.alertEvent.eventName;
        }
        else {
            this.alert = new src_app_model_alert__WEBPACK_IMPORTED_MODULE_4__["Alert"]();
        }
        console.log(this.alert);
    }
    ngOnInit() {
        this.submitted = false;
        let alertEvents = this.alertManService.getAllAlertEvents();
        alertEvents.subscribe((data) => {
            this.events = data;
            this.alert.selectedAlertEvent = this.alert.alertEvents.eventName;
        });
        let userRoles = this.alertManService.getAllUserRoles();
        userRoles.subscribe((data) => {
            this.roles = data;
            this.alert.selectedUserRole = this.alert.role.roleName;
        });
        let notifyTypes = this.alertManService.getAllAlertNotificationMethods();
        notifyTypes.subscribe((data) => {
            this.notifyTypes = data;
            //console.log(data)
            this.sendVia = this.alert.sendVia;
        });
        console.log(this.alert);
    }
    updateAlert(updateAlert) {
        this.submitted = true;
        this.update();
    }
    update() {
        console.log(this.alert);
        this.alertservice.createAlert(this.alert).subscribe(data => {
            console.log("====Data==>>>>" + JSON.stringify(data));
            console.log(JSON.stringify(data) === JSON.stringify("success"));
            if (JSON.stringify(data) === JSON.stringify("success")) {
                this.toastr.success('Updated Successfully...!', '', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
                this.router.navigate(['/viewAllAlerts']);
            }
            else {
                console.log("Failure");
            }
        });
    }
    addAlertForm() {
        this.submitted = false;
    }
};
EditalertComponent.ctorParameters = () => [
    { type: src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_2__["AlertService"] },
    { type: src_app_services_alertmanagement_service__WEBPACK_IMPORTED_MODULE_5__["AlertmanagementService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_6__["Router"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_7__["ToastrService"] }
];
EditalertComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-editalert',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./editalert.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/editalert/editalert.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./editalert.component.css */ "./src/app/components/editalert/editalert.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_2__["AlertService"], src_app_services_alertmanagement_service__WEBPACK_IMPORTED_MODULE_5__["AlertmanagementService"],
        _angular_router__WEBPACK_IMPORTED_MODULE_6__["Router"], ngx_toastr__WEBPACK_IMPORTED_MODULE_7__["ToastrService"]])
], EditalertComponent);



/***/ }),

/***/ "./src/app/components/editprofile/editprofile.component.css":
/*!******************************************************************!*\
  !*** ./src/app/components/editprofile/editprofile.component.css ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n\r\n/* new dashboard */\r\n\r\n/* dashboard card css */\r\n\r\n.card {\r\n    width: 100%;\r\n    height: 200px;\r\n    padding: 10px;\r\n    box-shadow: 4px 4px 12px;\r\n    border: 2px solid white;\r\n    margin:8px;\r\n    \r\n    }\r\n\r\n.mb-3, .my-3 {\r\n        margin-top: 8px;\r\n        font-size: 20px;\r\n        font-weight: bold;\r\n    }\r\n\r\nimg.card-img-top {\r\n        margin-left: -18px;\r\n    }\r\n\r\n/* Basic Inforamtion card css */\r\n\r\n.card.card-cascade.none {\r\n    width: 100%;\r\n    height: auto;\r\n    margin-left: auto;\r\n    margin-top: -90px;\r\n}\r\n\r\n/* label css */\r\n\r\nlabel.basicinforamtion {\r\n    font-weight: bold;\r\n    font-family: sans-serif;\r\n}\r\n\r\n.col-50 { \r\n    -webkit-box-flex: 50%; \r\n            flex: 50%;\r\n  }\r\n\r\n/* configure button css */\r\n\r\nbutton.btn.btn-primary.config{\r\n    width: 100%;\r\n}\r\n\r\nbutton.btn.btn-default.config{\r\n    width: 100%;\r\n}\r\n\r\n/* new css */\r\n\r\n.form-group.row {\r\n    display: -webkit-box;\r\n    display: flex;\r\n    -webkit-box-align: center;\r\n            align-items: center;\r\n    -webkit-box-pack: center;\r\n            justify-content: center;\r\n}\r\n\r\n.card {\r\n    height: auto;\r\n}\r\n\r\ninput.form-control.member{\r\n    margin-top: 10px;\r\n    height: 43px;\r\n\r\n}\r\n\r\nlabel {\r\n    font-weight: bold;\r\n    font-size: initial;\r\n    word-break: break-all;\r\n   \r\n}\r\n\r\nlabel.member{\r\nmargin-top: 20px;\r\n    margin-left: 74px;\r\n}\r\n\r\nlabel.headmember {\r\n    margin-top: 18px;\r\n    margin-left: 119px;\r\n}\r\n\r\nb.color {\r\n    color: chocolate;\r\n}\r\n\r\n.view.view-cascade.py-3.gradient-card-header.info-color-dark.mx-4.d-flex.justify-content-between.align-items-center {\r\n    margin-top: -12px;\r\n}\r\n\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n  }\r\n\r\n/*  */\r\n\r\n.input-vendor {\r\n    height: 50px;\r\n    background: #ebf4f9;\r\n}\r\n\r\n.card-body.vendor{\r\n    padding-right: 3rem;\r\n    padding-left: 3rem;\r\n}\r\n\r\ndiv#vendorrow {\r\n    padding-top: 0.5rem;\r\n}\r\n\r\nselect.form-control:not([size]):not([multiple]) {\r\n    height: 50px;\r\n    background-color:#ebf4f9; ;\r\n}\r\n\r\nbutton.btn.btn-success.btn-lg.btn-block.req {\r\n    margin-top: 34px;\r\n}\r\n\r\nsection#variableInputs {\r\n    margin-top: 2rem;\r\n}\r\n\r\ndiv#addInputs {\r\n    position: absolute;\r\n    margin-top: -6.14rem;\r\n    margin-left: 35rem;\r\n}\r\n\r\n/* Higher than 1440 (desktop devices)\r\n====================================================================== */\r\n\r\n@media only screen and (max-width: 1440px){ \r\n\r\n}\r\n\r\n/* Higher than 1200 (desktop devices)\r\n====================================================================== */\r\n\r\n@media only screen and (max-width: 1024px) {\r\n}\r\n\r\n/* Higher than 960 (desktop devices)\r\n====================================================================== */\r\n\r\n@media only screen and (min-width: 992px) and (max-width: 1199px){\r\n}\r\n\r\n/* Higher than 960 (desktop devices)\r\n====================================================================== */\r\n\r\n@media only screen and (min-width: 992px){\r\n}\r\n\r\n/* Tablet Portrait (devices and browsers)\r\n====================================================================== */\r\n\r\n@media only screen and (min-width: 768px) and (max-width: 991px) {\r\n}\r\n\r\n/* All Mobile Sizes (devices and browser)\r\n====================================================================== */\r\n\r\n@media only screen and (max-width: 767px) {\r\n\r\n}\r\n\r\n/* Mobile Landscape Size to Tablet Portrait (devices and browsers)\r\n====================================================================== */\r\n\r\n@media only screen and (max-width: 375px)  {\r\n\r\n\r\n\r\n}\r\n\r\n/*=================================*/\r\n\r\n@media only screen and (min-width: 320px) {\r\n\r\n\r\n}\r\n\r\n/* Mobile Portrait Size to Mobile Landscape Size (devices and browsers)\r\n=================================================================== */\r\n\r\n@media only screen and (max-width: 479px) {\r\n\r\n\r\n}\r\n\r\n@media only screen and (max-width: 667px) {\r\n\r\n}\r\n\r\n/* Higher than 1440 (desktop devices)\r\n====================================================================== */\r\n\r\n@media only screen and (max-width: 1440px){ \r\n  \r\n}\r\n\r\n/* Higher than 1200 (desktop devices)\r\n====================================================================== */\r\n\r\n@media only screen and (max-width: 1024px) {\r\n}\r\n\r\n/* Higher than 960 (desktop devices)\r\n====================================================================== */\r\n\r\n@media only screen and (min-width: 992px) and (max-width: 1199px){\r\n}\r\n\r\n/* Higher than 960 (desktop devices)\r\n====================================================================== */\r\n\r\n@media only screen and (min-width: 992px){\r\n}\r\n\r\n/* Tablet Portrait (devices and browsers)\r\n====================================================================== */\r\n\r\n@media only screen and (min-width: 768px) and (max-width: 991px) {\r\n}\r\n\r\n/* All Mobile Sizes (devices and browser)\r\n====================================================================== */\r\n\r\n@media only screen and (max-width: 767px) {\r\n\r\n}\r\n\r\n/* Mobile Landscape Size to Tablet Portrait (devices and browsers)\r\n====================================================================== */\r\n\r\n@media only screen and (max-width: 375px)  {\r\n\r\n\r\n\r\n}\r\n\r\n/*=================================*/\r\n\r\n@media only screen and (min-width: 320px) {\r\n \r\n\r\n}\r\n\r\n/* Mobile Portrait Size to Mobile Landscape Size (devices and browsers)\r\n=================================================================== */\r\n\r\n@media only screen and (max-width: 479px) {\r\n  /*  */\r\n  label.headmember {\r\n      margin-left: 0px;\r\n    margin-top: 18px;\r\n}\r\nbutton.btn.btn-primary.apply {\r\n    width: 100%;\r\n    margin-left: -1px;\r\n}\r\n}\r\n\r\n@media only screen and (max-width: 667px) {\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9lZGl0cHJvZmlsZS9lZGl0cHJvZmlsZS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsa0JBQWtCOztBQUVsQix1QkFBdUI7O0FBQ3ZCO0lBQ0ksV0FBVztJQUNYLGFBQWE7SUFDYixhQUFhO0lBQ2Isd0JBQXdCO0lBQ3hCLHVCQUF1QjtJQUN2QixVQUFVOztJQUVWOztBQUNBO1FBQ0ksZUFBZTtRQUNmLGVBQWU7UUFDZixpQkFBaUI7SUFDckI7O0FBQ0E7UUFDSSxrQkFBa0I7SUFDdEI7O0FBRUEsK0JBQStCOztBQUNuQztJQUNJLFdBQVc7SUFDWCxZQUFZO0lBQ1osaUJBQWlCO0lBQ2pCLGlCQUFpQjtBQUNyQjs7QUFFQSxjQUFjOztBQUVkO0lBQ0ksaUJBQWlCO0lBQ2pCLHVCQUF1QjtBQUMzQjs7QUFFQTtJQUVJLHFCQUFTO1lBQVQsU0FBUztFQUNYOztBQUVBLHlCQUF5Qjs7QUFDekI7SUFDRSxXQUFXO0FBQ2Y7O0FBQ0E7SUFDSSxXQUFXO0FBQ2Y7O0FBRUEsWUFBWTs7QUFHWjtJQUNJLG9CQUFhO0lBQWIsYUFBYTtJQUNiLHlCQUFtQjtZQUFuQixtQkFBbUI7SUFDbkIsd0JBQXVCO1lBQXZCLHVCQUF1QjtBQUMzQjs7QUFFQTtJQUNJLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSxnQkFBZ0I7SUFDaEIsWUFBWTs7QUFFaEI7O0FBR0E7SUFDSSxpQkFBaUI7SUFDakIsa0JBQWtCO0lBQ2xCLHFCQUFxQjs7QUFFekI7O0FBQ0E7QUFDQSxnQkFBZ0I7SUFDWixpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxnQkFBZ0I7SUFDaEIsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksaUJBQWlCO0FBQ3JCOztBQUNBO0lBQ0ksb0JBQW9CO0lBQ3BCLGVBQWU7SUFDZixpQkFBaUI7RUFDbkI7O0FBR0EsS0FBSzs7QUFFUDtJQUNJLFlBQVk7SUFDWixtQkFBbUI7QUFDdkI7O0FBQ0E7SUFDSSxtQkFBbUI7SUFDbkIsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksWUFBWTtJQUNaLHdCQUF3QjtBQUM1Qjs7QUFHQTtJQUNJLGdCQUFnQjtBQUNwQjs7QUFLQTtJQUNJLGdCQUFnQjtBQUNwQjs7QUFDQTtJQUNJLGtCQUFrQjtJQUNsQixvQkFBb0I7SUFDcEIsa0JBQWtCO0FBQ3RCOztBQUdBO3dFQUN3RTs7QUFDeEU7O0FBRUE7O0FBRUE7d0VBQ3dFOztBQUN4RTtBQUNBOztBQUVBO3dFQUN3RTs7QUFDeEU7QUFDQTs7QUFFQTt3RUFDd0U7O0FBQ3hFO0FBQ0E7O0FBRUE7d0VBQ3dFOztBQUN4RTtBQUNBOztBQUVBO3dFQUN3RTs7QUFDeEU7O0FBRUE7O0FBRUE7d0VBQ3dFOztBQUN4RTs7OztBQUlBOztBQUNBLG9DQUFvQzs7QUFDcEM7OztBQUdBOztBQUNBO3FFQUNxRTs7QUFDckU7OztBQUdBOztBQUNBOztBQUVBOztBQUVBO3dFQUN3RTs7QUFDeEU7O0FBRUE7O0FBRUE7d0VBQ3dFOztBQUN4RTtBQUNBOztBQUVBO3dFQUN3RTs7QUFDeEU7QUFDQTs7QUFFQTt3RUFDd0U7O0FBQ3hFO0FBQ0E7O0FBRUE7d0VBQ3dFOztBQUN4RTtBQUNBOztBQUVBO3dFQUN3RTs7QUFDeEU7O0FBRUE7O0FBRUE7d0VBQ3dFOztBQUN4RTs7OztBQUlBOztBQUNBLG9DQUFvQzs7QUFDbkM7OztBQUdEOztBQUNBO3FFQUNxRTs7QUFDckU7RUFDRSxLQUFLO0VBQ0w7TUFDSSxnQkFBZ0I7SUFDbEIsZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxXQUFXO0lBQ1gsaUJBQWlCO0FBQ3JCO0FBQ0E7O0FBS0E7O0FBRUEiLCJmaWxlIjoic3JjL2FwcC9jb21wb25lbnRzL2VkaXRwcm9maWxlL2VkaXRwcm9maWxlLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbi8qIG5ldyBkYXNoYm9hcmQgKi9cclxuXHJcbi8qIGRhc2hib2FyZCBjYXJkIGNzcyAqL1xyXG4uY2FyZCB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGhlaWdodDogMjAwcHg7XHJcbiAgICBwYWRkaW5nOiAxMHB4O1xyXG4gICAgYm94LXNoYWRvdzogNHB4IDRweCAxMnB4O1xyXG4gICAgYm9yZGVyOiAycHggc29saWQgd2hpdGU7XHJcbiAgICBtYXJnaW46OHB4O1xyXG4gICAgXHJcbiAgICB9XHJcbiAgICAubWItMywgLm15LTMge1xyXG4gICAgICAgIG1hcmdpbi10b3A6IDhweDtcclxuICAgICAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICB9XHJcbiAgICBpbWcuY2FyZC1pbWctdG9wIHtcclxuICAgICAgICBtYXJnaW4tbGVmdDogLTE4cHg7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qIEJhc2ljIEluZm9yYW10aW9uIGNhcmQgY3NzICovXHJcbi5jYXJkLmNhcmQtY2FzY2FkZS5ub25lIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiBhdXRvO1xyXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XHJcbiAgICBtYXJnaW4tdG9wOiAtOTBweDtcclxufVxyXG5cclxuLyogbGFiZWwgY3NzICovXHJcblxyXG5sYWJlbC5iYXNpY2luZm9yYW10aW9uIHtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XHJcbn1cclxuXHJcbi5jb2wtNTAge1xyXG4gICAgLW1zLWZsZXg6IDUwJTsgXHJcbiAgICBmbGV4OiA1MCU7XHJcbiAgfVxyXG5cclxuICAvKiBjb25maWd1cmUgYnV0dG9uIGNzcyAqL1xyXG4gIGJ1dHRvbi5idG4uYnRuLXByaW1hcnkuY29uZmlne1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbn1cclxuYnV0dG9uLmJ0bi5idG4tZGVmYXVsdC5jb25maWd7XHJcbiAgICB3aWR0aDogMTAwJTtcclxufVxyXG5cclxuLyogbmV3IGNzcyAqL1xyXG5cclxuXHJcbi5mb3JtLWdyb3VwLnJvdyB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG59XHJcblxyXG4uY2FyZCB7XHJcbiAgICBoZWlnaHQ6IGF1dG87XHJcbn1cclxuXHJcbmlucHV0LmZvcm0tY29udHJvbC5tZW1iZXJ7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG4gICAgaGVpZ2h0OiA0M3B4O1xyXG5cclxufVxyXG5cclxuXHJcbmxhYmVsIHtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgZm9udC1zaXplOiBpbml0aWFsO1xyXG4gICAgd29yZC1icmVhazogYnJlYWstYWxsO1xyXG4gICBcclxufVxyXG5sYWJlbC5tZW1iZXJ7XHJcbm1hcmdpbi10b3A6IDIwcHg7XHJcbiAgICBtYXJnaW4tbGVmdDogNzRweDtcclxufVxyXG5cclxubGFiZWwuaGVhZG1lbWJlciB7XHJcbiAgICBtYXJnaW4tdG9wOiAxOHB4O1xyXG4gICAgbWFyZ2luLWxlZnQ6IDExOXB4O1xyXG59XHJcblxyXG5iLmNvbG9yIHtcclxuICAgIGNvbG9yOiBjaG9jb2xhdGU7XHJcbn1cclxuXHJcbi52aWV3LnZpZXctY2FzY2FkZS5weS0zLmdyYWRpZW50LWNhcmQtaGVhZGVyLmluZm8tY29sb3ItZGFyay5teC00LmQtZmxleC5qdXN0aWZ5LWNvbnRlbnQtYmV0d2Vlbi5hbGlnbi1pdGVtcy1jZW50ZXIge1xyXG4gICAgbWFyZ2luLXRvcDogLTEycHg7XHJcbn1cclxuLmJ0bi5idG4tbGcge1xyXG4gICAgcGFkZGluZzogMXJlbSAyLjRyZW07XHJcbiAgICBmb250LXNpemU6IDE3cHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICB9XHJcblxyXG4gIFxyXG4gIC8qICAqL1xyXG4gIFxyXG4uaW5wdXQtdmVuZG9yIHtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIGJhY2tncm91bmQ6ICNlYmY0Zjk7XHJcbn1cclxuLmNhcmQtYm9keS52ZW5kb3J7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAzcmVtO1xyXG4gICAgcGFkZGluZy1sZWZ0OiAzcmVtO1xyXG59XHJcblxyXG5kaXYjdmVuZG9ycm93IHtcclxuICAgIHBhZGRpbmctdG9wOiAwLjVyZW07XHJcbn1cclxuXHJcbnNlbGVjdC5mb3JtLWNvbnRyb2w6bm90KFtzaXplXSk6bm90KFttdWx0aXBsZV0pIHtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6I2ViZjRmOTsgO1xyXG59XHJcblxyXG5cclxuYnV0dG9uLmJ0bi5idG4tc3VjY2Vzcy5idG4tbGcuYnRuLWJsb2NrLnJlcSB7XHJcbiAgICBtYXJnaW4tdG9wOiAzNHB4O1xyXG59XHJcblxyXG5cclxuXHJcblxyXG5zZWN0aW9uI3ZhcmlhYmxlSW5wdXRzIHtcclxuICAgIG1hcmdpbi10b3A6IDJyZW07XHJcbn1cclxuZGl2I2FkZElucHV0cyB7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBtYXJnaW4tdG9wOiAtNi4xNHJlbTtcclxuICAgIG1hcmdpbi1sZWZ0OiAzNXJlbTtcclxufVxyXG5cclxuXHJcbi8qIEhpZ2hlciB0aGFuIDE0NDAgKGRlc2t0b3AgZGV2aWNlcylcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDE0NDBweCl7IFxyXG5cclxufVxyXG5cclxuLyogSGlnaGVyIHRoYW4gMTIwMCAoZGVza3RvcCBkZXZpY2VzKVxyXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTAyNHB4KSB7XHJcbn1cclxuXHJcbi8qIEhpZ2hlciB0aGFuIDk2MCAoZGVza3RvcCBkZXZpY2VzKVxyXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogOTkycHgpIGFuZCAobWF4LXdpZHRoOiAxMTk5cHgpe1xyXG59XHJcblxyXG4vKiBIaWdoZXIgdGhhbiA5NjAgKGRlc2t0b3AgZGV2aWNlcylcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDk5MnB4KXtcclxufVxyXG5cclxuLyogVGFibGV0IFBvcnRyYWl0IChkZXZpY2VzIGFuZCBicm93c2VycylcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OHB4KSBhbmQgKG1heC13aWR0aDogOTkxcHgpIHtcclxufVxyXG5cclxuLyogQWxsIE1vYmlsZSBTaXplcyAoZGV2aWNlcyBhbmQgYnJvd3NlcilcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2N3B4KSB7XHJcblxyXG59XHJcblxyXG4vKiBNb2JpbGUgTGFuZHNjYXBlIFNpemUgdG8gVGFibGV0IFBvcnRyYWl0IChkZXZpY2VzIGFuZCBicm93c2VycylcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDM3NXB4KSAge1xyXG5cclxuXHJcblxyXG59XHJcbi8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMjBweCkge1xyXG5cclxuXHJcbn0gXHJcbi8qIE1vYmlsZSBQb3J0cmFpdCBTaXplIHRvIE1vYmlsZSBMYW5kc2NhcGUgU2l6ZSAoZGV2aWNlcyBhbmQgYnJvd3NlcnMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0NzlweCkge1xyXG5cclxuXHJcbn1cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA2NjdweCkge1xyXG5cclxufVxyXG5cclxuLyogSGlnaGVyIHRoYW4gMTQ0MCAoZGVza3RvcCBkZXZpY2VzKVxyXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTQ0MHB4KXsgXHJcbiAgXHJcbn1cclxuXHJcbi8qIEhpZ2hlciB0aGFuIDEyMDAgKGRlc2t0b3AgZGV2aWNlcylcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjRweCkge1xyXG59XHJcblxyXG4vKiBIaWdoZXIgdGhhbiA5NjAgKGRlc2t0b3AgZGV2aWNlcylcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDk5MnB4KSBhbmQgKG1heC13aWR0aDogMTE5OXB4KXtcclxufVxyXG5cclxuLyogSGlnaGVyIHRoYW4gOTYwIChkZXNrdG9wIGRldmljZXMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA5OTJweCl7XHJcbn1cclxuXHJcbi8qIFRhYmxldCBQb3J0cmFpdCAoZGV2aWNlcyBhbmQgYnJvd3NlcnMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjhweCkgYW5kIChtYXgtd2lkdGg6IDk5MXB4KSB7XHJcbn1cclxuXHJcbi8qIEFsbCBNb2JpbGUgU2l6ZXMgKGRldmljZXMgYW5kIGJyb3dzZXIpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjdweCkge1xyXG5cclxufVxyXG5cclxuLyogTW9iaWxlIExhbmRzY2FwZSBTaXplIHRvIFRhYmxldCBQb3J0cmFpdCAoZGV2aWNlcyBhbmQgYnJvd3NlcnMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAzNzVweCkgIHtcclxuXHJcblxyXG5cclxufVxyXG4vKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXHJcbiBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMyMHB4KSB7XHJcbiBcclxuXHJcbn0gXHJcbi8qIE1vYmlsZSBQb3J0cmFpdCBTaXplIHRvIE1vYmlsZSBMYW5kc2NhcGUgU2l6ZSAoZGV2aWNlcyBhbmQgYnJvd3NlcnMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0NzlweCkge1xyXG4gIC8qICAqL1xyXG4gIGxhYmVsLmhlYWRtZW1iZXIge1xyXG4gICAgICBtYXJnaW4tbGVmdDogMHB4O1xyXG4gICAgbWFyZ2luLXRvcDogMThweDtcclxufVxyXG5idXR0b24uYnRuLmJ0bi1wcmltYXJ5LmFwcGx5IHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgbWFyZ2luLWxlZnQ6IC0xcHg7XHJcbn1cclxufVxyXG4gXHJcblxyXG5cclxuXHJcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjY3cHgpIHtcclxuXHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG4iXX0= */");

/***/ }),

/***/ "./src/app/components/editprofile/editprofile.component.ts":
/*!*****************************************************************!*\
  !*** ./src/app/components/editprofile/editprofile.component.ts ***!
  \*****************************************************************/
/*! exports provided: EditprofileComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditprofileComponent", function() { return EditprofileComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_model_EquipmentProductMapping__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/model/EquipmentProductMapping */ "./src/app/model/EquipmentProductMapping.ts");
/* harmony import */ var src_app_model_master_products__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/model/master-products */ "./src/app/model/master-products.ts");
/* harmony import */ var src_app_model_equipment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/model/equipment */ "./src/app/model/equipment.ts");
/* harmony import */ var src_app_services_equipment_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/services/equipment.service */ "./src/app/services/equipment.service.ts");
/* harmony import */ var src_app_services_master_product_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/services/master-product.service */ "./src/app/services/master-product.service.ts");
/* harmony import */ var src_app_services_product_category_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/services/product-category.service */ "./src/app/services/product-category.service.ts");
/* harmony import */ var src_app_services_order_management_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/services/order-management.service */ "./src/app/services/order-management.service.ts");
/* harmony import */ var src_app_model_order_management_configuration__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/model/order-management-configuration */ "./src/app/model/order-management-configuration.ts");
/* harmony import */ var src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! src/app/services/usermanagement.service */ "./src/app/services/usermanagement.service.ts");
/* harmony import */ var src_app_services_country_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! src/app/services/country.service */ "./src/app/services/country.service.ts");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");
/* harmony import */ var src_app_model_credit_limit_management__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! src/app/model/credit-limit-management */ "./src/app/model/credit-limit-management.ts");
/* harmony import */ var src_app_services_credit_limit_management_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! src/app/services/credit-limit-management.service */ "./src/app/services/credit-limit-management.service.ts");
/* harmony import */ var src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! src/app/services/auth.service */ "./src/app/services/auth.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var src_app_model_EquipmentLinkedMobile__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! src/app/model/EquipmentLinkedMobile */ "./src/app/model/EquipmentLinkedMobile.ts");


















let EditprofileComponent = class EditprofileComponent {
    constructor(orderService, equipmentService, productService, productCategoryService, userManagementService, countryService, userService, toastr, router, creditLimitManagementService, authService) {
        this.orderService = orderService;
        this.equipmentService = equipmentService;
        this.productService = productService;
        this.productCategoryService = productCategoryService;
        this.userManagementService = userManagementService;
        this.countryService = countryService;
        this.userService = userService;
        this.toastr = toastr;
        this.router = router;
        this.creditLimitManagementService = creditLimitManagementService;
        this.authService = authService;
        this.submitted = false;
        this.orderManagementConfiguration = new src_app_model_order_management_configuration__WEBPACK_IMPORTED_MODULE_9__["OrderManagementConfiguration"]();
        this.addotherno1 = false;
        this.selectedMobileNos = new Array();
        // push input field
        this.addresses = [{
                mobileNumber: '',
            }];
    }
    ngOnInit() {
        this.role = sessionStorage.getItem('role');
        console.log(this.userService.getType());
        if (this.userService.getType() != null) {
            this.name = this.userService.getType();
            this.userService.setType(null);
        }
        else {
            this.router.navigate(['/dashboard']);
        }
        this.userManagementService.getLoggedInUser()
            .subscribe((data) => {
            this.user = data;
        });
        this.iteration = "MENU";
    }
    addAddress() {
        this.addresses.push({
            id: this.addresses.length + 1,
            mobileNumber: '',
        });
    }
    removeAddress(i) {
        this.addresses.splice(i, 1);
    }
    onBack() {
        this.basicInfo();
    }
    onBankTransfer() {
        this.iteration = 'BANK_TRANFER';
    }
    onPremiumBackClick() {
        this.iteration = 'BASIC_INFO';
    }
    onSave() {
        this.orderManagementConfiguration.configTypeId = this.orderConfig;
        this.orderService.saveOrderConfiguration(this.orderManagementConfiguration)
            .subscribe((data) => {
            this.toastr.success('Your Order Configure has Been Set....', 'Order Configure', {
                timeOut: 6000,
                positionClass: 'toast-top-center',
                progressBar: true,
                progressAnimation: 'increasing'
            });
            this.iteration = "MENU";
        });
    }
    basicInfo() {
        let c = this.countryService.getCountriesForRegistration();
        c.subscribe((data) => this.countries = data);
        let s = this.countryService.getStates(this.user.address.countryId);
        s.subscribe((data) => this.states = data);
        let b = this.countryService.getCities(this.user.address.stateId);
        b.subscribe((data) => this.cities = data);
        this.iteration = "BASIC_INFO";
    }
    onChangeState() {
        console.log(this.user.address.stateId);
        if (this.user.address.stateId) {
            this.countryService.getStateById(this.user.address.stateId)
                .subscribe((data) => {
                this.state = data;
                this.user.address.region = this.state.region;
            });
            this.countryService.getCitiesForRegistration(this.user.address.stateId)
                .subscribe(data => {
                this.cities = data;
                if (this.cities == null) {
                    alert("There are no cities for this State");
                }
            });
        }
    }
    updateUser() {
        this.userService.updateUserById(this.user.userId, this.user)
            .subscribe((data) => {
            this.toastr.success('Updated Successfully!', '', {
                timeOut: 10000,
                positionClass: 'toast-top-center',
                progressBar: true,
                progressAnimation: 'increasing'
            });
            this.iteration = "MENU";
        });
    }
    onClickMembership() {
        this.creditLimitManagementService.getCreditLimit(this.user.uniqueUserId)
            .subscribe((data) => {
            if (data != null) {
                this.creditLimitManagement = new src_app_model_credit_limit_management__WEBPACK_IMPORTED_MODULE_13__["CreditLimitManagement"]();
                this.creditLimitManagement = data;
                this.iteration = "premiumMembership";
            }
            else {
                this.creditLimitManagement = null;
                this.iteration = "premium";
            }
        });
    }
    onApplyForMembership() {
        console.log(this.user);
        this.creditLimitManagementService.getCreditLimit(this.user.uniqueUserId)
            .subscribe((data) => {
            console.log(data);
            if (data == null) {
                this.creditLimitManagement = new src_app_model_credit_limit_management__WEBPACK_IMPORTED_MODULE_13__["CreditLimitManagement"]();
                this.creditLimitManagement.userId = this.user.userId;
                this.creditLimitManagement.uniqueUserId = this.user.uniqueUserId;
                this.creditLimitManagement.userName = this.user.userName;
                this.creditLimitManagement.requestedAmount = 0;
                this.iteration = "premiumMembership";
            }
            if (data != null) {
                this.creditLimitManagement = new src_app_model_credit_limit_management__WEBPACK_IMPORTED_MODULE_13__["CreditLimitManagement"]();
                this.creditLimitManagement = data;
                console.log(this.creditLimitManagement);
                this.user == null;
                this.iteration = "premiumMembership";
            }
        });
    }
    apply() {
        this.creditLimitManagementService.saveCreditLimit(this.creditLimitManagement)
            .subscribe((data) => {
            console.log(this.creditLimitManagement);
            console.log(data);
            this.toastr.success('Premium Membership Applied Successfully...!', '', {
                timeOut: 10000,
                positionClass: 'toast-top-center',
                progressBar: true,
                progressAnimation: 'increasing'
            });
            this.ngOnInit();
        });
    }
    Configuration() {
        this.orderService.getOrderConfigList()
            .subscribe((data) => {
            this.configList = data;
            this.iteration = "ORDER_CONF";
        });
    }
    equipmentLink() {
        this.assignEquipment();
        this.iteration = "EQUIPMENT_LINKING";
    }
    assignEquipment() {
        this.product = new src_app_model_master_products__WEBPACK_IMPORTED_MODULE_3__["MasterProducts"]();
        this.equipmentService.getAllMakersForRegistration()
            .subscribe((data) => {
            this.makers = data;
        });
        this.equipment = new src_app_model_equipment__WEBPACK_IMPORTED_MODULE_4__["Equipment"]();
        let p = this.productService.getAllProductManufacturingYears();
        p.subscribe((data) => this.manufacturedYears = data);
        let category = this.productCategoryService.getProductCategories();
        category.subscribe((data) => this.categories = data);
        this.iteration++;
    }
    onChangeMaker() {
        console.log("maker : " + this.equipment.equipmentMaker);
        this.equipmentService.getEquipmentNamesForRegistration(this.equipment.equipmentMaker)
            .subscribe((data) => {
            this.names = data;
        });
    }
    onChangeName() {
        console.log("eq name : " + this.equipment.equipmentName);
        this.equipmentService.getEquipmentsByMakerAndName(this.equipment.equipmentMaker, this.equipment.equipmentName)
            .subscribe((data) => {
            console.log("type : " + JSON.stringify(data));
            this.equipments = data;
        });
    }
    onChangeId() {
        for (let e of this.equipments) {
            if (e.uniqueEquipmentId == this.equipment.uniqueEquipmentId) {
                this.equipment.equipmentDesc = e.equipmentDesc;
                this.equipment.equipmentId = e.equipmentId;
            }
        }
    }
    onchangeCategory() {
        this.productService.getProductsByClassification(this.product.productCategory, this.product.manufactureYear)
            .subscribe((data) => {
            this.products = data;
        });
    }
    submitEquipment() {
        alert("k");
        this.equipmentProduct = new src_app_model_EquipmentProductMapping__WEBPACK_IMPORTED_MODULE_2__["EquipmentProductMapping"]();
        this.equipmentProduct.equipmentId = this.equipment.equipmentId;
        this.equipmentProduct.productId = this.product.productId;
        this.equipmentProduct.preferredAccessType = this.accessType;
        this.equipmentProduct.mobileNo = this.mobileNumber;
        this.equipmentProduct.serialNo = this.serialNo;
        this.equipmentProduct.userId = this.getuserId();
        console.log(this.equipmentProduct);
        this.equipmentService.saveEquipmentProductMapping(this.equipmentProduct)
            .subscribe((data) => {
            console.log(data);
            alert("Equipment Added");
        });
    }
    getuserId() {
        let token = sessionStorage.getItem('token');
        let jwtData = token.split('.')[1];
        let decodedJwtJsonData = window.atob(jwtData);
        let decodedJwtData = JSON.parse(decodedJwtJsonData);
        return decodedJwtData.sub;
    }
    onBackClick1() {
        this.iteration = "MENU";
    }
    onClickBack() {
        this.iteration = 'MENU';
    }
    onBackCapture() {
        this.iteration = 'ORDER_CONF';
    }
    onOrderConfigClick() {
        this.iteration = 'Order_Configure';
    }
    onBackOrder() {
        this.iteration = 'ORDER_CONF';
    }
    onBackEquipment() {
        this.iteration = 'MENU';
    }
    onSubmit() {
        this.toastr.success('Captured Bank Details Successfully.....!.', '', {
            timeOut: 3000,
            positionClass: 'toast-top-center',
            progressBar: true,
            progressAnimation: 'increasing'
        });
        this.iteration = 'ORDER_CONF';
    }
    changePassword() {
        this.iteration = "CHANGE_PASSWORD";
    }
    resetPassword() {
        console.log(this.user);
        if (this.password == this.retypePassword) {
            this.user.password = this.password;
            this.authService.changePassword(this.user).subscribe(data => {
                console.log(data);
                this.iteration = "MENU";
            });
        }
        else {
            alert("Password doesn't match");
        }
    }
    addotherno() {
        this.addotherno1 = true;
    }
    registerMobile() {
        this.equipmentService.getRegisteredUserMobiles()
            .subscribe((data) => {
            this.registeredMobileList = data;
        });
        this.iteration = 'REGISTERED_MOBILE';
    }
    onSaveMobile() {
        //  this.authService.generateRegistrationOtp(this.mobileNo);
        this.iteration = 'MOBILE_OTP';
    }
    onNextClickValidateOtp() {
        //Need to enable validate in future
        //  this.authService.validateRegistrationOtp(this.user.otp, this.mobileNo).subscribe(data => {
        //    console.log(data)
        //   if (data == "valid") {
        this.toastr.success('Mobile validation successfull', 'Mobile Registration', { timeOut: 6000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
        this.equipmentService.registeredUserMobile(this.mobileNo).subscribe(data => {
            this.equipmentService.getRegisteredUserMobiles()
                .subscribe((data) => {
                this.registeredMobileList = data;
                this.iteration = 'REGISTERED_MOBILE';
            });
        });
        //   }else{
        //     this.toastr.error('OTP not validated, please enter valid OTP', 'Mobile Registration', {timeOut: 10000, positionClass: 'toast-top-center', progressBar: true,progressAnimation: 'increasing' })
        //   }
        // });      
    }
    equipmentMobileLink() {
        this.registeredMobileList = null;
        this.equipmentService.getRegisteredUserMobiles()
            .subscribe((data) => {
            this.registeredMobileList = data;
            //   console.log(data)
        });
        this.equipmentService.getEquipmentProductMappingByCustomerId(this.user.uniqueUserId)
            .subscribe((data) => {
            this.equipmentsLinking = data;
            for (let e of this.equipmentsLinking) {
                e.linkedMobiles = new Array();
                for (let m of e.registeredMobiles) {
                    e.linkedMobiles.push(m.registeredMobileId);
                }
            }
            console.log(this.equipmentsLinking);
            // this.linkone = this.equipmentsLinking[0]
            console.log(this.registeredMobileList);
            this.iteration = 'EQUIPMENT_MOBILE_LINK';
        });
    }
    onMobileLink(equipmentLink) {
        let equipmentLinkedMobile = new src_app_model_EquipmentLinkedMobile__WEBPACK_IMPORTED_MODULE_17__["EquipmentLinkedMobile"]();
        equipmentLinkedMobile.equipmentProductId = equipmentLink.equipmentProductId;
        console.log(equipmentLink);
        equipmentLinkedMobile.registeredMobileIds = new Array();
        equipmentLinkedMobile.registeredMobileIds = equipmentLink.linkedMobiles;
        console.log(equipmentLinkedMobile);
        this.equipmentService.linkRegisteredUserMobile(equipmentLinkedMobile)
            .subscribe((data) => {
            this.toastr.success('Equipment Mobile linked successfully', 'Equipment Mobile Link', { timeOut: 6000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
        });
    }
};
EditprofileComponent.ctorParameters = () => [
    { type: src_app_services_order_management_service__WEBPACK_IMPORTED_MODULE_8__["OrderManagementService"] },
    { type: src_app_services_equipment_service__WEBPACK_IMPORTED_MODULE_5__["EquipmentService"] },
    { type: src_app_services_master_product_service__WEBPACK_IMPORTED_MODULE_6__["MasterProductService"] },
    { type: src_app_services_product_category_service__WEBPACK_IMPORTED_MODULE_7__["ProductCategoryService"] },
    { type: src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_10__["UsermanagementService"] },
    { type: src_app_services_country_service__WEBPACK_IMPORTED_MODULE_11__["CountryService"] },
    { type: src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_10__["UsermanagementService"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_12__["ToastrService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_16__["Router"] },
    { type: src_app_services_credit_limit_management_service__WEBPACK_IMPORTED_MODULE_14__["CreditLimitManagementService"] },
    { type: src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_15__["AuthService"] }
];
EditprofileComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-editprofile',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./editprofile.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/editprofile/editprofile.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./editprofile.component.css */ "./src/app/components/editprofile/editprofile.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_order_management_service__WEBPACK_IMPORTED_MODULE_8__["OrderManagementService"],
        src_app_services_equipment_service__WEBPACK_IMPORTED_MODULE_5__["EquipmentService"],
        src_app_services_master_product_service__WEBPACK_IMPORTED_MODULE_6__["MasterProductService"],
        src_app_services_product_category_service__WEBPACK_IMPORTED_MODULE_7__["ProductCategoryService"],
        src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_10__["UsermanagementService"],
        src_app_services_country_service__WEBPACK_IMPORTED_MODULE_11__["CountryService"],
        src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_10__["UsermanagementService"],
        ngx_toastr__WEBPACK_IMPORTED_MODULE_12__["ToastrService"],
        _angular_router__WEBPACK_IMPORTED_MODULE_16__["Router"],
        src_app_services_credit_limit_management_service__WEBPACK_IMPORTED_MODULE_14__["CreditLimitManagementService"],
        src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_15__["AuthService"]])
], EditprofileComponent);



/***/ }),

/***/ "./src/app/components/forgotpassword/forgotpassword.component.css":
/*!************************************************************************!*\
  !*** ./src/app/components/forgotpassword/forgotpassword.component.css ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (".input-vendor {\r\n    height: 50px;\r\n    background: #ebf4f9;\r\n  }\r\n  \r\nem#importem {\r\n  margin-left: 185px;\r\n  font-weight: 900;\r\n}\r\n  \r\nh6#importh6{\r\n  text-align: center;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  color: #f111a2;\r\n}\r\n\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9mb3Jnb3RwYXNzd29yZC9mb3Jnb3RwYXNzd29yZC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksWUFBWTtJQUNaLG1CQUFtQjtFQUNyQjs7QUFFRjtFQUNFLGtCQUFrQjtFQUNsQixnQkFBZ0I7QUFDbEI7O0FBQ0E7RUFDRSxrQkFBa0I7RUFDbEIsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixjQUFjO0FBQ2hCIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9mb3Jnb3RwYXNzd29yZC9mb3Jnb3RwYXNzd29yZC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmlucHV0LXZlbmRvciB7XHJcbiAgICBoZWlnaHQ6IDUwcHg7XHJcbiAgICBiYWNrZ3JvdW5kOiAjZWJmNGY5O1xyXG4gIH1cclxuICBcclxuZW0jaW1wb3J0ZW0ge1xyXG4gIG1hcmdpbi1sZWZ0OiAxODVweDtcclxuICBmb250LXdlaWdodDogOTAwO1xyXG59XHJcbmg2I2ltcG9ydGg2e1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBmb250LXNpemU6IDIwcHg7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgY29sb3I6ICNmMTExYTI7XHJcbn1cclxuIl19 */");

/***/ }),

/***/ "./src/app/components/forgotpassword/forgotpassword.component.ts":
/*!***********************************************************************!*\
  !*** ./src/app/components/forgotpassword/forgotpassword.component.ts ***!
  \***********************************************************************/
/*! exports provided: ForgotpasswordComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ForgotpasswordComponent", function() { return ForgotpasswordComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/auth.service */ "./src/app/services/auth.service.ts");
/* harmony import */ var src_app_model_user__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/model/user */ "./src/app/model/user.ts");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");





let ForgotpasswordComponent = class ForgotpasswordComponent {
    constructor(fb, authService) {
        this.fb = fb;
        this.authService = authService;
        this.submitted = false;
    }
    ngOnInit() {
        this.user = new src_app_model_user__WEBPACK_IMPORTED_MODULE_3__["User"]();
        this.forgotForm = this.fb.group({
            email: [null, [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].email]],
        });
        this.iteration = 1;
    }
    get f() {
        return this.forgotForm.controls;
    }
    onNextClickGenerateOtp() {
        console.log(this.user);
        this.submitted = true;
        // stop here if form is invalid
        if (this.forgotForm.invalid) {
            return;
        }
        //validate email
        this.authService.isUserExists(this.user.email).subscribe(data => {
            this.isEmailExists = data;
            console.log(this.isEmailExists);
            if (this.isEmailExists) {
                this.authService.generateRegistrationOtp(this.user.email);
                this.iteration++;
            }
            else {
                this.forgotForm.controls['email'].invalid;
                this.forgotForm.controls['email'].setErrors({
                    "emailNotExists": true
                });
                console.log("Invalid");
            }
        });
    }
    onNextClickValidateOtp() {
        this.authService.validateRegistrationOtp(this.user.otp, this.user.email).subscribe(data => {
            if (data == "valid") {
                this.iteration++;
            }
        });
    }
    onResendOtp() {
        this.onNextClickValidateOtp();
    }
    resetPassword() {
        // console.log(this.user)
        if (this.password == this.retypePassword) {
            this.user.password = this.password;
            this.authService.changePassword(this.user).subscribe(data => {
                console.log(data);
                console.log(this.user);
                this.iteration++;
            });
        }
        else {
            alert("Password doesn't match");
        }
    }
};
ForgotpasswordComponent.ctorParameters = () => [
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"] },
    { type: src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_2__["AuthService"] }
];
ForgotpasswordComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-forgotpassword',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./forgotpassword.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/forgotpassword/forgotpassword.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./forgotpassword.component.css */ "./src/app/components/forgotpassword/forgotpassword.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"], src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_2__["AuthService"]])
], ForgotpasswordComponent);



/***/ }),

/***/ "./src/app/components/generatealertevent/generatealertevent.component.css":
/*!********************************************************************************!*\
  !*** ./src/app/components/generatealertevent/generatealertevent.component.css ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n.card.card-cascade.narrower.body-section {\r\n    margin-top: 91px;\r\n}\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n  }\r\n.input-vendor {\r\n    height: 50px;\r\n    background: #ebf4f9;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9nZW5lcmF0ZWFsZXJ0ZXZlbnQvZ2VuZXJhdGVhbGVydGV2ZW50LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0lBQ0ksZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxvQkFBb0I7SUFDcEIsZUFBZTtJQUNmLGlCQUFpQjtFQUNuQjtBQUNBO0lBQ0UsWUFBWTtJQUNaLG1CQUFtQjtBQUN2QiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZ2VuZXJhdGVhbGVydGV2ZW50L2dlbmVyYXRlYWxlcnRldmVudC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbi5jYXJkLmNhcmQtY2FzY2FkZS5uYXJyb3dlci5ib2R5LXNlY3Rpb24ge1xyXG4gICAgbWFyZ2luLXRvcDogOTFweDtcclxufVxyXG4uYnRuLmJ0bi1sZyB7XHJcbiAgICBwYWRkaW5nOiAxcmVtIDIuNHJlbTtcclxuICAgIGZvbnQtc2l6ZTogMTdweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIH1cclxuICAuaW5wdXQtdmVuZG9yIHtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIGJhY2tncm91bmQ6ICNlYmY0Zjk7XHJcbn0iXX0= */");

/***/ }),

/***/ "./src/app/components/generatealertevent/generatealertevent.component.ts":
/*!*******************************************************************************!*\
  !*** ./src/app/components/generatealertevent/generatealertevent.component.ts ***!
  \*******************************************************************************/
/*! exports provided: GeneratealerteventComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeneratealerteventComponent", function() { return GeneratealerteventComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var src_app_model_alert_events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/model/alert-events */ "./src/app/model/alert-events.ts");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/services/alert.service */ "./src/app/services/alert.service.ts");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");







let GeneratealerteventComponent = class GeneratealerteventComponent {
    constructor(alertService, router, toastr) {
        this.alertService = alertService;
        this.router = router;
        this.toastr = toastr;
        this.submitted = false;
        this.eventsaveform = new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormGroup"]({
            eventName: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].minLength(2)])
        });
    }
    ngOnInit() {
        this.submitted = false;
    }
    createAlertEvent(saveAlertEvent) {
        this.submitted = true;
        // stop here if form is invalid
        if (this.eventsaveform.invalid) {
            return;
        }
        console.log(this.eventName.value);
        this.alertEvent = new src_app_model_alert_events__WEBPACK_IMPORTED_MODULE_3__["AlertEvents"]();
        this.alertEvent.eventName = this.eventName.value;
        this.submitted = true;
        this.save();
    }
    save() {
        console.log(this.alertEvent);
        this.alertService.createAlertEvent(this.alertEvent).subscribe(data => {
            console.log("====Data==>>>>" + JSON.stringify(data));
            console.log(JSON.stringify(data) === JSON.stringify("success"));
            if (JSON.stringify(data) === JSON.stringify("success")) {
                this.toastr.success('Alert Event Genrated Successfully...!', '', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
                this.router.navigate(['/showEventsList']);
            }
            else {
                console.log("Failure");
            }
        });
    }
    get eventName() {
        return this.eventsaveform.get('eventName');
    }
    get f() { return this.eventsaveform.controls; }
    addAlertEventForm() {
        this.submitted = false;
        // this.alertsaveform.reset();  
    }
};
GeneratealerteventComponent.ctorParameters = () => [
    { type: src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_5__["AlertService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_6__["ToastrService"] }
];
GeneratealerteventComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-generatealertevent',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./generatealertevent.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/generatealertevent/generatealertevent.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./generatealertevent.component.css */ "./src/app/components/generatealertevent/generatealertevent.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_5__["AlertService"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"], ngx_toastr__WEBPACK_IMPORTED_MODULE_6__["ToastrService"]])
], GeneratealerteventComponent);



/***/ }),

/***/ "./src/app/components/genratealert/genratealert.component.css":
/*!********************************************************************!*\
  !*** ./src/app/components/genratealert/genratealert.component.css ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("h4.card-header-title.mb-3 {\r\n    padding: 10px;\r\n    font-weight: bold;\r\n    margin-top: 10px;\r\n}\r\nlabel {\r\n    font-weight: bold;\r\n    font-size: initial;\r\n    word-break: break-all;\r\n    margin-top: 7px;\r\n}\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n  }\r\n/*  */\r\n.input-vendor {\r\n    height: 50px;\r\n    background: #ebf4f9;\r\n}\r\n.card-body.vendor{\r\n    padding-right: 3rem;\r\n    padding-left: 3rem;\r\n}\r\ndiv#vendorrow {\r\n    padding-top: 0.5rem;\r\n}\r\nselect.form-control:not([size]):not([multiple]) {\r\n    height: 50px;\r\n    background-color:#ebf4f9; ;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9nZW5yYXRlYWxlcnQvZ2VucmF0ZWFsZXJ0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxhQUFhO0lBQ2IsaUJBQWlCO0lBQ2pCLGdCQUFnQjtBQUNwQjtBQUNBO0lBQ0ksaUJBQWlCO0lBQ2pCLGtCQUFrQjtJQUNsQixxQkFBcUI7SUFDckIsZUFBZTtBQUNuQjtBQUNBO0lBQ0ksb0JBQW9CO0lBQ3BCLGVBQWU7SUFDZixpQkFBaUI7RUFDbkI7QUFDRSxLQUFLO0FBRVQ7SUFDSSxZQUFZO0lBQ1osbUJBQW1CO0FBQ3ZCO0FBQ0E7SUFDSSxtQkFBbUI7SUFDbkIsa0JBQWtCO0FBQ3RCO0FBRUE7SUFDSSxtQkFBbUI7QUFDdkI7QUFFQTtJQUNJLFlBQVk7SUFDWix3QkFBd0I7QUFDNUIiLCJmaWxlIjoic3JjL2FwcC9jb21wb25lbnRzL2dlbnJhdGVhbGVydC9nZW5yYXRlYWxlcnQuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbImg0LmNhcmQtaGVhZGVyLXRpdGxlLm1iLTMge1xyXG4gICAgcGFkZGluZzogMTBweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxufVxyXG5sYWJlbCB7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIGZvbnQtc2l6ZTogaW5pdGlhbDtcclxuICAgIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcclxuICAgIG1hcmdpbi10b3A6IDdweDtcclxufVxyXG4uYnRuLmJ0bi1sZyB7XHJcbiAgICBwYWRkaW5nOiAxcmVtIDIuNHJlbTtcclxuICAgIGZvbnQtc2l6ZTogMTdweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIH1cclxuICAgIC8qICAqL1xyXG4gIFxyXG4uaW5wdXQtdmVuZG9yIHtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIGJhY2tncm91bmQ6ICNlYmY0Zjk7XHJcbn1cclxuLmNhcmQtYm9keS52ZW5kb3J7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAzcmVtO1xyXG4gICAgcGFkZGluZy1sZWZ0OiAzcmVtO1xyXG59XHJcblxyXG5kaXYjdmVuZG9ycm93IHtcclxuICAgIHBhZGRpbmctdG9wOiAwLjVyZW07XHJcbn1cclxuXHJcbnNlbGVjdC5mb3JtLWNvbnRyb2w6bm90KFtzaXplXSk6bm90KFttdWx0aXBsZV0pIHtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6I2ViZjRmOTsgO1xyXG59Il19 */");

/***/ }),

/***/ "./src/app/components/genratealert/genratealert.component.ts":
/*!*******************************************************************!*\
  !*** ./src/app/components/genratealert/genratealert.component.ts ***!
  \*******************************************************************/
/*! exports provided: GenratealertComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GenratealertComponent", function() { return GenratealertComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/alert.service */ "./src/app/services/alert.service.ts");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var src_app_model_alert__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/model/alert */ "./src/app/model/alert.ts");
/* harmony import */ var src_app_services_alertmanagement_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/services/alertmanagement.service */ "./src/app/services/alertmanagement.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");








let GenratealertComponent = class GenratealertComponent {
    constructor(alertservice, alertManService, router, toastr) {
        this.alertservice = alertservice;
        this.alertManService = alertManService;
        this.router = router;
        this.toastr = toastr;
        this.alert = new src_app_model_alert__WEBPACK_IMPORTED_MODULE_4__["Alert"]();
        this.submitted = false;
        this.alertsaveform = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormGroup"]({
            alertName: new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].minLength(2)]),
            alertEvent: new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"](),
            role: new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"](),
            sendVia: new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"](),
            remarks: new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]()
        });
    }
    ngOnInit() {
        this.submitted = false;
        console.log(this.alert);
        let alertEvents = this.alertManService.getAllAlertEvents();
        alertEvents.subscribe((data) => {
            this.events = data;
            console.log(data);
        });
        let userRoles = this.alertManService.getAllUserRoles();
        userRoles.subscribe((data) => {
            this.roles = data;
            console.log(data);
        });
        let notifyTypes = this.alertManService.getAllAlertNotificationMethods();
        notifyTypes.subscribe((data) => {
            this.notifyTypes = data;
            console.log(data);
        });
        console.log("Currently at the last " + this.alert);
    }
    createAlert(saveAlert) {
        this.submitted = true;
        this.save();
    }
    save() {
        console.log(this.alert);
        this.alertservice.createAlert(this.alert).subscribe(data => {
            console.log("====Data==>>>>" + JSON.stringify(data));
            console.log(JSON.stringify(data) === JSON.stringify("success"));
            if (JSON.stringify(data) === JSON.stringify("success")) {
                this.toastr.success('Alert Generated Sucessfully', '', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
                this.router.navigate(['/viewAllAlerts']);
            }
            else {
                console.log("Failure");
            }
        });
    }
    refresh() {
        window.location.reload();
    }
    addAlertForm() {
        this.submitted = false;
    }
};
GenratealertComponent.ctorParameters = () => [
    { type: src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_2__["AlertService"] },
    { type: src_app_services_alertmanagement_service__WEBPACK_IMPORTED_MODULE_5__["AlertmanagementService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_6__["Router"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_7__["ToastrService"] }
];
GenratealertComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-genratealert',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./genratealert.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/genratealert/genratealert.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./genratealert.component.css */ "./src/app/components/genratealert/genratealert.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_2__["AlertService"], src_app_services_alertmanagement_service__WEBPACK_IMPORTED_MODULE_5__["AlertmanagementService"],
        _angular_router__WEBPACK_IMPORTED_MODULE_6__["Router"], ngx_toastr__WEBPACK_IMPORTED_MODULE_7__["ToastrService"]])
], GenratealertComponent);



/***/ }),

/***/ "./src/app/components/navbar/navbar.component.css":
/*!********************************************************!*\
  !*** ./src/app/components/navbar/navbar.component.css ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n.navbar-badge{\r\n    font-weight: 300;\r\n    padding: 2px 4px;\r\n    position: absolute;\r\n    right: -2px;\r\n    top: -7px;\r\n    height: 23px;\r\n    width: 26px;\r\n    font-size: initial;\r\n    border-radius: 43px;\r\n}\r\np.notify-text {\r\n    font-size: initial;\r\n    font-weight: bold;\r\n}\r\na.dropdown-item.dropdown-footer {\r\n    margin-left: 41px;\r\n    font-size: inherit;\r\n    font-weight: 200;\r\n}\r\nspan.dropdown-item.dropdown-header {\r\n    margin-left: 1px;\r\n    font-weight: bold;\r\n    font-size: 18px;\r\n}\r\n.dropdown-menu-lg .dropdown-item {\r\n    padding: .5rem 1rem;\r\n   \r\n}\r\n.dropdown-menu-lg .dropdown-divider {\r\n    margin: 0;\r\n}\r\n.dropdown-divider {\r\n    height: 0;\r\n    margin: .5rem 0;\r\n    overflow: hidden;\r\n    border-top: 1px solid #e9ecef;\r\n}\r\ni.fa.fa-bars {\r\n    margin-left: 12px;\r\n    margin-top: 0px;\r\n}\r\nimg#importimg {\r\n    margin-left: 71px;\r\n}\r\nul#importul {\r\n    margin-left: -230px;\r\n}\r\n.dropdown-menu.dropdown-menu-lg.dropdown-menu-left.show {\r\n    cursor: -webkit-grab;\r\n    cursor: grab;\r\n}\r\n.dropdown-menu > span:hover {\r\n    background-image: none;\r\n    background-color: red;\r\n    color: white;\r\n}\r\n/* Mobile Portrait Size to Mobile Landscape Size (devices and browsers)\r\n=================================================================== */\r\n@media only screen and (max-width: 479px) {\r\n    a.nav-link {\r\n        margin-top: 23px;\r\n        height: 13px;\r\n    }\r\n    .navbar-badge{\r\n        font-weight: 300;\r\n        padding: 2px 4px;\r\n        position: absolute;\r\n        /* right: -2px; */\r\n        top: 17px;\r\n        height: 23px;\r\n        width: 26px;\r\n        font-size: initial;\r\n        border-radius: 43px;\r\n        left: 20px;\r\n    }\r\n        \r\n}\r\n\r\n\r\n\r\n\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9uYXZiYXIvbmF2YmFyLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGdCQUFnQjtJQUNoQixrQkFBa0I7SUFDbEIsV0FBVztJQUNYLFNBQVM7SUFDVCxZQUFZO0lBQ1osV0FBVztJQUNYLGtCQUFrQjtJQUNsQixtQkFBbUI7QUFDdkI7QUFDQTtJQUNJLGtCQUFrQjtJQUNsQixpQkFBaUI7QUFDckI7QUFDQTtJQUNJLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIsZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLGVBQWU7QUFDbkI7QUFDQTtJQUNJLG1CQUFtQjs7QUFFdkI7QUFFQTtJQUNJLFNBQVM7QUFDYjtBQUNBO0lBQ0ksU0FBUztJQUNULGVBQWU7SUFDZixnQkFBZ0I7SUFDaEIsNkJBQTZCO0FBQ2pDO0FBQ0E7SUFDSSxpQkFBaUI7SUFDakIsZUFBZTtBQUNuQjtBQUNBO0lBQ0ksaUJBQWlCO0FBQ3JCO0FBQ0E7SUFDSSxtQkFBbUI7QUFDdkI7QUFFQTtJQUNJLG9CQUFZO0lBQVosWUFBWTtBQUNoQjtBQUNBO0lBQ0ksc0JBQXNCO0lBQ3RCLHFCQUFxQjtJQUNyQixZQUFZO0FBQ2hCO0FBQ0E7cUVBQ3FFO0FBQ3JFO0lBQ0k7UUFDSSxnQkFBZ0I7UUFDaEIsWUFBWTtJQUNoQjtJQUNBO1FBQ0ksZ0JBQWdCO1FBQ2hCLGdCQUFnQjtRQUNoQixrQkFBa0I7UUFDbEIsaUJBQWlCO1FBQ2pCLFNBQVM7UUFDVCxZQUFZO1FBQ1osV0FBVztRQUNYLGtCQUFrQjtRQUNsQixtQkFBbUI7UUFDbkIsVUFBVTtJQUNkOztBQUVKIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9uYXZiYXIvbmF2YmFyLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLm5hdmJhci1iYWRnZXtcclxuICAgIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgICBwYWRkaW5nOiAycHggNHB4O1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgcmlnaHQ6IC0ycHg7XHJcbiAgICB0b3A6IC03cHg7XHJcbiAgICBoZWlnaHQ6IDIzcHg7XHJcbiAgICB3aWR0aDogMjZweDtcclxuICAgIGZvbnQtc2l6ZTogaW5pdGlhbDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDQzcHg7XHJcbn1cclxucC5ub3RpZnktdGV4dCB7XHJcbiAgICBmb250LXNpemU6IGluaXRpYWw7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5hLmRyb3Bkb3duLWl0ZW0uZHJvcGRvd24tZm9vdGVyIHtcclxuICAgIG1hcmdpbi1sZWZ0OiA0MXB4O1xyXG4gICAgZm9udC1zaXplOiBpbmhlcml0O1xyXG4gICAgZm9udC13ZWlnaHQ6IDIwMDtcclxufVxyXG5zcGFuLmRyb3Bkb3duLWl0ZW0uZHJvcGRvd24taGVhZGVyIHtcclxuICAgIG1hcmdpbi1sZWZ0OiAxcHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIGZvbnQtc2l6ZTogMThweDtcclxufVxyXG4uZHJvcGRvd24tbWVudS1sZyAuZHJvcGRvd24taXRlbSB7XHJcbiAgICBwYWRkaW5nOiAuNXJlbSAxcmVtO1xyXG4gICBcclxufVxyXG5cclxuLmRyb3Bkb3duLW1lbnUtbGcgLmRyb3Bkb3duLWRpdmlkZXIge1xyXG4gICAgbWFyZ2luOiAwO1xyXG59XHJcbi5kcm9wZG93bi1kaXZpZGVyIHtcclxuICAgIGhlaWdodDogMDtcclxuICAgIG1hcmdpbjogLjVyZW0gMDtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICBib3JkZXItdG9wOiAxcHggc29saWQgI2U5ZWNlZjtcclxufVxyXG5pLmZhLmZhLWJhcnMge1xyXG4gICAgbWFyZ2luLWxlZnQ6IDEycHg7XHJcbiAgICBtYXJnaW4tdG9wOiAwcHg7XHJcbn1cclxuaW1nI2ltcG9ydGltZyB7XHJcbiAgICBtYXJnaW4tbGVmdDogNzFweDtcclxufVxyXG51bCNpbXBvcnR1bCB7XHJcbiAgICBtYXJnaW4tbGVmdDogLTIzMHB4O1xyXG59XHJcblxyXG4uZHJvcGRvd24tbWVudS5kcm9wZG93bi1tZW51LWxnLmRyb3Bkb3duLW1lbnUtbGVmdC5zaG93IHtcclxuICAgIGN1cnNvcjogZ3JhYjtcclxufVxyXG4uZHJvcGRvd24tbWVudSA+IHNwYW46aG92ZXIge1xyXG4gICAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxufVxyXG4vKiBNb2JpbGUgUG9ydHJhaXQgU2l6ZSB0byBNb2JpbGUgTGFuZHNjYXBlIFNpemUgKGRldmljZXMgYW5kIGJyb3dzZXJzKVxyXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDc5cHgpIHtcclxuICAgIGEubmF2LWxpbmsge1xyXG4gICAgICAgIG1hcmdpbi10b3A6IDIzcHg7XHJcbiAgICAgICAgaGVpZ2h0OiAxM3B4O1xyXG4gICAgfVxyXG4gICAgLm5hdmJhci1iYWRnZXtcclxuICAgICAgICBmb250LXdlaWdodDogMzAwO1xyXG4gICAgICAgIHBhZGRpbmc6IDJweCA0cHg7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIC8qIHJpZ2h0OiAtMnB4OyAqL1xyXG4gICAgICAgIHRvcDogMTdweDtcclxuICAgICAgICBoZWlnaHQ6IDIzcHg7XHJcbiAgICAgICAgd2lkdGg6IDI2cHg7XHJcbiAgICAgICAgZm9udC1zaXplOiBpbml0aWFsO1xyXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDQzcHg7XHJcbiAgICAgICAgbGVmdDogMjBweDtcclxuICAgIH1cclxuICAgICAgICBcclxufVxyXG5cclxuXHJcblxyXG4iXX0= */");

/***/ }),

/***/ "./src/app/components/navbar/navbar.component.ts":
/*!*******************************************************!*\
  !*** ./src/app/components/navbar/navbar.component.ts ***!
  \*******************************************************/
/*! exports provided: NavbarComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NavbarComponent", function() { return NavbarComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_services_navbar_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/navbar.service */ "./src/app/services/navbar.service.ts");
/* harmony import */ var src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/auth.service */ "./src/app/services/auth.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/services/usermanagement.service */ "./src/app/services/usermanagement.service.ts");






let NavbarComponent = class NavbarComponent {
    constructor(router, nav, _auth, userService) {
        this.router = router;
        this.nav = nav;
        this._auth = _auth;
        this.userService = userService;
        this.router.routeReuseStrategy.shouldReuseRoute = () => false;
    }
    ngOnInit() {
        this.role = sessionStorage.getItem('role');
        console.log("role : " + this.role);
        this.userName = sessionStorage.getItem('userName');
        this.userService.getLoggedInUser()
            .subscribe((data) => {
            let user1 = data;
            this.uniqueUserId = user1.uniqueUserId;
            console.log(this.uniqueUserId);
        });
        this.nav.show();
        this.getNotification();
    }
    getNotification() {
        this.nav.getNotifications().subscribe(data => {
            this.notifications = data;
            this.notifications1 = data;
            console.log(this.notifications.length);
            if (this.notifications.length > 3)
                this.notifications = this.notifications.slice(0, 3);
        });
    }
    showAllNotification() {
        this.nav.getNotifications().subscribe(data => {
            this.notifications = data;
        });
    }
    onClickNotification(notification) {
        this.nav.readNotification(notification.notificationId).subscribe();
        this.getNotification();
        this.nav.setNotification(notification);
        this.router.navigate([notification.notificationUrl], { queryParams: { id: notification.notificationId } });
    }
    logout() {
        this._auth.logout();
        window.sessionStorage.clear();
        console.log("Logout");
        // this.router.navigate(['/login']);
        window.location.replace('/login');
    }
    refresh() {
        window.location.reload();
    }
    onEditProfile() {
        this.userService.setType('editProfile');
        this.router.navigate(['/editprofile'], { queryParams: { navId: '1' } });
    }
    onConfig() {
        this.userService.setType('configuration');
        this.router.navigate(['/editprofile'], { queryParams: { navId: '2' } });
    }
    onequipmentclick() {
        this.userService.setType('equipmentlinking');
        this.router.navigate(['/editprofile'], { queryParams: { navId: '3' } });
    }
};
NavbarComponent.ctorParameters = () => [
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"] },
    { type: src_app_services_navbar_service__WEBPACK_IMPORTED_MODULE_2__["NavbarService"] },
    { type: src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_3__["AuthService"] },
    { type: src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_5__["UsermanagementService"] }
];
NavbarComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-navbar',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./navbar.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/navbar/navbar.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./navbar.component.css */ "./src/app/components/navbar/navbar.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"], src_app_services_navbar_service__WEBPACK_IMPORTED_MODULE_2__["NavbarService"], src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_3__["AuthService"], src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_5__["UsermanagementService"]])
], NavbarComponent);



/***/ }),

/***/ "./src/app/components/notification/notification.component.css":
/*!********************************************************************!*\
  !*** ./src/app/components/notification/notification.component.css ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\nlabel {\r\n    font-size: initial;\r\n    font-weight: bold;\r\n}\r\n\r\n.row.notes {\r\n    margin-left: 76px;\r\n}\r\n\r\nb.color {\r\n    font-size: larger;\r\n    color: chocolate;\r\n}\r\n\r\nlabel.color {\r\n    color: chocolate;\r\n    font-size: large;\r\n}\r\n\r\n/* uss */\r\n\r\np.import-text {\r\n    text-align: center;\r\n    font-size: 24px;\r\n    line-height: 2.5rem;\r\n    font-weight: 400;\r\n    color: green;\r\n}\r\n\r\nh3.importdetail {\r\n    color: black;\r\n    font-size: 20px;\r\n    text-align: left;\r\n    line-height: 0.5rem;\r\n}\r\n\r\ndiv#importpaid {\r\n    font-size: 21px;\r\n    font-weight: bold;\r\n}\r\n\r\np.import-end {\r\n    font-size: 21px;\r\n    text-align: center;\r\n    font-weight: 600;\r\n    color: red;\r\n}\r\n\r\nlabel#importlabel {\r\n    font-weight: bold;\r\n    font-size: 20px;\r\n}\r\n\r\nlabel#importlabeltype {\r\n    margin-left: 32px;\r\n    font-size: 19px;\r\n}\r\n\r\ndiv#importpaid1 {\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    text-align: right;\r\n}\r\n\r\ndiv#wallet-1 {\r\n    margin-top: 5px;\r\n}\r\n\r\n.container.importct{\r\n    max-width: 1500px;\r\n}\r\n\r\n/*  */\r\n\r\ndiv#import {\r\n    padding: 2rem;\r\n    font-size: 19px;\r\n}\r\n\r\ndiv#importname {\r\n    text-align: right;\r\n    font-weight: 800;\r\n}\r\n\r\nh5.importinfo {\r\n    margin-top: -13px;\r\n    font-size: 24px;\r\n    font-weight: 500;\r\n}\r\n\r\n.container.importct {\r\n    max-width: 1713px;\r\n}\r\n\r\n.charge {\r\n    padding: 10px;\r\n}\r\n\r\n.card-header.view.view-cascade.gradient-card-header.blue-gradient {\r\n    font-size: 21px;\r\n    font-weight: bold;\r\n    color: #fff!important;\r\n    text-align: center;\r\n}\r\n\r\n.card-header.view.view-cascade.gradient-card-header.blue-gradient.imp {\r\n    margin-top: -33px;\r\n    width: 108%;\r\n    margin-left: -32px;\r\n}\r\n\r\nh4#addCharges{\r\n    line-height: 2.5rem;\r\n    margin-bottom: -25px;\r\n    text-transform: uppercase;\r\n    font-weight: 600;\r\n}\r\n\r\n.charges {\r\n    line-height: 1.5rem;\r\n    margin-top: 10px;\r\n}\r\n\r\nh4.importtr {\r\n    font-size: 25px;\r\n    text-align: left;\r\n    padding-bottom: 14px;\r\n    margin-left: -2px;\r\n    font-weight: 500;\r\n}\r\n\r\ndiv#importmove {\r\n    margin-top: 25px;\r\n}\r\n\r\nbutton.btn.waves-effect.btn-block {\r\n    line-height: 2rem;\r\n    font-size: 25px;\r\n    font-weight: bold;\r\n\r\n}\r\n\r\n.card-header.view.view-cascade.gradient-card-header.blue-gradient.importh {\r\n    margin-top: -33px;\r\n    margin: -33px -33px 10px -33px;\r\n}\r\n\r\nh4.importor {\r\n    margin-top: 33px;\r\n    font-weight: 600;\r\n}\r\n\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n}\r\n\r\np.import-text {\r\n    text-align: center;\r\n    font-size: 24px;\r\n    line-height: 2.5rem;\r\n    font-weight: bold;\r\n    color: green;\r\n}\r\n\r\n/* media */\r\n\r\n@media only screen and (max-width: 479px) {\r\n    .row.notes {\r\n        margin-left: 0px;\r\n    }\r\n}\r\n\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9ub3RpZmljYXRpb24vbm90aWZpY2F0aW9uLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0lBQ0ksa0JBQWtCO0lBQ2xCLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLGlCQUFpQjtJQUNqQixnQkFBZ0I7QUFDcEI7O0FBQ0E7SUFDSSxnQkFBZ0I7SUFDaEIsZ0JBQWdCO0FBQ3BCOztBQUVBLFFBQVE7O0FBRVI7SUFDSSxrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLG1CQUFtQjtJQUNuQixnQkFBZ0I7SUFDaEIsWUFBWTtBQUNoQjs7QUFDQTtJQUNJLFlBQVk7SUFDWixlQUFlO0lBQ2YsZ0JBQWdCO0lBQ2hCLG1CQUFtQjtBQUN2Qjs7QUFJQTtJQUNJLGVBQWU7SUFDZixpQkFBaUI7QUFDckI7O0FBQ0E7SUFDSSxlQUFlO0lBQ2Ysa0JBQWtCO0lBQ2xCLGdCQUFnQjtJQUNoQixVQUFVO0FBQ2Q7O0FBRUE7SUFDSSxpQkFBaUI7SUFDakIsZUFBZTtBQUNuQjs7QUFDQTtJQUNJLGlCQUFpQjtJQUNqQixlQUFlO0FBQ25COztBQUNBO0lBQ0ksZUFBZTtJQUNmLGlCQUFpQjtJQUNqQixpQkFBaUI7QUFDckI7O0FBR0E7SUFDSSxlQUFlO0FBQ25COztBQUNBO0lBQ0ksaUJBQWlCO0FBQ3JCOztBQUVBLEtBQUs7O0FBQ0w7SUFDSSxhQUFhO0lBQ2IsZUFBZTtBQUNuQjs7QUFDQTtJQUNJLGlCQUFpQjtJQUNqQixnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxpQkFBaUI7SUFDakIsZUFBZTtJQUNmLGdCQUFnQjtBQUNwQjs7QUFDQTtJQUNJLGlCQUFpQjtBQUNyQjs7QUFDQTtJQUNJLGFBQWE7QUFDakI7O0FBQ0E7SUFDSSxlQUFlO0lBQ2YsaUJBQWlCO0lBQ2pCLHFCQUFxQjtJQUNyQixrQkFBa0I7QUFDdEI7O0FBR0E7SUFDSSxpQkFBaUI7SUFDakIsV0FBVztJQUNYLGtCQUFrQjtBQUN0Qjs7QUFDQTtJQUNJLG1CQUFtQjtJQUNuQixvQkFBb0I7SUFDcEIseUJBQXlCO0lBQ3pCLGdCQUFnQjtBQUNwQjs7QUFDQTtJQUNJLG1CQUFtQjtJQUNuQixnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxlQUFlO0lBQ2YsZ0JBQWdCO0lBQ2hCLG9CQUFvQjtJQUNwQixpQkFBaUI7SUFDakIsZ0JBQWdCO0FBQ3BCOztBQUNBO0lBQ0ksZ0JBQWdCO0FBQ3BCOztBQUNBO0lBQ0ksaUJBQWlCO0lBQ2pCLGVBQWU7SUFDZixpQkFBaUI7O0FBRXJCOztBQUdBO0lBQ0ksaUJBQWlCO0lBQ2pCLDhCQUE4QjtBQUNsQzs7QUFDQTtJQUNJLGdCQUFnQjtJQUNoQixnQkFBZ0I7QUFDcEI7O0FBQ0E7SUFDSSxvQkFBb0I7SUFDcEIsZUFBZTtJQUNmLGlCQUFpQjtBQUNyQjs7QUFDQTtJQUNJLGtCQUFrQjtJQUNsQixlQUFlO0lBQ2YsbUJBQW1CO0lBQ25CLGlCQUFpQjtJQUNqQixZQUFZO0FBQ2hCOztBQUNBLFVBQVU7O0FBQ1Y7SUFDSTtRQUNJLGdCQUFnQjtJQUNwQjtBQUNKIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9ub3RpZmljYXRpb24vbm90aWZpY2F0aW9uLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcclxubGFiZWwge1xyXG4gICAgZm9udC1zaXplOiBpbml0aWFsO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuXHJcbi5yb3cubm90ZXMge1xyXG4gICAgbWFyZ2luLWxlZnQ6IDc2cHg7XHJcbn1cclxuXHJcbmIuY29sb3Ige1xyXG4gICAgZm9udC1zaXplOiBsYXJnZXI7XHJcbiAgICBjb2xvcjogY2hvY29sYXRlO1xyXG59XHJcbmxhYmVsLmNvbG9yIHtcclxuICAgIGNvbG9yOiBjaG9jb2xhdGU7XHJcbiAgICBmb250LXNpemU6IGxhcmdlO1xyXG59XHJcblxyXG4vKiB1c3MgKi9cclxuXHJcbnAuaW1wb3J0LXRleHQge1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgZm9udC1zaXplOiAyNHB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IDIuNXJlbTtcclxuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XHJcbiAgICBjb2xvcjogZ3JlZW47XHJcbn1cclxuaDMuaW1wb3J0ZGV0YWlsIHtcclxuICAgIGNvbG9yOiBibGFjaztcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICBsaW5lLWhlaWdodDogMC41cmVtO1xyXG59XHJcblxyXG5cclxuXHJcbmRpdiNpbXBvcnRwYWlkIHtcclxuICAgIGZvbnQtc2l6ZTogMjFweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcbnAuaW1wb3J0LWVuZCB7XHJcbiAgICBmb250LXNpemU6IDIxcHg7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBmb250LXdlaWdodDogNjAwO1xyXG4gICAgY29sb3I6IHJlZDtcclxufVxyXG5cclxubGFiZWwjaW1wb3J0bGFiZWwge1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBmb250LXNpemU6IDIwcHg7XHJcbn1cclxubGFiZWwjaW1wb3J0bGFiZWx0eXBlIHtcclxuICAgIG1hcmdpbi1sZWZ0OiAzMnB4O1xyXG4gICAgZm9udC1zaXplOiAxOXB4O1xyXG59XHJcbmRpdiNpbXBvcnRwYWlkMSB7XHJcbiAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xyXG59XHJcblxyXG5cclxuZGl2I3dhbGxldC0xIHtcclxuICAgIG1hcmdpbi10b3A6IDVweDtcclxufVxyXG4uY29udGFpbmVyLmltcG9ydGN0e1xyXG4gICAgbWF4LXdpZHRoOiAxNTAwcHg7XHJcbn1cclxuXHJcbi8qICAqL1xyXG5kaXYjaW1wb3J0IHtcclxuICAgIHBhZGRpbmc6IDJyZW07XHJcbiAgICBmb250LXNpemU6IDE5cHg7XHJcbn1cclxuZGl2I2ltcG9ydG5hbWUge1xyXG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XHJcbiAgICBmb250LXdlaWdodDogODAwO1xyXG59XHJcblxyXG5oNS5pbXBvcnRpbmZvIHtcclxuICAgIG1hcmdpbi10b3A6IC0xM3B4O1xyXG4gICAgZm9udC1zaXplOiAyNHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcclxufVxyXG4uY29udGFpbmVyLmltcG9ydGN0IHtcclxuICAgIG1heC13aWR0aDogMTcxM3B4O1xyXG59XHJcbi5jaGFyZ2Uge1xyXG4gICAgcGFkZGluZzogMTBweDtcclxufVxyXG4uY2FyZC1oZWFkZXIudmlldy52aWV3LWNhc2NhZGUuZ3JhZGllbnQtY2FyZC1oZWFkZXIuYmx1ZS1ncmFkaWVudCB7XHJcbiAgICBmb250LXNpemU6IDIxcHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIGNvbG9yOiAjZmZmIWltcG9ydGFudDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG5cclxuXHJcbi5jYXJkLWhlYWRlci52aWV3LnZpZXctY2FzY2FkZS5ncmFkaWVudC1jYXJkLWhlYWRlci5ibHVlLWdyYWRpZW50LmltcCB7XHJcbiAgICBtYXJnaW4tdG9wOiAtMzNweDtcclxuICAgIHdpZHRoOiAxMDglO1xyXG4gICAgbWFyZ2luLWxlZnQ6IC0zMnB4O1xyXG59XHJcbmg0I2FkZENoYXJnZXN7XHJcbiAgICBsaW5lLWhlaWdodDogMi41cmVtO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogLTI1cHg7XHJcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcclxufVxyXG4uY2hhcmdlcyB7XHJcbiAgICBsaW5lLWhlaWdodDogMS41cmVtO1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxufVxyXG5cclxuaDQuaW1wb3J0dHIge1xyXG4gICAgZm9udC1zaXplOiAyNXB4O1xyXG4gICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgIHBhZGRpbmctYm90dG9tOiAxNHB4O1xyXG4gICAgbWFyZ2luLWxlZnQ6IC0ycHg7XHJcbiAgICBmb250LXdlaWdodDogNTAwO1xyXG59XHJcbmRpdiNpbXBvcnRtb3ZlIHtcclxuICAgIG1hcmdpbi10b3A6IDI1cHg7XHJcbn1cclxuYnV0dG9uLmJ0bi53YXZlcy1lZmZlY3QuYnRuLWJsb2NrIHtcclxuICAgIGxpbmUtaGVpZ2h0OiAycmVtO1xyXG4gICAgZm9udC1zaXplOiAyNXB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcblxyXG59XHJcblxyXG5cclxuLmNhcmQtaGVhZGVyLnZpZXcudmlldy1jYXNjYWRlLmdyYWRpZW50LWNhcmQtaGVhZGVyLmJsdWUtZ3JhZGllbnQuaW1wb3J0aCB7XHJcbiAgICBtYXJnaW4tdG9wOiAtMzNweDtcclxuICAgIG1hcmdpbjogLTMzcHggLTMzcHggMTBweCAtMzNweDtcclxufVxyXG5oNC5pbXBvcnRvciB7XHJcbiAgICBtYXJnaW4tdG9wOiAzM3B4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcclxufVxyXG4uYnRuLmJ0bi1sZyB7XHJcbiAgICBwYWRkaW5nOiAxcmVtIDIuNHJlbTtcclxuICAgIGZvbnQtc2l6ZTogMTdweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcbnAuaW1wb3J0LXRleHQge1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgZm9udC1zaXplOiAyNHB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IDIuNXJlbTtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgY29sb3I6IGdyZWVuO1xyXG59XHJcbi8qIG1lZGlhICovXHJcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDc5cHgpIHtcclxuICAgIC5yb3cubm90ZXMge1xyXG4gICAgICAgIG1hcmdpbi1sZWZ0OiAwcHg7XHJcbiAgICB9XHJcbn1cclxuIl19 */");

/***/ }),

/***/ "./src/app/components/notification/notification.component.ts":
/*!*******************************************************************!*\
  !*** ./src/app/components/notification/notification.component.ts ***!
  \*******************************************************************/
/*! exports provided: NotificationComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NotificationComponent", function() { return NotificationComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_services_navbar_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/navbar.service */ "./src/app/services/navbar.service.ts");
/* harmony import */ var src_app_services_payment_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/payment.service */ "./src/app/services/payment.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var src_app_services_order_management_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/services/order-management.service */ "./src/app/services/order-management.service.ts");
/* harmony import */ var src_app_services_pre_order_management_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/services/pre-order-management.service */ "./src/app/services/pre-order-management.service.ts");







let NotificationComponent = class NotificationComponent {
    constructor(nav, paymentService, router, orderManagementService, preOrderManagementService) {
        this.nav = nav;
        this.paymentService = paymentService;
        this.router = router;
        this.orderManagementService = orderManagementService;
        this.preOrderManagementService = preOrderManagementService;
        this.router.routeReuseStrategy.shouldReuseRoute = () => false;
    }
    ngOnInit() {
        this.notification = this.nav.getNotification();
        this.nav.setNotification(null);
        if (this.notification != null) {
            if (this.notification.iteration == 'TOPUP_SUCCESS') {
                this.topupSuccess();
            }
            else if (this.notification.iteration == 'TOPUP_SUCCESS_MISMATCH') {
                this.topupSuccess();
            }
            else if (this.notification.iteration == 'NOT_FOUND') {
                this.paymentService.setNotification(this.notification);
                this.router.navigate(['/wallet']);
            }
            else if (this.notification.iteration == 'ORDER_SUCESS') {
                this.paymentService.setNotification(this.notification);
                this.orderManagementService.setOrderId(this.notification.codeId);
                this.orderManagementService.setSource("saveOrder()");
                this.router.navigate(['/create']);
            }
            else if (this.notification.iteration == 'PRE_ORDER_SUCESS') {
                this.preOrderManagementService.setPreOrderId(this.notification.codeId);
                this.preOrderManagementService.setSource("onTopupAndLock()");
                this.router.navigate(['/pre-order']);
            }
        }
        else {
            this.router.navigate(['/dashboard']);
        }
    }
    topupSuccess() {
        this.paymentService.getTopupSucessDetails(this.notification)
            .subscribe((data) => {
            this.walletDetails = data;
            console.log(this.walletDetails);
            if (this.notification.iteration == 'TOPUP_SUCCESS') {
                this.iteration = 'TOPUP_SUCCESS';
            }
            else if (this.notification.iteration == 'TOPUP_SUCCESS_MISMATCH') {
                this.iteration = 'TOPUP_SUCCESS_MISMATCH';
            }
        });
    }
};
NotificationComponent.ctorParameters = () => [
    { type: src_app_services_navbar_service__WEBPACK_IMPORTED_MODULE_2__["NavbarService"] },
    { type: src_app_services_payment_service__WEBPACK_IMPORTED_MODULE_3__["PaymentService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"] },
    { type: src_app_services_order_management_service__WEBPACK_IMPORTED_MODULE_5__["OrderManagementService"] },
    { type: src_app_services_pre_order_management_service__WEBPACK_IMPORTED_MODULE_6__["PreOrderManagementService"] }
];
NotificationComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-notification',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./notification.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/notification/notification.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./notification.component.css */ "./src/app/components/notification/notification.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_navbar_service__WEBPACK_IMPORTED_MODULE_2__["NavbarService"],
        src_app_services_payment_service__WEBPACK_IMPORTED_MODULE_3__["PaymentService"],
        _angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"],
        src_app_services_order_management_service__WEBPACK_IMPORTED_MODULE_5__["OrderManagementService"],
        src_app_services_pre_order_management_service__WEBPACK_IMPORTED_MODULE_6__["PreOrderManagementService"]])
], NotificationComponent);



/***/ }),

/***/ "./src/app/components/offers/offers.component.css":
/*!********************************************************!*\
  !*** ./src/app/components/offers/offers.component.css ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\nh5{\r\n    text-align: center;\r\n    margin-top: 30px;\r\n}\r\n\r\n\r\n.container.button-section {\r\n    margin-top: 30px;\r\n}\r\n\r\n\r\n.card {\r\n\r\n    padding: 10px;\r\n    background: white;\r\n    box-shadow: 5px 5px 12px grey;\r\n    }\r\n\r\n    \r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9vZmZlcnMvb2ZmZXJzLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0lBQ0ksa0JBQWtCO0lBQ2xCLGdCQUFnQjtBQUNwQjs7O0FBR0E7SUFDSSxnQkFBZ0I7QUFDcEI7OztBQUVBOztJQUVJLGFBQWE7SUFDYixpQkFBaUI7SUFDakIsNkJBQTZCO0lBQzdCIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9vZmZlcnMvb2ZmZXJzLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuaDV7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBtYXJnaW4tdG9wOiAzMHB4O1xyXG59XHJcblxyXG5cclxuLmNvbnRhaW5lci5idXR0b24tc2VjdGlvbiB7XHJcbiAgICBtYXJnaW4tdG9wOiAzMHB4O1xyXG59XHJcblxyXG4uY2FyZCB7XHJcblxyXG4gICAgcGFkZGluZzogMTBweDtcclxuICAgIGJhY2tncm91bmQ6IHdoaXRlO1xyXG4gICAgYm94LXNoYWRvdzogNXB4IDVweCAxMnB4IGdyZXk7XHJcbiAgICB9XHJcblxyXG4gICAgIl19 */");

/***/ }),

/***/ "./src/app/components/offers/offers.component.ts":
/*!*******************************************************!*\
  !*** ./src/app/components/offers/offers.component.ts ***!
  \*******************************************************/
/*! exports provided: OffersComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OffersComponent", function() { return OffersComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let OffersComponent = class OffersComponent {
    constructor() { }
    ngOnInit() {
        this.paginator = 1;
    }
    onAddClick() {
        this.paginator++;
    }
    onAddBackClick() {
        this.paginator--;
    }
    onAdd() {
        this.paginator--;
    }
};
OffersComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-offers',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./offers.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/offers/offers.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./offers.component.css */ "./src/app/components/offers/offers.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], OffersComponent);



/***/ }),

/***/ "./src/app/components/onetimepassword/onetimepassword.component.css":
/*!**************************************************************************!*\
  !*** ./src/app/components/onetimepassword/onetimepassword.component.css ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n.container.oneTime {\r\n    margin-top: 115px;\r\n}\r\n\r\n.head {\r\n    padding: 10px;\r\n    font-weight: bold;\r\n}\r\n\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n  }\r\n\r\n.input-vendor {\r\n    height: 50px;\r\n    background: #ebf4f9;\r\n  }\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9vbmV0aW1lcGFzc3dvcmQvb25ldGltZXBhc3N3b3JkLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0lBQ0ksaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLG9CQUFvQjtJQUNwQixlQUFlO0lBQ2YsaUJBQWlCO0VBQ25COztBQUNBO0lBQ0UsWUFBWTtJQUNaLG1CQUFtQjtFQUNyQiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvb25ldGltZXBhc3N3b3JkL29uZXRpbWVwYXNzd29yZC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbi5jb250YWluZXIub25lVGltZSB7XHJcbiAgICBtYXJnaW4tdG9wOiAxMTVweDtcclxufVxyXG5cclxuLmhlYWQge1xyXG4gICAgcGFkZGluZzogMTBweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcblxyXG4uYnRuLmJ0bi1sZyB7XHJcbiAgICBwYWRkaW5nOiAxcmVtIDIuNHJlbTtcclxuICAgIGZvbnQtc2l6ZTogMTdweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIH1cclxuICAuaW5wdXQtdmVuZG9yIHtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIGJhY2tncm91bmQ6ICNlYmY0Zjk7XHJcbiAgfSJdfQ== */");

/***/ }),

/***/ "./src/app/components/onetimepassword/onetimepassword.component.ts":
/*!*************************************************************************!*\
  !*** ./src/app/components/onetimepassword/onetimepassword.component.ts ***!
  \*************************************************************************/
/*! exports provided: OnetimepasswordComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OnetimepasswordComponent", function() { return OnetimepasswordComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/auth.service */ "./src/app/services/auth.service.ts");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/services/usermanagement.service */ "./src/app/services/usermanagement.service.ts");






let OnetimepasswordComponent = class OnetimepasswordComponent {
    constructor(fb, router, _auth, activatedRoute, userservice) {
        this.fb = fb;
        this.router = router;
        this._auth = _auth;
        this.activatedRoute = activatedRoute;
        this.userservice = userservice;
        activatedRoute.queryParams.subscribe(params => {
            let token = params['token'];
            console.log(token);
            if (token) {
                sessionStorage.setItem(`token`, token);
            }
        });
    }
    ngOnInit() {
        this.angForm = this.fb.group({
            otp: [null, [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]],
        });
        this.userservice.getLoggedInUser().subscribe((data) => {
            this.user = data;
            console.log(this.user);
            this.mobileNo = this.user.mobileNumber.slice(0, 2) + '******' + this.user.mobileNumber.slice(8, 10);
            console.log(this.user.mobileNumber.slice(8, 10));
            console.log(this.mobileNo);
        });
    }
    onSubmit() {
        console.log(this.otp);
        // this._auth.validateOtp(this.otp).subscribe(data => {
        //   if (JSON.stringify(data) === JSON.stringify("valid")) {
        //     this.router.navigate(['/dashboard']);
        //   } else {
        //     this.angForm.controls['otp'].invalid
        //     this.angForm.controls['otp'].setErrors({
        //       "OtpInvalid": true
        //     });
        //     console.log("Invalid");
        //   }
        // }
        // )
        this.router.navigate(['/dashboard']);
    }
    onResendOtp() {
        let loginUserData = this._auth.getUserData();
        this._auth.setUserData(null);
        this._auth.onLogin(loginUserData)
            .subscribe(data => {
            let token = data['accessToken'];
            console.log(data);
            console.log(token);
            sessionStorage.setItem(`token`, token);
            this._auth.generateOtp().subscribe(data => {
                console.log(data);
            }, error => console.log(error));
            console.log('OTP Generation service called');
            this.ngOnInit();
        }, error => {
            console.log(error);
            let passwrodMissmatch = "missmatch";
        });
    }
};
OnetimepasswordComponent.ctorParameters = () => [
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"] },
    { type: src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_3__["AuthService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"] },
    { type: src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_5__["UsermanagementService"] }
];
OnetimepasswordComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-onetimepassword',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./onetimepassword.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/onetimepassword/onetimepassword.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./onetimepassword.component.css */ "./src/app/components/onetimepassword/onetimepassword.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"], src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_3__["AuthService"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
        src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_5__["UsermanagementService"]])
], OnetimepasswordComponent);



/***/ }),

/***/ "./src/app/components/pricemanagement/pricemanagement.component.css":
/*!**************************************************************************!*\
  !*** ./src/app/components/pricemanagement/pricemanagement.component.css ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\nlabel {\r\n    font-weight: bold;\r\n    font-size: initial;\r\n}\r\n\r\n/* new */\r\n\r\n.card.card-cascade {\r\n    margin: 10px;\r\n}\r\n\r\n.button-section {\r\n    text-align: right;\r\n}\r\n\r\n.container.card.p-2.mb-5 {\r\n    margin-top: -39px;\r\n}\r\n\r\ninput.form-control.apply {\r\n    margin-top: 6px;\r\n    height: 45px;\r\n}\r\n\r\n/* .card.card-cascade.narrower.body-section {\r\n    margin-top: -20px;\r\n} */\r\n\r\n.form-group.date {\r\n    margin-left: -117px;\r\n    margin-top: 3px;\r\n}\r\n\r\nh4.card-header-title.mb-3 {\r\n    padding: 10px;\r\n    font-weight: 300;\r\n    margin-top: 10px;\r\n}\r\n\r\nbutton.btn.btn-primary.pre-apply {\r\n    width: 107%;\r\n    margin-top: -1px;\r\n    height: 41px;\r\n    font-weight: bold;\r\n    margin-left: -10px;\r\n}\r\n\r\n.input-group-text {\r\n    background-color: black;\r\n    border: 1px solid #ced4da;\r\n    height: 41px;\r\n    margin-top: -1px;\r\n    color: white;\r\n    margin-left: -158px;\r\n}\r\n\r\n.input-group-text.pre{\r\n    background-color: black;\r\n    border: 1px solid #ced4da;\r\n    height: 41px;\r\n    margin-top: -1px;\r\n    color: white;\r\n    margin-left: -133px;\r\n}\r\n\r\ninput.form-control.order1{\r\n    margin-left:  -117px;\r\n}\r\n\r\ninput.form-control.order2{\r\n    margin-left: -92px;\r\n}\r\n\r\nlabel.col-sm-2.col-form-label.admin {\r\n    margin-right: -96px;\r\n}\r\n\r\n.card.card-cascade.narrower.body-section.margin {\r\n    margin-top: 10px;\r\n}\r\n\r\n.card-body {\r\n    margin-left: 8px;\r\n}\r\n\r\n.card.price1 {\r\n    margin-top: 88px;\r\n    margin-left: 16px;\r\n    margin-right: 16px;\r\n}\r\n\r\n.container.price2 {\r\n    margin-top: 10px;\r\n}\r\n\r\n.card.user {\r\n    margin-top: 92px;\r\n    margin-left: 16px;\r\n    margin-right: 16px;\r\n}\r\n\r\n.container.user1 {\r\n    margin-top: 10px;\r\n}\r\n\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n  }\r\n\r\nbutton.btn.btn-block.cor1 {\r\n    margin-top: -1px;\r\n    height: 53px;\r\n    width: 274px;\r\n}\r\n\r\nbutton.btn-block.btn-lg.cor {\r\n    margin-top: 24px;\r\n\r\n}\r\n\r\n/* Mobile Portrait Size to Mobile Landscape Size (devices and browsers)\r\n=================================================================== */\r\n\r\n@media only screen and (max-width: 479px) {\r\n    .form-group.date {\r\n        margin-left: 0px;\r\n        margin-top: 3px;\r\n    }\r\n    select.form-control.percent{\r\n        margin-left: 0px;\r\n        width: 100%;\r\n    }\r\n    \r\n\r\ninput.form-control.cancel {\r\n    margin-left: 0px;\r\n    width: 100%;\r\n}\r\ninput.form-control.adminCancel{\r\n    margin-left: 0px;\r\n}\r\nbutton.btn.btn-primary.apply {\r\n    width: 100%;\r\n    margin-left: 1px;\r\n}\r\n\r\nbutton.btn.btn-primary.pre-apply {\r\n    width: 100%;\r\n    margin-left: 1px;\r\n    margin-top: 10px;\r\n}\r\n\r\n.input-group-text {\r\n    margin-top: 12px;\r\n    margin-left: 0px;\r\n}\r\n\r\ninput.form-control.order1{\r\n    margin-top: 13px;\r\n    margin-left: -1px;\r\n}\r\n.input-group-text.pre{\r\n    margin-left: -1px;\r\n}\r\ninput.form-control.order2{\r\n    margin-left: -1px;\r\n}\r\n}\r\n\r\n/*  */\r\n\r\n.input-vendor {\r\n    height: 50px;\r\n    background: #ebf4f9;\r\n}\r\n\r\n.card-body.vendor{\r\n    padding-right: 3rem;\r\n    padding-left: 3rem;\r\n}\r\n\r\ndiv#vendorrow {\r\n    padding-top: 0.5rem;\r\n}\r\n\r\nselect.form-control:not([size]):not([multiple]) {\r\n    height: 50px;\r\n    background-color:#ebf4f9; ;\r\n}\r\n\r\ndiv#margincard {\r\n    margin-top: 10px;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9wcmljZW1hbmFnZW1lbnQvcHJpY2VtYW5hZ2VtZW50LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0lBQ0ksaUJBQWlCO0lBQ2pCLGtCQUFrQjtBQUN0Qjs7QUFFQSxRQUFROztBQUdSO0lBQ0ksWUFBWTtBQUNoQjs7QUFDQTtJQUNJLGlCQUFpQjtBQUNyQjs7QUFDQTtJQUNJLGlCQUFpQjtBQUNyQjs7QUFDQTtJQUNJLGVBQWU7SUFDZixZQUFZO0FBQ2hCOztBQUNBOztHQUVHOztBQUVIO0lBQ0ksbUJBQW1CO0lBQ25CLGVBQWU7QUFDbkI7O0FBQ0E7SUFDSSxhQUFhO0lBQ2IsZ0JBQWdCO0lBQ2hCLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLFdBQVc7SUFDWCxnQkFBZ0I7SUFDaEIsWUFBWTtJQUNaLGlCQUFpQjtJQUNqQixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSx1QkFBdUI7SUFDdkIseUJBQXlCO0lBQ3pCLFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIsWUFBWTtJQUNaLG1CQUFtQjtBQUN2Qjs7QUFDQTtJQUNJLHVCQUF1QjtJQUN2Qix5QkFBeUI7SUFDekIsWUFBWTtJQUNaLGdCQUFnQjtJQUNoQixZQUFZO0lBQ1osbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksb0JBQW9CO0FBQ3hCOztBQUNBO0lBQ0ksa0JBQWtCO0FBQ3RCOztBQUNBO0lBQ0ksbUJBQW1CO0FBQ3ZCOztBQUNBO0lBQ0ksZ0JBQWdCO0FBQ3BCOztBQUNBO0lBQ0ksZ0JBQWdCO0FBQ3BCOztBQUNBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLGdCQUFnQjtBQUNwQjs7QUFDQTtJQUNJLG9CQUFvQjtJQUNwQixlQUFlO0lBQ2YsaUJBQWlCO0VBQ25COztBQUdBO0lBQ0UsZ0JBQWdCO0lBQ2hCLFlBQVk7SUFDWixZQUFZO0FBQ2hCOztBQUVFO0lBQ0UsZ0JBQWdCOztBQUVwQjs7QUFFQTtxRUFDcUU7O0FBQ3JFO0lBQ0k7UUFDSSxnQkFBZ0I7UUFDaEIsZUFBZTtJQUNuQjtJQUNBO1FBQ0ksZ0JBQWdCO1FBQ2hCLFdBQVc7SUFDZjs7O0FBR0o7SUFDSSxnQkFBZ0I7SUFDaEIsV0FBVztBQUNmO0FBQ0E7SUFDSSxnQkFBZ0I7QUFDcEI7QUFDQTtJQUNJLFdBQVc7SUFDWCxnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxXQUFXO0lBQ1gsZ0JBQWdCO0lBQ2hCLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLGdCQUFnQjtJQUNoQixnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxnQkFBZ0I7SUFDaEIsaUJBQWlCO0FBQ3JCO0FBQ0E7SUFDSSxpQkFBaUI7QUFDckI7QUFDQTtJQUNJLGlCQUFpQjtBQUNyQjtBQUNBOztBQUNBLEtBQUs7O0FBQ0w7SUFDSSxZQUFZO0lBQ1osbUJBQW1CO0FBQ3ZCOztBQUNBO0lBQ0ksbUJBQW1CO0lBQ25CLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLFlBQVk7SUFDWix3QkFBd0I7QUFDNUI7O0FBR0E7SUFDSSxnQkFBZ0I7QUFDcEIiLCJmaWxlIjoic3JjL2FwcC9jb21wb25lbnRzL3ByaWNlbWFuYWdlbWVudC9wcmljZW1hbmFnZW1lbnQuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5sYWJlbCB7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIGZvbnQtc2l6ZTogaW5pdGlhbDtcclxufVxyXG5cclxuLyogbmV3ICovXHJcblxyXG5cclxuLmNhcmQuY2FyZC1jYXNjYWRlIHtcclxuICAgIG1hcmdpbjogMTBweDtcclxufVxyXG4uYnV0dG9uLXNlY3Rpb24ge1xyXG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XHJcbn1cclxuLmNvbnRhaW5lci5jYXJkLnAtMi5tYi01IHtcclxuICAgIG1hcmdpbi10b3A6IC0zOXB4O1xyXG59XHJcbmlucHV0LmZvcm0tY29udHJvbC5hcHBseSB7XHJcbiAgICBtYXJnaW4tdG9wOiA2cHg7XHJcbiAgICBoZWlnaHQ6IDQ1cHg7XHJcbn1cclxuLyogLmNhcmQuY2FyZC1jYXNjYWRlLm5hcnJvd2VyLmJvZHktc2VjdGlvbiB7XHJcbiAgICBtYXJnaW4tdG9wOiAtMjBweDtcclxufSAqL1xyXG5cclxuLmZvcm0tZ3JvdXAuZGF0ZSB7XHJcbiAgICBtYXJnaW4tbGVmdDogLTExN3B4O1xyXG4gICAgbWFyZ2luLXRvcDogM3B4O1xyXG59XHJcbmg0LmNhcmQtaGVhZGVyLXRpdGxlLm1iLTMge1xyXG4gICAgcGFkZGluZzogMTBweDtcclxuICAgIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG59XHJcblxyXG5idXR0b24uYnRuLmJ0bi1wcmltYXJ5LnByZS1hcHBseSB7XHJcbiAgICB3aWR0aDogMTA3JTtcclxuICAgIG1hcmdpbi10b3A6IC0xcHg7XHJcbiAgICBoZWlnaHQ6IDQxcHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIG1hcmdpbi1sZWZ0OiAtMTBweDtcclxufVxyXG5cclxuLmlucHV0LWdyb3VwLXRleHQge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjY2VkNGRhO1xyXG4gICAgaGVpZ2h0OiA0MXB4O1xyXG4gICAgbWFyZ2luLXRvcDogLTFweDtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgIG1hcmdpbi1sZWZ0OiAtMTU4cHg7XHJcbn1cclxuLmlucHV0LWdyb3VwLXRleHQucHJle1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjY2VkNGRhO1xyXG4gICAgaGVpZ2h0OiA0MXB4O1xyXG4gICAgbWFyZ2luLXRvcDogLTFweDtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgIG1hcmdpbi1sZWZ0OiAtMTMzcHg7XHJcbn1cclxuXHJcbmlucHV0LmZvcm0tY29udHJvbC5vcmRlcjF7XHJcbiAgICBtYXJnaW4tbGVmdDogIC0xMTdweDtcclxufVxyXG5pbnB1dC5mb3JtLWNvbnRyb2wub3JkZXIye1xyXG4gICAgbWFyZ2luLWxlZnQ6IC05MnB4O1xyXG59XHJcbmxhYmVsLmNvbC1zbS0yLmNvbC1mb3JtLWxhYmVsLmFkbWluIHtcclxuICAgIG1hcmdpbi1yaWdodDogLTk2cHg7XHJcbn1cclxuLmNhcmQuY2FyZC1jYXNjYWRlLm5hcnJvd2VyLmJvZHktc2VjdGlvbi5tYXJnaW4ge1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxufVxyXG4uY2FyZC1ib2R5IHtcclxuICAgIG1hcmdpbi1sZWZ0OiA4cHg7XHJcbn1cclxuLmNhcmQucHJpY2UxIHtcclxuICAgIG1hcmdpbi10b3A6IDg4cHg7XHJcbiAgICBtYXJnaW4tbGVmdDogMTZweDtcclxuICAgIG1hcmdpbi1yaWdodDogMTZweDtcclxufVxyXG5cclxuLmNvbnRhaW5lci5wcmljZTIge1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxufVxyXG5cclxuLmNhcmQudXNlciB7XHJcbiAgICBtYXJnaW4tdG9wOiA5MnB4O1xyXG4gICAgbWFyZ2luLWxlZnQ6IDE2cHg7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDE2cHg7XHJcbn1cclxuXHJcbi5jb250YWluZXIudXNlcjEge1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxufVxyXG4uYnRuLmJ0bi1sZyB7XHJcbiAgICBwYWRkaW5nOiAxcmVtIDIuNHJlbTtcclxuICAgIGZvbnQtc2l6ZTogMTdweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIH1cclxuXHJcblxyXG4gIGJ1dHRvbi5idG4uYnRuLWJsb2NrLmNvcjEge1xyXG4gICAgbWFyZ2luLXRvcDogLTFweDtcclxuICAgIGhlaWdodDogNTNweDtcclxuICAgIHdpZHRoOiAyNzRweDtcclxufVxyXG5cclxuICBidXR0b24uYnRuLWJsb2NrLmJ0bi1sZy5jb3Ige1xyXG4gICAgbWFyZ2luLXRvcDogMjRweDtcclxuXHJcbn1cclxuXHJcbi8qIE1vYmlsZSBQb3J0cmFpdCBTaXplIHRvIE1vYmlsZSBMYW5kc2NhcGUgU2l6ZSAoZGV2aWNlcyBhbmQgYnJvd3NlcnMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0NzlweCkge1xyXG4gICAgLmZvcm0tZ3JvdXAuZGF0ZSB7XHJcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDBweDtcclxuICAgICAgICBtYXJnaW4tdG9wOiAzcHg7XHJcbiAgICB9XHJcbiAgICBzZWxlY3QuZm9ybS1jb250cm9sLnBlcmNlbnR7XHJcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDBweDtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgIH1cclxuICAgIFxyXG5cclxuaW5wdXQuZm9ybS1jb250cm9sLmNhbmNlbCB7XHJcbiAgICBtYXJnaW4tbGVmdDogMHB4O1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbn1cclxuaW5wdXQuZm9ybS1jb250cm9sLmFkbWluQ2FuY2Vse1xyXG4gICAgbWFyZ2luLWxlZnQ6IDBweDtcclxufVxyXG5idXR0b24uYnRuLmJ0bi1wcmltYXJ5LmFwcGx5IHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgbWFyZ2luLWxlZnQ6IDFweDtcclxufVxyXG5cclxuYnV0dG9uLmJ0bi5idG4tcHJpbWFyeS5wcmUtYXBwbHkge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBtYXJnaW4tbGVmdDogMXB4O1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxufVxyXG5cclxuLmlucHV0LWdyb3VwLXRleHQge1xyXG4gICAgbWFyZ2luLXRvcDogMTJweDtcclxuICAgIG1hcmdpbi1sZWZ0OiAwcHg7XHJcbn1cclxuXHJcbmlucHV0LmZvcm0tY29udHJvbC5vcmRlcjF7XHJcbiAgICBtYXJnaW4tdG9wOiAxM3B4O1xyXG4gICAgbWFyZ2luLWxlZnQ6IC0xcHg7XHJcbn1cclxuLmlucHV0LWdyb3VwLXRleHQucHJle1xyXG4gICAgbWFyZ2luLWxlZnQ6IC0xcHg7XHJcbn1cclxuaW5wdXQuZm9ybS1jb250cm9sLm9yZGVyMntcclxuICAgIG1hcmdpbi1sZWZ0OiAtMXB4O1xyXG59XHJcbn1cclxuLyogICovXHJcbi5pbnB1dC12ZW5kb3Ige1xyXG4gICAgaGVpZ2h0OiA1MHB4O1xyXG4gICAgYmFja2dyb3VuZDogI2ViZjRmOTtcclxufVxyXG4uY2FyZC1ib2R5LnZlbmRvcntcclxuICAgIHBhZGRpbmctcmlnaHQ6IDNyZW07XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDNyZW07XHJcbn1cclxuXHJcbmRpdiN2ZW5kb3Jyb3cge1xyXG4gICAgcGFkZGluZy10b3A6IDAuNXJlbTtcclxufVxyXG5cclxuc2VsZWN0LmZvcm0tY29udHJvbDpub3QoW3NpemVdKTpub3QoW211bHRpcGxlXSkge1xyXG4gICAgaGVpZ2h0OiA1MHB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjojZWJmNGY5OyA7XHJcbn1cclxuXHJcblxyXG5kaXYjbWFyZ2luY2FyZCB7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG59Il19 */");

/***/ }),

/***/ "./src/app/components/pricemanagement/pricemanagement.component.ts":
/*!*************************************************************************!*\
  !*** ./src/app/components/pricemanagement/pricemanagement.component.ts ***!
  \*************************************************************************/
/*! exports provided: PricemanagementComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PricemanagementComponent", function() { return PricemanagementComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_services_master_organisation_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/master-organisation.service */ "./src/app/services/master-organisation.service.ts");
/* harmony import */ var src_app_services_master_product_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/master-product.service */ "./src/app/services/master-product.service.ts");
/* harmony import */ var src_app_services_warehouse_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/services/warehouse.service */ "./src/app/services/warehouse.service.ts");
/* harmony import */ var src_app_model_vendor_product_price_management__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/model/vendor-product-price-management */ "./src/app/model/vendor-product-price-management.ts");
/* harmony import */ var src_app_model_user_product_price_management__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/model/user-product-price-management */ "./src/app/model/user-product-price-management.ts");
/* harmony import */ var src_app_services_master_paramters_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/services/master-paramters.service */ "./src/app/services/master-paramters.service.ts");
/* harmony import */ var src_app_services_price_management_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/services/price-management.service */ "./src/app/services/price-management.service.ts");
/* harmony import */ var src_app_services_country_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/services/country.service */ "./src/app/services/country.service.ts");
/* harmony import */ var src_app_model_pre_order_pre_order_margin_and_cancellation_charges_management__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! src/app/model/pre-order-pre-order-margin-and-cancellation-charges-management */ "./src/app/model/pre-order-pre-order-margin-and-cancellation-charges-management.ts");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");












let PricemanagementComponent = class PricemanagementComponent {
    constructor(service, priceManagementService, masterParametersService, warehouseService, masterProductsService, masterOrganisationService, toastr) {
        this.service = service;
        this.priceManagementService = priceManagementService;
        this.masterParametersService = masterParametersService;
        this.warehouseService = warehouseService;
        this.masterProductsService = masterProductsService;
        this.masterOrganisationService = masterOrganisationService;
        this.toastr = toastr;
        this.min = new Date();
        this.today = new Date();
        this.settings = {
            bigBanner: true,
            timePicker: true,
            format: 'dd-MM-yyyy',
            closeOnSelect: true,
            minDate: new Date(),
            yearStart: 2020,
            yearEnd: 2025,
            hours12: false,
            inline: true,
        };
        this.preOrderPriceManagementList = new Array();
        this.newVendorProductPriceManagementList = new Array();
        this.newVendorProductPriceManagementList1 = new Array();
        this.productNames = new Array();
        this.warehouseNames = new Array();
        this.selectedRegions = new Array();
        this.selectedStates = new Array();
        this.selectedCities = new Array();
        this.selectedWarehouse = new Array();
        this.warehouses = new Array();
        this.selectedRegions1 = new Array();
        this.selectedStates1 = new Array();
        this.selectedCities1 = new Array();
        this.selectedWarehouse1 = new Array();
        this.newWarehouseList = new Array();
    }
    ngOnInit() {
        this.today = new Date();
        this.dateTime = new Date();
        this.iteration = 'initial';
    }
    // --------- methods for Vendor Product Price  ------------
    vendorProductPrice() {
        this.newVendorProductPriceManagementList = null;
        this.masterOrganisationService.getVendorTypes()
            .subscribe((data) => {
            this.types = data;
            let c = this.service.getAllCountries();
            c.subscribe((data) => this.countries = data);
            this.vendorProductPriceManagement = new src_app_model_vendor_product_price_management__WEBPACK_IMPORTED_MODULE_5__["VendorProductPriceManagement"]();
            this.vendorProductPriceManagement.vendorTypeId = 0;
            this.vendorProductPriceManagement.vendorId = 0;
            this.vendorProductPriceManagement.productId = 0;
            this.warehouse1 = null;
            this.vendorProductPriceManagement.countryId = 101;
            this.onChangeCountry();
            this.masterProductsList = null;
            this.price = 0;
            this.dateTime = new Date();
            this.vendorProductPriceManagementList = null;
            this.iteration = 'vendorProductPrice';
        });
    }
    onChangeVendorType() {
        let org = this.masterOrganisationService.getVendorsForSelectedType(this.vendorProductPriceManagement.vendorTypeId);
        org.subscribe((data) => {
            this.masterOrganisationList = data;
            this.vendorProductPriceManagement.priceDateAndTime = this.dateTime;
        });
        this.vendorProductPriceManagement.vendorId = 0;
    }
    onBackClick() {
        this.ngOnInit();
    }
    onChangeCountry() {
        if (this.vendorProductPriceManagement) {
            this.service.getRegionsByCountryId(this.vendorProductPriceManagement.countryId)
                .subscribe(data => {
                this.regions = data;
                this.cities = null;
                if (this.regions == null) {
                    // alert("There are no states for this Country");
                    this.toastr.warning('There are no states for this Country...!', '', {
                        timeOut: 10000,
                        positionClass: 'toast-top-center',
                        progressBar: true,
                        progressAnimation: 'increasing'
                    });
                }
            });
        }
        else {
            this.states = null;
            this.cities = null;
        }
    }
    onChange() {
        this.vendorProductPriceManagement.priceDateAndTime = this.dateTime;
        if (this.vendorProductPriceManagement.stateId == 0 || this.vendorProductPriceManagement.stateId == null) {
            this.vendorProductPriceManagement.stateId = 0;
            this.vendorProductPriceManagement.cityId = 0;
            this.vendorProductPriceManagement.warehouseId = 0;
        }
        if (this.vendorProductPriceManagement.cityId == 0 || this.vendorProductPriceManagement.cityId == null) {
            this.vendorProductPriceManagement.cityId = 0;
            this.vendorProductPriceManagement.warehouseId = 0;
        }
        this.priceManagementService.getVendorProductPrice(this.vendorProductPriceManagement)
            .subscribe(data => {
            this.vendorProductPriceManagementList = data;
            if (this.vendorProductPriceManagementList == null) {
                // alert("no result found")
                this.toastr.warning('No Result Found...!', '', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
            }
        });
    }
    setForAll() {
        if (this.vendorProductPriceManagementList) {
            for (let v of this.vendorProductPriceManagementList) {
                v.priceValue = this.price;
            }
        }
    }
    onChangeDate(event) {
        console.log("updated" + this.dateTime);
    }
    onChangeVendor() {
        this.vendorProductPriceManagement.priceDateAndTime = this.dateTime;
        this.priceManagementService.getMasterProductsListForSelectedVendor(this.vendorProductPriceManagement)
            .subscribe(data => {
            this.masterProductsList = data;
        });
    }
    resetAll() {
        this.vendorProductPriceManagement.stateName = null;
        this.vendorProductPriceManagement.cityName = null;
        this.vendorProductPriceManagement.warehouseName = null;
    }
    onChangeProduct() {
        this.vendorProductPriceManagement.priceDateAndTime = this.dateTime;
        this.newVendorProductPriceManagementList = new Array();
        this.priceManagementService.getVendorProductPrice(this.vendorProductPriceManagement)
            .subscribe(data => {
            this.vendorProductPriceManagementList = data;
            this.oldVendorProductManagementList = this.vendorProductPriceManagementList;
            this.newVendorProductPriceManagementList = new Array();
            this.selectedRegions = new Array();
            this.selectedWarehouse = new Array();
            this.selectedStates = new Array();
            this.selectedCities = new Array();
            for (let v of this.oldVendorProductManagementList) {
                if (this.vendorProductPriceManagement.productId == v.masterProducts.productId) {
                    this.newVendorProductPriceManagementList.push(v);
                    this.selectedRegions.push(v.region);
                }
            }
            let unique2 = this.selectedRegions.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedRegions = unique2;
            this.vendorProductPriceManagementList = this.newVendorProductPriceManagementList;
            this.newVendorProductPriceManagementList1 = this.newVendorProductPriceManagementList;
            this.vendorProductPriceManagement.region = null;
            this.resetAll();
            if (this.newVendorProductPriceManagementList == null) {
                // alert("no result found")
                this.toastr.warning('No Result Found...!', '', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
            }
        });
    }
    onChangeFilter() {
        this.vendorProductPriceManagementList = this.newVendorProductPriceManagementList1;
        if (this.vendorProductPriceManagement.region != null) {
            if (this.vendorProductPriceManagement.stateName == null && this.vendorProductPriceManagement.cityName == null) {
                this.resetAll();
            }
            this.selectedStates = new Array();
            this.newVendorProductPriceManagementList = new Array();
            for (let v of this.vendorProductPriceManagementList) {
                if (v.region == this.vendorProductPriceManagement.region) {
                    this.newVendorProductPriceManagementList.push(v);
                    this.selectedStates.push(v.stateName);
                }
            }
            let unique2 = this.selectedStates.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedStates = unique2;
            this.vendorProductPriceManagementList = null;
            this.vendorProductPriceManagementList = this.newVendorProductPriceManagementList;
        }
        if (this.vendorProductPriceManagement.stateName != null) {
            this.selectedCities = new Array();
            this.newVendorProductPriceManagementList = new Array();
            for (let v of this.vendorProductPriceManagementList) {
                if (v.stateName == this.vendorProductPriceManagement.stateName) {
                    this.newVendorProductPriceManagementList.push(v);
                    this.selectedCities.push(v.cityName);
                }
            }
            let unique1 = this.selectedCities.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedCities = unique1;
            this.vendorProductPriceManagementList = null;
            this.vendorProductPriceManagementList = this.newVendorProductPriceManagementList;
        }
        if (this.vendorProductPriceManagement.cityName != null) {
            this.selectedWarehouse = new Array();
            this.newVendorProductPriceManagementList = new Array();
            for (let v of this.vendorProductPriceManagementList) {
                if (v.cityName == this.vendorProductPriceManagement.cityName) {
                    this.newVendorProductPriceManagementList.push(v);
                    this.selectedWarehouse.push(v.warehouseName);
                }
            }
            let unique3 = this.selectedWarehouse.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedWarehouse = unique3;
            this.vendorProductPriceManagementList = null;
            this.vendorProductPriceManagementList = this.newVendorProductPriceManagementList;
        }
        if (this.vendorProductPriceManagement.warehouseName != null) {
            this.newVendorProductPriceManagementList = new Array();
            for (let v of this.vendorProductPriceManagementList) {
                if (v.warehouseName == this.vendorProductPriceManagement.warehouseName) {
                    this.newVendorProductPriceManagementList.push(v);
                }
            }
            this.vendorProductPriceManagementList = null;
            this.vendorProductPriceManagementList = this.newVendorProductPriceManagementList;
        }
    }
    save() {
        if (this.vendorProductPriceManagementList != null) {
            for (let v of this.vendorProductPriceManagementList) {
                v.priceDateAndTime = this.dateTime;
            }
            this.priceManagementService.saveMultipleVendorPrice(this.vendorProductPriceManagementList)
                .subscribe((data) => {
                // alert(" multiple vendor price Saved !");
                this.toastr.success('Multiple Vendor Price Saved...!', '', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
                this.dateTime = null;
                this.vendorProductPrice();
            });
        }
    }
    // ---------- Methods for User Product Price ------------
    userPrices() {
        this.iteration = 'userPrices';
    }
    preOrdrClick() {
        let d = this.masterProductsService.getAllProducts();
        d.subscribe((data) => this.productsList = data);
        this.userProductPriceManagement = new src_app_model_user_product_price_management__WEBPACK_IMPORTED_MODULE_6__["UserProductPriceManagement"]();
        this.preOrderPriceManagementList = null;
        this.preOrderP = 0;
        this.productId = 0;
        this.date = new Date();
        this.dateTime = new Date();
        this.iteration = 'userProductPrice1';
    }
    onChangeDate1() {
        this.dateTime;
    }
    onChangeMasterProduct() {
        this.date = this.dateTime;
        this.priceManagementService.getWarehousesForSelectedProduct(this.productId)
            .subscribe((data) => {
            if (data == null) {
                // alert("No Warehouse Found for Selected Product !! Select another Product ")
                this.toastr.info('No Warehouse Found for Selected Product !! Select another Product...!', '', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
            }
            if (data != null) {
                this.warehouseList = data;
                this.selectedRegions1 = new Array();
                this.oldWarehouseList = this.warehouseList;
                for (let w of this.warehouseList) {
                    this.selectedRegions1.push(w.address.region);
                }
                let unique2 = this.selectedRegions1.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.selectedRegions1 = unique2;
                this.priceManagementService.getUserProductPriceManagement(this.productId, this.dateTime)
                    .subscribe((data) => {
                    this.warehouses = new Array();
                    this.userProductPriceManagement = data;
                    console.log(this.userProductPriceManagement);
                    this.preOrderPriceManagementList = this.userProductPriceManagement.preOrderPriceManagementDtoList;
                    console.log(this.preOrderPriceManagementList);
                    for (let w of this.userProductPriceManagement.warehouseList) {
                        this.warehouses.push(w.warehouseName);
                    }
                    this.paramId = 0;
                    this.region = null;
                    this.stateName = null;
                    this.cityName = null;
                    this.warehouseName = null;
                });
            }
        });
    }
    onChangeFilter1() {
        this.warehouseList = this.oldWarehouseList;
        console.log(this.userProductPriceManagement);
        if (this.region != null) {
            this.newWarehouseList = new Array();
            this.selectedStates1 = new Array();
            this.selectedCities1 = new Array();
            for (let w of this.warehouseList) {
                if (w.address.state.region == this.region) {
                    this.userProductPriceManagement.region = this.region;
                    this.newWarehouseList.push(w);
                    this.selectedStates1.push(w.address.state.stateName);
                    this.selectedCities1.push(w.address.city.cityName);
                }
            }
            this.userProductPriceManagement.warehouseList = this.newWarehouseList;
            let s1 = this.selectedStates1.filter((item1, i1, ar1) => ar1.indexOf(item1) === i1);
            this.selectedStates1 = s1;
            let c1 = this.selectedCities1.filter((item, i, ar) => ar.indexOf(item) === i);
            this.selectedCities1 = c1;
            this.warehouseList = null;
            this.warehouseList = this.newWarehouseList;
        }
        if (this.stateName != null) {
            this.newWarehouseList = new Array();
            this.selectedCities1 = new Array();
            for (let w of this.warehouseList) {
                if (w.address.state.stateName == this.stateName) {
                    this.userProductPriceManagement.stateId = w.address.state.stateId;
                    this.newWarehouseList.push(w);
                    if (w.address.city.stateId == w.address.state.stateId) {
                        this.selectedCities1.push(w.address.city.cityName);
                    }
                }
            }
            this.userProductPriceManagement.warehouseList = this.newWarehouseList;
            this.warehouseList = null;
            this.warehouseList = this.newWarehouseList;
            let unique1 = this.selectedCities1.filter((item1, i1, ar1) => ar1.indexOf(item1) === i1);
            this.selectedCities1 = unique1;
        }
        if (this.cityName != null) {
            this.selectedWarehouse1 = new Array();
            this.newWarehouseList = new Array();
            for (let w of this.warehouseList) {
                if (w.address.city.cityName == this.cityName) {
                    this.userProductPriceManagement.cityId = w.address.city.cityId;
                    this.newWarehouseList.push(w);
                    this.selectedWarehouse1.push(w.warehouseName);
                }
            }
            this.userProductPriceManagement.warehouseList = this.newWarehouseList;
            let unique1 = this.selectedWarehouse1.filter((item1, i1, ar1) => ar1.indexOf(item1) === i1);
            this.selectedWarehouse1 = unique1;
            this.warehouseList = null;
            this.warehouseList = this.newWarehouseList;
        }
        if (this.warehouseName != null) {
            this.newWarehouseList = new Array();
            for (let w of this.warehouseList) {
                if (w.warehouseName == this.warehouseName) {
                    this.newWarehouseList.push(w);
                }
            }
            this.userProductPriceManagement.warehouseList = this.newWarehouseList;
            this.warehouseList = null;
            this.warehouseList = this.newWarehouseList;
        }
    }
    setForAllPreOrder() {
        if (this.preOrderPriceManagementList) {
            for (let p of this.preOrderPriceManagementList) {
                p.preOrderPrice = this.preOrderP;
            }
        }
    }
    saveUserPrice() {
        this.userProductPriceManagement.preOrderPriceManagementDtoList = this.preOrderPriceManagementList;
        this.priceManagementService.saveUserPrice(this.userProductPriceManagement)
            .subscribe((data) => {
            // alert("price Saved !");
            this.toastr.success('Price Saved Successfully...!', '', {
                timeOut: 10000,
                positionClass: 'toast-top-center',
                progressBar: true,
                progressAnimation: 'increasing'
            });
            this.ngOnInit();
        });
    }
    onNextClick() {
        this.iteration = "userProductPrice1";
    }
    onBackClick1() {
        this.iteration = "userProductPrice";
    }
    // -------- Margin And Cancellation Charges methods -----------
    marginAndCancellationCharges() {
        this.masterParametersService.getValueTypes()
            .subscribe((data) => {
            this.valueTypes = data;
            let d = this.masterProductsService.getAllProducts();
            d.subscribe((data) => this.productsList = data);
            this.dateForMargin = new Date();
            this.masterProducts = 0;
            this.iteration = 'marginAndCancellationCharges';
        });
    }
    onChangeDateForMargin(event) {
        console.log("date : " + this.dateForMargin);
    }
    onChangeProductForMargin() {
        this.priceManagementService.getPreOrderMarginAndCancellationCharges(this.masterProducts)
            .subscribe((data) => {
            this.preOrderMarginAndCancellationCharges1 = data;
            console.log(data);
            if (this.preOrderMarginAndCancellationCharges1 != null) {
                this.preOrderMarginAndCancellationCharges = null;
                this.preOrderMarginAndCancellationCharges1.date = this.dateForMargin;
            }
            if (this.preOrderMarginAndCancellationCharges1 == null) {
                // alert("Price is not set ")
                this.toastr.warning('Price is not set...!', 'Margin & Cancellation Charges', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
                this.preOrderMarginAndCancellationCharges = new src_app_model_pre_order_pre_order_margin_and_cancellation_charges_management__WEBPACK_IMPORTED_MODULE_10__["PreOrderPreOrderMarginAndCancellationChargesManagement"]();
                this.preOrderMarginAndCancellationCharges.masterProducts = this.masterProducts;
                this.preOrderMarginAndCancellationCharges.date = this.dateForMargin;
                this.preOrderMarginAndCancellationCharges1 = null;
            }
        });
    }
    saveMarginAndCancellationCharges() {
        if (this.preOrderMarginAndCancellationCharges) {
            this.priceManagementService.savePreOrderMarginAndCancellationCharges(this.preOrderMarginAndCancellationCharges)
                .subscribe((data) => {
                // alert("save");
                this.toastr.success('Updated Successfully...!', '', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
                this.preOrderMarginAndCancellationCharges = null;
                this.dateForMargin = new Date();
                this.masterProducts = 0;
                this.iteration = 'marginAndCancellationCharges';
            });
        }
        if (this.preOrderMarginAndCancellationCharges1) {
            this.priceManagementService.savePreOrderMarginAndCancellationCharges(this.preOrderMarginAndCancellationCharges1)
                .subscribe((data) => {
                // alert("save");
                this.toastr.success('Updated Successfully...!', '', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
                this.preOrderMarginAndCancellationCharges1 = null;
                this.dateForMargin = new Date();
                this.masterProducts = 0;
                this.iteration = 'marginAndCancellationCharges';
            });
        }
    }
    onBackClick2() {
        this.iteration = 'initial';
    }
    onBackClick3() {
        this.iteration = 'userPrices';
    }
};
PricemanagementComponent.ctorParameters = () => [
    { type: src_app_services_country_service__WEBPACK_IMPORTED_MODULE_9__["CountryService"] },
    { type: src_app_services_price_management_service__WEBPACK_IMPORTED_MODULE_8__["PriceManagementService"] },
    { type: src_app_services_master_paramters_service__WEBPACK_IMPORTED_MODULE_7__["MasterParamtersService"] },
    { type: src_app_services_warehouse_service__WEBPACK_IMPORTED_MODULE_4__["WarehouseService"] },
    { type: src_app_services_master_product_service__WEBPACK_IMPORTED_MODULE_3__["MasterProductService"] },
    { type: src_app_services_master_organisation_service__WEBPACK_IMPORTED_MODULE_2__["MasterOrganisationService"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_11__["ToastrService"] }
];
PricemanagementComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-pricemanagement',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./pricemanagement.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/pricemanagement/pricemanagement.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./pricemanagement.component.css */ "./src/app/components/pricemanagement/pricemanagement.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_country_service__WEBPACK_IMPORTED_MODULE_9__["CountryService"], src_app_services_price_management_service__WEBPACK_IMPORTED_MODULE_8__["PriceManagementService"], src_app_services_master_paramters_service__WEBPACK_IMPORTED_MODULE_7__["MasterParamtersService"],
        src_app_services_warehouse_service__WEBPACK_IMPORTED_MODULE_4__["WarehouseService"], src_app_services_master_product_service__WEBPACK_IMPORTED_MODULE_3__["MasterProductService"],
        src_app_services_master_organisation_service__WEBPACK_IMPORTED_MODULE_2__["MasterOrganisationService"], ngx_toastr__WEBPACK_IMPORTED_MODULE_11__["ToastrService"]])
], PricemanagementComponent);



/***/ }),

/***/ "./src/app/components/reconciliation/reconciliation.component.css":
/*!************************************************************************!*\
  !*** ./src/app/components/reconciliation/reconciliation.component.css ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n/* new css */\r\n\r\n.card.card-cascade.narrower.body-section {\r\n    margin-top: -37px;\r\n}\r\n\r\nh4.card-header-title.mb-3 {\r\n    padding: 10px;\r\n    font-weight: 500;\r\n    margin-top: 10px;\r\n}\r\n\r\n.row.v1 {\r\n    margin-top: 16px;\r\n    margin-left: 1px;\r\n    margin-right: 5px;\r\n}\r\n\r\nh4.filter{\r\n    font-weight: bold;\r\n}\r\n\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n  }\r\n\r\n.card.recon {\r\n    margin-top: 90px;\r\n    margin-left: 16px;\r\n    margin-right: 16px;\r\n}\r\n\r\n.container.recon2 {\r\n    margin-top: 10px;\r\n}\r\n\r\n/*  */\r\n\r\nselect.form-control:not([size]):not([multiple]) {\r\n    height: 50px;\r\n    background-color:#ebf4f9; ;\r\n}\r\n\r\n.input-vendor {\r\n    height: 50px;\r\n    background: #ebf4f9;\r\n}\r\n\r\n.card-header.view.view-cascade.gradient-card-header.blue-gradient {\r\n    font-size: 21px;\r\n    font-weight: bold;\r\n    color: #fff!important;\r\n    text-align: center;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9yZWNvbmNpbGlhdGlvbi9yZWNvbmNpbGlhdGlvbi5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxZQUFZOztBQUVaO0lBQ0ksaUJBQWlCO0FBQ3JCOztBQUNBO0lBQ0ksYUFBYTtJQUNiLGdCQUFnQjtJQUNoQixnQkFBZ0I7QUFDcEI7O0FBQ0E7SUFDSSxnQkFBZ0I7SUFDaEIsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtBQUNyQjs7QUFDQTtJQUNJLGlCQUFpQjtBQUNyQjs7QUFDQTtJQUNJLG9CQUFvQjtJQUNwQixlQUFlO0lBQ2YsaUJBQWlCO0VBQ25COztBQUVGO0lBQ0ksZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxnQkFBZ0I7QUFDcEI7O0FBRUEsS0FBSzs7QUFDTDtJQUNJLFlBQVk7SUFDWix3QkFBd0I7QUFDNUI7O0FBQ0E7SUFDSSxZQUFZO0lBQ1osbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksZUFBZTtJQUNmLGlCQUFpQjtJQUNqQixxQkFBcUI7SUFDckIsa0JBQWtCO0FBQ3RCIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9yZWNvbmNpbGlhdGlvbi9yZWNvbmNpbGlhdGlvbi5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbi8qIG5ldyBjc3MgKi9cclxuXHJcbi5jYXJkLmNhcmQtY2FzY2FkZS5uYXJyb3dlci5ib2R5LXNlY3Rpb24ge1xyXG4gICAgbWFyZ2luLXRvcDogLTM3cHg7XHJcbn1cclxuaDQuY2FyZC1oZWFkZXItdGl0bGUubWItMyB7XHJcbiAgICBwYWRkaW5nOiAxMHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcclxuICAgIG1hcmdpbi10b3A6IDEwcHg7XHJcbn1cclxuLnJvdy52MSB7XHJcbiAgICBtYXJnaW4tdG9wOiAxNnB4O1xyXG4gICAgbWFyZ2luLWxlZnQ6IDFweDtcclxuICAgIG1hcmdpbi1yaWdodDogNXB4O1xyXG59XHJcbmg0LmZpbHRlcntcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcbi5idG4uYnRuLWxnIHtcclxuICAgIHBhZGRpbmc6IDFyZW0gMi40cmVtO1xyXG4gICAgZm9udC1zaXplOiAxN3B4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgfVxyXG5cclxuLmNhcmQucmVjb24ge1xyXG4gICAgbWFyZ2luLXRvcDogOTBweDtcclxuICAgIG1hcmdpbi1sZWZ0OiAxNnB4O1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xyXG59XHJcblxyXG4uY29udGFpbmVyLnJlY29uMiB7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG59XHJcblxyXG4vKiAgKi9cclxuc2VsZWN0LmZvcm0tY29udHJvbDpub3QoW3NpemVdKTpub3QoW211bHRpcGxlXSkge1xyXG4gICAgaGVpZ2h0OiA1MHB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjojZWJmNGY5OyA7XHJcbn1cclxuLmlucHV0LXZlbmRvciB7XHJcbiAgICBoZWlnaHQ6IDUwcHg7XHJcbiAgICBiYWNrZ3JvdW5kOiAjZWJmNGY5O1xyXG59XHJcblxyXG4uY2FyZC1oZWFkZXIudmlldy52aWV3LWNhc2NhZGUuZ3JhZGllbnQtY2FyZC1oZWFkZXIuYmx1ZS1ncmFkaWVudCB7XHJcbiAgICBmb250LXNpemU6IDIxcHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIGNvbG9yOiAjZmZmIWltcG9ydGFudDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxufSJdfQ== */");

/***/ }),

/***/ "./src/app/components/reconciliation/reconciliation.component.ts":
/*!***********************************************************************!*\
  !*** ./src/app/components/reconciliation/reconciliation.component.ts ***!
  \***********************************************************************/
/*! exports provided: ReconciliationComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReconciliationComponent", function() { return ReconciliationComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_services_end_user_recconcilation_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/end-user-recconcilation.service */ "./src/app/services/end-user-recconcilation.service.ts");
/* harmony import */ var src_app_model_select__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/model/select */ "./src/app/model/select.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");





let ReconciliationComponent = class ReconciliationComponent {
    constructor(reconcilationService, route) {
        this.reconcilationService = reconcilationService;
        this.route = route;
        this.date = new Date("01/01/2019");
        this.date1 = new Date();
        this.ranges = new Array();
        this.range = "-1";
    }
    ngOnInit() {
        let iteration = this.route.snapshot.queryParamMap.get('iteration');
        this.populateRange();
        this.customDate = false;
        if (iteration == "accountSummary") {
            this.referer = "account";
            this.vendorrecon();
        }
        else {
            this.iteration = 'initial';
        }
    }
    populateRange() {
        let range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_3__["Select"];
        range.id = "1";
        range.value = "Custom Range";
        this.ranges[0] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_3__["Select"];
        range.id = "2";
        range.value = "15 Days";
        this.ranges[1] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_3__["Select"];
        range.id = "3";
        range.value = "Current Month";
        this.ranges[2] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_3__["Select"];
        range.id = "4";
        range.value = "3 Months";
        this.ranges[3] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_3__["Select"];
        range.id = "5";
        range.value = "6 Months";
        this.ranges[4] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_3__["Select"];
        range.id = "6";
        range.value = "1 Year";
        this.ranges[5] = range;
    }
    /*Vendor reconcilation */
    deliveryReport() {
        this.linkName = "DELIVERY";
        this.reconcilationService.getVendorReconcilation()
            .subscribe((data) => {
            console.log(data);
            this.reconciliation = data;
            this.vendors = new Array();
            for (let r of this.reconciliation) {
                this.vendors.push(r.warehouse.masterOrganisation.organisationName);
            }
            this.oldReconciliation = Array();
            this.oldReconciliation = this.reconciliation;
            let unique = this.vendors.filter((item, i, ar) => ar.indexOf(item) === i);
            this.vendors = unique;
            this.range = -1;
            this.iteration = 'vendorreconciliation';
        });
    }
    vendorrecon() {
        this.linkName = "RECON";
        this.reconcilationService.getAllVendorAccountSummaryDetails()
            .subscribe((data) => {
            console.log(data);
            this.accountSummaryFilteredList = data;
            this.oldAccountSummaryFilteredList = data;
            this.vendors = new Array();
            for (let r of this.accountSummaryFilteredList) {
                this.vendors.push(r.vendorName);
            }
            let unique = this.vendors.filter((item, i, ar) => ar.indexOf(item) === i);
            this.vendors = unique;
            this.iteration = "accountSummary";
        });
    }
    onRecSelectVendor() {
        console.log("----");
        this.accountSummaryFilteredList = this.oldAccountSummaryFilteredList;
        console.log(this.accountSummaryFilteredList);
        if (this.vendorName != null) {
            this.page = 1;
            this.newReconciliation = new Array();
            for (let r of this.accountSummaryFilteredList) {
                if (r.vendorName == this.vendorName) {
                    this.newReconciliation.push(r);
                }
            }
            this.accountSummaryFilteredList = this.newReconciliation;
            this.reconcilationListVendorFiltered = new Array();
            this.reconcilationListVendorFiltered = this.newReconciliation;
        }
    }
    // on change Vendor 
    onSelectVendor() {
        this.reconciliation = this.oldReconciliation;
        if (this.vendorName != null) {
            this.page = 1;
            this.newReconciliation = new Array();
            for (let r of this.reconciliation) {
                if (r.warehouse.masterOrganisation.organisationName == this.vendorName) {
                    this.newReconciliation.push(r);
                }
            }
            this.reconciliation = this.newReconciliation;
            this.reconcilationListVendorFiltered = new Array();
            this.reconcilationListVendorFiltered = this.newReconciliation;
        }
    }
    // on select Date Range
    onSelectRangeForVendor() {
        if (this.range != "-1") {
            if (this.range == "1") {
                this.customDate = true;
            }
            else {
                this.customDate = false;
            }
            this.filterListForVendorRecon(this.range);
        }
    }
    filterListForVendorRecon(option) {
        if (this.linkName == "RECON") {
            if (this.reconcilationListVendorFiltered != null) {
                console.log("here");
                this.accountSummaryFilteredList = this.reconcilationListVendorFiltered;
            }
            if (this.reconcilationListVendorFiltered == null) {
                console.log("null");
                console.log(this.oldAccountSummaryFilteredList);
                this.accountSummaryFilteredList = this.oldAccountSummaryFilteredList;
            }
        }
        else {
            if (this.reconcilationListVendorFiltered != null) {
                this.reconciliation = this.reconcilationListVendorFiltered;
            }
            if (this.reconcilationListVendorFiltered == null) {
                this.reconciliation = this.oldReconciliation;
            }
        }
        this.newReconciliation = new Array();
        let startDate = new Date();
        let endDate = new Date();
        if (option == "1") {
            startDate = this.date;
            endDate = this.date1;
        }
        else if (option == "2") {
            startDate.setDate(endDate.getDate() - 15);
        }
        else if (option == "3") {
            startDate.setDate(endDate.getDate() - 30);
        }
        else if (option == "4") {
            startDate.setDate(endDate.getDate() - 90);
        }
        else if (option == "5") {
            startDate.setDate(endDate.getDate() - 180);
        }
        else if (option == "6") {
            startDate.setDate(endDate.getDate() - 360);
        }
        console.log(startDate);
        if (this.linkName == "RECON") {
            for (let r of this.accountSummaryFilteredList) {
                let dt = new Date(r.transactionDate);
                if (dt >= startDate && dt <= endDate) {
                    this.newReconciliation.push(r);
                }
            }
            this.accountSummaryFilteredList = this.newReconciliation;
        }
        else {
            for (let r of this.reconciliation) {
                let dt = new Date(r.reconciliationDate);
                if (dt >= startDate && dt <= endDate) {
                    this.newReconciliation.push(r);
                }
            }
            this.reconciliation = this.newReconciliation;
        }
        this.totalCost = this.getTotalCost();
    }
    // on change Date
    onDateChangeForVendorRecon() {
        this.filterListForVendorRecon("1");
    }
    /*End User reconcilation */
    enduserreconciliation() {
        this.reconcilationService.getEndUserReconcilation()
            .subscribe((data) => {
            this.accountSummaryList = data;
            this.oldAccountSummary = this.accountSummaryList;
            this.setAllFilterData(this.accountSummaryList);
            this.customDate = false;
            this.range = -1;
            this.iteration = 'end';
        });
    }
    setAllFilterData(accountSummaryList) {
        this.region = null;
        this.state = null;
        this.city = null;
        this.office = null;
        this.customerId = null;
        this.regionList = new Array();
        this.regionList.push("All Region");
        this.stateList = new Array();
        this.stateList.push("All State");
        this.cityList = new Array();
        this.cityList.push("All City");
        this.officeList = new Array();
        this.officeList.push("All Office");
        this.uniqueUserIdList = new Array();
        this.uniqueUserIdList.push("All Customers");
        for (let ac of accountSummaryList) {
            if (ac.user.region != null) {
                this.regionList.push(ac.user.region);
            }
            if (ac.user.state != null) {
                this.stateList.push(ac.user.state);
            }
            if (ac.user.city != null) {
                this.cityList.push(ac.user.city);
            }
            if (ac.user.office != null) {
                this.officeList.push(ac.user.office);
            }
            this.uniqueUserIdList.push(ac.user.uniqueUserId);
        }
        let unique1 = this.regionList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
        this.regionList = unique1;
        unique1 = this.stateList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
        this.stateList = unique1;
        unique1 = this.cityList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
        this.cityList = unique1;
        unique1 = this.officeList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
        this.officeList = unique1;
        unique1 = this.uniqueUserIdList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
        this.uniqueUserIdList = unique1;
    }
    onRegion() {
        if (this.region != null) {
            this.customDate = false;
            this.range = -1;
            if (this.region != "All Region") {
                this.accountSummaryList = this.oldAccountSummary;
                this.newAccountSummary = new Array();
                this.state = null;
                this.city = null;
                this.office = null;
                this.customerId = null;
                this.stateList = new Array();
                this.stateList.push("All State");
                this.cityList = new Array();
                this.cityList.push("All City");
                this.officeList = new Array();
                this.officeList.push("All Office");
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                for (let ac of this.accountSummaryList) {
                    if (ac.user.region == this.region) {
                        this.newAccountSummary.push(ac);
                        this.uniqueUserIdList.push(ac.uniqueUserId);
                        if (ac.user.state != null) {
                            this.stateList.push(ac.user.state);
                        }
                        if (ac.user.city != null) {
                            this.cityList.push(ac.user.city);
                        }
                        if (ac.user.officeName != null) {
                            this.officeList.push(ac.user.officeName);
                        }
                    }
                }
                this.accountSummaryList = this.newAccountSummary;
                let unique1 = this.uniqueUserIdList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.uniqueUserIdList = unique1;
                unique1 = this.stateList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.stateList = unique1;
                unique1 = this.cityList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.cityList = unique1;
                unique1 = this.officeList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.officeList = unique1;
            }
            if (this.region == "All Region") {
                this.accountSummaryList = this.oldAccountSummary;
                this.state = null;
                this.city = null;
                this.office = null;
                this.customerId = null;
                this.stateList = new Array();
                this.stateList.push("All State");
                this.cityList = new Array();
                this.cityList.push("All City");
                this.officeList = new Array();
                this.officeList.push("All Office");
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                this.newAccountSummary = new Array();
                for (let ac of this.accountSummaryList) {
                    this.newAccountSummary.push(ac);
                }
                this.accountSummaryList = this.newAccountSummary;
            }
            this.accountSummaryFilteredList = new Array();
            this.accountSummaryFilteredList = this.accountSummaryList;
        }
    }
    onState() {
        if (this.state != null) {
            this.page2 = 1;
            this.customDate = false;
            this.range = -1;
            if (this.state != "All State") {
                this.city = null;
                this.office = null;
                this.customerId = null;
                this.accountSummaryList = this.oldAccountSummary;
                this.newAccountSummary = new Array();
                this.cityList = new Array();
                this.cityList.push("All City");
                this.officeList = new Array();
                this.officeList.push("All Office");
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                for (let ac of this.accountSummaryList) {
                    if (ac.user.state == this.state) {
                        this.newAccountSummary.push(ac);
                        this.uniqueUserIdList.push(ac.user.uniqueUserId);
                        if (ac.user.city != null) {
                            this.cityList.push(ac.user.city);
                        }
                        if (ac.user.officeName != null) {
                            this.officeList.push(ac.user.officeName);
                        }
                    }
                }
                this.accountSummaryList = this.newAccountSummary;
                let unique1 = this.uniqueUserIdList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.uniqueUserIdList = unique1;
                unique1 = this.cityList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.cityList = unique1;
                unique1 = this.officeList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.officeList = unique1;
            }
            if (this.state == "All State" && this.region != "All Region") {
                this.accountSummaryList = this.oldAccountSummary;
                this.city = null;
                this.office = null;
                this.customerId = null;
                this.cityList = new Array();
                this.cityList.push("All City");
                this.officeList = new Array();
                this.officeList.push("All Office");
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                this.newAccountSummary = new Array();
                for (let ac of this.accountSummaryList) {
                    if (this.region == ac.user.region) {
                        this.newAccountSummary.push(ac);
                    }
                }
                this.accountSummaryList = this.newAccountSummary;
            }
            this.accountSummaryFilteredList = new Array();
            this.accountSummaryFilteredList = this.accountSummaryList;
        }
    }
    onCity() {
        if (this.city != null) {
            this.customDate = false;
            this.range = -1;
            if (this.city != "All City") {
                this.office = null;
                this.customerId = null;
                this.accountSummaryList = this.oldAccountSummary;
                this.newAccountSummary = new Array();
                this.officeList = new Array();
                this.officeList.push("All Office");
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                for (let ac of this.accountSummaryList) {
                    if (ac.user.city == this.city) {
                        this.newAccountSummary.push(ac);
                        this.uniqueUserIdList.push(ac.user.uniqueUserId);
                        if (ac.user.officeName != null) {
                            this.officeList.push(ac.user.officeName);
                        }
                    }
                }
                this.accountSummaryList = this.newAccountSummary;
                let unique1 = this.uniqueUserIdList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.uniqueUserIdList = unique1;
                unique1 = this.officeList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.officeList = unique1;
            }
            if (this.city == "All City" && this.region != "All Region" && this.state != "All State") {
                this.accountSummaryList = this.oldAccountSummary;
                this.office = null;
                this.customerId = null;
                this.officeList = new Array();
                this.officeList.push("All Office");
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                this.newAccountSummary = new Array();
                for (let ac of this.accountSummaryList) {
                    if (this.region == ac.user.region && ac.user.state == this.state) {
                        this.newAccountSummary.push(ac);
                    }
                }
                this.accountSummaryList = this.newAccountSummary;
            }
            this.accountSummaryFilteredList = new Array();
            this.accountSummaryFilteredList = this.accountSummaryList;
        }
    }
    onOffice() {
        if (this.office != null) {
            this.customDate = false;
            this.range = -1;
            if (this.office != "All Office") {
                this.customerId = null;
                this.accountSummaryList = this.oldAccountSummary;
                this.newAccountSummary = new Array();
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                for (let ac of this.accountSummaryList) {
                    if (ac.user.officeName == this.office) {
                        this.newAccountSummary.push(ac);
                        this.uniqueUserIdList.push(ac.user.uniqueUserId);
                    }
                }
                this.accountSummaryList = this.newAccountSummary;
                let unique1 = this.uniqueUserIdList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.uniqueUserIdList = unique1;
            }
            if (this.office == "All Office" && this.region != "All Region" && this.state != "All State" && this.city != "All Office") {
                this.accountSummaryList = this.oldAccountSummary;
                this.customerId = null;
                this.uniqueUserIdList = new Array();
                this.uniqueUserIdList.push("All Customers");
                this.newAccountSummary = new Array();
                for (let ac of this.accountSummaryList) {
                    if (this.region == ac.user.region && ac.user.state == this.state && ac.user.city == this.city) {
                        this.newAccountSummary.push(ac);
                    }
                }
                this.accountSummaryList = this.newAccountSummary;
            }
            this.accountSummaryFilteredList = new Array();
            this.accountSummaryFilteredList = this.accountSummaryList;
        }
    }
    onCustomerId() {
        if (this.customerId != null) {
            this.page1 = 1;
            this.customDate = false;
            this.range = -1;
            if (this.customerId != "All Customers") {
                this.accountSummaryList = this.oldAccountSummary;
                this.newAccountSummary = new Array();
                for (let ac of this.accountSummaryList) {
                    if (ac.user.uniqueUserId == this.customerId) {
                        this.newAccountSummary.push(ac);
                    }
                }
                this.accountSummaryList = this.newAccountSummary;
            }
            if (this.customerId == "All Customers" && this.office != "All Office" && this.region != "All Region" && this.state != "All State" && this.city != "All Office") {
                this.accountSummaryList = this.oldAccountSummary;
                this.newAccountSummary = new Array();
                for (let ac of this.accountSummaryList) {
                    if (this.region == ac.user.region && ac.user.state == this.state && ac.user.city == this.city && ac.user.officeName == this.office) {
                        this.newAccountSummary.push(ac);
                    }
                }
                this.accountSummaryList = this.newAccountSummary;
            }
            this.accountSummaryFilteredList = new Array();
            this.accountSummaryFilteredList = this.accountSummaryList;
        }
    }
    /*Corporate User reconcilation */
    corporateuserreconciliation() {
        this.reconcilationService.getCorporateUserReconcilation()
            .subscribe((data) => {
            this.accountSummaryList = data;
            if (this.accountSummaryList != null) {
                this.oldAccountSummary = this.accountSummaryList;
                console.log(this.accountSummaryList);
                this.setAllFilterData(this.accountSummaryList);
                console.log(this.accountSummaryList);
            }
            else {
            }
            this.customDate = false;
            this.range = -1;
            this.iteration = 'corporate';
        });
    }
    // on select Date Range
    onSelectRangeForEndUserRecon() {
        if (this.range != "-1") {
            if (this.range == "1") {
                this.customDate = true;
            }
            else {
                this.customDate = false;
            }
            this.filterListForEndUserRecon(this.range);
        }
    }
    filterListForEndUserRecon(option) {
        if (this.accountSummaryFilteredList == null) {
            this.accountSummaryList = this.oldAccountSummary;
        }
        else if (this.accountSummaryFilteredList != null) {
            this.accountSummaryList = this.accountSummaryFilteredList;
        }
        this.newAccountSummary = new Array();
        let startDate = new Date();
        let endDate = new Date();
        if (option == "1") {
            startDate = this.date;
            endDate = this.date1;
        }
        else if (option == "2") {
            startDate.setDate(endDate.getDate() - 15);
        }
        else if (option == "3") {
            startDate.setDate(endDate.getDate() - 30);
        }
        else if (option == "4") {
            startDate.setDate(endDate.getDate() - 90);
        }
        else if (option == "5") {
            startDate.setDate(endDate.getDate() - 180);
        }
        else if (option == "6") {
            startDate.setDate(endDate.getDate() - 360);
        }
        console.log(startDate);
        for (let e of this.accountSummaryList) {
            let dt = new Date(e.transactionDate);
            if (dt >= startDate && dt <= endDate) {
                this.newAccountSummary.push(e);
            }
        }
        this.accountSummaryList = this.newAccountSummary;
        //this.totalCost = this.getTotalCost();
    }
    // on change Date
    onDateChangeForEndUserRecon() {
        this.filterListForEndUserRecon("1");
    }
    getTotalCost() {
        // return this.reconciliationFilteredList.map(t => t.adjustmentAmount).reduce((acc, value) => acc + value, 0);
    }
    onVendorBack() {
        this.iteration = 'initial';
    }
    onEnduserBack() {
        this.iteration = 'initial';
    }
    onEndStart() {
        console.log(this.date);
    }
};
ReconciliationComponent.ctorParameters = () => [
    { type: src_app_services_end_user_recconcilation_service__WEBPACK_IMPORTED_MODULE_2__["EndUserRecconcilationService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_4__["ActivatedRoute"] }
];
ReconciliationComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-reconciliation',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./reconciliation.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/reconciliation/reconciliation.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./reconciliation.component.css */ "./src/app/components/reconciliation/reconciliation.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_end_user_recconcilation_service__WEBPACK_IMPORTED_MODULE_2__["EndUserRecconcilationService"], _angular_router__WEBPACK_IMPORTED_MODULE_4__["ActivatedRoute"]])
], ReconciliationComponent);



/***/ }),

/***/ "./src/app/components/rewardmanagement/rewardmanagement.component.css":
/*!****************************************************************************!*\
  !*** ./src/app/components/rewardmanagement/rewardmanagement.component.css ***!
  \****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n.row.v1 {\r\n    margin-top: 16px;\r\n    margin-left: 3px;\r\n    margin-right: 5px;\r\n}\r\n\r\nh4.card-header-title.mb-3{\r\n    padding: 10px;\r\n    margin-top: 10px;\r\n}\r\n\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n  }\r\n\r\nlabel {\r\n    font-weight: bold;\r\n    font-size: initial;\r\n    word-break: break-all;\r\n    margin-top: 7px;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9yZXdhcmRtYW5hZ2VtZW50L3Jld2FyZG1hbmFnZW1lbnQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0E7SUFDSSxnQkFBZ0I7SUFDaEIsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixnQkFBZ0I7QUFDcEI7O0FBQ0E7SUFDSSxvQkFBb0I7SUFDcEIsZUFBZTtJQUNmLGlCQUFpQjtFQUNuQjs7QUFFRjtJQUNJLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIscUJBQXFCO0lBQ3JCLGVBQWU7QUFDbkIiLCJmaWxlIjoic3JjL2FwcC9jb21wb25lbnRzL3Jld2FyZG1hbmFnZW1lbnQvcmV3YXJkbWFuYWdlbWVudC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbi5yb3cudjEge1xyXG4gICAgbWFyZ2luLXRvcDogMTZweDtcclxuICAgIG1hcmdpbi1sZWZ0OiAzcHg7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDVweDtcclxufVxyXG5cclxuaDQuY2FyZC1oZWFkZXItdGl0bGUubWItM3tcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG59XHJcbi5idG4uYnRuLWxnIHtcclxuICAgIHBhZGRpbmc6IDFyZW0gMi40cmVtO1xyXG4gICAgZm9udC1zaXplOiAxN3B4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgfVxyXG4gIFxyXG5sYWJlbCB7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIGZvbnQtc2l6ZTogaW5pdGlhbDtcclxuICAgIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcclxuICAgIG1hcmdpbi10b3A6IDdweDtcclxufSJdfQ== */");

/***/ }),

/***/ "./src/app/components/rewardmanagement/rewardmanagement.component.ts":
/*!***************************************************************************!*\
  !*** ./src/app/components/rewardmanagement/rewardmanagement.component.ts ***!
  \***************************************************************************/
/*! exports provided: RewardmanagementComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RewardmanagementComponent", function() { return RewardmanagementComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_services_master_paramters_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/master-paramters.service */ "./src/app/services/master-paramters.service.ts");
/* harmony import */ var src_app_model_rewardconfig__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/model/rewardconfig */ "./src/app/model/rewardconfig.ts");
/* harmony import */ var src_app_model_select__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/model/select */ "./src/app/model/select.ts");
/* harmony import */ var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ngx-bootstrap/modal */ "./node_modules/ngx-bootstrap/modal/fesm2015/ngx-bootstrap-modal.js");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");







let RewardmanagementComponent = class RewardmanagementComponent {
    constructor(masterService, modalService, toastr) {
        this.masterService = masterService;
        this.modalService = modalService;
        this.toastr = toastr;
        this.ranges = new Array();
        this.range = "-1";
        this.date = new Date("01/01/2019");
        this.date1 = new Date();
    }
    openModalWithClass(template) {
        this.modalRef = this.modalService.show(template, Object.assign({}, { class: 'gray modal-800px' }));
    }
    ngOnInit() {
        this.populateRewardConfigurationData();
        this.iterationName = 1;
    }
    populateRewardConfigurationData() {
        this.masterService.getRewardPointConfiguration("INDIVIDUAL_USER")
            .subscribe((data) => {
            this.individualRewardConfigurationList = data;
            console.log(data);
        });
        this.masterService.getRewardPointConfiguration("CORPORATE_USER")
            .subscribe((data) => {
            this.corporateRewardConfigurationList = data;
            console.log(data);
        });
    }
    onUserReward() {
        this.masterService.getUserRewardPoints()
            .subscribe((data) => {
            this.userRewarpoints = data;
            console.log(data);
        });
        this.iterationName = 4;
    }
    onRewardConfig() {
        this.iterationName++;
    }
    onUserRewardDetails() {
        this.iterationName++;
    }
    onSave() {
        this.iterationName--;
    }
    onuserLink(userRewardPointId) {
        this.customDate = false;
        this.populateRange();
        this.userRewarpoints.forEach(element => {
            if (userRewardPointId == element.userRewardPointId) {
                this.userRewardInfo = element;
                console.log(element);
            }
        });
        this.userRewardInfo;
        this.masterService.getRewardPointHistory(userRewardPointId)
            .subscribe((data) => {
            this.rewardPointHistoryList = data;
            console.log(data);
            this.orgRewardPointHistory = Array();
            this.orgRewardPointHistory = this.rewardPointHistoryList;
            this.range = -1;
        });
        this.iterationName++;
    }
    populateRange() {
        let range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_4__["Select"];
        range.id = "1";
        range.value = "Custom Range";
        this.ranges[0] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_4__["Select"];
        range.id = "2";
        range.value = "15 Days";
        this.ranges[1] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_4__["Select"];
        range.id = "3";
        range.value = "Current Month";
        this.ranges[2] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_4__["Select"];
        range.id = "4";
        range.value = "3 Months";
        this.ranges[3] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_4__["Select"];
        range.id = "5";
        range.value = "6 Months";
        this.ranges[4] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_4__["Select"];
        range.id = "6";
        range.value = "1 Year";
        this.ranges[5] = range;
    }
    // on select Date Range
    onSelectRangeForRewardPoints() {
        if (this.range != "-1") {
            if (this.range == "1") {
                this.customDate = true;
            }
            else {
                this.customDate = false;
            }
            this.filterListForRewardPointsHistory(this.range);
        }
    }
    filterListForRewardPointsHistory(option) {
        this.rewardPointHistoryList = this.orgRewardPointHistory;
        let startDate = new Date();
        let endDate = new Date();
        if (option == "1") {
            startDate = this.date;
            endDate = this.date1;
        }
        else if (option == "2") {
            startDate.setDate(endDate.getDate() - 15);
        }
        else if (option == "3") {
            startDate.setDate(endDate.getDate() - 30);
        }
        else if (option == "4") {
            startDate.setDate(endDate.getDate() - 90);
        }
        else if (option == "5") {
            startDate.setDate(endDate.getDate() - 180);
        }
        else if (option == "6") {
            startDate.setDate(endDate.getDate() - 360);
        }
        console.log(startDate);
        let tmpRewardHistory = new Array();
        for (let r of this.rewardPointHistoryList) {
            let dt = new Date(r.updatedDate);
            if (dt >= startDate && dt <= endDate) {
                tmpRewardHistory.push(r);
            }
        }
        this.rewardPointHistoryList = tmpRewardHistory;
    }
    onDateChangeForRewardPointHistory() {
        this.filterListForRewardPointsHistory("1");
    }
    addRewardsConfiguration() {
        this.rewardconfig = new src_app_model_rewardconfig__WEBPACK_IMPORTED_MODULE_3__["Rewardconfig"]();
        this.rewardconfig.criteria = -1;
        this.rewardconfig.userType = -1;
        this.masterService.getParametersByParamType("USER_TYPE")
            .subscribe((data) => {
            this.userTypes = data;
            console.log(data);
        });
        this.masterService.getParametersByParamType("REWARD_MEMBERSHIP_TYPES")
            .subscribe((data) => {
            this.rewardCategories = data;
            console.log(data);
        });
        this.iterationName++;
    }
    onAddRewardsConfiguration() {
        if (this.rewardconfig.rewardConfigId != 'undefined') { //Edit
            this.masterService.saveRewardConfiguration(this.rewardconfig)
                .subscribe((data) => {
                // alert("Updated successfully");
                this.toastr.success('Saved Successfully...! ', 'Individaul Reward Configuration', {
                    timeOut: 1000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
                this.populateRewardConfigurationData();
                this.iterationName--;
            });
        }
        else { //Add new
            this.masterService.getHighestRewardPointConfiguration(this.rewardconfig.userType).subscribe((data) => {
                let heighestRewardPoint = data;
                if (heighestRewardPoint < this.rewardconfig.lowerLimit - 1) {
                    this.masterService.saveRewardConfiguration(this.rewardconfig)
                        .subscribe((data) => {
                        // alert("Updated successfully");
                        this.toastr.success('Saved Successfully...! ', 'Corporate Reward Configuration', {
                            timeOut: 1000,
                            positionClass: 'toast-top-center',
                            progressBar: true,
                            progressAnimation: 'increasing'
                        });
                        this.populateRewardConfigurationData();
                        this.iterationName--;
                    });
                }
                else {
                    alert("Records need to inserted at the last");
                }
            });
        }
    }
    editRewardConfig(rewardconfig) {
        this.masterService.getParametersByParamType("USER_TYPE")
            .subscribe((data) => {
            this.userTypes = data;
            console.log(data);
        });
        this.masterService.getParametersByParamType("REWARD_MEMBERSHIP_TYPES")
            .subscribe((data) => {
            this.rewardCategories = data;
            console.log(data);
        });
        this.rewardconfig = rewardconfig;
        console.log(rewardconfig);
        this.iterationName++;
    }
    deleteRewardConfig(rewardConfigId) {
        console.log(rewardConfigId);
        this.masterService.removeRewardPointConfiguration(rewardConfigId)
            .subscribe((data) => {
            // alert("Deleted successfully");
            console.log(data);
            this.populateRewardConfigurationData();
        });
    }
    onBackClick() {
        this.iterationName--;
    }
};
RewardmanagementComponent.ctorParameters = () => [
    { type: src_app_services_master_paramters_service__WEBPACK_IMPORTED_MODULE_2__["MasterParamtersService"] },
    { type: ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_5__["BsModalService"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_6__["ToastrService"] }
];
RewardmanagementComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-rewardmanagement',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./rewardmanagement.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/rewardmanagement/rewardmanagement.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./rewardmanagement.component.css */ "./src/app/components/rewardmanagement/rewardmanagement.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_master_paramters_service__WEBPACK_IMPORTED_MODULE_2__["MasterParamtersService"], ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_5__["BsModalService"],
        ngx_toastr__WEBPACK_IMPORTED_MODULE_6__["ToastrService"]])
], RewardmanagementComponent);



/***/ }),

/***/ "./src/app/components/showeventslist/showeventslist.component.css":
/*!************************************************************************!*\
  !*** ./src/app/components/showeventslist/showeventslist.component.css ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n  }\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9zaG93ZXZlbnRzbGlzdC9zaG93ZXZlbnRzbGlzdC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTtJQUNJLG9CQUFvQjtJQUNwQixlQUFlO0lBQ2YsaUJBQWlCO0VBQ25CIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9zaG93ZXZlbnRzbGlzdC9zaG93ZXZlbnRzbGlzdC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbi5idG4uYnRuLWxnIHtcclxuICAgIHBhZGRpbmc6IDFyZW0gMi40cmVtO1xyXG4gICAgZm9udC1zaXplOiAxN3B4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgfSJdfQ== */");

/***/ }),

/***/ "./src/app/components/showeventslist/showeventslist.component.ts":
/*!***********************************************************************!*\
  !*** ./src/app/components/showeventslist/showeventslist.component.ts ***!
  \***********************************************************************/
/*! exports provided: ShoweventslistComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShoweventslistComponent", function() { return ShoweventslistComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_services_alertmanagement_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/alertmanagement.service */ "./src/app/services/alertmanagement.service.ts");
/* harmony import */ var src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/alert.service */ "./src/app/services/alert.service.ts");
/* harmony import */ var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ngx-bootstrap/modal */ "./node_modules/ngx-bootstrap/modal/fesm2015/ngx-bootstrap-modal.js");





let ShoweventslistComponent = class ShoweventslistComponent {
    constructor(alertManService, alertService, modalService) {
        this.alertManService = alertManService;
        this.alertService = alertService;
        this.modalService = modalService;
    }
    ngOnInit() {
        let alertEvents = this.alertManService.getAllAlertEvents();
        alertEvents.subscribe((data) => {
            this.events = data;
            console.log(data);
        });
    }
    deleteEvent(eventId) {
        this.delete(eventId);
    }
    openModalWithClass(template) {
        this.modalRef = this.modalService.show(template, Object.assign({}, { class: 'gray modal-800px' }));
    }
    delete(eventId) {
        this.alertService.deleteEvent(eventId).subscribe(data => {
            console.log("====Data==>>>>" + JSON.stringify(data));
            console.log(JSON.stringify(data) === JSON.stringify("success"));
            if (JSON.stringify(data) === JSON.stringify("success")) {
                this.refresh();
            }
            else {
                console.log("Failure");
            }
        });
    }
    refresh() {
        window.location.reload();
    }
};
ShoweventslistComponent.ctorParameters = () => [
    { type: src_app_services_alertmanagement_service__WEBPACK_IMPORTED_MODULE_2__["AlertmanagementService"] },
    { type: src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_3__["AlertService"] },
    { type: ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_4__["BsModalService"] }
];
ShoweventslistComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-showeventslist',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./showeventslist.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/showeventslist/showeventslist.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./showeventslist.component.css */ "./src/app/components/showeventslist/showeventslist.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_alertmanagement_service__WEBPACK_IMPORTED_MODULE_2__["AlertmanagementService"], src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_3__["AlertService"], ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_4__["BsModalService"]])
], ShoweventslistComponent);



/***/ }),

/***/ "./src/app/components/usermanagment/usermanagment.component.css":
/*!**********************************************************************!*\
  !*** ./src/app/components/usermanagment/usermanagment.component.css ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\nlabel {\r\n    font-weight: bold;\r\n    font-size: initial;\r\n    word-break: break-all;\r\n    margin-top: 7px;\r\n}\r\n\r\n.form-group.row {\r\n    display: -webkit-box;\r\n    display: flex;\r\n    -webkit-box-align: center;\r\n            align-items: center;\r\n    -webkit-box-pack: center;\r\n            justify-content: center;\r\n}\r\n\r\n/* new css */\r\n\r\n.card.card-cascade.narrower.body-section {\r\n    margin-top: -35px;\r\n}\r\n\r\n.card.card-cascade.narrower.body-section.premium {\r\n    margin-top: -106px;\r\n}\r\n\r\n.modal-body {\r\n    margin-left: 10px;\r\n}\r\n\r\na.link\r\n{\r\n    border-bottom: 2px solid;\r\n    text-decoration: none;\r\n    color:#4285F4\r\n}\r\n\r\nh4.card-header-title.mb-3 {\r\n    padding: 10px;\r\n    font-weight: bold;\r\n    margin-top: 10px;\r\n}\r\n\r\n.row.v1 {\r\n    margin-top: 16px;\r\n    margin-left: 3px;\r\n    margin-right: 5px;\r\n}\r\n\r\n.inactiveLink {\r\n    pointer-events: none;\r\n    cursor: default;\r\n }\r\n\r\nlabel.select {\r\n    color: chocolate;\r\n}\r\n\r\nlabel.color{\r\n    color: chocolate;\r\n}\r\n\r\n.modal-body.premium {\r\n    margin-left: 10px;\r\n    margin-right: 10px;\r\n}\r\n\r\nh4.filter {\r\n    font-weight: bold;\r\n}\r\n\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n  }\r\n\r\nselect.form-control.ng-pristine.ng-invalid.is-invalid {\r\n    background-image: none;\r\n  }\r\n\r\n/*  */\r\n\r\n.input-vendor {\r\n    height: 50px;\r\n    background: #ebf4f9;\r\n}\r\n\r\n.card-body.vendor{\r\n    padding-right: 3rem;\r\n    padding-left: 3rem;\r\n}\r\n\r\ndiv#vendorrow {\r\n    padding-top: 0.5rem;\r\n}\r\n\r\nselect.form-control:not([size]):not([multiple]) {\r\n    height: 50px;\r\n    background-color:#ebf4f9; ;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy91c2VybWFuYWdtZW50L3VzZXJtYW5hZ21lbnQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0E7SUFDSSxpQkFBaUI7SUFDakIsa0JBQWtCO0lBQ2xCLHFCQUFxQjtJQUNyQixlQUFlO0FBQ25COztBQUVBO0lBQ0ksb0JBQWE7SUFBYixhQUFhO0lBQ2IseUJBQW1CO1lBQW5CLG1CQUFtQjtJQUNuQix3QkFBdUI7WUFBdkIsdUJBQXVCO0FBQzNCOztBQUVBLFlBQVk7O0FBQ1o7SUFDSSxpQkFBaUI7QUFDckI7O0FBQ0E7SUFDSSxrQkFBa0I7QUFDdEI7O0FBQ0E7SUFDSSxpQkFBaUI7QUFDckI7O0FBQ0E7O0lBRUksd0JBQXdCO0lBQ3hCLHFCQUFxQjtJQUNyQjtBQUNKOztBQUVBO0lBQ0ksYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixnQkFBZ0I7QUFDcEI7O0FBQ0E7SUFDSSxnQkFBZ0I7SUFDaEIsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtBQUNyQjs7QUFDQTtJQUNJLG9CQUFvQjtJQUNwQixlQUFlO0NBQ2xCOztBQUVEO0lBQ0ksZ0JBQWdCO0FBQ3BCOztBQUNBO0lBQ0ksZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLGtCQUFrQjtBQUN0Qjs7QUFDQTtJQUNJLGlCQUFpQjtBQUNyQjs7QUFDQTtJQUNJLG9CQUFvQjtJQUNwQixlQUFlO0lBQ2YsaUJBQWlCO0VBQ25COztBQUVBO0lBQ0Usc0JBQXNCO0VBQ3hCOztBQUVBLEtBQUs7O0FBRVA7SUFDSSxZQUFZO0lBQ1osbUJBQW1CO0FBQ3ZCOztBQUNBO0lBQ0ksbUJBQW1CO0lBQ25CLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLFlBQVk7SUFDWix3QkFBd0I7QUFDNUIiLCJmaWxlIjoic3JjL2FwcC9jb21wb25lbnRzL3VzZXJtYW5hZ21lbnQvdXNlcm1hbmFnbWVudC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmxhYmVsIHtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgZm9udC1zaXplOiBpbml0aWFsO1xyXG4gICAgd29yZC1icmVhazogYnJlYWstYWxsO1xyXG4gICAgbWFyZ2luLXRvcDogN3B4O1xyXG59XHJcblxyXG4uZm9ybS1ncm91cC5yb3cge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxufVxyXG5cclxuLyogbmV3IGNzcyAqL1xyXG4uY2FyZC5jYXJkLWNhc2NhZGUubmFycm93ZXIuYm9keS1zZWN0aW9uIHtcclxuICAgIG1hcmdpbi10b3A6IC0zNXB4O1xyXG59XHJcbi5jYXJkLmNhcmQtY2FzY2FkZS5uYXJyb3dlci5ib2R5LXNlY3Rpb24ucHJlbWl1bSB7XHJcbiAgICBtYXJnaW4tdG9wOiAtMTA2cHg7XHJcbn1cclxuLm1vZGFsLWJvZHkge1xyXG4gICAgbWFyZ2luLWxlZnQ6IDEwcHg7XHJcbn1cclxuYS5saW5rXHJcbntcclxuICAgIGJvcmRlci1ib3R0b206IDJweCBzb2xpZDtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgIGNvbG9yOiM0Mjg1RjRcclxufVxyXG5cclxuaDQuY2FyZC1oZWFkZXItdGl0bGUubWItMyB7XHJcbiAgICBwYWRkaW5nOiAxMHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG59XHJcbi5yb3cudjEge1xyXG4gICAgbWFyZ2luLXRvcDogMTZweDtcclxuICAgIG1hcmdpbi1sZWZ0OiAzcHg7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDVweDtcclxufVxyXG4uaW5hY3RpdmVMaW5rIHtcclxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xyXG4gICAgY3Vyc29yOiBkZWZhdWx0O1xyXG4gfVxyXG5cclxubGFiZWwuc2VsZWN0IHtcclxuICAgIGNvbG9yOiBjaG9jb2xhdGU7XHJcbn1cclxubGFiZWwuY29sb3J7XHJcbiAgICBjb2xvcjogY2hvY29sYXRlO1xyXG59XHJcblxyXG4ubW9kYWwtYm9keS5wcmVtaXVtIHtcclxuICAgIG1hcmdpbi1sZWZ0OiAxMHB4O1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xyXG59XHJcbmg0LmZpbHRlciB7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG4uYnRuLmJ0bi1sZyB7XHJcbiAgICBwYWRkaW5nOiAxcmVtIDIuNHJlbTtcclxuICAgIGZvbnQtc2l6ZTogMTdweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIH1cclxuXHJcbiAgc2VsZWN0LmZvcm0tY29udHJvbC5uZy1wcmlzdGluZS5uZy1pbnZhbGlkLmlzLWludmFsaWQge1xyXG4gICAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcclxuICB9XHJcblxyXG4gIC8qICAqL1xyXG4gIFxyXG4uaW5wdXQtdmVuZG9yIHtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIGJhY2tncm91bmQ6ICNlYmY0Zjk7XHJcbn1cclxuLmNhcmQtYm9keS52ZW5kb3J7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAzcmVtO1xyXG4gICAgcGFkZGluZy1sZWZ0OiAzcmVtO1xyXG59XHJcblxyXG5kaXYjdmVuZG9ycm93IHtcclxuICAgIHBhZGRpbmctdG9wOiAwLjVyZW07XHJcbn1cclxuXHJcbnNlbGVjdC5mb3JtLWNvbnRyb2w6bm90KFtzaXplXSk6bm90KFttdWx0aXBsZV0pIHtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6I2ViZjRmOTsgO1xyXG59Il19 */");

/***/ }),

/***/ "./src/app/components/usermanagment/usermanagment.component.ts":
/*!*********************************************************************!*\
  !*** ./src/app/components/usermanagment/usermanagment.component.ts ***!
  \*********************************************************************/
/*! exports provided: UsermanagmentComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UsermanagmentComponent", function() { return UsermanagmentComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_services_dashboard_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/dashboard.service */ "./src/app/services/dashboard.service.ts");
/* harmony import */ var src_app_model_user__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/model/user */ "./src/app/model/user.ts");
/* harmony import */ var src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/services/usermanagement.service */ "./src/app/services/usermanagement.service.ts");
/* harmony import */ var src_app_services_country_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/services/country.service */ "./src/app/services/country.service.ts");
/* harmony import */ var src_app_model_address__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/model/address */ "./src/app/model/address.ts");
/* harmony import */ var src_app_services_master_organisation_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/services/master-organisation.service */ "./src/app/services/master-organisation.service.ts");
/* harmony import */ var src_app_model_master_organisation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/model/master-organisation */ "./src/app/model/master-organisation.ts");
/* harmony import */ var src_app_services_warehouse_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/services/warehouse.service */ "./src/app/services/warehouse.service.ts");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");
/* harmony import */ var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ngx-bootstrap/modal */ "./node_modules/ngx-bootstrap/modal/fesm2015/ngx-bootstrap-modal.js");
/* harmony import */ var src_app_services_credit_limit_management_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! src/app/services/credit-limit-management.service */ "./src/app/services/credit-limit-management.service.ts");
/* harmony import */ var src_app_model_credit_limit_management__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! src/app/model/credit-limit-management */ "./src/app/model/credit-limit-management.ts");














let UsermanagmentComponent = class UsermanagmentComponent {
    constructor(dashboardService, masterOrganisationService, userService, countryService, warehouseService, toastr, modalService, creditLimitManagementSerivce) {
        this.dashboardService = dashboardService;
        this.masterOrganisationService = masterOrganisationService;
        this.userService = userService;
        this.countryService = countryService;
        this.warehouseService = warehouseService;
        this.toastr = toastr;
        this.modalService = modalService;
        this.creditLimitManagementSerivce = creditLimitManagementSerivce;
        this.collection = [];
        this.edited = false;
        this.activatevendortab = false;
        this.endusertab = false;
        this.warehousetab = false;
        this.corporateusertab = false;
        this.newVendorUserList = new Array();
        this.selectedCitiesForVendorUser = new Array();
        this.selectedStatesForVendorUser = new Array();
        this.selectedRegionForVendorUser = new Array();
        this.selectedVendorForVendorUser = new Array();
        this.newWarehouseUserList = new Array();
        this.selectedCitiesForWarehouseUser = new Array();
        this.selectedStatesForWarehouseUser = new Array();
        this.selectedRegionForWarehouseUser = new Array();
        this.selectedVendorForWarehouseUser = new Array();
        this.newEndUserList = new Array();
        this.selectedCitiesForEndUser = new Array();
        this.selectedStatesForEndUser = new Array();
        this.selectedRegionForEndUser = new Array();
        this.newCorporateUserList = new Array();
        this.selectedCitiesForCorporateUser = new Array();
        this.selectedStatesForCorporateUser = new Array();
        this.selectedRegionForCorporateUser = new Array();
        this.selectedUserTypes = new Array();
        this.oldSelectedUserTypes = new Array();
    }
    openModalWithClass(template) {
        this.modalRef = this.modalService.show(template, Object.assign({}, { class: 'gray modal-800px' }));
    }
    onModalClick() {
        this.iterationName = 'Requested_Premium_Members_List';
    }
    onBackSelected() {
        this.iterationName = 'SHOW_ALL_USERS';
    }
    ngOnInit() {
        // this.activatevendortab =true;
        // sessionStorage.tabselected =1;
        this.address = new src_app_model_address__WEBPACK_IMPORTED_MODULE_6__["Address"]();
        this.dashboardService.showAllRegisteredUsers().subscribe((res) => {
            /* --- Vendor user */
            this.vendorUserList = res["ROLE_VENDOR_USER"];
            if (this.vendorUserList != null) {
                this.oldVendorUserList = this.vendorUserList;
                console.log(this.vendorUserList);
                for (let vu of this.vendorUserList) {
                    this.selectedRegionForVendorUser.push(vu.address.state.region);
                    this.selectedStatesForVendorUser.push(vu.address.state.stateName);
                    this.selectedCitiesForVendorUser.push(vu.address.city.cityName);
                    if (vu.masterOrganisation != null) {
                        this.selectedVendorForVendorUser.push(vu.masterOrganisation.organisationName);
                    }
                }
                let unique1 = this.selectedRegionForVendorUser.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.selectedRegionForVendorUser = unique1;
                let sunique1 = this.selectedStatesForVendorUser.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.selectedStatesForVendorUser = sunique1;
                let cunique1 = this.selectedCitiesForVendorUser.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.selectedCitiesForVendorUser = cunique1;
                let vu1 = this.selectedVendorForVendorUser.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.selectedVendorForVendorUser = vu1;
                this.oldSelectedRegionForVendorUser = this.selectedRegionForVendorUser;
            }
            /* --- Warehouse user */
            this.warehouseUserList = res["ROLE_WAREHOUSE_USER"];
            if (this.warehouseUserList != null) {
                this.oldWarehouseUserList = this.warehouseUserList;
                for (let wu of this.warehouseUserList) {
                    this.selectedRegionForWarehouseUser.push(wu.address.state.region);
                    if (wu.masterOrganisation != null) {
                        this.selectedVendorForWarehouseUser.push(wu.masterOrganisation.organisationName);
                    }
                }
                let unique2 = this.selectedRegionForWarehouseUser.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.selectedRegionForWarehouseUser = unique2;
                let wu1 = this.selectedVendorForWarehouseUser.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.selectedVendorForWarehouseUser = wu1;
                this.oldSelectedRegionForWarehouseUser = this.selectedRegionForWarehouseUser;
            }
            /* --- End user */
            this.endUserList = res["ROLE_USER"];
            if (this.endUserList != null) {
                this.oldEndUserList = this.endUserList;
                for (let eu of this.endUserList) {
                    this.selectedRegionForEndUser.push(eu.address.state.region);
                }
                let unique3 = this.selectedRegionForEndUser.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.selectedRegionForEndUser = unique3;
            }
            /* --- Corporate User --- */
            this.corporateUserList = res["ROLE_CORPORATE_USER"];
            if (this.corporateUserList != null) {
                this.oldCorporateUserList = this.corporateUserList;
                for (let cu of this.corporateUserList) {
                    this.selectedRegionForCorporateUser.push(cu.address.state.region);
                    this.selectedUserTypes.push(cu.userType);
                }
                let unique4 = this.selectedRegionForCorporateUser.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.selectedRegionForCorporateUser = unique4;
                let unique5 = this.selectedUserTypes.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.selectedUserTypes = unique5;
                this.oldSelectedUserTypes = this.selectedUserTypes;
                console.log(this.corporateUserList);
            }
        });
        this.iterationName = "SHOW_ALL_USERS";
    }
    tabClick() {
        if (sessionStorage.tabselected == 1) {
            this.activatevendortab = true;
        }
        else if (sessionStorage.tabselected == 2) {
            this.warehousetab = true;
        }
        else if (sessionStorage.tabselected == 3) {
            this.endusertab = true;
        }
        else if (sessionStorage.tabselected == 4) {
            this.corporateusertab = true;
        }
        console.log(sessionStorage.tabselected);
    }
    selecttab(tab) {
        sessionStorage.tabselected = tab;
        console.log(tab);
    }
    onShowUser(userInfo) {
        this.user = new src_app_model_user__WEBPACK_IMPORTED_MODULE_3__["User"]();
        this.user = userInfo;
        console.log("User Is: " + JSON.stringify(userInfo));
        this.iterationName = "SHOW_USER_INFO";
    }
    onBackClick() {
        if (this.iterationName == "EDIT_USER_SHOW_USER_INFO") {
            this.iterationName = "SHOW_USER_INFO";
        }
        else {
            this.iterationName = "SHOW_ALL_USERS";
        }
        // this.tabClick()
    }
    editUserFromList(userObj) {
        this.user = new src_app_model_user__WEBPACK_IMPORTED_MODULE_3__["User"];
        this.user = userObj;
        console.log(this.user);
        console.log(this.user.userRole);
        console.log(this.user.address);
        let c = this.countryService.getCountriesForRegistration();
        c.subscribe((data) => {
            this.countries = data;
        });
        if (this.user.address != null) {
            let s = this.countryService.getStates(this.user.address.countryId);
            s.subscribe((data) => this.states = data);
            let b = this.countryService.getCities(this.user.address.stateId);
            b.subscribe((data) => this.cities = data);
        }
        else {
            this.user.address = this.address;
        }
        if (this.user.userRole == "ROLE_VENDOR_USER") {
            this.address = this.user.address;
            this.masterOrganisationService.showOrganizations("INTERNAL VENDOR")
                .subscribe((data) => {
                this.vendors = data;
                console.log(data);
            });
            this.iterationName = "EDIT_VENDOR_USER";
        }
        else if (this.user.userRole == "ROLE_WAREHOUSE_USER") {
            this.address = this.user.address;
            this.masterOrganisationService.getInternalVendorType()
                .subscribe((data) => {
                this.types = new Array();
                this.types.push(data);
                this.masterOrganisationService.getVendorsForSelectedType(this.user.vendorTypeId)
                    .subscribe((data) => this.masterOrganisationList = data);
                console.log(this.masterOrganisationList);
                this.warehouseService.getWarehouseForSelectedVendor(this.user.vendorId)
                    .subscribe((data) => this.warehouseList = data);
                this.iterationName = "EDIT_WAREHOUSE_USER";
            });
        }
        else if (this.user.userRole == "ROLE_CORPORATE_USER") {
            this.address = this.user.address;
            this.userService.getSupervisorTypes()
                .subscribe(data => {
                this.supervisorTypes = data;
                console.log(this.user);
            });
            let v = this.masterOrganisationService.showOrganizations("CORPORATE");
            v.subscribe((data) => this.corporates = data);
            this.masterOrganisationService.getVendor(this.user.organisationId)
                .subscribe(data => {
                this.corporate = data;
                console.log(this.corporate);
                this.regions = new Array();
                this.corporateStates = new Array();
                this.corporateStates.length = 0;
                this.corporateCities = new Array();
                this.corporateCities.length = 0;
                for (let i = 0; i < this.corporate.offices.length; i++) {
                    let reg = this.corporate.offices[i].officeRegion;
                    this.regions.push(reg);
                    let state = this.corporate.offices[i].state;
                    this.corporateStates.push(state);
                    let city = this.corporate.offices[i].city;
                    this.corporateCities.push(city);
                    //this.user.corporateRegion = reg;
                    //this.user.corporateStateId = state;
                    //this.user.corporateCityId = city;
                }
                let uniqueRegion = this.regions.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.regions = uniqueRegion;
                let uniqueStates = this.corporateStates.filter((item, i, ar) => ar.indexOf(item) === i);
                this.corporateStates = uniqueStates;
                let uniqueCities = this.corporateCities.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.corporateCities = uniqueCities;
                this.corporateOffices = this.corporate.offices;
            });
            this.iterationName = "EDIT_CORPORATE_USER";
        }
        else {
            this.iterationName = "EDIT_USER_SHOW_ALL_USERS";
        }
    }
    editUserFromShow() {
        console.log(this.user);
        this.iterationName = "EDIT_USER_SHOW_USER_INFO";
    }
    addCorporate() {
        this.corporate = new src_app_model_master_organisation__WEBPACK_IMPORTED_MODULE_8__["MasterOrganisation"]();
        this.address = new src_app_model_address__WEBPACK_IMPORTED_MODULE_6__["Address"]();
        let c = this.countryService.getAllCountries();
        c.subscribe((data) => this.countries = data);
        let d = this.masterOrganisationService.getVendorTypes();
        d.subscribe((data) => this.types = data);
        this.iterationName = "ADD_CORPORATE";
    }
    onChangeCorporate() {
        console.log(this.user.organisationId);
        this.regions = null;
        this.masterOrganisationService.getVendor(this.user.organisationId)
            .subscribe(data => {
            this.corporate = data;
            console.log(this.corporate);
            this.regions = new Array();
            for (let i = 0; i < this.corporate.offices.length; i++) {
                let reg = this.corporate.offices[i].officeRegion;
                this.regions.push(reg);
            }
            let uniqueRegion = this.regions.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.regions = uniqueRegion;
            this.corporateStates = null;
            this.corporateCities = null;
        });
        this.userService.getSupervisorTypes()
            .subscribe(data => {
            this.supervisorTypes = data;
            // console.log(this.supervisorTypes)
        });
    }
    onChangeCorporateAccess() {
        if (this.user.corporateAccess == 'COUNTRY_WISE') {
            this.user.corporateRegion = null;
            this.user.corporateStateId = null;
            this.user.corporateCityId = null;
        }
        if (this.user.corporateAccess == 'REGION_WISE') {
            this.user.corporateStateId = null;
            this.user.corporateCityId = null;
        }
        if (this.user.corporateAccess == 'STATE_WISE') {
            this.user.corporateCityId = null;
        }
    }
    onChangeRegion() {
        console.log(this.user.corporateRegion);
        this.corporateStates = new Array();
        this.corporateStates.length = 0;
        for (let i = 0; i < this.corporate.offices.length; i++) {
            let state = this.corporate.offices[i].state;
            if (this.user.corporateRegion == this.corporate.offices[i].officeRegion) {
                this.corporateStates.push(state);
            }
        }
        let uniqueStates = this.corporateStates.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
        this.corporateStates = uniqueStates;
        this.corporateCities = null;
    }
    onChangeCorporateState() {
        console.log(this.user.corporateStateId);
        this.corporateCities = new Array();
        this.corporateCities.length = 0;
        for (let i = 0; i < this.corporate.offices.length; i++) {
            let city = this.corporate.offices[i].city;
            if (this.user.corporateStateId == this.corporate.offices[i].stateId) {
                this.corporateCities.push(city);
            }
        }
        let uniqueCities = this.corporateCities.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
        this.corporateCities = uniqueCities;
    }
    onChangeCorporateCity() {
        this.corporateOffices = new Array();
        this.corporateOffices.length = 0;
        for (let i = 0; i < this.corporate.offices.length; i++) {
            if (this.user.corporateCityId == this.corporate.offices[i].cityId) {
                let office = this.corporate.offices[i];
                console.log(office);
                this.corporateOffices.push(office);
            }
        }
    }
    addCorporateUser() {
        this.user = new src_app_model_user__WEBPACK_IMPORTED_MODULE_3__["User"]();
        this.address = new src_app_model_address__WEBPACK_IMPORTED_MODULE_6__["Address"]();
        let a = this.countryService.getAllCountries();
        a.subscribe((data) => this.countries = data);
        let v = this.masterOrganisationService.showOrganizations("CORPORATE");
        v.subscribe((data) => this.corporates = data);
        this.iterationName = "ADD_CORPORATE_USER";
    }
    onAddCorporateUser() {
        this.user.address = this.address;
        this.user.userRole = "ROLE_CORPORATE_USER";
        this.userService.saveUser(this.user)
            .subscribe((data) => {
            // alert("user Saved !!");
            this.toastr.success(' User Saved Successfully...!', '', {
                timeOut: 10000,
                positionClass: 'toast-top-center',
                progressBar: true,
                progressAnimation: 'increasing'
            });
            this.ngOnInit();
        });
    }
    updateUser() {
        //this.user.address= this.address;
        console.log(this.user);
        if (this.user.userRole == "ROLE_VENDOR_USER" || this.user.userRole == "ROLE_WAREHOUSE_USER" || this.user.userRole == "ROLE_CORPORATE_USER") {
            this.user.address = this.address;
        }
        this.userService.updateUserById(this.user.userId, this.user)
            .subscribe((data) => {
            this.toastr.success('Updated Successfully! Your changes has been saved.', '', {
                timeOut: 10000,
                positionClass: 'toast-top-center',
                progressBar: true,
                progressAnimation: 'increasing'
            });
            this.edited = true;
            this.ngOnInit();
        });
        //this.userService.updateUser(this.user).subscribe((res: any[])=>{ });
        if (this.iterationName == "EDIT_USER_SHOW_ALL_USERS") {
            this.iterationName = "SHOW_ALL_USERS";
        }
        else if (this.iterationName == "EDIT_USER_SHOW_USER_INFO") {
            this.iterationName = "SHOW_USER_INFO";
        }
    }
    deleteUser(userId) {
        this.userService.delete(userId).subscribe(data => {
            this.toastr.error('The Record Has Been Deleted Successfully !', '', {
                timeOut: 10000,
                positionClass: 'toast-top-center',
                progressBar: true,
                progressAnimation: 'increasing'
            });
            console.log("====Data==>>>>" + JSON.stringify(data));
            console.log(JSON.stringify(data) === JSON.stringify("success"));
            // this.refresh();
            if (JSON.stringify(data) === JSON.stringify("success")) {
                this.ngOnInit();
            }
            else {
                console.log("Failure");
            }
        });
    }
    refresh() {
        window.location.reload();
    }
    onChangeCountry() {
        if (this.address.countryId) {
            this.countryService.getStatesForRegistration(this.address.countryId)
                .subscribe(data => {
                this.states = data;
                this.cities = null;
                if (this.states == null) {
                    // alert("There are no states for this Country");
                    this.toastr.warning('There are no states for this Country...!', '', {
                        timeOut: 3000,
                        positionClass: 'toast-top-center',
                        progressBar: true,
                        progressAnimation: 'increasing'
                    });
                }
            });
        }
    }
    onChangeState() {
        if (this.address.stateId) {
            this.countryService.getStateById(this.address.stateId)
                .subscribe((data) => {
                this.state = data;
                this.address.region = this.state.region;
            });
            this.countryService.getCitiesForRegistration(this.address.stateId)
                .subscribe(data => {
                this.cities = data;
                if (this.cities == null) {
                    // alert("There are no cities for this State");
                    this.toastr.warning('There are no cities for this State...!', '', {
                        timeOut: 3000,
                        positionClass: 'toast-top-center',
                        progressBar: true,
                        progressAnimation: 'increasing'
                    });
                }
            });
        }
    }
    onChangeVendorType() {
        if (this.user) {
            let org = this.masterOrganisationService.getVendorsForSelectedType(this.user.vendorTypeId);
            org.subscribe((data) => this.masterOrganisationList = data);
            console.log(this.masterOrganisationList);
        }
    }
    onChangeVendor() {
        if (this.user) {
            this.warehouseService.getWarehouseForSelectedVendor(this.user.vendorId)
                .subscribe(data => {
                this.warehouseList = data;
                if (this.warehouseList == 0 && this.warehouseList == null) {
                    // alert("No warehouse is available for Selected Vendor");
                    this.toastr.warning('No warehouse is available for Selected Vendor...!', '', {
                        timeOut: 3000,
                        positionClass: 'toast-top-center',
                        progressBar: true,
                        progressAnimation: 'increasing'
                    });
                    this.warehouseList = null;
                }
            });
        }
    }
    addWarehouseUser() {
        this.user = new src_app_model_user__WEBPACK_IMPORTED_MODULE_3__["User"]();
        this.address = new src_app_model_address__WEBPACK_IMPORTED_MODULE_6__["Address"]();
        let a = this.countryService.getAllCountries();
        this.user.vendorTypeId = 0;
        this.user.vendorId = 0;
        this.user.selectedWarehouseIds = 0;
        this.masterOrganisationList = new Array();
        a.subscribe((data) => this.countries = data);
        this.masterOrganisationService.getInternalVendorType()
            .subscribe((data) => {
            this.types = new Array();
            this.types.push(data);
            this.iterationName = 'ADD_WAREHOUSE_USER';
        });
    }
    onAddWarehouseUser() {
        this.user.address = this.address;
        this.user.userRole = "ROLE_WAREHOUSE_USER";
        this.userService.saveUser(this.user)
            .subscribe((data) => {
            // alert("user Saved !!");
            this.toastr.success('User Saved Successfully...!', '', {
                timeOut: 10000,
                positionClass: 'toast-top-center',
                progressBar: true,
                progressAnimation: 'increasing'
            });
            this.ngOnInit();
        });
    }
    addVendorUser() {
        this.user = new src_app_model_user__WEBPACK_IMPORTED_MODULE_3__["User"]();
        this.address = new src_app_model_address__WEBPACK_IMPORTED_MODULE_6__["Address"]();
        this.user.organisationId = 0;
        let a = this.countryService.getAllCountries();
        a.subscribe((data) => this.countries = data);
        let v = this.masterOrganisationService.showOrganizations("INTERNAL VENDOR");
        v.subscribe((data) => this.masterOrganisationList = data);
        console.log(this.masterOrganisationList);
        this.iterationName = 'ADD_VENDOR_USER';
    }
    onAddVendorUser() {
        this.user.address = this.address;
        this.user.userRole = "ROLE_VENDOR_USER";
        this.userService.saveUser(this.user)
            .subscribe((data) => {
            this.toastr.success('Vendor User Added Successfully...!', '', {
                timeOut: 10000,
                positionClass: 'toast-top-center',
                progressBar: true,
                progressAnimation: 'increasing'
            });
            this.ngOnInit();
        });
    }
    // ---- Methods for Vendor User Filter
    onSelectVendorForVendorUser() {
        /* -- vendor -- */
        console.log(this.vendor);
        if (this.vendor == null) {
            this.selectedRegionForVendorUser = this.oldSelectedRegionForVendorUser;
            console.log(this.oldSelectedRegionForVendorUser);
            this.vendorUserList = this.oldVendorUserList;
            console.log(this.oldVendorUserList);
        }
        if (this.vendor != null) {
            this.page = 1;
            this.vendorUserList = this.oldVendorUserList;
            this.newVendorUserList = new Array();
            this.selectedRegionForVendorUser = new Array();
            console.log(this.vendorUserList);
            for (let v of this.vendorUserList) {
                console.log(v);
                if (v.masterOrganisation.organisationName == this.vendor) {
                    this.newVendorUserList.push(v);
                    console.log(v.address.state.region);
                    this.selectedRegionForVendorUser.push(v.address.state.region);
                }
            }
            let s1 = this.selectedRegionForVendorUser.filter((item1, i1, ar1) => ar1.indexOf(item1) === i1);
            this.selectedRegionForVendorUser = s1;
            this.vendorUserList = null;
            this.vendorUserList = this.newVendorUserList;
        }
    }
    onSelectRegionForVendorUser() {
        /* -- Region -- */
        if (this.v_region == null) {
            this.selectedCitiesForVendorUser = null;
            this.selectedStatesForVendorUser = null;
            this.vendorUserList = this.oldVendorUserList;
        }
        if (this.v_region != null) {
            if (this.vendor != null) {
                this.vendorUserList = this.vendorUserList;
            }
            else {
                this.vendorUserList = this.oldVendorUserList;
            }
            this.newVendorUserList = new Array();
            this.selectedStatesForVendorUser = new Array();
            this.selectedCitiesForVendorUser = new Array();
            for (let v of this.vendorUserList) {
                if (v.address.state.region == this.v_region) {
                    this.newVendorUserList.push(v);
                    this.selectedStatesForVendorUser.push(v.address.state.stateName);
                    this.selectedCitiesForVendorUser.push(v.address.city.cityName);
                }
            }
            let s1 = this.selectedStatesForVendorUser.filter((item1, i1, ar1) => ar1.indexOf(item1) === i1);
            this.selectedStatesForVendorUser = s1;
            let c1 = this.selectedCitiesForVendorUser.filter((item, i, ar) => ar.indexOf(item) === i);
            this.selectedCitiesForVendorUser = c1;
            this.vendorUserList = null;
            this.vendorUserList = this.newVendorUserList;
        }
    }
    onSelectStateForVendorUser() {
        /* -- State -- */
        if (this.v_state == null) {
            this.selectedCitiesForVendorUser = null;
            this.vendorUserList = this.oldVendorUserList;
        }
        if (this.v_state != null) {
            this.vendorUserList = this.oldVendorUserList;
            this.newVendorUserList = new Array();
            this.selectedCitiesForVendorUser = new Array();
            for (let vu of this.vendorUserList) {
                if (vu.address.state.stateName == this.v_state) {
                    this.newVendorUserList.push(vu);
                    if (vu.address.city.stateId == vu.address.state.stateId) {
                        this.selectedCitiesForVendorUser.push(vu.address.city.cityName);
                    }
                }
            }
            this.vendorUserList = null;
            this.vendorUserList = this.newVendorUserList;
            let unique1 = this.selectedStatesForVendorUser.filter((item1, i1, ar1) => ar1.indexOf(item1) === i1);
            this.selectedStatesForVendorUser = unique1;
        }
    }
    onSelectCityForVendorUser() {
        /* -- City -- */
        if (this.v_city != null) {
            this.vendorUserList = this.oldVendorUserList;
            this.newVendorUserList = new Array();
            for (let vu of this.vendorUserList) {
                if (vu.address.city.cityName == this.v_city) {
                    this.newVendorUserList.push(vu);
                }
            }
            this.vendorUserList = null;
            this.vendorUserList = this.newVendorUserList;
        }
    }
    // ---- Methods for Warehouse User Filter 
    onSelectVendorForWarehouseUser() {
        /* -- vendor -- */
        if (this.w_vendor == null) {
            this.selectedRegionForWarehouseUser = this.oldSelectedRegionForWarehouseUser;
            this.warehouseUserList = this.oldWarehouseUserList;
        }
        if (this.w_vendor != null) {
            this.page1 = 1;
            this.warehouseUserList = this.oldWarehouseUserList;
            this.newWarehouseUserList = new Array();
            this.selectedRegionForWarehouseUser = new Array();
            for (let wu of this.warehouseUserList) {
                if (wu.masterOrganisation != null && wu.masterOrganisation.organisationName == this.w_vendor) {
                    this.newWarehouseUserList.push(wu);
                    this.selectedRegionForWarehouseUser.push(wu.address.state.region);
                }
            }
            let s1 = this.selectedRegionForWarehouseUser.filter((item1, i1, ar1) => ar1.indexOf(item1) === i1);
            this.selectedRegionForWarehouseUser = s1;
            this.warehouseUserList = null;
            this.warehouseUserList = this.newWarehouseUserList;
        }
    }
    onSelectRegionForWarehouseUser() {
        /* -- Region -- */
        if (this.w_region == null) {
            this.selectedCitiesForWarehouseUser = null;
            this.selectedStatesForWarehouseUser = null;
            this.warehouseUserList = this.oldWarehouseUserList;
        }
        if (this.w_region != null) {
            this.warehouseUserList = this.oldWarehouseUserList;
            this.newWarehouseUserList = new Array();
            this.selectedStatesForWarehouseUser = new Array();
            this.selectedCitiesForWarehouseUser = new Array();
            for (let wu of this.warehouseUserList) {
                if (wu.address.state.region == this.w_region) {
                    this.newWarehouseUserList.push(wu);
                    this.selectedStatesForWarehouseUser.push(wu.address.state.stateName);
                    this.selectedCitiesForWarehouseUser.push(wu.address.city.cityName);
                }
            }
            let s1 = this.selectedStatesForWarehouseUser.filter((item1, i1, ar1) => ar1.indexOf(item1) === i1);
            this.selectedStatesForWarehouseUser = s1;
            let c1 = this.selectedCitiesForWarehouseUser.filter((item, i, ar) => ar.indexOf(item) === i);
            this.selectedCitiesForWarehouseUser = c1;
            this.warehouseUserList = null;
            this.warehouseUserList = this.newWarehouseUserList;
        }
    }
    onSelectStateForWarehouseUser() {
        /* -- State -- */
        if (this.w_state == null) {
            this.selectedCitiesForWarehouseUser = null;
            this.warehouseUserList = this.oldWarehouseUserList;
        }
        if (this.w_state != null) {
            this.warehouseUserList = this.oldWarehouseUserList;
            this.newWarehouseUserList = new Array();
            this.selectedCitiesForWarehouseUser = new Array();
            for (let wu of this.warehouseUserList) {
                if (wu.address.state.stateName == this.w_state) {
                    this.newWarehouseUserList.push(wu);
                    if (wu.address.city.stateId == wu.address.state.stateId) {
                        this.selectedCitiesForWarehouseUser.push(wu.address.city.cityName);
                    }
                }
            }
            this.warehouseUserList = null;
            this.warehouseUserList = this.newWarehouseUserList;
            let unique1 = this.selectedStatesForWarehouseUser.filter((item1, i1, ar1) => ar1.indexOf(item1) === i1);
            this.selectedStatesForWarehouseUser = unique1;
        }
    }
    onSelectCityForWarehouseUser() {
        /* -- City -- */
        if (this.w_city != null) {
            this.warehouseUserList = this.oldWarehouseUserList;
            this.newWarehouseUserList = new Array();
            for (let wu of this.warehouseUserList) {
                if (wu.address.city.cityName == this.w_city) {
                    this.newWarehouseUserList.push(wu);
                }
            }
            this.warehouseUserList = null;
            this.warehouseUserList = this.newWarehouseUserList;
        }
    }
    // ---- Methods for End User Filter
    onSelectRegionForEndUser() {
        /* -- Region -- */
        if (this.e_region == null) {
            this.selectedCitiesForEndUser = null;
            this.selectedStatesForEndUser = null;
            this.endUserList = this.oldEndUserList;
        }
        if (this.e_region != null) {
            this.endUserList = this.oldEndUserList;
            this.newEndUserList = new Array();
            this.selectedStatesForEndUser = new Array();
            this.selectedCitiesForEndUser = new Array();
            for (let v of this.endUserList) {
                if (v.address.state.region == this.e_region) {
                    this.newEndUserList.push(v);
                    this.selectedStatesForEndUser.push(v.address.state.stateName);
                    this.selectedCitiesForEndUser.push(v.address.city.cityName);
                }
            }
            let s1 = this.selectedStatesForEndUser.filter((item1, i1, ar1) => ar1.indexOf(item1) === i1);
            this.selectedStatesForEndUser = s1;
            let c1 = this.selectedCitiesForEndUser.filter((item, i, ar) => ar.indexOf(item) === i);
            this.selectedCitiesForEndUser = c1;
            this.endUserList = null;
            this.endUserList = this.newEndUserList;
        }
    }
    onSelectStateForEndUser() {
        /* -- State -- */
        if (this.e_state == null) {
            this.selectedCitiesForEndUser = null;
            this.endUserList = this.oldEndUserList;
        }
        if (this.e_state != null) {
            this.page2 = 1;
            this.endUserList = this.oldEndUserList;
            this.newEndUserList = new Array();
            this.selectedCitiesForEndUser = new Array();
            for (let vu of this.endUserList) {
                if (vu.address.state.stateName == this.e_state) {
                    this.newEndUserList.push(vu);
                    if (vu.address.city.stateId == vu.address.state.stateId) {
                        this.selectedCitiesForEndUser.push(vu.address.city.cityName);
                    }
                }
            }
            this.endUserList = null;
            this.endUserList = this.newEndUserList;
            let unique1 = this.selectedStatesForEndUser.filter((item1, i1, ar1) => ar1.indexOf(item1) === i1);
            this.selectedStatesForEndUser = unique1;
        }
    }
    onSelectCityForEndUser() {
        /* -- City -- */
        if (this.v_city != null) {
            this.endUserList = this.oldEndUserList;
            this.newEndUserList = new Array();
            for (let vu of this.endUserList) {
                if (vu.address.city.cityName == this.v_city) {
                    this.newEndUserList.push(vu);
                }
            }
            this.endUserList = null;
            this.endUserList = this.newEndUserList;
        }
    }
    // ---- Methods for Corporate User Filter 
    onSelectRegionForCorporateUser() {
        /* -- Region -- */
        if (this.c_region == null) {
            this.selectedCitiesForCorporateUser = null;
            this.selectedStatesForCorporateUser = null;
            this.selectedUserTypes = this.oldSelectedUserTypes;
            this.corporateUserList = this.oldCorporateUserList;
        }
        if (this.c_region != null) {
            this.page3 = 1;
            this.corporateUserList = this.oldCorporateUserList;
            this.newCorporateUserList = new Array();
            this.selectedStatesForCorporateUser = new Array();
            this.selectedCitiesForCorporateUser = new Array();
            this.selectedUserTypes = new Array();
            for (let cu of this.corporateUserList) {
                if (cu.address.state.region == this.c_region) {
                    this.newCorporateUserList.push(cu);
                    this.selectedStatesForCorporateUser.push(cu.address.state.stateName);
                    this.selectedCitiesForCorporateUser.push(cu.address.city.cityName);
                    this.selectedUserTypes.push(cu.userType);
                }
            }
            let s1 = this.selectedStatesForCorporateUser.filter((item1, i1, ar1) => ar1.indexOf(item1) === i1);
            this.selectedStatesForCorporateUser = s1;
            let c1 = this.selectedCitiesForCorporateUser.filter((item, i, ar) => ar.indexOf(item) === i);
            this.selectedCitiesForCorporateUser = c1;
            let t1 = this.selectedUserTypes.filter((item, i, ar) => ar.indexOf(item) === i);
            this.selectedUserTypes = t1;
            this.corporateUserList = null;
            this.corporateUserList = this.newCorporateUserList;
        }
    }
    onSelectStateForCorporateUser() {
        /* -- State -- */
        if (this.c_state == null) {
            this.selectedCitiesForCorporateUser = null;
            this.corporateUserList = this.oldCorporateUserList;
        }
        if (this.c_state != null) {
            this.corporateUserList = this.oldCorporateUserList;
            this.newCorporateUserList = new Array();
            this.selectedCitiesForCorporateUser = new Array();
            for (let wu of this.corporateUserList) {
                if (wu.address.state.stateName == this.c_state) {
                    this.newCorporateUserList.push(wu);
                    if (wu.address.city.stateId == wu.address.state.stateId) {
                        this.selectedCitiesForCorporateUser.push(wu.address.city.cityName);
                    }
                }
            }
            this.corporateUserList = null;
            this.corporateUserList = this.newCorporateUserList;
            let unique1 = this.selectedStatesForCorporateUser.filter((item1, i1, ar1) => ar1.indexOf(item1) === i1);
            this.selectedStatesForCorporateUser = unique1;
        }
    }
    onSelectCityForCorporateUser() {
        /* -- City -- */
        if (this.c_city != null) {
            this.corporateUserList = this.oldCorporateUserList;
            this.newCorporateUserList = new Array();
            for (let wu of this.corporateUserList) {
                if (wu.address.city.cityName == this.c_city) {
                    this.newCorporateUserList.push(wu);
                }
            }
            this.corporateUserList = null;
            this.corporateUserList = this.newCorporateUserList;
        }
    }
    onSelectUserType() {
        if (this.userType != null) {
            this.corporateUserList = this.oldCorporateUserList;
            this.newCorporateUserList = new Array();
            for (let cu of this.corporateUserList) {
                if (cu.userType == this.userType) {
                    this.newCorporateUserList.push(cu);
                }
            }
            this.corporateUserList = null;
            this.corporateUserList = this.newCorporateUserList;
        }
    }
    onCredit() {
        this.creditLimitManagementSerivce.getPremiumMembershipList()
            .subscribe((data) => {
            console.log(data);
            if (data != null) {
                this.premiumMembersList = data;
            }
            this.iterationName = "Premium_Members_List";
        });
    }
    onCreditBack() {
        this.iterationName = "SHOW_ALL_USERS";
    }
    onManageRequest() {
        this.creditLimitManagementSerivce.getPremiumMembersRequestedList()
            .subscribe((data) => {
            console.log(data);
            if (data != null) {
                this.premiumMembershipRequestedList = data;
            }
            this.iterationName = "Requested_Premium_Members_List";
        });
    }
    onPremiumBackClick() {
        this.iterationName = "Premium_Members_List";
    }
    onReqPremiumBack() {
        this.iterationName = "Premium_Members_List";
    }
    onAccept(c) {
        this.creditLimitManagement = new src_app_model_credit_limit_management__WEBPACK_IMPORTED_MODULE_13__["CreditLimitManagement"]();
        this.creditLimitManagement = c;
        this.creditLimitManagement.approvedYn = true;
        this.creditLimitManagement.rejectedYn = false;
        this.iterationName = "Premium_Member";
    }
    onBack() {
        this.iterationName = "Requested_Premium_Members_List";
    }
    onConfirm() {
        console.log(this.creditLimitManagement);
        this.creditLimitManagementSerivce.updateCreditLimit(this.creditLimitManagement.managmentId, this.creditLimitManagement)
            .subscribe((data) => {
            if (data == "success") {
                this.toastr.success('Amount Approved Successfully...!', '', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
                this.onCredit();
            }
            if (data == "failed") {
                this.toastr.error('Approval Failed ', '', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
                this.onCredit();
            }
        });
    }
    onShowPremiumUser(c) {
        this.creditLimitManagement = new src_app_model_credit_limit_management__WEBPACK_IMPORTED_MODULE_13__["CreditLimitManagement"]();
        this.creditLimitManagement = c;
        this.iterationName = "SHOW_PREMIUM_USER_INFO";
    }
    onBack1() {
        this.onCredit();
    }
};
UsermanagmentComponent.ctorParameters = () => [
    { type: src_app_services_dashboard_service__WEBPACK_IMPORTED_MODULE_2__["DashboardService"] },
    { type: src_app_services_master_organisation_service__WEBPACK_IMPORTED_MODULE_7__["MasterOrganisationService"] },
    { type: src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_4__["UsermanagementService"] },
    { type: src_app_services_country_service__WEBPACK_IMPORTED_MODULE_5__["CountryService"] },
    { type: src_app_services_warehouse_service__WEBPACK_IMPORTED_MODULE_9__["WarehouseService"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_10__["ToastrService"] },
    { type: ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_11__["BsModalService"] },
    { type: src_app_services_credit_limit_management_service__WEBPACK_IMPORTED_MODULE_12__["CreditLimitManagementService"] }
];
UsermanagmentComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-usermanagment',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./usermanagment.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/usermanagment/usermanagment.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./usermanagment.component.css */ "./src/app/components/usermanagment/usermanagment.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_dashboard_service__WEBPACK_IMPORTED_MODULE_2__["DashboardService"],
        src_app_services_master_organisation_service__WEBPACK_IMPORTED_MODULE_7__["MasterOrganisationService"],
        src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_4__["UsermanagementService"],
        src_app_services_country_service__WEBPACK_IMPORTED_MODULE_5__["CountryService"],
        src_app_services_warehouse_service__WEBPACK_IMPORTED_MODULE_9__["WarehouseService"],
        ngx_toastr__WEBPACK_IMPORTED_MODULE_10__["ToastrService"],
        ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_11__["BsModalService"],
        src_app_services_credit_limit_management_service__WEBPACK_IMPORTED_MODULE_12__["CreditLimitManagementService"]])
], UsermanagmentComponent);



/***/ }),

/***/ "./src/app/components/vendormanagement/vendormanagement.component.css":
/*!****************************************************************************!*\
  !*** ./src/app/components/vendormanagement/vendormanagement.component.css ***!
  \****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n.container-fluid.orderprocess.ng-star-inserted {\r\n    margin-top: -10px;\r\n}\r\n.nav-tabs {\r\n    margin-top: 30px;\r\n}\r\n.form-group.row {\r\n    display: -webkit-box;\r\n    display: flex;\r\n    -webkit-box-align: center;\r\n            align-items: center;\r\n    -webkit-box-pack: center;\r\n            justify-content: center;\r\n}\r\n.card.card-cascade.narrower.body-section {\r\n    margin-top: -35px;\r\n}\r\nlabel{\r\n    font-weight: bold;\r\n    word-break: break-all;\r\n    font-size: initial;\r\n}\r\n.card.card-cascade{\r\n    margin-top:-70px\r\n}\r\nh4.card-header-title.mb-3 {\r\n    padding: 10px;\r\n    font-weight: bold;\r\n    margin-top: 10px;\r\n}\r\n.row.v1 {\r\n    margin-top: 16px;\r\n}\r\nh4.filter {\r\n    font-weight: bold;\r\n}\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n  }\r\n/*  */\r\n.input-vendor {\r\n    height: 50px;\r\n    background: #ebf4f9;\r\n}\r\n.card-body.vendor{\r\n    padding-right: 3rem;\r\n    padding-left: 3rem;\r\n}\r\ndiv#vendorrow {\r\n    padding-top: 0.5rem;\r\n}\r\nselect.form-control:not([size]):not([multiple]) {\r\n    height: 50px;\r\n    background-color:#ebf4f9; ;\r\n}\r\n.container-fluid.orderprocess {\r\n    margin-top: 10px;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy92ZW5kb3JtYW5hZ2VtZW50L3ZlbmRvcm1hbmFnZW1lbnQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0E7SUFDSSxpQkFBaUI7QUFDckI7QUFDQTtJQUNJLGdCQUFnQjtBQUNwQjtBQUVBO0lBQ0ksb0JBQWE7SUFBYixhQUFhO0lBQ2IseUJBQW1CO1lBQW5CLG1CQUFtQjtJQUNuQix3QkFBdUI7WUFBdkIsdUJBQXVCO0FBQzNCO0FBQ0E7SUFDSSxpQkFBaUI7QUFDckI7QUFFQTtJQUNJLGlCQUFpQjtJQUNqQixxQkFBcUI7SUFDckIsa0JBQWtCO0FBQ3RCO0FBRUE7SUFDSTtBQUNKO0FBQ0E7SUFDSSxhQUFhO0lBQ2IsaUJBQWlCO0lBQ2pCLGdCQUFnQjtBQUNwQjtBQUNBO0lBQ0ksZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxpQkFBaUI7QUFDckI7QUFDQTtJQUNJLG9CQUFvQjtJQUNwQixlQUFlO0lBQ2YsaUJBQWlCO0VBQ25CO0FBRUEsS0FBSztBQUNMO0lBQ0UsWUFBWTtJQUNaLG1CQUFtQjtBQUN2QjtBQUNBO0lBQ0ksbUJBQW1CO0lBQ25CLGtCQUFrQjtBQUN0QjtBQUVBO0lBQ0ksbUJBQW1CO0FBQ3ZCO0FBRUE7SUFDSSxZQUFZO0lBQ1osd0JBQXdCO0FBQzVCO0FBRUE7SUFDSSxnQkFBZ0I7QUFDcEIiLCJmaWxlIjoic3JjL2FwcC9jb21wb25lbnRzL3ZlbmRvcm1hbmFnZW1lbnQvdmVuZG9ybWFuYWdlbWVudC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbi5jb250YWluZXItZmx1aWQub3JkZXJwcm9jZXNzLm5nLXN0YXItaW5zZXJ0ZWQge1xyXG4gICAgbWFyZ2luLXRvcDogLTEwcHg7XHJcbn1cclxuLm5hdi10YWJzIHtcclxuICAgIG1hcmdpbi10b3A6IDMwcHg7XHJcbn1cclxuXHJcbi5mb3JtLWdyb3VwLnJvdyB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG59XHJcbi5jYXJkLmNhcmQtY2FzY2FkZS5uYXJyb3dlci5ib2R5LXNlY3Rpb24ge1xyXG4gICAgbWFyZ2luLXRvcDogLTM1cHg7XHJcbn1cclxuXHJcbmxhYmVse1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XHJcbiAgICBmb250LXNpemU6IGluaXRpYWw7XHJcbn1cclxuXHJcbi5jYXJkLmNhcmQtY2FzY2FkZXtcclxuICAgIG1hcmdpbi10b3A6LTcwcHhcclxufVxyXG5oNC5jYXJkLWhlYWRlci10aXRsZS5tYi0zIHtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIG1hcmdpbi10b3A6IDEwcHg7XHJcbn1cclxuLnJvdy52MSB7XHJcbiAgICBtYXJnaW4tdG9wOiAxNnB4O1xyXG59XHJcbmg0LmZpbHRlciB7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG4uYnRuLmJ0bi1sZyB7XHJcbiAgICBwYWRkaW5nOiAxcmVtIDIuNHJlbTtcclxuICAgIGZvbnQtc2l6ZTogMTdweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIH1cclxuXHJcbiAgLyogICovXHJcbiAgLmlucHV0LXZlbmRvciB7XHJcbiAgICBoZWlnaHQ6IDUwcHg7XHJcbiAgICBiYWNrZ3JvdW5kOiAjZWJmNGY5O1xyXG59XHJcbi5jYXJkLWJvZHkudmVuZG9ye1xyXG4gICAgcGFkZGluZy1yaWdodDogM3JlbTtcclxuICAgIHBhZGRpbmctbGVmdDogM3JlbTtcclxufVxyXG5cclxuZGl2I3ZlbmRvcnJvdyB7XHJcbiAgICBwYWRkaW5nLXRvcDogMC41cmVtO1xyXG59XHJcblxyXG5zZWxlY3QuZm9ybS1jb250cm9sOm5vdChbc2l6ZV0pOm5vdChbbXVsdGlwbGVdKSB7XHJcbiAgICBoZWlnaHQ6IDUwcHg7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiNlYmY0Zjk7IDtcclxufVxyXG5cclxuLmNvbnRhaW5lci1mbHVpZC5vcmRlcnByb2Nlc3Mge1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxufSJdfQ== */");

/***/ }),

/***/ "./src/app/components/vendormanagement/vendormanagement.component.ts":
/*!***************************************************************************!*\
  !*** ./src/app/components/vendormanagement/vendormanagement.component.ts ***!
  \***************************************************************************/
/*! exports provided: VendormanagementComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VendormanagementComponent", function() { return VendormanagementComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_services_master_organisation_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/master-organisation.service */ "./src/app/services/master-organisation.service.ts");
/* harmony import */ var src_app_services_country_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/country.service */ "./src/app/services/country.service.ts");
/* harmony import */ var src_app_model_master_organisation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/model/master-organisation */ "./src/app/model/master-organisation.ts");
/* harmony import */ var src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/services/usermanagement.service */ "./src/app/services/usermanagement.service.ts");
/* harmony import */ var src_app_model_address__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/model/address */ "./src/app/model/address.ts");
/* harmony import */ var src_app_services_order_processing_status_management_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/services/order-processing-status-management.service */ "./src/app/services/order-processing-status-management.service.ts");
/* harmony import */ var src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/services/auth.service */ "./src/app/services/auth.service.ts");
/* harmony import */ var src_app_model_select__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/model/select */ "./src/app/model/select.ts");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");
/* harmony import */ var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ngx-bootstrap/modal */ "./node_modules/ngx-bootstrap/modal/fesm2015/ngx-bootstrap-modal.js");
/* harmony import */ var src_app_services_payment_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! src/app/services/payment.service */ "./src/app/services/payment.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");














let VendormanagementComponent = class VendormanagementComponent {
    constructor(userService, masterOrganisationService, countryService, orderProcessingStatusManagementService, router, authService, toastr, modalService, paymentService) {
        this.userService = userService;
        this.masterOrganisationService = masterOrganisationService;
        this.countryService = countryService;
        this.orderProcessingStatusManagementService = orderProcessingStatusManagementService;
        this.router = router;
        this.authService = authService;
        this.toastr = toastr;
        this.modalService = modalService;
        this.paymentService = paymentService;
        this.address = new src_app_model_address__WEBPACK_IMPORTED_MODULE_6__["Address"]();
        this.mobNumberPattern = "^((\\+91-?)|0)?[0-9]{10}$";
        this.type = "VENDOR_TYPE";
        this.selectedCities = new Array();
        this.selectedStates = new Array();
        this.selectedRegion = new Array();
        this.newVendorsList = new Array();
        this.oldVendorList = new Array();
        this.ranges = new Array();
        this.range = "-1";
        this.date = new Date("01/01/2020");
        this.date1 = new Date();
    }
    ngOnInit() {
        this.vendor1 = null;
        let a = this.masterOrganisationService.getAllVendors(this.type);
        a.subscribe((data) => {
            this.vendors = data;
            this.oldVendorList = this.vendors;
            console.log(data);
            for (let v of this.vendors) {
                this.selectedRegion.push(v.address.state.region);
            }
            let unique2 = this.selectedRegion.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedRegion = unique2;
            this.selectedCities = null;
            this.selectedStates = null;
        });
        this.iteration = 'initial';
    }
    openModalWithClass(template) {
        this.modalRef = this.modalService.show(template, Object.assign({}, { class: 'gray modal-800px' }));
    }
    onSelectCity(c) {
        console.log(c);
        this.vendors = this.oldVendorList;
        this.newVendorsList = new Array();
        for (let v of this.vendors) {
            if (v.address.city.cityName == c) {
                this.newVendorsList.push(v);
            }
        }
        this.vendors = null;
        this.vendors = this.newVendorsList;
    }
    onSelectState(s) {
        console.log(s);
        if (s == null) {
            this.selectedCities = null;
            this.vendors = this.oldVendorList;
        }
        else {
            this.vendors = this.oldVendorList;
            this.newVendorsList = new Array();
            this.selectedCities = new Array();
            for (let v of this.vendors) {
                if (v.address.state.stateName == s) {
                    this.newVendorsList.push(v);
                    if (v.address.city.stateId == v.address.state.stateId) {
                        this.selectedCities.push(v.address.city.cityName);
                    }
                }
            }
            this.vendors = null;
            this.vendors = this.newVendorsList;
            let unique1 = this.selectedStates.filter((item1, i1, ar1) => ar1.indexOf(item1) === i1);
            this.selectedStates = unique1;
        }
    }
    onSelectRegion(r) {
        console.log(r);
        if (r == null) {
            this.selectedCities = null;
            this.selectedStates = null;
            this.vendors = this.oldVendorList;
        }
        else {
            this.page = 1;
            this.vendors = this.oldVendorList;
            this.newVendorsList = new Array();
            this.selectedStates = new Array();
            this.selectedCities = new Array();
            for (let v of this.vendors) {
                if (v.address.state.region == r) {
                    this.newVendorsList.push(v);
                    this.selectedStates.push(v.address.state.stateName);
                    this.selectedCities.push(v.address.city.cityName);
                }
            }
            let s1 = this.selectedStates.filter((item1, i1, ar1) => ar1.indexOf(item1) === i1);
            this.selectedStates = s1;
            let c1 = this.selectedCities.filter((item, i, ar) => ar.indexOf(item) === i);
            this.selectedCities = c1;
            this.vendors = null;
            this.vendors = this.newVendorsList;
        }
    }
    addVendor() {
        this.vendor = new src_app_model_master_organisation__WEBPACK_IMPORTED_MODULE_4__["MasterOrganisation"]();
        this.address = new src_app_model_address__WEBPACK_IMPORTED_MODULE_6__["Address"]();
        let c = this.countryService.getAllCountries();
        c.subscribe((data) => this.countries = data);
        let d = this.masterOrganisationService.getVendorTypes();
        d.subscribe((data) => this.types = data);
        this.iteration = 'addVendor';
    }
    onSubmit() {
        if (this.iteration == 'addVendor') {
            console.log("Vendor:" + this.vendor.contactNumber);
            this.vendor.address = this.address;
            let a1 = this.masterOrganisationService.registerVendor(this.vendor);
            if (a1 != null) {
                a1.subscribe((data) => {
                    // alert("Vendor created Successfully!");
                    this.toastr.success('Vendor Created Successfully...!', '', {
                        timeOut: 3000,
                        positionClass: 'toast-top-center',
                        progressBar: true,
                        progressAnimation: 'increasing'
                    });
                    this.ngOnInit();
                });
            }
            else {
                // alert("Vendor creation failed..");
                this.toastr.error('Vendor creation failed..!', '', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
            }
        }
        else if (this.iteration == 'editVendor') {
            this.vendor1.address = this.address1;
            this.masterOrganisationService.updateVendor(this.organisationId, this.vendor1)
                .subscribe((data) => {
                // alert("Vendor updated !");
                this.toastr.success('Vendor Updated Successfully...!', '', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
                this.ngOnInit();
            });
        }
        else {
            this.ngOnInit();
        }
    }
    deleteVendor(organisationId) {
        this.masterOrganisationService.deleteVendor(organisationId).subscribe(data => {
            console.log("====Data==>>>>" + JSON.stringify(data));
            console.log(JSON.stringify(data) === JSON.stringify("Success"));
            if (JSON.stringify(data) === JSON.stringify("Success")) {
                this.ngOnInit();
                // alert("Vendor Deleted !");
                this.toastr.success('Vendor Deleted SucessFully...!', '', {
                    timeOut: 3000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
            }
            else {
                console.log("Failure");
                this.ngOnInit();
            }
        });
    }
    editVendor(organisationId) {
        this.masterOrganisationService.getVendor(organisationId)
            .subscribe((data) => {
            this.vendor1 = data;
            this.address1 = this.vendor1.address;
            this.vendor = null;
            this.address = null;
            console.log(this.vendor1);
            this.countryService.getAllCountries()
                .subscribe((data) => {
                this.countries = data;
            });
            this.countryService.getStates(this.address1.countryId)
                .subscribe((data) => {
                this.states = data;
            });
            this.countryService.getCities(this.address1.stateId)
                .subscribe((data) => {
                this.cities = data;
            });
            this.masterOrganisationService.getVendorTypes()
                .subscribe((data) => {
                this.types = data;
                this.types.forEach(element => {
                    if (element.paramId == this.vendor1.organisationType) {
                        this.vendorType = element.paramName;
                        console.log(this.vendorType);
                    }
                });
            });
            this.organisationId = organisationId;
            console.log(this.vendor1);
            this.iteration = 'editVendor';
        });
    }
    onBackClick() {
        this.ngOnInit();
    }
    onChangeCountry(countryId) {
        if (this.address) {
            console.log("new country Id :" + this.address.countryId);
            this.countryService.getStates(this.address.countryId)
                .subscribe(data => {
                this.states = data;
                this.cities = null;
                if (this.states == null) {
                    // alert("There are no states for this Country");
                    this.toastr.warning('There are no states for this Country...!', '', {
                        timeOut: 3000,
                        positionClass: 'toast-top-center',
                        progressBar: true,
                        progressAnimation: 'increasing'
                    });
                }
            });
        }
        else if (this.address1) {
            console.log(" updated country Id :" + this.address1.countryId);
            this.countryService.getStates(this.address1.countryId)
                .subscribe(data => {
                this.states = data;
                this.cities = null;
                if (this.states == null) {
                    // alert("There are no states for this Country");
                    this.toastr.warning('There are no states for this Country...!', '', {
                        timeOut: 3000,
                        positionClass: 'toast-top-center',
                        progressBar: true,
                        progressAnimation: 'increasing'
                    });
                }
            });
        }
        else {
            this.states = null;
            this.cities = null;
        }
    }
    onChangeState() {
        if (this.address) {
            this.countryService.getStateById(this.address.stateId)
                .subscribe((data) => {
                this.state = data;
                this.address.region = this.state.region;
            });
            this.countryService.getCities(this.address.stateId)
                .subscribe(data => {
                this.cities = data;
                if (this.cities == null) {
                    // alert("There are no cities for this State");
                    this.toastr.warning('There are no cities for this State...!', '', {
                        timeOut: 3000,
                        positionClass: 'toast-top-center',
                        progressBar: true,
                        progressAnimation: 'increasing'
                    });
                }
            });
        }
        else if (this.address1) {
            this.countryService.getStateById(this.address1.stateId)
                .subscribe((data) => {
                this.state = data;
                this.address1.region = this.state.region;
            });
            this.countryService.getCities(this.address1.stateId)
                .subscribe(data => {
                this.cities = data;
                if (this.cities == null) {
                    // alert("There are no cities for this State");
                    this.toastr.warning('There are no cities for this State...!', '', {
                        timeOut: 3000,
                        positionClass: 'toast-top-center',
                        progressBar: true,
                        progressAnimation: 'increasing'
                    });
                }
            });
        }
        else {
            this.states = null;
            this.cities = null;
        }
    }
    viewOrderProcessingList() {
        this.orderProcessingStatusManagementService.getOrderProcessingStatusManagementList()
            .subscribe((data) => {
            this.orderProcessingList = data;
            this.oldOrderProcessingList = this.orderProcessingList;
            this.selectedVendor = new Array();
            this.selectedWarehouse = new Array();
            this.selectedProduct = new Array();
            this.orderProcessingList = data;
            this.userType = null;
            this.productName = null;
            this.warehouseName = null;
            this.vendorName = null;
            this.customDate = false;
            this.range = -1;
            this.populateRange();
            this.corporateList = new Array();
            this.corporateList.push("All Users");
            this.corporateList.push("End Users");
            for (let o of this.orderProcessingList) {
                this.selectedVendor.push(o.validateThrough.warehouse.masterOrganisation.organisationName);
                if (o.orderManagement.user.organisationId != null && o.orderManagement.user.organisationId != 0) {
                    this.corporateList.push(o.orderManagement.user.masterOrganisation.organisationName);
                }
            }
            let unique1 = this.selectedVendor.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedVendor = unique1;
            unique1 = this.corporateList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.corporateList = unique1;
            this.iteration = "viewOrderProcessingList";
        });
    }
    populateRange() {
        let range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_9__["Select"];
        range.id = "1";
        range.value = "Custom Range";
        this.ranges[0] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_9__["Select"];
        range.id = "2";
        range.value = "15 Days";
        this.ranges[1] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_9__["Select"];
        range.id = "3";
        range.value = "Current Month";
        this.ranges[2] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_9__["Select"];
        range.id = "4";
        range.value = "3 Months";
        this.ranges[3] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_9__["Select"];
        range.id = "5";
        range.value = "6 Months";
        this.ranges[4] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_9__["Select"];
        range.id = "6";
        range.value = "1 Year";
        this.ranges[5] = range;
    }
    onUserType() {
        this.page = 1;
        if (this.userType != null) {
            this.orderProcessingList = this.oldOrderProcessingList;
            this.range = -1;
            this.customDate = false;
            this.vendorName = null;
            this.warehouseName = null;
            this.productName = null;
            this.selectedVendor = new Array();
            this.selectedWarehouse = new Array();
            this.selectedProduct = new Array();
            this.newOrderProcessingList = new Array();
            if (this.userType == "All Users") {
                this.newOrderProcessingList = this.oldOrderProcessingList;
                for (let o of this.orderProcessingList) {
                    this.selectedVendor.push(o.validateThrough.warehouse.masterOrganisation.organisationName);
                }
            }
            if (this.userType == "End Users") {
                for (let o of this.orderProcessingList) {
                    if (o.orderManagement.user.organisationId == null || o.orderManagement.user.organisationId == 0) {
                        this.newOrderProcessingList.push(o);
                        this.selectedVendor.push(o.validateThrough.warehouse.masterOrganisation.organisationName);
                    }
                }
            }
            if (this.userType != "All User" && this.userType != "End Users") {
                for (let o of this.orderProcessingList) {
                    if (o.orderManagement.user.organisationId != null && o.orderManagement.user.organisationId != 0) {
                        if (o.orderManagement.user.masterOrganisation.organisationName == this.userType) {
                            this.newOrderProcessingList.push(o);
                            this.selectedVendor.push(o.validateThrough.warehouse.masterOrganisation.organisationName);
                        }
                    }
                }
            }
            this.orderProcessingList = this.newOrderProcessingList;
            this.orderProcessingListUserFiltered = new Array();
            this.orderProcessingListUserFiltered = this.newOrderProcessingList;
            let unique1 = this.selectedVendor.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedVendor = unique1;
        }
    }
    onSelect() {
        if (this.range != "-1") {
            if (this.range == "1") {
                this.customDate = true;
            }
            else {
                this.customDate = false;
            }
            this.filterList(this.range);
        }
    }
    onDateChange() {
        this.filterList("1");
    }
    filterList(option) {
        if (this.orderProcessingListUserFiltered != null) {
            this.orderProcessingList = this.orderProcessingListUserFiltered;
        }
        else {
            this.orderProcessingList = this.oldOrderProcessingList;
        }
        this.newOrderProcessingList = new Array();
        let startDate = new Date();
        let endDate = new Date();
        this.productName = null;
        this.warehouseName = null;
        this.vendorName = null;
        this.selectedVendor = new Array();
        this.selectedProduct = new Array();
        this.selectedWarehouse = new Array();
        if (option == "1") {
            startDate = this.date;
            endDate = this.date1;
        }
        else if (option == "2") {
            startDate.setDate(endDate.getDate() - 15);
        }
        else if (option == "3") {
            startDate.setDate(endDate.getDate() - 30);
        }
        else if (option == "4") {
            startDate.setDate(endDate.getDate() - 90);
        }
        else if (option == "5") {
            startDate.setDate(endDate.getDate() - 180);
        }
        else if (option == "6") {
            startDate.setDate(endDate.getDate() - 360);
        }
        for (let o of this.orderProcessingList) {
            let dt = new Date(o.orderProcessedDate);
            if (dt >= startDate && dt <= endDate) {
                this.newOrderProcessingList.push(o);
                this.selectedVendor.push(o.validateThrough.warehouse.masterOrganisation.organisationName);
            }
        }
        let unique1 = this.selectedVendor.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
        this.selectedVendor = unique1;
        this.orderProcessingList = this.newOrderProcessingList;
        this.orderProcessingListDateFiltered = this.newOrderProcessingList;
    }
    onVendor() {
        if (this.vendorName != null) {
            if (this.orderProcessingListDateFiltered != null && this.range != -1) {
                this.orderProcessingList = this.orderProcessingListDateFiltered;
            }
            else if (this.orderProcessingListUserFiltered != null && this.userType != null) {
                this.orderProcessingList = this.orderProcessingListUserFiltered;
            }
            else if (this.orderProcessingListDateFiltered == null && this.orderProcessingListUserFiltered == null) {
                this.orderProcessingList = this.oldOrderProcessingList;
            }
            this.warehouseName = null;
            this.productName = null;
            this.selectedWarehouse = new Array();
            this.selectedProduct = new Array();
            this.newOrderProcessingList = new Array();
            for (let o of this.orderProcessingList) {
                if (o.validateThrough.warehouse.masterOrganisation.organisationName == this.vendorName) {
                    this.newOrderProcessingList.push(o);
                    this.selectedWarehouse.push(o.validateThrough.warehouse.warehouseName);
                }
            }
            let unique1 = this.selectedWarehouse.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedWarehouse = unique1;
            this.orderProcessingList = this.newOrderProcessingList;
        }
    }
    onWarehouse() {
        if (this.warehouseName != null && this.vendorName != null) {
            if (this.orderProcessingListDateFiltered != null && this.range != -1) {
                this.orderProcessingList = this.orderProcessingListDateFiltered;
            }
            else if (this.orderProcessingListUserFiltered != null && this.userType != null) {
                this.orderProcessingList = this.orderProcessingListUserFiltered;
            }
            else if (this.orderProcessingListDateFiltered == null && this.orderProcessingListUserFiltered == null) {
                this.orderProcessingList = this.oldOrderProcessingList;
            }
            this.newOrderProcessingList = new Array();
            this.productName = null;
            this.selectedProduct = new Array();
            for (let o of this.orderProcessingList) {
                if (o.validateThrough.warehouse.warehouseName == this.warehouseName && o.validateThrough.warehouse.masterOrganisation.organisationName == this.vendorName) {
                    this.newOrderProcessingList.push(o);
                    this.selectedProduct.push(o.orderManagement.masterProducts.productName);
                }
            }
            let unique1 = this.selectedProduct.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedProduct = unique1;
            this.orderProcessingList = this.newOrderProcessingList;
        }
    }
    onProduct() {
        if (this.productName != null && this.warehouseName != null && this.vendorName != null) {
            if (this.orderProcessingListDateFiltered != null && this.range != -1) {
                this.orderProcessingList = this.orderProcessingListDateFiltered;
            }
            else if (this.orderProcessingListUserFiltered != null && this.userType != null) {
                this.orderProcessingList = this.orderProcessingListUserFiltered;
            }
            else if (this.orderProcessingListDateFiltered == null && this.orderProcessingListUserFiltered == null) {
                this.orderProcessingList = this.oldOrderProcessingList;
            }
            this.newOrderProcessingList = new Array();
            for (let o of this.orderProcessingList) {
                if (o.validateThrough.warehouse.warehouseName == this.warehouseName && this.productName == o.orderManagement.masterProducts.productName && o.validateThrough.warehouse.masterOrganisation.organisationName == this.vendorName) {
                    this.newOrderProcessingList.push(o);
                }
            }
            this.orderProcessingList = this.newOrderProcessingList;
        }
    }
    onChange() {
        if (this.orderProcessingListDateFiltered != null) {
            this.orderProcessingList = this.orderProcessingListDateFiltered;
        }
        else if (this.orderProcessingListDateFiltered == null) {
            this.orderProcessingList = this.oldOrderProcessingList;
        }
        if (this.vendorName != null) {
            this.newOrderProcessingList = new Array();
            this.selectedWarehouse = new Array();
            this.selectedProduct = new Array();
            for (let o of this.orderProcessingList) {
                if (o.validateThrough.warehouse.masterOrganisation.organisationName == this.vendorName) {
                    this.newOrderProcessingList.push(o);
                    this.selectedWarehouse.push(o.validateThrough.warehouse.warehouseName);
                    this.selectedProduct.push(o.orderManagement.masterProducts.productName);
                }
            }
            let unique1 = this.selectedProduct.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedProduct = unique1;
            let unique2 = this.selectedWarehouse.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedWarehouse = unique2;
            this.orderProcessingList = this.newOrderProcessingList;
        }
        if (this.warehouseName != null) {
            this.newOrderProcessingList = new Array();
            this.selectedProduct = new Array();
            for (let o of this.orderProcessingList) {
                if (o.validateThrough.warehouse.warehouseName == this.warehouseName) {
                    this.newOrderProcessingList.push(o);
                    this.selectedProduct.push(o.orderManagement.masterProducts.productName);
                }
            }
            let unique1 = this.selectedProduct.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedProduct = unique1;
            this.orderProcessingList = this.newOrderProcessingList;
        }
        if (this.productName != null) {
            this.newOrderProcessingList = new Array();
            for (let o of this.orderProcessingList) {
                if (o.orderManagement.masterProducts.productName == this.productName) {
                    this.newOrderProcessingList.push(o);
                }
            }
            this.orderProcessingList = this.newOrderProcessingList;
        }
    }
    /*pendingPayments(){
      this.paymentService.setPendingAdminTopup("ADMIN_PENDING_TOPUPS")
      this.router.navigate(['/adminVendorpayment']);
    }
    vendorPayments(){
      this.paymentService.setPendingAdminTopup("ADMIN_VENDOR_PAYMENT")
      this.router.navigate(['/adminVendorpayment']);
    }*/
    bankAccount() {
        console.log(this.vendor1.organisationRefNo);
        this.paymentService.getVendorBankAccountDetails(this.vendor1.organisationRefNo).subscribe((data) => {
            console.log(data);
            this.bankaccount = data;
            this.iteration = "BANK_ACCOUNT";
        });
    }
    onBackFromAccount() {
        this.iteration = "editVendor";
    }
    onBankSubmit() {
        console.log(this.bankaccount);
        this.paymentService.saveVendorAccountDetails(this.bankaccount).subscribe((data) => this.toastr.success('Bank Information updated Successfully!!!', 'Bank Account', { timeOut: 10000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' }));
        this.iteration = "editVendor";
    }
};
VendormanagementComponent.ctorParameters = () => [
    { type: src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_5__["UsermanagementService"] },
    { type: src_app_services_master_organisation_service__WEBPACK_IMPORTED_MODULE_2__["MasterOrganisationService"] },
    { type: src_app_services_country_service__WEBPACK_IMPORTED_MODULE_3__["CountryService"] },
    { type: src_app_services_order_processing_status_management_service__WEBPACK_IMPORTED_MODULE_7__["OrderProcessingStatusManagementService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_13__["Router"] },
    { type: src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_8__["AuthService"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_10__["ToastrService"] },
    { type: ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_11__["BsModalService"] },
    { type: src_app_services_payment_service__WEBPACK_IMPORTED_MODULE_12__["PaymentService"] }
];
VendormanagementComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-vendormanagement',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./vendormanagement.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/vendormanagement/vendormanagement.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./vendormanagement.component.css */ "./src/app/components/vendormanagement/vendormanagement.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_5__["UsermanagementService"],
        src_app_services_master_organisation_service__WEBPACK_IMPORTED_MODULE_2__["MasterOrganisationService"],
        src_app_services_country_service__WEBPACK_IMPORTED_MODULE_3__["CountryService"],
        src_app_services_order_processing_status_management_service__WEBPACK_IMPORTED_MODULE_7__["OrderProcessingStatusManagementService"], _angular_router__WEBPACK_IMPORTED_MODULE_13__["Router"],
        src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_8__["AuthService"], ngx_toastr__WEBPACK_IMPORTED_MODULE_10__["ToastrService"], ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_11__["BsModalService"], src_app_services_payment_service__WEBPACK_IMPORTED_MODULE_12__["PaymentService"]])
], VendormanagementComponent);



/***/ }),

/***/ "./src/app/components/vendorreward/vendorreward.component.css":
/*!********************************************************************!*\
  !*** ./src/app/components/vendorreward/vendorreward.component.css ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (".filter\r\n{\r\n    background: -webkit-gradient(linear, left top, right bottom, color-stop(50%, #CCE0FB), to(#A5EBF0));\r\n    background: linear-gradient(to bottom right, #CCE0FB 50%, #A5EBF0 100%);\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy92ZW5kb3JyZXdhcmQvdmVuZG9ycmV3YXJkLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0lBRUksbUdBQXVFO0lBQXZFLHVFQUF1RTtBQUMzRSIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvdmVuZG9ycmV3YXJkL3ZlbmRvcnJld2FyZC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmZpbHRlclxyXG57XHJcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gYm90dG9tIHJpZ2h0LCAjQ0NFMEZCIDUwJSwgI0E1RUJGMCAxMDAlKTtcclxufSJdfQ== */");

/***/ }),

/***/ "./src/app/components/vendorreward/vendorreward.component.ts":
/*!*******************************************************************!*\
  !*** ./src/app/components/vendorreward/vendorreward.component.ts ***!
  \*******************************************************************/
/*! exports provided: VendorrewardComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VendorrewardComponent", function() { return VendorrewardComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let VendorrewardComponent = class VendorrewardComponent {
    constructor() { }
    ngOnInit() {
        this.iteration = 'initial';
    }
    onVendorRewardDetails() {
        this.iteration = 'Vendor_User_Details';
    }
    onBack() {
        this.iteration = 'initial';
    }
};
VendorrewardComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-vendorreward',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./vendorreward.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/vendorreward/vendorreward.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./vendorreward.component.css */ "./src/app/components/vendorreward/vendorreward.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], VendorrewardComponent);



/***/ }),

/***/ "./src/app/components/viewallactivealerts/viewallactivealerts.component.css":
/*!**********************************************************************************!*\
  !*** ./src/app/components/viewallactivealerts/viewallactivealerts.component.css ***!
  \**********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\nul#myTab {\r\n    margin-top: 10px;\r\n}\r\n.h3, h3 {\r\n    font-size: 1.75rem;\r\n    margin-top: 22px;\r\n}\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n  }\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy92aWV3YWxsYWN0aXZlYWxlcnRzL3ZpZXdhbGxhY3RpdmVhbGVydHMuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0E7SUFDSSxnQkFBZ0I7QUFDcEI7QUFDQTtJQUNJLGtCQUFrQjtJQUNsQixnQkFBZ0I7QUFDcEI7QUFDQTtJQUNJLG9CQUFvQjtJQUNwQixlQUFlO0lBQ2YsaUJBQWlCO0VBQ25CIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy92aWV3YWxsYWN0aXZlYWxlcnRzL3ZpZXdhbGxhY3RpdmVhbGVydHMuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG51bCNteVRhYiB7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG59XHJcbi5oMywgaDMge1xyXG4gICAgZm9udC1zaXplOiAxLjc1cmVtO1xyXG4gICAgbWFyZ2luLXRvcDogMjJweDtcclxufVxyXG4uYnRuLmJ0bi1sZyB7XHJcbiAgICBwYWRkaW5nOiAxcmVtIDIuNHJlbTtcclxuICAgIGZvbnQtc2l6ZTogMTdweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIH0iXX0= */");

/***/ }),

/***/ "./src/app/components/viewallactivealerts/viewallactivealerts.component.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/components/viewallactivealerts/viewallactivealerts.component.ts ***!
  \*********************************************************************************/
/*! exports provided: ViewallactivealertsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewallactivealertsComponent", function() { return ViewallactivealertsComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_services_alertmanagement_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/alertmanagement.service */ "./src/app/services/alertmanagement.service.ts");
/* harmony import */ var src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/alert.service */ "./src/app/services/alert.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");
/* harmony import */ var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ngx-bootstrap/modal */ "./node_modules/ngx-bootstrap/modal/fesm2015/ngx-bootstrap-modal.js");







let ViewallactivealertsComponent = class ViewallactivealertsComponent {
    constructor(service, alertService, router, toastr, modalService) {
        this.service = service;
        this.alertService = alertService;
        this.router = router;
        this.toastr = toastr;
        this.modalService = modalService;
    }
    ngOnInit() {
        /* let a=this.service1.getAllEquipments();
        a.subscribe((data)=>this.equipments=data);	*/
        let p = this.service.getAllAlerts();
        p.subscribe((data) => {
            this.alerts = data;
            console.log(data);
        });
    }
    openModalWithClass(template) {
        this.modalRef = this.modalService.show(template, Object.assign({}, { class: 'gray modal-800px' }));
    }
    deleteAlert(alertId) {
        this.delete(alertId);
        this.toastr.success('Record Deleted Successfully', '', {
            timeOut: 10000,
            positionClass: 'toast-top-center',
            progressBar: true,
            progressAnimation: 'increasing'
        });
    }
    delete(alertId) {
        this.alertService.deleteAlert(alertId).subscribe(data => {
            console.log("====Data==>>>>" + JSON.stringify(data));
            console.log(JSON.stringify(data) === JSON.stringify("success"));
            if (JSON.stringify(data) === JSON.stringify("success")) {
                this.refresh();
            }
            else {
                console.log("Failure");
            }
        });
    }
    /* editAlert(alertObj : Alert) {
      console.log(alertObj);
      this.generateAlert.editAlert(alertObj);
    } */
    refresh() {
        window.location.reload();
    }
    onEdit(alert) {
        console.log("Alert Id Is: " + alert);
        this.router.navigate(['/editAlert'], { state: { data: { alert } } });
    }
};
ViewallactivealertsComponent.ctorParameters = () => [
    { type: src_app_services_alertmanagement_service__WEBPACK_IMPORTED_MODULE_2__["AlertmanagementService"] },
    { type: src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_3__["AlertService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_5__["ToastrService"] },
    { type: ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_6__["BsModalService"] }
];
ViewallactivealertsComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-viewallactivealerts',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./viewallactivealerts.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/viewallactivealerts/viewallactivealerts.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./viewallactivealerts.component.css */ "./src/app/components/viewallactivealerts/viewallactivealerts.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_alertmanagement_service__WEBPACK_IMPORTED_MODULE_2__["AlertmanagementService"],
        src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_3__["AlertService"], _angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"], ngx_toastr__WEBPACK_IMPORTED_MODULE_5__["ToastrService"], ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_6__["BsModalService"]])
], ViewallactivealertsComponent);



/***/ }),

/***/ "./src/app/components/viewgeneratedalerts/viewgeneratedalerts.component.css":
/*!**********************************************************************************!*\
  !*** ./src/app/components/viewgeneratedalerts/viewgeneratedalerts.component.css ***!
  \**********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("h4.card-header-title.mb-3 {\r\n    padding: 10px;\r\n    font-weight: bold;\r\n    margin-top: 10px;\r\n}\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n  }\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy92aWV3Z2VuZXJhdGVkYWxlcnRzL3ZpZXdnZW5lcmF0ZWRhbGVydHMuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGFBQWE7SUFDYixpQkFBaUI7SUFDakIsZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxvQkFBb0I7SUFDcEIsZUFBZTtJQUNmLGlCQUFpQjtFQUNuQiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvdmlld2dlbmVyYXRlZGFsZXJ0cy92aWV3Z2VuZXJhdGVkYWxlcnRzLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJoNC5jYXJkLWhlYWRlci10aXRsZS5tYi0zIHtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIG1hcmdpbi10b3A6IDEwcHg7XHJcbn1cclxuLmJ0bi5idG4tbGcge1xyXG4gICAgcGFkZGluZzogMXJlbSAyLjRyZW07XHJcbiAgICBmb250LXNpemU6IDE3cHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICB9Il19 */");

/***/ }),

/***/ "./src/app/components/viewgeneratedalerts/viewgeneratedalerts.component.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/components/viewgeneratedalerts/viewgeneratedalerts.component.ts ***!
  \*********************************************************************************/
/*! exports provided: ViewgeneratedalertsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewgeneratedalertsComponent", function() { return ViewgeneratedalertsComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");



let ViewgeneratedalertsComponent = class ViewgeneratedalertsComponent {
    constructor(route) {
        this.route = route;
    }
    ngOnInit() {
    }
    onBackClick() {
        this.route.navigate(['/editprofile'], { queryParams: { edit: 'true' } });
    }
};
ViewgeneratedalertsComponent.ctorParameters = () => [
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"] }
];
ViewgeneratedalertsComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-viewgeneratedalerts',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./viewgeneratedalerts.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/viewgeneratedalerts/viewgeneratedalerts.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./viewgeneratedalerts.component.css */ "./src/app/components/viewgeneratedalerts/viewgeneratedalerts.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"]])
], ViewgeneratedalertsComponent);



/***/ }),

/***/ "./src/app/components/warehousemanagement/warehousemanagement.component.css":
/*!**********************************************************************************!*\
  !*** ./src/app/components/warehousemanagement/warehousemanagement.component.css ***!
  \**********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n/* new css */\r\n.card.card-cascade.narrower.body-section {\r\n    margin-top: -35px;\r\n}\r\nlabel {\r\n    font-weight: bold;\r\n    font-size: initial;\r\n    word-break: break-all;\r\n    margin-top: 7px;\r\n}\r\n.card.card-cascade{\r\nmargin-top:-70px\r\n}\r\nselect.form-control[multiple], select.form-control[size] {\r\n    height: 50px;\r\n    background-color:#ebf4f9; \r\n}\r\nh4.card-header-title.mb-3 {\r\n    padding: 10px;\r\n    font-weight: bold;\r\n    margin-top: 10px;\r\n}\r\n.row.v1 {\r\n    margin-top: 16px;\r\n}\r\na.viewproduct {\r\n    border-bottom: 2px solid;\r\n}\r\nh4.filter {\r\n    font-weight: bold;\r\n}\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n  }\r\n/*  */\r\n.input-vendor {\r\n        height: 50px;\r\n        background: #ebf4f9;\r\n    }\r\n.card-body.vendor{\r\n        padding-right: 3rem;\r\n        padding-left: 3rem;\r\n    }\r\ndiv#vendorrow {\r\n        padding-top: 0.5rem;\r\n    }\r\nselect.form-control:not([size]):not([multiple]) {\r\n        height: 50px;\r\n        background-color:#ebf4f9; ;\r\n    }\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy93YXJlaG91c2VtYW5hZ2VtZW50L3dhcmVob3VzZW1hbmFnZW1lbnQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsWUFBWTtBQUNaO0lBQ0ksaUJBQWlCO0FBQ3JCO0FBQ0E7SUFDSSxpQkFBaUI7SUFDakIsa0JBQWtCO0lBQ2xCLHFCQUFxQjtJQUNyQixlQUFlO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBRUE7SUFDSSxZQUFZO0lBQ1osd0JBQXdCO0FBQzVCO0FBQ0E7SUFDSSxhQUFhO0lBQ2IsaUJBQWlCO0lBQ2pCLGdCQUFnQjtBQUNwQjtBQUNBO0lBQ0ksZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSx3QkFBd0I7QUFDNUI7QUFDQTtJQUNJLGlCQUFpQjtBQUNyQjtBQUNBO0lBQ0ksb0JBQW9CO0lBQ3BCLGVBQWU7SUFDZixpQkFBaUI7RUFDbkI7QUFFRSxLQUFLO0FBQ0w7UUFDSSxZQUFZO1FBQ1osbUJBQW1CO0lBQ3ZCO0FBQ0E7UUFDSSxtQkFBbUI7UUFDbkIsa0JBQWtCO0lBQ3RCO0FBRUE7UUFDSSxtQkFBbUI7SUFDdkI7QUFFQTtRQUNJLFlBQVk7UUFDWix3QkFBd0I7SUFDNUIiLCJmaWxlIjoic3JjL2FwcC9jb21wb25lbnRzL3dhcmVob3VzZW1hbmFnZW1lbnQvd2FyZWhvdXNlbWFuYWdlbWVudC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbi8qIG5ldyBjc3MgKi9cclxuLmNhcmQuY2FyZC1jYXNjYWRlLm5hcnJvd2VyLmJvZHktc2VjdGlvbiB7XHJcbiAgICBtYXJnaW4tdG9wOiAtMzVweDtcclxufVxyXG5sYWJlbCB7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIGZvbnQtc2l6ZTogaW5pdGlhbDtcclxuICAgIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcclxuICAgIG1hcmdpbi10b3A6IDdweDtcclxufVxyXG4uY2FyZC5jYXJkLWNhc2NhZGV7XHJcbm1hcmdpbi10b3A6LTcwcHhcclxufVxyXG5cclxuc2VsZWN0LmZvcm0tY29udHJvbFttdWx0aXBsZV0sIHNlbGVjdC5mb3JtLWNvbnRyb2xbc2l6ZV0ge1xyXG4gICAgaGVpZ2h0OiA1MHB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjojZWJmNGY5OyBcclxufVxyXG5oNC5jYXJkLWhlYWRlci10aXRsZS5tYi0zIHtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIG1hcmdpbi10b3A6IDEwcHg7XHJcbn1cclxuLnJvdy52MSB7XHJcbiAgICBtYXJnaW4tdG9wOiAxNnB4O1xyXG59XHJcbmEudmlld3Byb2R1Y3Qge1xyXG4gICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkO1xyXG59XHJcbmg0LmZpbHRlciB7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG4uYnRuLmJ0bi1sZyB7XHJcbiAgICBwYWRkaW5nOiAxcmVtIDIuNHJlbTtcclxuICAgIGZvbnQtc2l6ZTogMTdweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIH1cclxuXHJcbiAgICAvKiAgKi9cclxuICAgIC5pbnB1dC12ZW5kb3Ige1xyXG4gICAgICAgIGhlaWdodDogNTBweDtcclxuICAgICAgICBiYWNrZ3JvdW5kOiAjZWJmNGY5O1xyXG4gICAgfVxyXG4gICAgLmNhcmQtYm9keS52ZW5kb3J7XHJcbiAgICAgICAgcGFkZGluZy1yaWdodDogM3JlbTtcclxuICAgICAgICBwYWRkaW5nLWxlZnQ6IDNyZW07XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGRpdiN2ZW5kb3Jyb3cge1xyXG4gICAgICAgIHBhZGRpbmctdG9wOiAwLjVyZW07XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHNlbGVjdC5mb3JtLWNvbnRyb2w6bm90KFtzaXplXSk6bm90KFttdWx0aXBsZV0pIHtcclxuICAgICAgICBoZWlnaHQ6IDUwcHg7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjojZWJmNGY5OyA7XHJcbiAgICB9Il19 */");

/***/ }),

/***/ "./src/app/components/warehousemanagement/warehousemanagement.component.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/components/warehousemanagement/warehousemanagement.component.ts ***!
  \*********************************************************************************/
/*! exports provided: WarehousemanagementComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WarehousemanagementComponent", function() { return WarehousemanagementComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_services_warehouse_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/warehouse.service */ "./src/app/services/warehouse.service.ts");
/* harmony import */ var src_app_model_warehouse__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/model/warehouse */ "./src/app/model/warehouse.ts");
/* harmony import */ var src_app_services_master_organisation_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/services/master-organisation.service */ "./src/app/services/master-organisation.service.ts");
/* harmony import */ var src_app_services_country_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/services/country.service */ "./src/app/services/country.service.ts");
/* harmony import */ var src_app_model_master_organisation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/model/master-organisation */ "./src/app/model/master-organisation.ts");
/* harmony import */ var src_app_services_master_product_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/services/master-product.service */ "./src/app/services/master-product.service.ts");
/* harmony import */ var src_app_model_user__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/model/user */ "./src/app/model/user.ts");
/* harmony import */ var src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/services/usermanagement.service */ "./src/app/services/usermanagement.service.ts");
/* harmony import */ var src_app_model_warehouse_user_mapping__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! src/app/model/warehouse-user-mapping */ "./src/app/model/warehouse-user-mapping.ts");
/* harmony import */ var src_app_model_address__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! src/app/model/address */ "./src/app/model/address.ts");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");
/* harmony import */ var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ngx-bootstrap/modal */ "./node_modules/ngx-bootstrap/modal/fesm2015/ngx-bootstrap-modal.js");














let WarehousemanagementComponent = class WarehousemanagementComponent {
    constructor(userService, masterProductsService, service, warehouseService, masterOrganisationService, toastr, modalService) {
        this.userService = userService;
        this.masterProductsService = masterProductsService;
        this.service = service;
        this.warehouseService = warehouseService;
        this.masterOrganisationService = masterOrganisationService;
        this.toastr = toastr;
        this.modalService = modalService;
        this.address = new src_app_model_address__WEBPACK_IMPORTED_MODULE_11__["Address"]();
        this.organisation = new src_app_model_master_organisation__WEBPACK_IMPORTED_MODULE_6__["MasterOrganisation"]();
        this.selectedWarehouseIds1 = new Array();
        this.type = "VENDOR_TYPE";
        this.selectedCities = new Array();
        this.selectedStates = new Array();
        this.selectedRegion = new Array();
        this.selectedVendors = new Array();
        this.newWarehouseList = new Array();
        this.oldWarehouseList = new Array();
        this.selectedProducts = new Array();
    }
    ngOnInit() {
        let a = this.warehouseService.getAllWarehouses();
        a.subscribe((data) => {
            this.warehouses = data;
            this.oldWarehouseList = this.warehouses;
            for (let w of this.warehouses) {
                //this.selectedCities.push(v.address.city.cityName);
                //this.selectedStates.push(v.address.state.stateName);
                this.selectedRegion.push(w.address.state.region);
                this.selectedVendors.push(w.masterOrganisation.organisationName);
                for (let product of w.masterProductsList) {
                    this.selectedProducts.push(product.productName);
                }
            }
            /*let unique = this.selectedCities.filter((item, i, ar) => ar.indexOf(item) === i);
            this.selectedCities = unique;*/
            /*let unique1 = this.selectedStates.filter((item1, i1, ar1) => ar1.indexOf(item1) === i1);
            this.selectedStates = unique1;*/
            let unique2 = this.selectedRegion.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedRegion = unique2;
            let unique3 = this.selectedVendors.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedVendors = unique3;
            let unique4 = this.selectedProducts.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedProducts = unique4;
            this.selectedCities = null;
            this.selectedStates = null;
        });
        this.iteration = 'initial';
    }
    openModalWithClass(template) {
        this.modalRef = this.modalService.show(template, Object.assign({}, { class: 'gray modal-800px' }));
    }
    onVendorSelect() {
        console.log(this.vendor);
        this.warehouses = this.oldWarehouseList;
        if (this.vendor != null) {
            this.page = 1;
            this.newWarehouseList = new Array();
            for (let w of this.warehouses) {
                if (w.masterOrganisation.organisationName == this.vendor) {
                    this.newWarehouseList.push(w);
                }
            }
            this.warehouses = null;
            this.warehouses = this.newWarehouseList;
        }
        if (this.product != null) {
            this.newWarehouseList = new Array();
            for (let w of this.warehouses) {
                for (let product of w.masterProductsList) {
                    if (product.productName == this.product) {
                        this.newWarehouseList.push(w);
                    }
                }
            }
            this.warehouses = null;
            this.warehouses = this.newWarehouseList;
        }
        if (this.region != null) {
            this.newWarehouseList = new Array();
            this.selectedStates = new Array();
            this.selectedCities = new Array();
            for (let w of this.warehouses) {
                if (w.address.state.region == this.region) {
                    this.newWarehouseList.push(w);
                    this.selectedStates.push(w.address.state.stateName);
                    this.selectedCities.push(w.address.city.cityName);
                }
            }
            let s1 = this.selectedStates.filter((item1, i1, ar1) => ar1.indexOf(item1) === i1);
            this.selectedStates = s1;
            let c1 = this.selectedCities.filter((item, i, ar) => ar.indexOf(item) === i);
            this.selectedCities = c1;
            this.warehouses = null;
            this.warehouses = this.newWarehouseList;
        }
        if (this.stateId != null) {
            this.newWarehouseList = new Array();
            this.selectedCities = new Array();
            for (let w of this.warehouses) {
                if (w.address.state.stateName == this.stateId) {
                    this.newWarehouseList.push(w);
                    if (w.address.city.stateId == w.address.state.stateId) {
                        this.selectedCities.push(w.address.city.cityName);
                    }
                }
            }
            this.warehouses = null;
            this.warehouses = this.newWarehouseList;
            let unique1 = this.selectedStates.filter((item1, i1, ar1) => ar1.indexOf(item1) === i1);
            this.selectedStates = unique1;
        }
        if (this.cityId != null) {
            this.newWarehouseList = new Array();
            for (let w of this.warehouses) {
                if (w.address.city.cityName == this.cityId) {
                    this.newWarehouseList.push(w);
                }
            }
            this.warehouses = null;
            this.warehouses = this.newWarehouseList;
        }
    }
    addWarehouse() {
        this.warehouse = new src_app_model_warehouse__WEBPACK_IMPORTED_MODULE_3__["Warehouse"]();
        this.address = new src_app_model_address__WEBPACK_IMPORTED_MODULE_11__["Address"]();
        this.warehouse.organisationId = 0;
        let v = this.masterOrganisationService.getAllVendors(this.type);
        v.subscribe((data) => this.vendors = data);
        let a = this.service.getAllCountries();
        a.subscribe((data) => this.countries = data);
        let p = this.masterProductsService.getAllProducts();
        p.subscribe((data) => this.products = data);
        this.iteration = 'addWarehouse';
    }
    onSubmit() {
        if (this.iteration == 'addWarehouse') {
            this.warehouse.address = this.address;
            this.warehouseService.saveWarehouse(this.warehouse)
                .subscribe((data) => {
                this.toastr.success('Warehouse Saved !', '', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
                this.ngOnInit();
            });
        }
        else if (this.iteration == 'editWarehouse') {
            this.warehouse1.address = this.address1;
            this.warehouseService.updateWarehouse(this.warehouseId, this.warehouse1)
                .subscribe((data) => {
                this.toastr.success('Warehouse Updated Successfully !', '', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
                this.ngOnInit();
            });
        }
        else if (this.iteration == 'allocateWarehouse') {
            this.warehouseUserMapping.selectedWarehouseIds = this.selectedWarehouseIds1;
            this.warehouseService.allocateWarehouseUser(this.warehouseUserMapping)
                .subscribe((data) => {
                // alert("allocated !");
                this.toastr.success('Allocated Successfully...!', '', {
                    timeOut: 3000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
                this.selectedWarehouseIds1 = null;
                this.ngOnInit();
            });
        }
        else {
            this.ngOnInit();
        }
    }
    onBackClick() {
        this.ngOnInit();
    }
    deleteWarehouse(warehouseId) {
        this.warehouseService.deleteWarehouse(warehouseId).subscribe(data => {
            console.log("====Data==>>>>" + JSON.stringify(data));
            console.log(JSON.stringify(data) === JSON.stringify("Success"));
            if (JSON.stringify(data) === JSON.stringify("Success")) {
                this.ngOnInit();
                // alert("Warehouse Deleted !");
                this.toastr.success('Warehouse Deleted Successfully..!', '', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
            }
            else {
                console.log("Failure");
                this.ngOnInit();
            }
        });
    }
    editWarehouse(warehouseId) {
        this.address1 = new src_app_model_address__WEBPACK_IMPORTED_MODULE_11__["Address"]();
        this.warehouseService.getWarehouse(warehouseId)
            .subscribe((data) => {
            this.warehouse1 = data;
            this.address1 = this.warehouse1.address;
            let c = this.service.getAllCountries();
            c.subscribe((data) => this.countries = data);
            let s = this.service.getStates(this.address1.countryId);
            s.subscribe((data) => this.states = data);
            let b = this.service.getCities(this.address1.stateId);
            b.subscribe((data) => this.cities = data);
            let p = this.masterOrganisationService.getAllVendors(this.type);
            p.subscribe((data) => this.vendors = data);
            let sp = this.masterProductsService.getAllProducts();
            sp.subscribe((data) => this.products = data);
            this.warehouseId = warehouseId;
            this.iteration = 'editWarehouse';
        });
    }
    onChangeCountry() {
        if (this.address) {
            console.log("country Id :" + this.address.countryId);
            this.service.getStates(this.address.countryId)
                .subscribe(data => {
                this.states = data;
                this.cities = null;
                this.address1 = this.address;
                if (this.states == null) {
                    // alert("There are no states for this Country");
                    this.toastr.warning('There are no states for this Country...!', '', {
                        timeOut: 3000,
                        positionClass: 'toast-top-center',
                        progressBar: true,
                        progressAnimation: 'increasing'
                    });
                }
            });
        }
        else if (this.address1) {
            console.log("country Id :" + this.address1.countryId);
            this.service.getStates(this.address1.countryId)
                .subscribe(data => {
                this.states = data;
                this.cities = null;
                if (this.states == null) {
                    // alert("There are no states for this Country");
                    this.toastr.warning('There are no states for this Country...!', '', {
                        timeOut: 3000,
                        positionClass: 'toast-top-center',
                        progressBar: true,
                        progressAnimation: 'increasing'
                    });
                }
            });
        }
        else {
            this.states = null;
            this.cities = null;
        }
    }
    onChangeState() {
        console.log(this.address1.stateId);
        console.log(this.address.stateId);
        if (this.address) {
            this.service.getStateById(this.address1.stateId)
                .subscribe((data) => {
                this.state = data;
                this.address1.region = this.state.region;
            });
            this.service.getCities(this.address1.stateId)
                .subscribe(data => {
                this.cities = data;
                if (this.cities == null) {
                    // alert("There are no cities for this State");
                    this.toastr.warning('There are no cities for this State...!', '', {
                        timeOut: 3000,
                        positionClass: 'toast-top-center',
                        progressBar: true,
                        progressAnimation: 'increasing'
                    });
                }
            });
        }
        else if (this.address1) {
            this.service.getStateById(this.address1.stateId)
                .subscribe((data) => {
                this.state = data;
                this.address1.region = this.state.region;
            });
            this.service.getCities(this.address1.stateId)
                .subscribe(data => {
                this.cities = data;
                if (this.cities == null) {
                    // alert("There are no cities for this State");
                    this.toastr.warning('There are no cities for this State...!', '', {
                        timeOut: 3000,
                        positionClass: 'toast-top-center',
                        progressBar: true,
                        progressAnimation: 'increasing'
                    });
                }
            });
        }
        else {
            this.states = null;
            this.cities = null;
        }
    }
    onChangeCity() {
        if (this.address.cityId) {
            console.log("City Id :" + this.address.cityId);
            this.service.getCityById(this.address.cityId)
                .subscribe(data => {
                this.city = data;
                if (this.city == null) {
                    // alert("City not Exist");
                    this.toastr.warning('City not Exist...!', '', {
                        timeOut: 3000,
                        positionClass: 'toast-top-center',
                        progressBar: true,
                        progressAnimation: 'increasing'
                    });
                }
            });
        }
        else {
            this.states = null;
            this.cities = null;
        }
    }
    addWarehouseUser() {
        this.user = new src_app_model_user__WEBPACK_IMPORTED_MODULE_8__["User"]();
        this.address = new src_app_model_address__WEBPACK_IMPORTED_MODULE_11__["Address"]();
        let a = this.service.getAllCountries();
        a.subscribe((data) => this.countries = data);
        this.masterOrganisationService.getVendorTypes()
            .subscribe((data) => {
            this.types = data;
            console.log("types : " + this.types);
            for (let t of this.types) {
                console.log("type : " + t.paramName);
            }
        });
        this.iteration = 'addWarehouseUser';
    }
    deleteWarehouseUser(userId) {
        this.userService.delete(userId).subscribe(data => {
            console.log("====Data==>>>>" + JSON.stringify(data));
            console.log(JSON.stringify(data) === JSON.stringify("Success"));
            if (JSON.stringify(data) === JSON.stringify("Success")) {
                this.ngOnInit();
                // alert("Warehouse User Deleted !");
                this.toastr.success('Warehouse User Deleted !', '', {
                    timeOut: 3000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
            }
            else {
                console.log("Failure");
                this.ngOnInit();
            }
        });
    }
    editWarehouseUser(userId) {
        let v = this.userService.getUser(userId);
        v.subscribe((data) => {
            this.user1 = data;
            this.address1 = this.user1.address;
            this.user = null;
            this.address = null;
        });
        let c = this.service.getAllCountries();
        c.subscribe((data) => this.countries = data);
        let s = this.service.getStates(this.address1.countryId);
        s.subscribe((data) => this.states = data);
        let b = this.service.getCities(this.address1.stateId);
        b.subscribe((data) => this.cities = data);
        this.userId = userId;
        let d = this.masterOrganisationService.getVendorTypes();
        d.subscribe((data) => this.types = data);
        let org = this.masterOrganisationService.getVendorsForSelectedType(this.user1.vendorTypeId);
        org.subscribe((data) => this.masterOrganisationList = data);
        let w = this.warehouseService.getWarehouseForSelectedVendor(this.user1.vendorId);
        w.subscribe((data) => this.warehouseList = data);
        this.address = null;
        this.iteration = 'editWarehouseUser';
    }
    allocateWarehouse() {
        this.warehouseUserMapping = new src_app_model_warehouse_user_mapping__WEBPACK_IMPORTED_MODULE_10__["WarehouseUserMapping"]();
        this.warehouseList = null;
        this.users = null;
        this.masterOrganisationList = null;
        let d = this.masterOrganisationService.getVendorTypes();
        d.subscribe((data) => this.types = data);
        this.iteration = 'allocateWarehouse';
    }
    onChangeVendorType() {
        if (this.user) {
            console.log("new type : " + this.user.vendorTypeId);
            let org = this.masterOrganisationService.getVendorsForSelectedType(this.user.vendorTypeId);
            org.subscribe((data) => this.masterOrganisationList = data);
        }
        else if (this.user1) {
            console.log(" edit type : " + this.user1.vendorTypeId);
            let org1 = this.masterOrganisationService.getVendorsForSelectedType(this.user1.vendorTypeId);
            org1.subscribe((data) => this.masterOrganisationList = data);
        }
        else {
            console.log("--------");
        }
    }
    onChangeVendor() {
        if (this.user) {
            this.warehouseService.getWarehouseForSelectedVendor(this.user.vendorId)
                .subscribe(data => {
                this.warehouseList = data;
                if (this.warehouseList == 0) {
                    // alert("No warehouse is available for Selected Vendor");
                    this.toastr.warning('No warehouse is available for Selected Vendor !', '', {
                        timeOut: 3000,
                        positionClass: 'toast-top-center',
                        progressBar: true,
                        progressAnimation: 'increasing'
                    });
                    this.warehouseList = null;
                }
            });
        }
        else {
            this.warehouseService.getWarehouseForSelectedVendor(this.user1.vendorId)
                .subscribe(data => {
                this.warehouseList = data;
                if (this.warehouseList == 0) {
                    // alert("No warehouse is available for Selected Vendor");
                    this.toastr.warning('No warehouse is available for Selected Vendor !', '', {
                        timeOut: 3000,
                        positionClass: 'toast-top-center',
                        progressBar: true,
                        progressAnimation: 'increasing'
                    });
                    this.warehouseList = null;
                }
            });
        }
    }
    getSelectedWarehouse(w, event) {
        if (event.target.checked) {
            this.selectedWarehouseIds1.push(w.warehouseId);
            console.log("all ids : " + this.selectedWarehouseIds1);
        }
        else {
            this.selectedWarehouseIds1.splice(this.selectedWarehouseIds1.indexOf(w.warehouseId), 1);
            console.log("all ids : " + this.selectedWarehouseIds1);
        }
    }
    onChangeUser() {
        console.log("user id :" + this.warehouseUserMapping.userId);
        if (this.warehouseUserMapping.userId) {
            this.warehouseService.getAllocateWarehouseUser(this.warehouseUserMapping.userId)
                .subscribe(data => {
                this.warehouseListForSelectedUser = data;
                if (this.warehouseListForSelectedUser != null) {
                    console.log("allocations : " + this.warehouseListForSelectedUser);
                }
            });
        }
    }
};
WarehousemanagementComponent.ctorParameters = () => [
    { type: src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_9__["UsermanagementService"] },
    { type: src_app_services_master_product_service__WEBPACK_IMPORTED_MODULE_7__["MasterProductService"] },
    { type: src_app_services_country_service__WEBPACK_IMPORTED_MODULE_5__["CountryService"] },
    { type: src_app_services_warehouse_service__WEBPACK_IMPORTED_MODULE_2__["WarehouseService"] },
    { type: src_app_services_master_organisation_service__WEBPACK_IMPORTED_MODULE_4__["MasterOrganisationService"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_12__["ToastrService"] },
    { type: ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_13__["BsModalService"] }
];
WarehousemanagementComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-warehousemanagement',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./warehousemanagement.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/warehousemanagement/warehousemanagement.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./warehousemanagement.component.css */ "./src/app/components/warehousemanagement/warehousemanagement.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_9__["UsermanagementService"],
        src_app_services_master_product_service__WEBPACK_IMPORTED_MODULE_7__["MasterProductService"],
        src_app_services_country_service__WEBPACK_IMPORTED_MODULE_5__["CountryService"], src_app_services_warehouse_service__WEBPACK_IMPORTED_MODULE_2__["WarehouseService"],
        src_app_services_master_organisation_service__WEBPACK_IMPORTED_MODULE_4__["MasterOrganisationService"],
        ngx_toastr__WEBPACK_IMPORTED_MODULE_12__["ToastrService"], ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_13__["BsModalService"]])
], WarehousemanagementComponent);



/***/ }),

/***/ "./src/app/layouts/auth-layout/auth-layout.component.css":
/*!***************************************************************!*\
  !*** ./src/app/layouts/auth-layout/auth-layout.component.css ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xheW91dHMvYXV0aC1sYXlvdXQvYXV0aC1sYXlvdXQuY29tcG9uZW50LmNzcyJ9 */");

/***/ }),

/***/ "./src/app/layouts/auth-layout/auth-layout.component.ts":
/*!**************************************************************!*\
  !*** ./src/app/layouts/auth-layout/auth-layout.component.ts ***!
  \**************************************************************/
/*! exports provided: AuthLayoutComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AuthLayoutComponent", function() { return AuthLayoutComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let AuthLayoutComponent = class AuthLayoutComponent {
    constructor() { }
    ngOnInit() {
    }
};
AuthLayoutComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-auth-layout',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./auth-layout.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/layouts/auth-layout/auth-layout.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./auth-layout.component.css */ "./src/app/layouts/auth-layout/auth-layout.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], AuthLayoutComponent);



/***/ }),

/***/ "./src/app/layouts/onetimepassword-layout/onetimepassword-layout.component.css":
/*!*************************************************************************************!*\
  !*** ./src/app/layouts/onetimepassword-layout/onetimepassword-layout.component.css ***!
  \*************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xheW91dHMvb25ldGltZXBhc3N3b3JkLWxheW91dC9vbmV0aW1lcGFzc3dvcmQtbGF5b3V0LmNvbXBvbmVudC5jc3MifQ== */");

/***/ }),

/***/ "./src/app/layouts/onetimepassword-layout/onetimepassword-layout.component.ts":
/*!************************************************************************************!*\
  !*** ./src/app/layouts/onetimepassword-layout/onetimepassword-layout.component.ts ***!
  \************************************************************************************/
/*! exports provided: OnetimepasswordLayoutComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OnetimepasswordLayoutComponent", function() { return OnetimepasswordLayoutComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let OnetimepasswordLayoutComponent = class OnetimepasswordLayoutComponent {
    constructor() { }
    ngOnInit() {
    }
};
OnetimepasswordLayoutComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-onetimepassword-layout',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./onetimepassword-layout.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/layouts/onetimepassword-layout/onetimepassword-layout.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./onetimepassword-layout.component.css */ "./src/app/layouts/onetimepassword-layout/onetimepassword-layout.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], OnetimepasswordLayoutComponent);



/***/ }),

/***/ "./src/app/layouts/usermanagement-layout/usermanagement-layout.component.css":
/*!***********************************************************************************!*\
  !*** ./src/app/layouts/usermanagement-layout/usermanagement-layout.component.css ***!
  \***********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xheW91dHMvdXNlcm1hbmFnZW1lbnQtbGF5b3V0L3VzZXJtYW5hZ2VtZW50LWxheW91dC5jb21wb25lbnQuY3NzIn0= */");

/***/ }),

/***/ "./src/app/layouts/usermanagement-layout/usermanagement-layout.component.ts":
/*!**********************************************************************************!*\
  !*** ./src/app/layouts/usermanagement-layout/usermanagement-layout.component.ts ***!
  \**********************************************************************************/
/*! exports provided: UsermanagementLayoutComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UsermanagementLayoutComponent", function() { return UsermanagementLayoutComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let UsermanagementLayoutComponent = class UsermanagementLayoutComponent {
    constructor() { }
    ngOnInit() {
    }
};
UsermanagementLayoutComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-usermanagement-layout',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./usermanagement-layout.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/layouts/usermanagement-layout/usermanagement-layout.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./usermanagement-layout.component.css */ "./src/app/layouts/usermanagement-layout/usermanagement-layout.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], UsermanagementLayoutComponent);



/***/ }),

/***/ "./src/app/model/EquipmentLinkedMobile.ts":
/*!************************************************!*\
  !*** ./src/app/model/EquipmentLinkedMobile.ts ***!
  \************************************************/
/*! exports provided: EquipmentLinkedMobile */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EquipmentLinkedMobile", function() { return EquipmentLinkedMobile; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class EquipmentLinkedMobile {
}


/***/ }),

/***/ "./src/app/model/EquipmentProductMapping.ts":
/*!**************************************************!*\
  !*** ./src/app/model/EquipmentProductMapping.ts ***!
  \**************************************************/
/*! exports provided: EquipmentProductMapping */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EquipmentProductMapping", function() { return EquipmentProductMapping; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class EquipmentProductMapping {
}


/***/ }),

/***/ "./src/app/model/Office.ts":
/*!*********************************!*\
  !*** ./src/app/model/Office.ts ***!
  \*********************************/
/*! exports provided: Office */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Office", function() { return Office; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class Office {
}


/***/ }),

/***/ "./src/app/model/account-details.ts":
/*!******************************************!*\
  !*** ./src/app/model/account-details.ts ***!
  \******************************************/
/*! exports provided: AccountDetails */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AccountDetails", function() { return AccountDetails; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class AccountDetails {
}


/***/ }),

/***/ "./src/app/model/address.ts":
/*!**********************************!*\
  !*** ./src/app/model/address.ts ***!
  \**********************************/
/*! exports provided: Address */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Address", function() { return Address; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class Address {
}


/***/ }),

/***/ "./src/app/model/admin-payment.ts":
/*!****************************************!*\
  !*** ./src/app/model/admin-payment.ts ***!
  \****************************************/
/*! exports provided: AdminPayment */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AdminPayment", function() { return AdminPayment; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class AdminPayment {
}


/***/ }),

/***/ "./src/app/model/alert-events.ts":
/*!***************************************!*\
  !*** ./src/app/model/alert-events.ts ***!
  \***************************************/
/*! exports provided: AlertEvents */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AlertEvents", function() { return AlertEvents; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class AlertEvents {
    constructor() {
    }
}


/***/ }),

/***/ "./src/app/model/alert.ts":
/*!********************************!*\
  !*** ./src/app/model/alert.ts ***!
  \********************************/
/*! exports provided: Alert */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Alert", function() { return Alert; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class Alert {
    constructor() {
    }
}


/***/ }),

/***/ "./src/app/model/bank-payment-dto.ts":
/*!*******************************************!*\
  !*** ./src/app/model/bank-payment-dto.ts ***!
  \*******************************************/
/*! exports provided: BankPaymentDto */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BankPaymentDto", function() { return BankPaymentDto; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class BankPaymentDto {
}


/***/ }),

/***/ "./src/app/model/bank-payment.ts":
/*!***************************************!*\
  !*** ./src/app/model/bank-payment.ts ***!
  \***************************************/
/*! exports provided: BankPayment */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BankPayment", function() { return BankPayment; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class BankPayment {
    constructor() {
        this.selectedBankPay = false;
    }
}


/***/ }),

/***/ "./src/app/model/bank-statement.ts":
/*!*****************************************!*\
  !*** ./src/app/model/bank-statement.ts ***!
  \*****************************************/
/*! exports provided: BankStatement */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BankStatement", function() { return BankStatement; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class BankStatement {
    constructor() {
        this.selectedBankStmt = false;
    }
}


/***/ }),

/***/ "./src/app/model/cheque-payment-dto.ts":
/*!*********************************************!*\
  !*** ./src/app/model/cheque-payment-dto.ts ***!
  \*********************************************/
/*! exports provided: ChequePaymentDto */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChequePaymentDto", function() { return ChequePaymentDto; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class ChequePaymentDto {
}


/***/ }),

/***/ "./src/app/model/cheque-payment.ts":
/*!*****************************************!*\
  !*** ./src/app/model/cheque-payment.ts ***!
  \*****************************************/
/*! exports provided: ChequePayment */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChequePayment", function() { return ChequePayment; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class ChequePayment {
}


/***/ }),

/***/ "./src/app/model/credit-limit-management.ts":
/*!**************************************************!*\
  !*** ./src/app/model/credit-limit-management.ts ***!
  \**************************************************/
/*! exports provided: CreditLimitManagement */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreditLimitManagement", function() { return CreditLimitManagement; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class CreditLimitManagement {
}


/***/ }),

/***/ "./src/app/model/equipment.ts":
/*!************************************!*\
  !*** ./src/app/model/equipment.ts ***!
  \************************************/
/*! exports provided: Equipment */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Equipment", function() { return Equipment; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class Equipment {
}


/***/ }),

/***/ "./src/app/model/master-organisation.ts":
/*!**********************************************!*\
  !*** ./src/app/model/master-organisation.ts ***!
  \**********************************************/
/*! exports provided: MasterOrganisation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MasterOrganisation", function() { return MasterOrganisation; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class MasterOrganisation {
    constructor() {
        this.offices = new Array();
    }
}


/***/ }),

/***/ "./src/app/model/master-parameters.ts":
/*!********************************************!*\
  !*** ./src/app/model/master-parameters.ts ***!
  \********************************************/
/*! exports provided: MasterParameters */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MasterParameters", function() { return MasterParameters; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class MasterParameters {
    constructor() {
    }
}


/***/ }),

/***/ "./src/app/model/master-products.ts":
/*!******************************************!*\
  !*** ./src/app/model/master-products.ts ***!
  \******************************************/
/*! exports provided: MasterProducts */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MasterProducts", function() { return MasterProducts; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class MasterProducts {
}


/***/ }),

/***/ "./src/app/model/online-payment-new-dto.ts":
/*!*************************************************!*\
  !*** ./src/app/model/online-payment-new-dto.ts ***!
  \*************************************************/
/*! exports provided: OnlinePaymentNewDto */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OnlinePaymentNewDto", function() { return OnlinePaymentNewDto; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class OnlinePaymentNewDto {
}


/***/ }),

/***/ "./src/app/model/online-payment.ts":
/*!*****************************************!*\
  !*** ./src/app/model/online-payment.ts ***!
  \*****************************************/
/*! exports provided: OnlinePayment */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OnlinePayment", function() { return OnlinePayment; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class OnlinePayment {
    constructor() {
        this.selectedOnlinePay = false;
    }
}


/***/ }),

/***/ "./src/app/model/order-dto.ts":
/*!************************************!*\
  !*** ./src/app/model/order-dto.ts ***!
  \************************************/
/*! exports provided: OrderDto */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OrderDto", function() { return OrderDto; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class OrderDto {
}


/***/ }),

/***/ "./src/app/model/order-management-configuration.ts":
/*!*********************************************************!*\
  !*** ./src/app/model/order-management-configuration.ts ***!
  \*********************************************************/
/*! exports provided: OrderManagementConfiguration */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OrderManagementConfiguration", function() { return OrderManagementConfiguration; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class OrderManagementConfiguration {
}


/***/ }),

/***/ "./src/app/model/order-management-new-dto.ts":
/*!***************************************************!*\
  !*** ./src/app/model/order-management-new-dto.ts ***!
  \***************************************************/
/*! exports provided: OrderManagementNewDto */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OrderManagementNewDto", function() { return OrderManagementNewDto; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class OrderManagementNewDto {
}


/***/ }),

/***/ "./src/app/model/order-management.ts":
/*!*******************************************!*\
  !*** ./src/app/model/order-management.ts ***!
  \*******************************************/
/*! exports provided: OrderManagement */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OrderManagement", function() { return OrderManagement; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class OrderManagement {
}


/***/ }),

/***/ "./src/app/model/order-processing-status-management.ts":
/*!*************************************************************!*\
  !*** ./src/app/model/order-processing-status-management.ts ***!
  \*************************************************************/
/*! exports provided: OrderProcessingStatusManagement */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OrderProcessingStatusManagement", function() { return OrderProcessingStatusManagement; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class OrderProcessingStatusManagement {
}


/***/ }),

/***/ "./src/app/model/payment-dto.ts":
/*!**************************************!*\
  !*** ./src/app/model/payment-dto.ts ***!
  \**************************************/
/*! exports provided: PaymentDto */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PaymentDto", function() { return PaymentDto; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class PaymentDto {
}


/***/ }),

/***/ "./src/app/model/pre-order-management.ts":
/*!***********************************************!*\
  !*** ./src/app/model/pre-order-management.ts ***!
  \***********************************************/
/*! exports provided: PreOrderManagement */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreOrderManagement", function() { return PreOrderManagement; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class PreOrderManagement {
}


/***/ }),

/***/ "./src/app/model/pre-order-pre-order-margin-and-cancellation-charges-management.ts":
/*!*****************************************************************************************!*\
  !*** ./src/app/model/pre-order-pre-order-margin-and-cancellation-charges-management.ts ***!
  \*****************************************************************************************/
/*! exports provided: PreOrderPreOrderMarginAndCancellationChargesManagement */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreOrderPreOrderMarginAndCancellationChargesManagement", function() { return PreOrderPreOrderMarginAndCancellationChargesManagement; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class PreOrderPreOrderMarginAndCancellationChargesManagement {
}


/***/ }),

/***/ "./src/app/model/pre-order.ts":
/*!************************************!*\
  !*** ./src/app/model/pre-order.ts ***!
  \************************************/
/*! exports provided: PreOrder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreOrder", function() { return PreOrder; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class PreOrder {
}


/***/ }),

/***/ "./src/app/model/redeem-reward.ts":
/*!****************************************!*\
  !*** ./src/app/model/redeem-reward.ts ***!
  \****************************************/
/*! exports provided: RedeemReward */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RedeemReward", function() { return RedeemReward; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class RedeemReward {
}


/***/ }),

/***/ "./src/app/model/rewardconfig.ts":
/*!***************************************!*\
  !*** ./src/app/model/rewardconfig.ts ***!
  \***************************************/
/*! exports provided: Rewardconfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Rewardconfig", function() { return Rewardconfig; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class Rewardconfig {
}


/***/ }),

/***/ "./src/app/model/select.ts":
/*!*********************************!*\
  !*** ./src/app/model/select.ts ***!
  \*********************************/
/*! exports provided: Select */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Select", function() { return Select; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class Select {
}


/***/ }),

/***/ "./src/app/model/user-product-price-management.ts":
/*!********************************************************!*\
  !*** ./src/app/model/user-product-price-management.ts ***!
  \********************************************************/
/*! exports provided: UserProductPriceManagement */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserProductPriceManagement", function() { return UserProductPriceManagement; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class UserProductPriceManagement {
    constructor() {
        this.preOrderPriceManagementDtoList = new Array();
    }
}


/***/ }),

/***/ "./src/app/model/user.ts":
/*!*******************************!*\
  !*** ./src/app/model/user.ts ***!
  \*******************************/
/*! exports provided: User */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "User", function() { return User; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class User {
}


/***/ }),

/***/ "./src/app/model/vendor-product-price-management.ts":
/*!**********************************************************!*\
  !*** ./src/app/model/vendor-product-price-management.ts ***!
  \**********************************************************/
/*! exports provided: VendorProductPriceManagement */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VendorProductPriceManagement", function() { return VendorProductPriceManagement; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class VendorProductPriceManagement {
}


/***/ }),

/***/ "./src/app/model/wallet-details.ts":
/*!*****************************************!*\
  !*** ./src/app/model/wallet-details.ts ***!
  \*****************************************/
/*! exports provided: WalletDetails */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WalletDetails", function() { return WalletDetails; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class WalletDetails {
}


/***/ }),

/***/ "./src/app/model/warehouse-user-mapping.ts":
/*!*************************************************!*\
  !*** ./src/app/model/warehouse-user-mapping.ts ***!
  \*************************************************/
/*! exports provided: WarehouseUserMapping */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WarehouseUserMapping", function() { return WarehouseUserMapping; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class WarehouseUserMapping {
}


/***/ }),

/***/ "./src/app/model/warehouse.ts":
/*!************************************!*\
  !*** ./src/app/model/warehouse.ts ***!
  \************************************/
/*! exports provided: Warehouse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Warehouse", function() { return Warehouse; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class Warehouse {
}


/***/ }),

/***/ "./src/app/moduels/auth/auth-routing.module.ts":
/*!*****************************************************!*\
  !*** ./src/app/moduels/auth/auth-routing.module.ts ***!
  \*****************************************************/
/*! exports provided: AuthRoutingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AuthRoutingModule", function() { return AuthRoutingModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var _login_login_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./login/login.component */ "./src/app/moduels/auth/login/login.component.ts");




const routes = [
    {
        path: '',
        component: _login_login_component__WEBPACK_IMPORTED_MODULE_3__["LoginComponent"]
    }
];
let AuthRoutingModule = class AuthRoutingModule {
};
AuthRoutingModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"].forChild(routes)],
        exports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"]]
    })
], AuthRoutingModule);



/***/ }),

/***/ "./src/app/moduels/auth/auth.module.ts":
/*!*********************************************!*\
  !*** ./src/app/moduels/auth/auth.module.ts ***!
  \*********************************************/
/*! exports provided: AuthModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AuthModule", function() { return AuthModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _auth_routing_module__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./auth-routing.module */ "./src/app/moduels/auth/auth-routing.module.ts");
/* harmony import */ var _login_login_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./login/login.component */ "./src/app/moduels/auth/login/login.component.ts");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");






let AuthModule = class AuthModule {
};
AuthModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        declarations: [_login_login_component__WEBPACK_IMPORTED_MODULE_4__["LoginComponent"]],
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _auth_routing_module__WEBPACK_IMPORTED_MODULE_3__["AuthRoutingModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormsModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_5__["ReactiveFormsModule"],
        ]
    })
], AuthModule);



/***/ }),

/***/ "./src/app/moduels/auth/login/login.component.css":
/*!********************************************************!*\
  !*** ./src/app/moduels/auth/login/login.component.css ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n  }\r\n  \r\n\r\ndiv#forgot {\r\n  text-align: right;\r\n  margin-top: -41px;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n}\r\n  \r\n\r\ndiv#register {\r\n  text-align: left;\r\n  font-weight: bold;\r\n}\r\n  \r\n\r\n.input-vendor {\r\n  height: 50px;\r\n  background: #ebf4f9;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWVscy9hdXRoL2xvZ2luL2xvZ2luLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0lBQ0ksb0JBQW9CO0lBQ3BCLGVBQWU7SUFDZixpQkFBaUI7RUFDbkI7OztBQUdGO0VBQ0UsaUJBQWlCO0VBQ2pCLGlCQUFpQjtFQUNqQixlQUFlO0VBQ2YsaUJBQWlCO0FBQ25COzs7QUFHQTtFQUNFLGdCQUFnQjtFQUNoQixpQkFBaUI7QUFDbkI7OztBQUNBO0VBQ0UsWUFBWTtFQUNaLG1CQUFtQjtBQUNyQiIsImZpbGUiOiJzcmMvYXBwL21vZHVlbHMvYXV0aC9sb2dpbi9sb2dpbi5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbi5idG4uYnRuLWxnIHtcclxuICAgIHBhZGRpbmc6IDFyZW0gMi40cmVtO1xyXG4gICAgZm9udC1zaXplOiAxN3B4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgfVxyXG4gIFxyXG5cclxuZGl2I2ZvcmdvdCB7XHJcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XHJcbiAgbWFyZ2luLXRvcDogLTQxcHg7XHJcbiAgZm9udC1zaXplOiAxNnB4O1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcblxyXG5cclxuZGl2I3JlZ2lzdGVyIHtcclxuICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcbi5pbnB1dC12ZW5kb3Ige1xyXG4gIGhlaWdodDogNTBweDtcclxuICBiYWNrZ3JvdW5kOiAjZWJmNGY5O1xyXG59Il19 */");

/***/ }),

/***/ "./src/app/moduels/auth/login/login.component.ts":
/*!*******************************************************!*\
  !*** ./src/app/moduels/auth/login/login.component.ts ***!
  \*******************************************************/
/*! exports provided: LoginComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoginComponent", function() { return LoginComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/auth.service */ "./src/app/services/auth.service.ts");
/* harmony import */ var src_app_services_navbar_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/services/navbar.service */ "./src/app/services/navbar.service.ts");
/* harmony import */ var src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/services/usermanagement.service */ "./src/app/services/usermanagement.service.ts");






let LoginComponent = class LoginComponent {
    constructor(router, _auth, nav, userservice) {
        this.router = router;
        this._auth = _auth;
        this.nav = nav;
        this.userservice = userservice;
        this.loginUserData = {};
        this.GOOGLE_AUTH_URL = "http://localhost:8080/oauth2/authorize/google?redirect_uri=http://localhost:4200/onetime";
    }
    ngOnInit() {
        this.nav.hide();
    }
    onSubmit() {
        this._auth.setUserData(this.loginUserData);
        this._auth.onLogin(this.loginUserData)
            .subscribe(data => {
            this.token = data['accessToken'];
            console.log(data);
            console.log(this.token);
            sessionStorage.setItem(`token`, this.token);
            this._auth.generateOtp().subscribe(data => {
                console.log(data);
            }, error => console.log(error));
            console.log('OTP Generation service called');
            this.router.navigate(['/onetime']);
        }, error => {
            console.log(error);
            this.passwrodMissmatch = "missmatch";
        });
    }
};
LoginComponent.ctorParameters = () => [
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"] },
    { type: src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_3__["AuthService"] },
    { type: src_app_services_navbar_service__WEBPACK_IMPORTED_MODULE_4__["NavbarService"] },
    { type: src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_5__["UsermanagementService"] }
];
LoginComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-login',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./login.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/moduels/auth/login/login.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./login.component.css */ "./src/app/moduels/auth/login/login.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"], src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_3__["AuthService"],
        src_app_services_navbar_service__WEBPACK_IMPORTED_MODULE_4__["NavbarService"],
        src_app_services_usermanagement_service__WEBPACK_IMPORTED_MODULE_5__["UsermanagementService"]])
], LoginComponent);



/***/ }),

/***/ "./src/app/mustmatch.directive.ts":
/*!****************************************!*\
  !*** ./src/app/mustmatch.directive.ts ***!
  \****************************************/
/*! exports provided: MustmatchDirective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MustmatchDirective", function() { return MustmatchDirective; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var _shared_must_match_validator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shared/must-match.validator */ "./src/app/shared/must-match.validator.ts");

var MustmatchDirective_1;



let MustmatchDirective = MustmatchDirective_1 = class MustmatchDirective {
    constructor() {
        this.mustMatch = [];
    }
    validate(formGroup) {
        return Object(_shared_must_match_validator__WEBPACK_IMPORTED_MODULE_3__["MustMatch"])(this.mustMatch[0], this.mustMatch[1]);
    }
};
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])('mustMatch'),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Array)
], MustmatchDirective.prototype, "mustMatch", void 0);
MustmatchDirective = MustmatchDirective_1 = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"])({
        selector: '[mustMatch]',
        providers: [{ provide: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["NG_VALIDATORS"], useExisting: MustmatchDirective_1, multi: true }]
    })
], MustmatchDirective);



/***/ }),

/***/ "./src/app/services/alert.service.ts":
/*!*******************************************!*\
  !*** ./src/app/services/alert.service.ts ***!
  \*******************************************/
/*! exports provided: AlertService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AlertService", function() { return AlertService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var _api_service_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../api/service.service */ "./src/app/api/service.service.ts");




let AlertService = class AlertService {
    constructor(http, apiservice) {
        this.http = http;
        this.apiservice = apiservice;
        this.baseUrl = this.apiservice.getbaseUrl();
    }
    getAlertList() {
        return this.http.get(`${this.baseUrl}` + 'alerts-list');
    }
    createAlert(alert) {
        return this.http.post(`${this.baseUrl}` + 'saveAlert', alert);
    }
    createAlertEvent(alertEvent) {
        return this.http.post(`${this.baseUrl}` + 'saveAlertEvent', alertEvent);
    }
    deleteAlert(alertId) {
        return this.http.delete(`${this.baseUrl}` + `deleteAlerts/${alertId}`);
    }
    deleteEvent(eventId) {
        return this.http.delete(`${this.baseUrl}` + `deleteEvent/${eventId}`);
    }
    getAlert(id) {
        return this.http.get(`${this.baseUrl}/alerts/${id}`);
    }
    updateAlert(id, value) {
        return this.http.post(`${this.baseUrl}/update-alerts/${id}`, value);
    }
};
AlertService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] },
    { type: _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"] }
];
AlertService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"], _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"]])
], AlertService);



/***/ }),

/***/ "./src/app/services/alertmanagement.service.ts":
/*!*****************************************************!*\
  !*** ./src/app/services/alertmanagement.service.ts ***!
  \*****************************************************/
/*! exports provided: AlertmanagementService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AlertmanagementService", function() { return AlertmanagementService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var _api_service_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../api/service.service */ "./src/app/api/service.service.ts");




let AlertmanagementService = class AlertmanagementService {
    constructor(http, apiservice) {
        this.http = http;
        this.apiservice = apiservice;
        this.baseUrl = this.apiservice.getbaseUrl();
    }
    getAllAlerts() {
        return this.http.get(this.baseUrl + "showAllActiveAlerts");
    }
    getAllAlertEvents() {
        return this.http.get(this.baseUrl + "getAllAlertEvents");
    }
    getAllUserRoles() {
        return this.http.get(this.baseUrl + "getAllUserRoles");
    }
    getAllAlertNotificationMethods() {
        return this.http.get(this.baseUrl + "getAllAlertNotificationMethods");
    }
};
AlertmanagementService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] },
    { type: _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"] }
];
AlertmanagementService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"], _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"]])
], AlertmanagementService);



/***/ }),

/***/ "./src/app/services/auth.service.ts":
/*!******************************************!*\
  !*** ./src/app/services/auth.service.ts ***!
  \******************************************/
/*! exports provided: AuthService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AuthService", function() { return AuthService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var _api_service_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../api/service.service */ "./src/app/api/service.service.ts");




let AuthService = class AuthService {
    constructor(http, apiservice) {
        this.http = http;
        this.apiservice = apiservice;
        this.baseUrl = this.apiservice.getbaseUrl();
        this._loginUri = "auth/login";
        this._logoutUri = "logout";
        this._generateOtpUrl = "generateOtp";
        this._validateOtpUrl = "validateOtp";
        this._generateRegistrationOtpUrl = "register/generateRegistrationOtp";
        this._validateRegistrationOtpUrl = "register/validateRegistrationOtp";
        this._registerUserDataUrl = "registerUser";
        this._changePasswordUrl = "register/changePassword";
    }
    onLogin(user) {
        return this.http.post(this.baseUrl + this._loginUri, user);
    }
    generateOtp() {
        return this.http.get(this.baseUrl + this._generateOtpUrl);
    }
    validateOtp(otp) {
        return this.http.post(this.baseUrl + this._validateOtpUrl, otp);
    }
    logout() {
        return this.http.post(this.baseUrl + this._logoutUri, null);
    }
    generateRegistrationOtp(userName) {
        console.log("IN userName=" + userName);
        return this.http.get(this.baseUrl + this._generateRegistrationOtpUrl + `/${userName}`).subscribe(data => {
            console.log(data);
        });
    }
    validateRegistrationOtp(otp, userName) {
        console.log("=====UserName==" + userName);
        return this.http.post(this.baseUrl + this._validateRegistrationOtpUrl, { otp, userName });
    }
    registerUserData(user, address) {
        console.log("=====user email==" + user.email + " mobile==" + user.mobileNumber);
        console.log("=======addressLine1=" + address.addressLine1 + " countryId==" + address.countryId);
        return this.http.post(this.baseUrl + this._registerUserDataUrl, { user, address });
    }
    isUserExists(email) {
        return this.http.get(`${this.baseUrl}` + `register/isUserExists` + `/${email}`);
    }
    setUserData(user) {
        this.userData = user;
    }
    getUserData() {
        return this.userData;
    }
    changePassword(user) {
        return this.http.post(this.baseUrl + this._changePasswordUrl, user);
    }
};
AuthService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] },
    { type: _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"] }
];
AuthService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"], _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"]])
], AuthService);



/***/ }),

/***/ "./src/app/services/country.service.ts":
/*!*********************************************!*\
  !*** ./src/app/services/country.service.ts ***!
  \*********************************************/
/*! exports provided: CountryService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CountryService", function() { return CountryService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var _api_service_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../api/service.service */ "./src/app/api/service.service.ts");




let CountryService = class CountryService {
    constructor(http, apiservice) {
        this.http = http;
        this.apiservice = apiservice;
        this.baseUrl = this.apiservice.getbaseUrl();
    }
    getAllCountries() {
        return this.http.get(this.baseUrl + "getAllCountries");
    }
    getStates(countryId) {
        return this.http.get(`${this.baseUrl}` + `getStates` + `/${countryId}`);
    }
    getCities(stateId) {
        return this.http.get(`${this.baseUrl}` + `getCities` + `/${stateId}`);
    }
    getCityById(cityId) {
        return this.http.get(`${this.baseUrl}` + `getCity` + `/${cityId}`);
    }
    getCountriesForRegistration() {
        return this.http.get(this.baseUrl + "register/getAllCountries");
    }
    getStatesForRegistration(countryId) {
        return this.http.get(`${this.baseUrl}` + `register/getStates` + `/${countryId}`);
    }
    getCitiesForRegistration(stateId) {
        return this.http.get(`${this.baseUrl}` + `register/getCities` + `/${stateId}`);
    }
    getStateById(stateId) {
        return this.http.get(`${this.baseUrl}` + `getStateById` + `/${stateId}`);
    }
    getStateByIdForRegistration(stateId) {
        return this.http.get(`${this.baseUrl}` + `register/getStateById` + `/${stateId}`);
    }
    getRegionsByCountryId(countryId) {
        return this.http.get(`${this.baseUrl}` + `getRegionsByCountryId` + `/${countryId}`);
    }
    getStatesByCountryIdAndRegion(countryId, region) {
        return this.http.get(`${this.baseUrl}` + `getStatesByCountryIdAndRegion` + `/${countryId}` + `/${region}`);
    }
    getCurrencyByCountryCode(countryCode) {
        return this.http.get(`${this.baseUrl}` + `currencyByCountryCode` + `/${countryCode}`);
    }
};
CountryService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] },
    { type: _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"] }
];
CountryService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"], _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"]])
], CountryService);



/***/ }),

/***/ "./src/app/services/credit-limit-management.service.ts":
/*!*************************************************************!*\
  !*** ./src/app/services/credit-limit-management.service.ts ***!
  \*************************************************************/
/*! exports provided: CreditLimitManagementService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreditLimitManagementService", function() { return CreditLimitManagementService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var _api_service_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../api/service.service */ "./src/app/api/service.service.ts");




let CreditLimitManagementService = class CreditLimitManagementService {
    constructor(http, apiservice) {
        this.http = http;
        this.apiservice = apiservice;
        this.baseUrl = this.apiservice.getbaseUrl();
    }
    saveCreditLimit(credit) {
        return this.http.post(this.baseUrl + "saveCreditLimit", credit);
    }
    getCreditLimit(uniqueUserId) {
        return this.http.get(`${this.baseUrl}` + `getCreditLimit` + `/${uniqueUserId}`);
    }
    getCreditLimitManagementList() {
        return this.http.get(`${this.baseUrl}` + `getCreditLimitManagementList`);
    }
    getPremiumMembershipList() {
        return this.http.get(`${this.baseUrl}` + `getPremiumMembershipList`);
    }
    getPremiumMembersRequestedList() {
        return this.http.get(`${this.baseUrl}` + `getPremiumMembersRequestedList`);
    }
    updateCreditLimit(managementId, value) {
        return this.http.put(`${this.baseUrl}` + `updateCreditLimit` + `/${managementId}`, value);
    }
    getCreditSummaryListForLoggedInUser() {
        return this.http.get(`${this.baseUrl}` + `getCreditSummaryListForLoggedInUser`);
    }
};
CreditLimitManagementService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] },
    { type: _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"] }
];
CreditLimitManagementService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"], _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"]])
], CreditLimitManagementService);



/***/ }),

/***/ "./src/app/services/custom-auth-http-interceptor.service.ts":
/*!******************************************************************!*\
  !*** ./src/app/services/custom-auth-http-interceptor.service.ts ***!
  \******************************************************************/
/*! exports provided: CustomAuthHttpInterceptorService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomAuthHttpInterceptorService", function() { return CustomAuthHttpInterceptorService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
/* harmony import */ var _usermanagement_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./usermanagement.service */ "./src/app/services/usermanagement.service.ts");





let CustomAuthHttpInterceptorService = class CustomAuthHttpInterceptorService {
    constructor(router, userService) {
        this.router = router;
        this.userService = userService;
    }
    intercept(req, next) {
        if (sessionStorage.getItem('token')) {
            if (!sessionStorage.getItem('role')) {
                this.getRoleFromToken(sessionStorage.getItem('token'));
            }
            req = req.clone({
                setHeaders: {
                    Authorization: "Bearer " + sessionStorage.getItem('token')
                }
            });
        }
        return next.handle(req).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])(null, error => {
            if (error.status === 401) {
                this.router.navigate(["/login"]);
            }
        }));
    }
    getRoleFromToken(jwt) {
        let jwtData = jwt.split('.')[1];
        let decodedJwtJsonData = window.atob(jwtData);
        let decodedJwtData = JSON.parse(decodedJwtJsonData);
        console.log(decodedJwtJsonData);
        console.log(decodedJwtData);
        sessionStorage.setItem('role', decodedJwtData.ROLE);
        this.setDisplayName(decodedJwtData);
    }
    setDisplayName(tokenData) {
        let userId = tokenData.sub;
        console.log(userId);
        let v = this.userService.getUser(userId);
        v.subscribe((data) => {
            console.log(data);
            let userName = data['lastName'] != null ? data['firstName'] + " " + data['lastName'] : data['firstName'];
            sessionStorage.setItem('userName', userName);
        });
    }
};
CustomAuthHttpInterceptorService.ctorParameters = () => [
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"] },
    { type: _usermanagement_service__WEBPACK_IMPORTED_MODULE_4__["UsermanagementService"] }
];
CustomAuthHttpInterceptorService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"], _usermanagement_service__WEBPACK_IMPORTED_MODULE_4__["UsermanagementService"]])
], CustomAuthHttpInterceptorService);



/***/ }),

/***/ "./src/app/services/dashboard.service.ts":
/*!***********************************************!*\
  !*** ./src/app/services/dashboard.service.ts ***!
  \***********************************************/
/*! exports provided: DashboardService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DashboardService", function() { return DashboardService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var _api_service_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../api/service.service */ "./src/app/api/service.service.ts");




let DashboardService = class DashboardService {
    constructor(http, apiservice) {
        this.http = http;
        this.apiservice = apiservice;
        this.baseUrl = this.apiservice.getbaseUrl();
        this._userManagementUri = this.baseUrl + "showAllUsers";
        this._userManagementShoUserUri = this.baseUrl + "showAllRegisteredUsers";
    }
    showAllUsers(role) {
        console.log(role);
        return this.http.post(this._userManagementUri + "?role=" + role, null);
    }
    showAllRegisteredUsers() {
        return this.http.post(this._userManagementShoUserUri, null);
    }
};
DashboardService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] },
    { type: _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"] }
];
DashboardService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"], _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"]])
], DashboardService);



/***/ }),

/***/ "./src/app/services/end-user-recconcilation.service.ts":
/*!*************************************************************!*\
  !*** ./src/app/services/end-user-recconcilation.service.ts ***!
  \*************************************************************/
/*! exports provided: EndUserRecconcilationService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EndUserRecconcilationService", function() { return EndUserRecconcilationService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var _api_service_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../api/service.service */ "./src/app/api/service.service.ts");




let EndUserRecconcilationService = class EndUserRecconcilationService {
    constructor(http, apiservice) {
        this.http = http;
        this.apiservice = apiservice;
        this.baseUrl = this.apiservice.getbaseUrl();
    }
    getEndUserReconcilation() {
        return this.http.get(this.baseUrl + "getEndUserReconcilation");
    }
    getCorporateUserReconcilation() {
        return this.http.get(this.baseUrl + "getCorporateUserReconcilation");
    }
    getVendorReconcilation() {
        return this.http.get(this.baseUrl + "getVendorReconcilation");
    }
    getVendorReconcilationForLoggedInVendorUser() {
        return this.http.get(this.baseUrl + "getVendorReconcilationForLoggedInVendorUser");
    }
    getVendorReconcilationForLoggedInWarehouseUser() {
        return this.http.get(this.baseUrl + "getVendorReconcilationForLoggedInWarehouseUser");
    }
    getVendorAccountDetails() {
        return this.http.get(this.baseUrl + "getVendorAccountSummaryDetails");
    }
    getAllVendorAccountSummaryDetails() {
        return this.http.get(this.baseUrl + "getAllVendorAccountSummaryDetails");
    }
};
EndUserRecconcilationService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] },
    { type: _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"] }
];
EndUserRecconcilationService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"], _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"]])
], EndUserRecconcilationService);



/***/ }),

/***/ "./src/app/services/equipment.service.ts":
/*!***********************************************!*\
  !*** ./src/app/services/equipment.service.ts ***!
  \***********************************************/
/*! exports provided: EquipmentService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EquipmentService", function() { return EquipmentService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var _api_service_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../api/service.service */ "./src/app/api/service.service.ts");




let EquipmentService = class EquipmentService {
    constructor(http, apiservice) {
        this.http = http;
        this.apiservice = apiservice;
        this.baseUrl = this.apiservice.getbaseUrl();
    }
    getAllEquipments() {
        return this.http.get(this.baseUrl + "showEquipments");
    }
    saveEquipment(equipment) {
        return this.http.post(this.baseUrl + "saveEquipment", equipment);
    }
    getEquipment(equipmentId) {
        return this.http.get(`${this.baseUrl}` + `getEquipment` + `/${equipmentId}`);
    }
    deleteEquipment(equipmentId) {
        return this.http.delete(`${this.baseUrl}` + `deleteEquipment` + `/${equipmentId}`);
    }
    updateEquipment(equipmentId, value) {
        return this.http.put(`${this.baseUrl}` + `updateEquipment` + `/${equipmentId}`, value);
    }
    getAllMakers() {
        return this.http.get(this.baseUrl + "getAllMakers");
    }
    getEquipmentNames(equipmentMaker) {
        return this.http.get(`${this.baseUrl}` + `getEquipmentNames` + `/${equipmentMaker}`);
    }
    getEquipmentByType(equipmentName) {
        return this.http.get(`${this.baseUrl}` + `getEquipmentByType` + `/${equipmentName}`);
    }
    getAllMakersForRegistration() {
        return this.http.get(this.baseUrl + "register/getAllMakers");
    }
    getEquipmentNamesForRegistration(equipmentMaker) {
        return this.http.get(`${this.baseUrl}` + `register/getEquipmentNames` + `/${equipmentMaker}`);
    }
    getEquipmentByTypeForRegistration(equipmentName) {
        console.log(equipmentName);
        return this.http.get(`${this.baseUrl}` + `register/getEquipmentByType` + `/${equipmentName}`);
    }
    getEquipmentsByMakerAndName(equipmentMaker, equipmentName) {
        return this.http.get(`${this.baseUrl}` + `register/getEquipmentsByMakerAndName` + `/${equipmentMaker}` + `/${equipmentName}`);
    }
    saveEquipmentProductMapping(value) {
        return this.http.post(`${this.baseUrl}` + `register/saveEquipmentProductMapping`, value);
    }
    getEquipmentProducts(officeId) {
        return this.http.get(this.baseUrl + "getEquipmentProducts" + `/${officeId}`);
    }
    getEquipmentProductMappingByCustomerId(customerId) {
        return this.http.get(`${this.baseUrl}` + `getEquipmentProductMappingByCustomerId` + `/${customerId}`);
    }
    getRegisteredUserMobiles() {
        return this.http.get(`${this.baseUrl}` + `getRegisteredUserMobiles`);
    }
    registeredUserMobile(mobileNo) {
        return this.http.post(`${this.baseUrl}` + `registeredUserMobile`, mobileNo);
    }
    linkRegisteredUserMobile(EquipmentLinkedMobile) {
        return this.http.post(`${this.baseUrl}` + `linkRegisteredUserMobile`, EquipmentLinkedMobile);
    }
    getRegisteredCorporateMobiles(officeId) {
        return this.http.get(`${this.baseUrl}` + `getRegisteredCorporateMobiles` + `/${officeId}`);
    }
    registeredCorporateMobile(officeId, mobileNo) {
        return this.http.post(`${this.baseUrl}` + `registeredCorporateMobile` + `/${officeId}`, mobileNo);
    }
};
EquipmentService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] },
    { type: _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"] }
];
EquipmentService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"], _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"]])
], EquipmentService);



/***/ }),

/***/ "./src/app/services/master-organisation.service.ts":
/*!*********************************************************!*\
  !*** ./src/app/services/master-organisation.service.ts ***!
  \*********************************************************/
/*! exports provided: MasterOrganisationService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MasterOrganisationService", function() { return MasterOrganisationService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var _api_service_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../api/service.service */ "./src/app/api/service.service.ts");




let MasterOrganisationService = class MasterOrganisationService {
    constructor(http, apiservice) {
        this.http = http;
        this.apiservice = apiservice;
        this.baseUrl = this.apiservice.getbaseUrl();
    }
    getAllVendors(type) {
        return this.http.get(this.baseUrl + "showVendors" + `/${type}`);
    }
    showOrganizations(type) {
        return this.http.get(this.baseUrl + "showOrganizations" + `/${type}`);
    }
    getVendorTypes() {
        return this.http.get(this.baseUrl + "getVendorTypes");
    }
    getInternalVendorType() {
        return this.http.get(this.baseUrl + "getInternalVendorType");
    }
    getParametersByParamType(type) {
        return this.http.get(this.baseUrl + "getParametersByParamType" + `/${type}`);
    }
    registerVendor(vendor) {
        return this.http.post(this.baseUrl + "registerVendor", vendor);
    }
    getVendor(organisationId) {
        return this.http.get(`${this.baseUrl}` + `getVendor` + `/${organisationId}`);
    }
    deleteVendor(organisationId) {
        return this.http.delete(`${this.baseUrl}` + `deleteVendor` + `/${organisationId}`);
    }
    updateVendor(organisationId, value) {
        return this.http.put(`${this.baseUrl}` + `updateVendor` + `/${organisationId}`, value);
    }
    getVendorsForSelectedType(vendorTypeId) {
        return this.http.get(`${this.baseUrl}` + `getVendorsForSelectedType` + `/${vendorTypeId}`);
    }
    getCorporateOfficeForSupervisor() {
        return this.http.get(this.baseUrl + "getCorporateOfficeForSupervisor");
    }
};
MasterOrganisationService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] },
    { type: _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"] }
];
MasterOrganisationService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"], _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"]])
], MasterOrganisationService);



/***/ }),

/***/ "./src/app/services/master-paramters.service.ts":
/*!******************************************************!*\
  !*** ./src/app/services/master-paramters.service.ts ***!
  \******************************************************/
/*! exports provided: MasterParamtersService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MasterParamtersService", function() { return MasterParamtersService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var _api_service_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../api/service.service */ "./src/app/api/service.service.ts");




let MasterParamtersService = class MasterParamtersService {
    constructor(http, apiservice) {
        this.http = http;
        this.apiservice = apiservice;
        this.baseUrl = this.apiservice.getbaseUrl();
    }
    getProductUnits() {
        return this.http.get(this.baseUrl + "showProductUnits");
    }
    getEquipmentTypes() {
        return this.http.get(this.baseUrl + "showEquipmentTypes");
    }
    getEquipmentTypeList() {
        return this.http.get(this.baseUrl + "getEquipmentTypeList");
    }
    saveEquipmentType(equipmentType) {
        return this.http.post(this.baseUrl + "saveEquipmentType", equipmentType);
    }
    getMasterParameter(paramId) {
        return this.http.get(`${this.baseUrl}` + `getMasterParameter` + `/${paramId}`);
    }
    deleteEquipmentType(equipmentTypeId) {
        return this.http.delete(`${this.baseUrl}` + `deleteEquipmentType` + `/${equipmentTypeId}`);
    }
    updateEquipmentType(equipmentId, value) {
        return this.http.put(`${this.baseUrl}` + `updateEquipmentType` + `/${equipmentId}`, value);
    }
    getValueTypes() {
        return this.http.get(this.baseUrl + "getValueTypes");
    }
    getParametersByParamType(type) {
        return this.http.get(this.baseUrl + "getParametersByParamType" + `/${type}`);
    }
    getRewardPointConfiguration(userType) {
        return this.http.get(this.baseUrl + "rewardpointconfiguration" + `/${userType}`);
    }
    saveRewardConfiguration(rewardconfig) {
        return this.http.post(this.baseUrl + "saverewardpointconfiguration", rewardconfig);
    }
    removeRewardPointConfiguration(rewardConfigId) {
        return this.http.delete(this.baseUrl + "removerewardpointconfiguration" + `/${rewardConfigId}`);
    }
    getHighestRewardPointConfiguration(userType) {
        return this.http.get(this.baseUrl + "hiegestrewardLowerLimit" + `/${userType}`);
    }
    getUserRewardPoints() {
        return this.http.get(this.baseUrl + "userRewardPoints");
    }
    getCorporateRewardPoints() {
        return this.http.get(this.baseUrl + "corporateRewardPoints");
    }
    getRewardPointHistory(userRewardPointId) {
        return this.http.get(this.baseUrl + "rewardPointHistory" + `/${userRewardPointId}`);
    }
    userRewardPointsById(userId) {
        return this.http.get(this.baseUrl + "userRewardPointsById" + `/${userId}`);
    }
    getRewardConfiguration(userType, category) {
        return this.http.get(this.baseUrl + "rewardpointconfigurationByCategory" + `/${userType}` + `/${category}`);
    }
    redeemRewards(redeemReward) {
        return this.http.post(this.baseUrl + "redeemRewards", redeemReward);
    }
    getRewardPointHistoryByUser(userId) {
        return this.http.get(this.baseUrl + "getRewardPointHistoryByUser" + `/${userId}`);
    }
};
MasterParamtersService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] },
    { type: _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"] }
];
MasterParamtersService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"], _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"]])
], MasterParamtersService);



/***/ }),

/***/ "./src/app/services/master-product.service.ts":
/*!****************************************************!*\
  !*** ./src/app/services/master-product.service.ts ***!
  \****************************************************/
/*! exports provided: MasterProductService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MasterProductService", function() { return MasterProductService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var _api_service_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../api/service.service */ "./src/app/api/service.service.ts");




let MasterProductService = class MasterProductService {
    constructor(http, apiservice) {
        this.http = http;
        this.apiservice = apiservice;
        this.baseUrl = this.apiservice.getbaseUrl();
    }
    getAllProducts() {
        return this.http.get(this.baseUrl + "showProducts");
    }
    saveMasterProduct(product) {
        return this.http.post(this.baseUrl + "saveProduct", product);
    }
    deleteProduct(productId) {
        return this.http.delete(`${this.baseUrl}` + `deleteProduct` + `/${productId}`);
    }
    getProduct(productId) {
        return this.http.get(`${this.baseUrl}` + `getProduct` + `/${productId}`);
    }
    updateProduct(productId, value) {
        return this.http.put(`${this.baseUrl}` + `updateProduct` + `/${productId}`, value);
    }
    getAllSimilarProducts(productId) {
        return this.http.get(`${this.baseUrl}` + `getAllSimilarProducts` + `/${productId}`);
    }
    getProductListForSelectedVendor(vendorId) {
        return this.http.get(`${this.baseUrl}` + `getProductListForSelectedVendor` + `/${vendorId}`);
    }
    getAllProductsForRegistration() {
        return this.http.get(this.baseUrl + "register/showProducts");
    }
    getProductsByClassification(categoryId, manufactureYear) {
        return this.http.get(this.baseUrl + "register/getProductsByCategory" + `/${categoryId}` + `/${manufactureYear}`);
    }
    getAllProductManufacturingYears() {
        return this.http.get(this.baseUrl + "register/getAllProductManufacturingYears");
    }
};
MasterProductService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] },
    { type: _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"] }
];
MasterProductService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"], _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"]])
], MasterProductService);



/***/ }),

/***/ "./src/app/services/navbar.service.ts":
/*!********************************************!*\
  !*** ./src/app/services/navbar.service.ts ***!
  \********************************************/
/*! exports provided: NavbarService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NavbarService", function() { return NavbarService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var _api_service_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../api/service.service */ "./src/app/api/service.service.ts");




let NavbarService = class NavbarService {
    constructor(http, apiservice) {
        this.http = http;
        this.apiservice = apiservice;
        this.baseUrl = this.apiservice.getbaseUrl();
        this.visible = false;
    }
    hide() { this.visible = false; }
    show() { this.visible = true; }
    toggle() { this.visible = !this.visible; }
    getNotifications() {
        return this.http.get(`${this.baseUrl}` + `notification`);
    }
    readNotification(notificationId) {
        return this.http.put(`${this.baseUrl}` + `notification` + `/${notificationId}`, null);
    }
    setNotification(value) {
        this.notification = value;
    }
    getNotification() {
        return this.notification;
    }
};
NavbarService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] },
    { type: _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"] }
];
NavbarService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"], _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"]])
], NavbarService);



/***/ }),

/***/ "./src/app/services/order-management.service.ts":
/*!******************************************************!*\
  !*** ./src/app/services/order-management.service.ts ***!
  \******************************************************/
/*! exports provided: OrderManagementService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OrderManagementService", function() { return OrderManagementService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var _api_service_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../api/service.service */ "./src/app/api/service.service.ts");




let OrderManagementService = class OrderManagementService {
    constructor(http, apiservice) {
        this.http = http;
        this.apiservice = apiservice;
        this.baseUrl = this.apiservice.getbaseUrl();
    }
    getAllOrders() {
        return this.http.get(this.baseUrl + "getAllOrders");
    }
    getAllOrdersForLoggedInUser() {
        return this.http.get(this.baseUrl + "getAllOrdersForLoggedInUser");
    }
    getOrderManagementFromDate(date, productId, warehouseId) {
        return this.http.get(`${this.baseUrl}` + `getOrderManagementFromDate` + `/${date}` + `/${productId}` + `/${warehouseId}`);
    }
    getOrderManagement(orderManagement) {
        return this.http.post(this.baseUrl + "getOrderManagement", orderManagement);
    }
    saveOrder(orderManagement) {
        return this.http.post(this.baseUrl + "saveOrder", orderManagement);
    }
    getAvgConsumptionForLoggedInUser(productId, warehouseId, equipmentId) {
        return this.http.get(`${this.baseUrl}` + `getAvgConsumptionForLoggedInUser` + `/${productId}` + `/${warehouseId}` + `/${equipmentId}`);
    }
    getOrderConfigList() {
        return this.http.get(this.baseUrl + "getOrderConfigList");
    }
    saveOrderConfiguration(orderConfig) {
        return this.http.post(this.baseUrl + "saveOrderConfiguration", orderConfig);
    }
    getOrderConfiguration() {
        return this.http.get(this.baseUrl + "getOrderConfiguration");
    }
    getOrderManagementByOrderId(orderId) {
        return this.http.get(`${this.baseUrl}` + `getOrderManagementByOrderId` + `/${orderId}`);
    }
    getOrderManagementByOrderRefNumberAndWarehouse(orderRefNumber, warehouseId, customerId) {
        console.log(customerId);
        return this.http.get(`${this.baseUrl}` + `getOrderManagementByOrderRefNumberAndWarehouse` + `/${orderRefNumber}` + `/${warehouseId}` + `/${customerId}`);
    }
    setOrderId(value) {
        this.orderId = value;
    }
    getOrderId() {
        return this.orderId;
    }
    setOrderDto(value) {
        this.orderDto = value;
    }
    getOrderDto() {
        return this.orderDto;
    }
    setSource(value) {
        this.source = value;
    }
    getSource() {
        return this.source;
    }
    getPaymentPendingOrdersForLoggedInUser() {
        return this.http.get(this.baseUrl + "getPaymentPendingOrdersForLoggedInUser");
    }
};
OrderManagementService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] },
    { type: _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"] }
];
OrderManagementService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"], _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"]])
], OrderManagementService);



/***/ }),

/***/ "./src/app/services/order-processing-status-management.service.ts":
/*!************************************************************************!*\
  !*** ./src/app/services/order-processing-status-management.service.ts ***!
  \************************************************************************/
/*! exports provided: OrderProcessingStatusManagementService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OrderProcessingStatusManagementService", function() { return OrderProcessingStatusManagementService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var _api_service_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../api/service.service */ "./src/app/api/service.service.ts");




let OrderProcessingStatusManagementService = class OrderProcessingStatusManagementService {
    constructor(http, apiservice) {
        this.http = http;
        this.apiservice = apiservice;
        this.baseUrl = this.apiservice.getbaseUrl();
    }
    saveOrderProcessingStatusManagement(o) {
        return this.http.post(this.baseUrl + "saveOrderProcessingStatusManagement", o);
    }
    getOrderProcessingStatusManagementList() {
        return this.http.get(this.baseUrl + "getOrderProcessingStatusManagementList");
    }
    updateOrderProcessingStatusManagement(o) {
        return this.http.post(this.baseUrl + "updateOrderProcessingStatusManagement", o);
    }
    getLoggedInUserForOrderProcessing() {
        return this.http.get(this.baseUrl + "getLoggedInUserForOrderProcessing");
    }
    getOrderProcessingStatusManagementForLoggedInWarehouseUser() {
        return this.http.get(this.baseUrl + "getOrderProcessingStatusManagementForLoggedInWarehouseUser");
    }
    getOrderProcessingStatusManagementForLoggedInVendorUser() {
        return this.http.get(this.baseUrl + "getOrderProcessingStatusManagementForLoggedInVendorUser");
    }
    saveVirtualOrder(orderManagement) {
        return this.http.post(this.baseUrl + "saveVirtualOrder", orderManagement);
    }
    getSimilarProducts(productId, warehouseId) {
        return this.http.get(`${this.baseUrl}` + `getSimilarProducts` + `/${productId}` + `/${warehouseId}`);
    }
};
OrderProcessingStatusManagementService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] },
    { type: _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"] }
];
OrderProcessingStatusManagementService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"], _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"]])
], OrderProcessingStatusManagementService);



/***/ }),

/***/ "./src/app/services/payment.service.ts":
/*!*********************************************!*\
  !*** ./src/app/services/payment.service.ts ***!
  \*********************************************/
/*! exports provided: PaymentService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PaymentService", function() { return PaymentService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var _api_service_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../api/service.service */ "./src/app/api/service.service.ts");




let PaymentService = class PaymentService {
    constructor(http, apiservice) {
        this.http = http;
        this.apiservice = apiservice;
        this.baseUrl = this.apiservice.getbaseUrl();
        this.bankPayId = 0;
        this.chequePayId = 0;
        this.topupAmount = 0;
    }
    getPaymentMethods() {
        return this.http.get(this.baseUrl + "getPaymentMethods");
    }
    saveBankPayment(bankPayment) {
        return this.http.post(this.baseUrl + "saveBankPayment", bankPayment);
    }
    getAllPendingBankPayment() {
        return this.http.get(`${this.baseUrl}` + `getAllPendingBankPayment`);
    }
    getAllHoldBankPayment() {
        return this.http.get(`${this.baseUrl}` + `getAllHoldBankPayment`);
    }
    getPendingBankStatement() {
        return this.http.get(`${this.baseUrl}` + `getPendingBankStatement`);
    }
    saveChequePayment(chequePayment) {
        return this.http.post(this.baseUrl + "saveChequePayment", chequePayment);
    }
    getAllPendingTransaction(customerId, orgnisationRefNo) {
        return this.http.get(`${this.baseUrl}` + `getAllPendingTransaction` + `/${customerId}` + `/${orgnisationRefNo}`);
    }
    getAllPendingTopup(customerId, orgnisationRefNo) {
        return this.http.get(`${this.baseUrl}` + `getAllPendingTopup` + `/${customerId}` + `/${orgnisationRefNo}`);
    }
    getChequeCollectionModeChequeList() {
        return this.http.get(`${this.baseUrl}` + `getChequeCollectionModeChequeList`);
    }
    getChequeDeliveryModeChequeList() {
        return this.http.get(`${this.baseUrl}` + `getChequeDeliveryModeChequeList`);
    }
    getCollectionAndDeliveryModeChequeList() {
        return this.http.get(`${this.baseUrl}` + `getCollectionAndDeliveryModeChequeList`);
    }
    getDepositeChequeList() {
        return this.http.get(`${this.baseUrl}` + `getDepositeChequeList`);
    }
    getAllHoldChequePayment() {
        return this.http.get(`${this.baseUrl}` + `getAllHoldChequePayment`);
    }
    getAllHoldTopUp(customerId) {
        return this.http.get(`${this.baseUrl}` + `getAllHoldTopUp` + `/${customerId}`);
    }
    getBankPayment(bankPayId) {
        return this.http.get(`${this.baseUrl}` + `getBankPayment` + `/${bankPayId}`);
    }
    getChequePayment(chequePayId) {
        return this.http.get(`${this.baseUrl}` + `getChequePayment` + `/${chequePayId}`);
    }
    getApprovedChequePaymentList() {
        return this.http.get(`${this.baseUrl}` + `getApprovedChequePaymentList`);
    }
    getApprovedBankPaymentList() {
        return this.http.get(`${this.baseUrl}` + `getApprovedBankPaymentList`);
    }
    getApprovedOnlinePaymentList() {
        return this.http.get(`${this.baseUrl}` + `getApprovedOnlinePaymentList`);
    }
    getTopupSucessDetails(notification) {
        return this.http.post(this.baseUrl + "getTopupSucessDetails", notification);
    }
    saveOnlinePayment(onlinePayment) {
        return this.http.post(this.baseUrl + "saveOnlinePayment", onlinePayment);
    }
    setSource(value) {
        this.source = value;
    }
    getSource() {
        return this.source;
    }
    setIteration(value) {
        this.iteration = value;
    }
    getIteration() {
        return this.iteration;
    }
    setBankPayId(value) {
        this.bankPayId = value;
    }
    getBankPayId() {
        return this.bankPayId;
    }
    setChequePayId(value) {
        this.chequePayId = value;
    }
    getChequePayId() {
        return this.chequePayId;
    }
    getTopupAmount() {
        return this.topupAmount;
    }
    setTopupAmount(value) {
        this.topupAmount = value;
    }
    deleteBankPaymentTopup(bankPayid) {
        return this.http.delete(`${this.baseUrl}` + `deleteBankPaymentTopup` + `/${bankPayid}`);
    }
    cancelBankPaymentHoldTransaction(bankPayid) {
        return this.http.delete(`${this.baseUrl}` + `cancelBankPaymentHoldTransaction` + `/${bankPayid}`);
    }
    reProcessBankPaymentHoldTransaction(bankPayId) {
        return this.http.get(`${this.baseUrl}` + `reProcessBankPaymentHoldTransaction` + `/${bankPayId}`);
    }
    deleteChequePaymentTopup(chequePayId) {
        return this.http.delete(`${this.baseUrl}` + `deleteChequePaymentTopup` + `/${chequePayId}`);
    }
    cancelChequePaymentHoldTransaction(chequePayId) {
        return this.http.delete(`${this.baseUrl}` + `cancelChequePaymentHoldTransaction` + `/${chequePayId}`);
    }
    reProcessChequePaymentHoldTransaction(chequePayId) {
        return this.http.get(`${this.baseUrl}` + `reProcessChequePaymentHoldTransaction` + `/${chequePayId}`);
    }
    getChequeTypes() {
        return this.http.get(`${this.baseUrl}` + `getChequeTypes`);
    }
    setNotification(value) {
        this.notification = value;
    }
    getNotification() {
        return this.notification;
    }
    saveMultipleBankPayment(bankPaymentList) {
        return this.http.post(`${this.baseUrl}` + "saveMultipleBankPayment", bankPaymentList);
    }
    saveMultipleChequePayment(chequePaymentList) {
        return this.http.post(`${this.baseUrl}` + "saveMultipleChequePayment", chequePaymentList);
    }
    saveMultipleDepositChequePayment(chequePaymentList) {
        return this.http.post(`${this.baseUrl}` + "saveMultipleDepositChequePayment", chequePaymentList);
    }
    getAllPendingOnlinePayment() {
        return this.http.get(`${this.baseUrl}` + `getAllPendingOnlinePayment`);
    }
    getAllPendingAgreegatorPayment() {
        return this.http.get(`${this.baseUrl}` + `getAllPendingAgreegatorPayment`);
    }
    getAgreegatorSettlementByAgreegatorPayment(agreegatorPayment) {
        return this.http.post(this.baseUrl + "getAgreegatorSettlementByAgreegatorPayment", agreegatorPayment);
    }
    saveApprovedOnlinePayment(bankStmtId, onlinePayIds, aggPayId) {
        return this.http.get(`${this.baseUrl}` + `saveApprovedOnlinePayment` + `/${bankStmtId}` + `/${onlinePayIds}` + `/${aggPayId}`);
    }
    getCreditBankStatement() {
        return this.http.get(`${this.baseUrl}` + `getCreditBankStatement`);
    }
    getAllTransaction() {
        return this.http.get(`${this.baseUrl}` + `getAllTransaction`);
    }
    getBankStatementList() {
        return this.http.get(`${this.baseUrl}` + `getBankStatementList`);
    }
    download(chequeList) {
        return this.http.post(`${this.baseUrl}` + `checkpayment/exportExcel`, chequeList, { responseType: 'blob' });
    }
    getBankStmtFileDataList() {
        return this.http.get(`${this.baseUrl}` + `getBankStmtFileDataList`);
    }
    getBankStatementByStartIdEndId(startId, endId) {
        return this.http.get(`${this.baseUrl}` + `getBankStatementByStartIdEndId` + `/${startId}` + `/${endId}`);
    }
    getBankStatementCategoryList() {
        return this.http.get(`${this.baseUrl}` + `getBankStatementCategoryList`);
    }
    assignCategoryoBankStatements(category) {
        return this.http.post(this.baseUrl + "assignCategoryoBankStatements", category);
    }
    saveOfflinePayment(payment) {
        return this.http.post(this.baseUrl + "saveOfflinePayment", payment);
    }
    updateBankPayment(payment) {
        return this.http.post(this.baseUrl + "updateBankPayment", payment);
    }
    updateChequePayment(payment) {
        return this.http.post(this.baseUrl + "updateChequePayment", payment);
    }
    getAdminWallet(vendorId) {
        return this.http.get(`${this.baseUrl}` + `getAdminWallet` + `/${vendorId}`);
    }
    saveVendorOfflinePayment(payment) {
        return this.http.post(this.baseUrl + "saveVendorOfflinePayment", payment);
    }
    getAllPendingAdminTopup() {
        return this.http.get(`${this.baseUrl}` + `getAllPendingAdminTopup`);
    }
    getAdminDeliveredChequeList() {
        return this.http.get(`${this.baseUrl}` + `getAdminDeliveredChequeList`);
    }
    setPendingAdminTopup(value) {
        this.adminPendingTopup = value;
    }
    getPendingAdminTopup() {
        return this.adminPendingTopup;
    }
    getPendingAdminDeliveredChequeList() {
        return this.http.get(`${this.baseUrl}` + `getPendingAdminDeliveredChequeList`);
    }
    getVendorAccountDetails() {
        return this.http.get(`${this.baseUrl}` + `getVendorAccountDetails`);
    }
    getPendingVendorBankStatement() {
        return this.http.get(`${this.baseUrl}` + `getPendingVendorBankStatement`);
    }
    saveMultipleVendorPayment(vendorPaymentList) {
        return this.http.post(`${this.baseUrl}` + "saveMultipleVendorPayment", vendorPaymentList);
    }
    getPendingVendorBankPaymentList() {
        return this.http.get(`${this.baseUrl}` + `getPendingVendorBankPaymentList`);
    }
    getVendorBankPaymentList() {
        return this.http.get(`${this.baseUrl}` + `getVendorBankPaymentList`);
    }
    getVendorProductPrice(vendorId, warehouseId, productId) {
        return this.http.get(`${this.baseUrl}` + `getVendorProductPrice` + `/${vendorId}` + `/${warehouseId}` + `/${productId}`);
    }
    getVendorBankAccountDetails(organisationRefNo) {
        return this.http.get(this.baseUrl + "getVendorAccountDetails" + `/${organisationRefNo}`);
    }
    saveVendorAccountDetails(accountDetails) {
        return this.http.post(`${this.baseUrl}` + "saveVendorAccountDetails", accountDetails);
    }
    getAllVendorPendingTopup() {
        return this.http.get(this.baseUrl + "getAllVendorPendingTopup");
    }
    deleteVendorPendingPayment(adminVendorPaymentId) {
        return this.http.delete(`${this.baseUrl}` + `deleteVendorPendingPayment` + `/${adminVendorPaymentId}`);
    }
    getPassbookBalance() {
        return this.http.get(`${this.baseUrl}` + 'getPassbookBalance');
    }
    updateVendorBankPassbook(passbook) {
        return this.http.post(`${this.baseUrl}` + "updateVendorBankPassbook", passbook);
    }
};
PaymentService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] },
    { type: _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"] }
];
PaymentService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"], _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"]])
], PaymentService);



/***/ }),

/***/ "./src/app/services/pre-order-management.service.ts":
/*!**********************************************************!*\
  !*** ./src/app/services/pre-order-management.service.ts ***!
  \**********************************************************/
/*! exports provided: PreOrderManagementService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreOrderManagementService", function() { return PreOrderManagementService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var _api_service_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../api/service.service */ "./src/app/api/service.service.ts");




let PreOrderManagementService = class PreOrderManagementService {
    constructor(http, apiservice) {
        this.http = http;
        this.apiservice = apiservice;
        this.baseUrl = this.apiservice.getbaseUrl();
    }
    getAllPreOrders() {
        return this.http.get(this.baseUrl + "getAllPreOrders");
    }
    getAllUpcommingPreOrdersForLoggedInUser() {
        return this.http.get(this.baseUrl + "getAllUpcommingPreOrdersForLoggedInUser");
    }
    getAllPreviousPreOrdersForLoggedInUser() {
        return this.http.get(this.baseUrl + "getAllPreviousPreOrdersForLoggedInUser");
    }
    getPreOrderAvgConsumptionForLoggedInUser(productId, warehouseIds) {
        return this.http.get(`${this.baseUrl}` + `getPreOrderAvgConsumptionForLoggedInUser` + `/${productId}` + `/${warehouseIds}`);
    }
    getAllPreOrderForCurrentMonthAndYear(month, year, productId, warehouseId, configType) {
        return this.http.get(`${this.baseUrl}` + `getAllPreOrderForCurrentMonthAndYear` + `/${month}` + `/${year}` + `/${productId}` + `/${warehouseId}` + `/${configType}`);
    }
    getAllPreOrderForCurrentMonthYear(productId, warehouseId, configType) {
        return this.http.get(`${this.baseUrl}` + `getAllPreOrderForCurrentMonthYear` + `/${productId}` + `/${warehouseId}` + `/${configType}`);
    }
    getPreOrderManagementNew(preOrder) {
        return this.http.post(this.baseUrl + "getPreOrderManagementNew", preOrder);
    }
    getPreOrderManagement(preOrderManagement) {
        return this.http.post(this.baseUrl + "getPreOrderManagement", preOrderManagement);
    }
    savePreOrder(preOrder) {
        return this.http.post(this.baseUrl + "savePreOrder", preOrder);
    }
    getPreOrderYearsData() {
        return this.http.get(this.baseUrl + "getPreOrderYearsData");
    }
    getEquipmentProductMappingListForForLoggedInUser() {
        return this.http.get(this.baseUrl + "getEquipmentProductMappingListForForLoggedInUser");
    }
    getWarehouseProductMappingByMasterProducts(productId) {
        return this.http.get(`${this.baseUrl}` + `getWarehouseProductMappingByMasterProducts` + `/${productId}`);
    }
    getAllPreOrdersForCancellation() {
        return this.http.get(this.baseUrl + "getAllPreOrdersForCancellation");
    }
    cancelPreOrder(preOrderManagement) {
        return this.http.post(this.baseUrl + "cancelPreOrder", preOrderManagement);
    }
    // public setPreOrder(value){
    //   this.preOrderManagement = value;
    // }
    // public getPreOrder(){
    //   return this.preOrderManagement;
    // }
    setPreOrderDto(value) {
        this.preOrderDto = value;
    }
    getPreOrderDto() {
        return this.preOrderDto;
    }
    setPreOrderId(value) {
        this.preOrderId = value;
    }
    getPreOrderId() {
        return this.preOrderId;
    }
    setSource(value) {
        this.source = value;
    }
    getSource() {
        return this.source;
    }
    getPayPendingPreOrdersForLoggedInUser() {
        return this.http.get(this.baseUrl + "getPayPendingPreOrdersForLoggedInUser");
    }
    getPreOrderManagementByPreOrderId(preOrderId) {
        return this.http.get(`${this.baseUrl}` + `getPreOrderManagementByPreOrderId` + `/${preOrderId}`);
    }
};
PreOrderManagementService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] },
    { type: _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"] }
];
PreOrderManagementService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"], _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"]])
], PreOrderManagementService);



/***/ }),

/***/ "./src/app/services/price-management.service.ts":
/*!******************************************************!*\
  !*** ./src/app/services/price-management.service.ts ***!
  \******************************************************/
/*! exports provided: PriceManagementService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PriceManagementService", function() { return PriceManagementService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var _api_service_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../api/service.service */ "./src/app/api/service.service.ts");




let PriceManagementService = class PriceManagementService {
    constructor(http, apiservice) {
        this.http = http;
        this.apiservice = apiservice;
        this.baseUrl = this.apiservice.getbaseUrl();
    }
    saveMultipleVendorPrice(vendorProductPriceManagementList) {
        return this.http.post(this.baseUrl + "saveMultipleVendorPrice", vendorProductPriceManagementList);
    }
    getUserProductPriceManagement(productId, date) {
        return this.http.get(`${this.baseUrl}` + `getUserProductPriceManagement` + `/${productId}` + `/${date}`);
    }
    saveUserPrice(userProductPriceManagement) {
        return this.http.post(this.baseUrl + "saveUserPrice", userProductPriceManagement);
    }
    getAllListForVendorProductPrice() {
        return this.http.get(this.baseUrl + "getAllListForVendorProductPrice");
    }
    getVendorProductPrice(vendorProductPriceManagement) {
        return this.http.put(`${this.baseUrl}` + `getVendorProductPrice`, vendorProductPriceManagement);
    }
    getMasterProductsListForSelectedVendor(vendorProductPriceManagement) {
        return this.http.put(`${this.baseUrl}` + `getMasterProductsListForSelectedVendor`, vendorProductPriceManagement);
    }
    savePreOrderMarginAndCancellationCharges(preOrderMarginAndCancellationCharges) {
        return this.http.post(this.baseUrl + "savePreOrderMarginAndCancellationCharges", preOrderMarginAndCancellationCharges);
    }
    getPreOrderMarginAndCancellationCharges(productId) {
        return this.http.get(`${this.baseUrl}` + `getPreOrderMarginAndCancellationCharges` + `/${productId}`);
    }
    getWarehousesForSelectedProduct(productId) {
        return this.http.get(`${this.baseUrl}` + `getWarehousesForSelectedProduct` + `/${productId}`);
    }
    getVendorProductPriceForLoggedInVendorUser(productId) {
        return this.http.get(`${this.baseUrl}` + `getVendorProductPriceForLoggedInVendorUser` + `/${productId}`);
    }
    getMasterProductListForLoginVendorUser() {
        return this.http.get(this.baseUrl + "getMasterProductListForLoginVendorUser");
    }
};
PriceManagementService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] },
    { type: _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"] }
];
PriceManagementService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"], _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"]])
], PriceManagementService);



/***/ }),

/***/ "./src/app/services/product-category.service.ts":
/*!******************************************************!*\
  !*** ./src/app/services/product-category.service.ts ***!
  \******************************************************/
/*! exports provided: ProductCategoryService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProductCategoryService", function() { return ProductCategoryService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var _api_service_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../api/service.service */ "./src/app/api/service.service.ts");




let ProductCategoryService = class ProductCategoryService {
    constructor(http, apiservice) {
        this.http = http;
        this.apiservice = apiservice;
        this.baseUrl = this.apiservice.getbaseUrl();
    }
    getProductCategories() {
        return this.http.get(this.baseUrl + "register/showProductCategories");
    }
    getProductCategory(categoryId) {
        return this.http.get(`${this.baseUrl}` + `getProductCategory` + `/${categoryId}`);
    }
};
ProductCategoryService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] },
    { type: _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"] }
];
ProductCategoryService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"], _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"]])
], ProductCategoryService);



/***/ }),

/***/ "./src/app/services/unique-email-validator.directive.ts":
/*!**************************************************************!*\
  !*** ./src/app/services/unique-email-validator.directive.ts ***!
  \**************************************************************/
/*! exports provided: UniqueEmailValidatorDirective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UniqueEmailValidatorDirective", function() { return UniqueEmailValidatorDirective; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let UniqueEmailValidatorDirective = class UniqueEmailValidatorDirective {
    constructor() { }
};
UniqueEmailValidatorDirective = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"])({
        selector: '[uniqueEmail]',
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], UniqueEmailValidatorDirective);



/***/ }),

/***/ "./src/app/services/upload-file.service.ts":
/*!*************************************************!*\
  !*** ./src/app/services/upload-file.service.ts ***!
  \*************************************************/
/*! exports provided: UploadFileService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UploadFileService", function() { return UploadFileService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var _api_service_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../api/service.service */ "./src/app/api/service.service.ts");




let UploadFileService = class UploadFileService {
    constructor(http, apiservice) {
        this.http = http;
        this.apiservice = apiservice;
        this.baseUrl = this.apiservice.getbaseUrl();
    }
    upload(file) {
        const formData = new FormData();
        formData.append('file', file);
        const req = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('POST', `${this.baseUrl}/register/fileupload`, formData, {
            reportProgress: true,
            responseType: 'json'
        });
        return this.http.request(req);
    }
    settlementFileUpload(file) {
        const formData = new FormData();
        formData.append('file', file);
        const req = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('POST', `${this.baseUrl}/register/settlementfileupload`, formData, {
            reportProgress: true,
            responseType: 'json'
        });
        return this.http.request(req);
    }
    vendorBankStatementUpload(file) {
        const formData = new FormData();
        formData.append('file', file);
        const req = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('POST', `${this.baseUrl}register/vendorBankStatementUpload`, formData, {
            reportProgress: true,
            responseType: 'json',
        });
        return this.http.request(req);
    }
    getFiles() {
        return this.http.get(`${this.baseUrl}/files`);
    }
};
UploadFileService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] },
    { type: _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"] }
];
UploadFileService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"], _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"]])
], UploadFileService);



/***/ }),

/***/ "./src/app/services/usermanagement.service.ts":
/*!****************************************************!*\
  !*** ./src/app/services/usermanagement.service.ts ***!
  \****************************************************/
/*! exports provided: UsermanagementService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UsermanagementService", function() { return UsermanagementService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var _api_service_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../api/service.service */ "./src/app/api/service.service.ts");




let UsermanagementService = class UsermanagementService {
    constructor(http, apiservice) {
        this.http = http;
        this.apiservice = apiservice;
        this.baseUrl = this.apiservice.getbaseUrl();
        this._userManagementUri = this.baseUrl + "showAllUsers";
        this._userManagementSaveUri = this.baseUrl + "saveUser";
    }
    showAllUsers(role) {
        console.log(role);
        return this.http.post(this._userManagementUri + "?role=" + role, null);
    }
    saveUser(user) {
        return this.http.post(this._userManagementSaveUri, user);
    }
    updateUser(user) {
        console.log(user);
        return this.http.post(this._userManagementSaveUri, user);
    }
    delete(userId) {
        return this.http.delete(`${this.baseUrl}` + `deleteUserById` + `/${userId}`);
    }
    getAllUsers(role) {
        return this.http.get(`${this.baseUrl}` + `getAllUsers` + `/${role}`);
    }
    getUser(userId) {
        return this.http.get(`${this.baseUrl}` + `getUser` + `/${userId}`);
    }
    updateUserById(userId, value) {
        console.log(this.baseUrl + `updateUser/` + userId);
        console.log(value);
        return this.http.put(`${this.baseUrl}` + `updateUser` + `/${userId}`, value);
    }
    getSupervisorTypes() {
        return this.http.get(this.baseUrl + "getSupervisorTypes");
    }
    getLoggedInUser() {
        return this.http.get(`${this.baseUrl}` + `getLoggedInUser`);
    }
    setType(role) {
        this.type = role;
    }
    getType() {
        return this.type;
    }
};
UsermanagementService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] },
    { type: _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"] }
];
UsermanagementService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"], _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"]])
], UsermanagementService);



/***/ }),

/***/ "./src/app/services/wallet-detail.service.ts":
/*!***************************************************!*\
  !*** ./src/app/services/wallet-detail.service.ts ***!
  \***************************************************/
/*! exports provided: WalletDetailService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WalletDetailService", function() { return WalletDetailService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var _api_service_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../api/service.service */ "./src/app/api/service.service.ts");




let WalletDetailService = class WalletDetailService {
    constructor(http, apiservice) {
        this.http = http;
        this.apiservice = apiservice;
        this.baseUrl = this.apiservice.getbaseUrl();
    }
    getWalletDetailsForLoggedInUser() {
        return this.http.get(this.baseUrl + "getWalletDetailsForLoggedInUser");
    }
    getWalletDetailsForLoggedInUserAndAccountSummary() {
        return this.http.get(this.baseUrl + "getWalletDetailsForLoggedInUserAndAccountSummary");
    }
    addMoneyToWallet(walletDetails) {
        return this.http.post(this.baseUrl + "addMoneyToWallet", walletDetails);
    }
    changeIteration(value) {
        this.iteration = value;
    }
    getIteration() {
        return this.iteration;
    }
    getTopUpSequenceNo() {
        return this.http.get(this.baseUrl + "getTopUpSequenceNo");
    }
    getAdminBankDetails() {
        return this.http.get(this.baseUrl + "getAdminBankDetails");
    }
    setWalletDetails(value) {
        this.walletDetail = value;
    }
    getWalletDetail() {
        return this.walletDetail;
    }
    setBankPayment(value) {
        this.bankPayment = value;
    }
    getBankPayment() {
        return this.bankPayment;
    }
    setChequePayment(value) {
        this.chequePayment = value;
    }
    getChequePayment() {
        return this.chequePayment;
    }
    setSource(value) {
        this.source = value;
    }
    getSource() {
        return this.source;
    }
    getAdminTopUpSequenceNo() {
        return this.http.get(this.baseUrl + "getAdminTopUpSequenceNo");
    }
    getVendorAccountDetails(organisationRefNo) {
        return this.http.get(this.baseUrl + "getVendorAccountDetails" + `/${organisationRefNo}`);
    }
};
WalletDetailService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] },
    { type: _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"] }
];
WalletDetailService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"], _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"]])
], WalletDetailService);



/***/ }),

/***/ "./src/app/services/warehouse.service.ts":
/*!***********************************************!*\
  !*** ./src/app/services/warehouse.service.ts ***!
  \***********************************************/
/*! exports provided: WarehouseService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WarehouseService", function() { return WarehouseService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var _api_service_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../api/service.service */ "./src/app/api/service.service.ts");




let WarehouseService = class WarehouseService {
    constructor(http, apiservice) {
        this.http = http;
        this.apiservice = apiservice;
        this.baseUrl = this.apiservice.getbaseUrl();
    }
    getAllWarehouses() {
        return this.http.get(this.baseUrl + "getAllWarehouses");
    }
    saveWarehouse(warehouse) {
        return this.http.post(this.baseUrl + "saveWarehouse", warehouse);
    }
    deleteWarehouse(warehouseId) {
        return this.http.delete(`${this.baseUrl}` + `deleteWarehouse` + `/${warehouseId}`);
    }
    getWarehouse(warehouseId) {
        return this.http.get(`${this.baseUrl}` + `getWarehouse` + `/${warehouseId}`);
    }
    updateWarehouse(warehouseId, value) {
        return this.http.put(`${this.baseUrl}` + `updateWarehouse` + `/${warehouseId}`, value);
    }
    getWarehouseForSelectedVendor(vendorId) {
        return this.http.get(`${this.baseUrl}` + `getWarehouseForSelectedVendor` + `/${vendorId}`);
    }
    allocateWarehouseUser(warehouseUserMapping) {
        return this.http.post(this.baseUrl + "allocateWarehouseUser", warehouseUserMapping);
    }
    getAllocateWarehouseUser(userId) {
        return this.http.get(`${this.baseUrl}` + `getAllocateWarehouseUser` + `/${userId}`);
    }
    getWarehouseListForSelectedProduct(productId, vendorId) {
        return this.http.get(`${this.baseUrl}` + `getWarehouseListForSelectedProduct` + `/${productId}` + `/${vendorId}`);
    }
    getWarehouseForSelectedVendorAndCity(vendorId, cityId) {
        return this.http.get(`${this.baseUrl}` + `getWarehouseForSelectedVendorAndCity` + `/${vendorId}` + `/${cityId}`);
    }
};
WarehouseService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] },
    { type: _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"] }
];
WarehouseService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"], _api_service_service__WEBPACK_IMPORTED_MODULE_3__["ServiceService"]])
], WarehouseService);



/***/ }),

/***/ "./src/app/shared/must-match.validator.ts":
/*!************************************************!*\
  !*** ./src/app/shared/must-match.validator.ts ***!
  \************************************************/
/*! exports provided: MustMatch */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MustMatch", function() { return MustMatch; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

// custom validator to check that two fields match
function MustMatch(controlName, matchingControlName) {
    return (formGroup) => {
        const control = formGroup.controls[controlName];
        const matchingControl = formGroup.controls[matchingControlName];
        // return null if controls haven't initialised yet
        if (!control || !matchingControl) {
            return null;
        }
        // return null if another validator has already found an error on the matchingControl
        if (matchingControl.errors && !matchingControl.errors.mustMatch) {
            return null;
        }
        // set error on matchingControl if validation fails
        if (control.value !== matchingControl.value) {
            matchingControl.setErrors({ mustMatch: true });
        }
        else {
            matchingControl.setErrors(null);
        }
    };
}


/***/ }),

/***/ "./src/app/twodigitdecimalnumber.directive.ts":
/*!****************************************************!*\
  !*** ./src/app/twodigitdecimalnumber.directive.ts ***!
  \****************************************************/
/*! exports provided: TwodigitdecimalnumberDirective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TwodigitdecimalnumberDirective", function() { return TwodigitdecimalnumberDirective; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let TwodigitdecimalnumberDirective = class TwodigitdecimalnumberDirective {
    constructor(el) {
        this.el = el;
        this.regex = new RegExp(/^\d*\.?\d{0,2}$/g);
        this.specialKeys = ['Backspace', 'Tab', 'End', 'Home', 'ArrowLeft', 'ArrowRight', 'Del', 'Delete'];
    }
    onKeyDown(event) {
        console.log(this.el.nativeElement.value);
        if (this.specialKeys.indexOf(event.key) !== -1) {
            return;
        }
        let current = this.el.nativeElement.value;
        const position = this.el.nativeElement.selectionStart;
        const next = [current.slice(0, position), event.key == 'Decimal' ? '.' : event.key, current.slice(position)].join('');
        if (next && !String(next).match(this.regex)) {
            event.preventDefault();
        }
    }
};
TwodigitdecimalnumberDirective.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["HostListener"])('keydown', ['$event']),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Function),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [KeyboardEvent]),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:returntype", void 0)
], TwodigitdecimalnumberDirective.prototype, "onKeyDown", null);
TwodigitdecimalnumberDirective = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"])({
        selector: '[appTwodigitdecimalnumber]'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]])
], TwodigitdecimalnumberDirective);



/***/ }),

/***/ "./src/app/vendoruser/orderdetails/orderdetails.component.css":
/*!********************************************************************!*\
  !*** ./src/app/vendoruser/orderdetails/orderdetails.component.css ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\na.list-group-item {\r\n    font-size: larger;\r\n    font-weight: bold;\r\n    color: black;\r\n}\r\n.list-group-item {\r\n    border-top-left-radius: .25rem;\r\n    border-top-right-radius: .25rem;\r\n    margin: 3px;\r\n}\r\n.btn-primary {\r\n \r\n    float: right;\r\n}\r\n.btn-default {\r\n \r\n    float: right;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmVuZG9ydXNlci9vcmRlcmRldGFpbHMvb3JkZXJkZXRhaWxzLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0lBQ0ksaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUNqQixZQUFZO0FBQ2hCO0FBQ0E7SUFDSSw4QkFBOEI7SUFDOUIsK0JBQStCO0lBQy9CLFdBQVc7QUFDZjtBQUlBOztJQUVJLFlBQVk7QUFDaEI7QUFDQTs7SUFFSSxZQUFZO0FBQ2hCIiwiZmlsZSI6InNyYy9hcHAvdmVuZG9ydXNlci9vcmRlcmRldGFpbHMvb3JkZXJkZXRhaWxzLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuYS5saXN0LWdyb3VwLWl0ZW0ge1xyXG4gICAgZm9udC1zaXplOiBsYXJnZXI7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIGNvbG9yOiBibGFjaztcclxufVxyXG4ubGlzdC1ncm91cC1pdGVtIHtcclxuICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IC4yNXJlbTtcclxuICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAuMjVyZW07XHJcbiAgICBtYXJnaW46IDNweDtcclxufVxyXG5cclxuXHJcblxyXG4uYnRuLXByaW1hcnkge1xyXG4gXHJcbiAgICBmbG9hdDogcmlnaHQ7XHJcbn1cclxuLmJ0bi1kZWZhdWx0IHtcclxuIFxyXG4gICAgZmxvYXQ6IHJpZ2h0O1xyXG59Il19 */");

/***/ }),

/***/ "./src/app/vendoruser/orderdetails/orderdetails.component.ts":
/*!*******************************************************************!*\
  !*** ./src/app/vendoruser/orderdetails/orderdetails.component.ts ***!
  \*******************************************************************/
/*! exports provided: OrderdetailsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OrderdetailsComponent", function() { return OrderdetailsComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let OrderdetailsComponent = class OrderdetailsComponent {
    constructor() { }
    ngOnInit() {
    }
};
OrderdetailsComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-orderdetails',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./orderdetails.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/orderdetails/orderdetails.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./orderdetails.component.css */ "./src/app/vendoruser/orderdetails/orderdetails.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], OrderdetailsComponent);



/***/ }),

/***/ "./src/app/vendoruser/payment-management/payment-management.component.css":
/*!********************************************************************************!*\
  !*** ./src/app/vendoruser/payment-management/payment-management.component.css ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n    .card.card-cascade.narrower.body-section {\r\n        margin-top: -35px;\r\n    }\r\n    .row.v1 {\r\n        margin-top: 16px;\r\n        margin-left: 10px;\r\n        margin-right: 10px;\r\n    }\r\n    .card.card-cascade.narrower.body-section.price {\r\n    margin-top: 15px;\r\n}\r\n    h4.filter {\r\n    font-weight: bold;\r\n}\r\n    .btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n  }\r\n    /*  */\r\n    .input-vendor {\r\n        height: 50px;\r\n        background: #ebf4f9;\r\n    }\r\n    .card-body.vendor{\r\n        padding-right: 3rem;\r\n        padding-left: 3rem;\r\n    }\r\n    div#vendorrow {\r\n        padding-top: 0.5rem;\r\n    }\r\n    select.form-control:not([size]):not([multiple]) {\r\n        height: 50px;\r\n        background-color:#ebf4f9; ;\r\n    }\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmVuZG9ydXNlci9wYXltZW50LW1hbmFnZW1lbnQvcGF5bWVudC1tYW5hZ2VtZW50LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtJQUNJO1FBQ0ksaUJBQWlCO0lBQ3JCO0lBQ0E7UUFDSSxnQkFBZ0I7UUFDaEIsaUJBQWlCO1FBQ2pCLGtCQUFrQjtJQUN0QjtJQUVKO0lBQ0ksZ0JBQWdCO0FBQ3BCO0lBRUE7SUFDSSxpQkFBaUI7QUFDckI7SUFDQTtJQUNJLG9CQUFvQjtJQUNwQixlQUFlO0lBQ2YsaUJBQWlCO0VBQ25CO0lBRUUsS0FBSztJQUVMO1FBQ0ksWUFBWTtRQUNaLG1CQUFtQjtJQUN2QjtJQUNBO1FBQ0ksbUJBQW1CO1FBQ25CLGtCQUFrQjtJQUN0QjtJQUVBO1FBQ0ksbUJBQW1CO0lBQ3ZCO0lBRUE7UUFDSSxZQUFZO1FBQ1osd0JBQXdCO0lBQzVCIiwiZmlsZSI6InNyYy9hcHAvdmVuZG9ydXNlci9wYXltZW50LW1hbmFnZW1lbnQvcGF5bWVudC1tYW5hZ2VtZW50LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuICAgIC5jYXJkLmNhcmQtY2FzY2FkZS5uYXJyb3dlci5ib2R5LXNlY3Rpb24ge1xyXG4gICAgICAgIG1hcmdpbi10b3A6IC0zNXB4O1xyXG4gICAgfVxyXG4gICAgLnJvdy52MSB7XHJcbiAgICAgICAgbWFyZ2luLXRvcDogMTZweDtcclxuICAgICAgICBtYXJnaW4tbGVmdDogMTBweDtcclxuICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XHJcbiAgICB9XHJcblxyXG4uY2FyZC5jYXJkLWNhc2NhZGUubmFycm93ZXIuYm9keS1zZWN0aW9uLnByaWNlIHtcclxuICAgIG1hcmdpbi10b3A6IDE1cHg7XHJcbn1cclxuXHJcbmg0LmZpbHRlciB7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG4uYnRuLmJ0bi1sZyB7XHJcbiAgICBwYWRkaW5nOiAxcmVtIDIuNHJlbTtcclxuICAgIGZvbnQtc2l6ZTogMTdweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIH1cclxuXHJcbiAgICAvKiAgKi9cclxuICBcclxuICAgIC5pbnB1dC12ZW5kb3Ige1xyXG4gICAgICAgIGhlaWdodDogNTBweDtcclxuICAgICAgICBiYWNrZ3JvdW5kOiAjZWJmNGY5O1xyXG4gICAgfVxyXG4gICAgLmNhcmQtYm9keS52ZW5kb3J7XHJcbiAgICAgICAgcGFkZGluZy1yaWdodDogM3JlbTtcclxuICAgICAgICBwYWRkaW5nLWxlZnQ6IDNyZW07XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGRpdiN2ZW5kb3Jyb3cge1xyXG4gICAgICAgIHBhZGRpbmctdG9wOiAwLjVyZW07XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHNlbGVjdC5mb3JtLWNvbnRyb2w6bm90KFtzaXplXSk6bm90KFttdWx0aXBsZV0pIHtcclxuICAgICAgICBoZWlnaHQ6IDUwcHg7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjojZWJmNGY5OyA7XHJcbiAgICB9Il19 */");

/***/ }),

/***/ "./src/app/vendoruser/payment-management/payment-management.component.ts":
/*!*******************************************************************************!*\
  !*** ./src/app/vendoruser/payment-management/payment-management.component.ts ***!
  \*******************************************************************************/
/*! exports provided: PaymentManagementComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PaymentManagementComponent", function() { return PaymentManagementComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_services_master_product_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/master-product.service */ "./src/app/services/master-product.service.ts");
/* harmony import */ var src_app_services_price_management_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/price-management.service */ "./src/app/services/price-management.service.ts");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");





let PaymentManagementComponent = class PaymentManagementComponent {
    constructor(masterProductsService, priceManagementService, toastr) {
        this.masterProductsService = masterProductsService;
        this.priceManagementService = priceManagementService;
        this.toastr = toastr;
        this.selectedRegions = new Array();
        this.selectedStates = new Array();
        this.selectedCities = new Array();
        this.selectedWarehouse = new Array();
        this.newVendorProductPriceManagementList = new Array();
    }
    ngOnInit() {
        this.resetAll();
        this.priceManagementService.getMasterProductListForLoginVendorUser()
            .subscribe((data) => {
            this.productsList = data;
        });
    }
    resetAll() {
        this.selectedRegions = null;
        this.selectedStates = null;
        this.selectedCities = null;
        this.selectedWarehouse = null;
        this.region = null;
        this.stateName = null;
        this.cityName = null;
        this.warehouseName = null;
    }
    onChangeDate() {
        console.log(this.dateTime);
    }
    onChangeProduct() {
        this.resetAll();
        this.priceManagementService.getVendorProductPriceForLoggedInVendorUser(this.productId)
            .subscribe((data) => {
            this.vendorProductPriceManagementList = data;
            if (this.vendorProductPriceManagementList != null) {
                for (let v of this.vendorProductPriceManagementList) {
                    this.priceFactor = v.priceFactor;
                    break;
                }
                this.oldVendorProductPriceManagementList = this.vendorProductPriceManagementList;
                this.selectedRegions = new Array();
                for (let v of this.vendorProductPriceManagementList) {
                    this.selectedRegions.push(v.region);
                }
                let unique2 = this.selectedRegions.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.selectedRegions = unique2;
            }
            if (this.vendorProductPriceManagementList == null) {
                this.toastr.error('Price Not Set...!', 'Price Management', {
                    timeOut: 3000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
            }
        });
    }
    onChangeFilter() {
        this.vendorProductPriceManagementList = this.oldVendorProductPriceManagementList;
        if (this.region != null) {
            this.page = 1;
            this.newVendorProductPriceManagementList = new Array();
            this.selectedStates = new Array();
            this.selectedCities = new Array();
            for (let v of this.vendorProductPriceManagementList) {
                if (v.region == this.region) {
                    this.newVendorProductPriceManagementList.push(v);
                    this.selectedStates.push(v.stateName);
                }
            }
            let s1 = this.selectedStates.filter((item1, i1, ar1) => ar1.indexOf(item1) === i1);
            this.selectedStates = s1;
            this.vendorProductPriceManagementList = null;
            this.vendorProductPriceManagementList = this.newVendorProductPriceManagementList;
        }
        if (this.stateName != null) {
            this.newVendorProductPriceManagementList = new Array();
            this.selectedCities = new Array();
            for (let v of this.vendorProductPriceManagementList) {
                if (v.stateName == this.stateName) {
                    this.newVendorProductPriceManagementList.push(v);
                    this.selectedCities.push(v.cityName);
                }
            }
            this.vendorProductPriceManagementList = null;
            this.vendorProductPriceManagementList = this.newVendorProductPriceManagementList;
            let unique1 = this.selectedCities.filter((item1, i1, ar1) => ar1.indexOf(item1) === i1);
            this.selectedCities = unique1;
        }
        if (this.cityName != null) {
            this.selectedWarehouse = new Array();
            this.newVendorProductPriceManagementList = new Array();
            for (let v of this.vendorProductPriceManagementList) {
                if (v.cityName == this.cityName) {
                    this.newVendorProductPriceManagementList.push(v);
                    this.selectedWarehouse.push(v.warehouseName);
                }
            }
            let unique1 = this.selectedWarehouse.filter((item1, i1, ar1) => ar1.indexOf(item1) === i1);
            this.selectedWarehouse = unique1;
            this.vendorProductPriceManagementList = null;
            this.vendorProductPriceManagementList = this.newVendorProductPriceManagementList;
        }
        if (this.warehouseName != null) {
            this.newVendorProductPriceManagementList = new Array();
            for (let v of this.vendorProductPriceManagementList) {
                if (v.warehouseName == this.warehouseName) {
                    //this.selectedWarehouse.push(v.warehouseName)
                    this.newVendorProductPriceManagementList.push(v);
                }
            }
            this.vendorProductPriceManagementList = null;
            this.vendorProductPriceManagementList = this.newVendorProductPriceManagementList;
        }
    }
};
PaymentManagementComponent.ctorParameters = () => [
    { type: src_app_services_master_product_service__WEBPACK_IMPORTED_MODULE_2__["MasterProductService"] },
    { type: src_app_services_price_management_service__WEBPACK_IMPORTED_MODULE_3__["PriceManagementService"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_4__["ToastrService"] }
];
PaymentManagementComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-payment-management',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./payment-management.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/payment-management/payment-management.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./payment-management.component.css */ "./src/app/vendoruser/payment-management/payment-management.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_master_product_service__WEBPACK_IMPORTED_MODULE_2__["MasterProductService"], src_app_services_price_management_service__WEBPACK_IMPORTED_MODULE_3__["PriceManagementService"],
        ngx_toastr__WEBPACK_IMPORTED_MODULE_4__["ToastrService"]])
], PaymentManagementComponent);



/***/ }),

/***/ "./src/app/vendoruser/proceed/proceed.component.css":
/*!**********************************************************!*\
  !*** ./src/app/vendoruser/proceed/proceed.component.css ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n.container\r\n{\r\n    margin-top: 50px;\r\n}\r\n.btn-primary {\r\n    margin: 4px;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmVuZG9ydXNlci9wcm9jZWVkL3Byb2NlZWQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0E7O0lBRUksZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxXQUFXO0FBQ2YiLCJmaWxlIjoic3JjL2FwcC92ZW5kb3J1c2VyL3Byb2NlZWQvcHJvY2VlZC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbi5jb250YWluZXJcclxue1xyXG4gICAgbWFyZ2luLXRvcDogNTBweDtcclxufVxyXG4uYnRuLXByaW1hcnkge1xyXG4gICAgbWFyZ2luOiA0cHg7XHJcbn0iXX0= */");

/***/ }),

/***/ "./src/app/vendoruser/proceed/proceed.component.ts":
/*!*********************************************************!*\
  !*** ./src/app/vendoruser/proceed/proceed.component.ts ***!
  \*********************************************************/
/*! exports provided: ProceedComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProceedComponent", function() { return ProceedComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let ProceedComponent = class ProceedComponent {
    constructor() { }
    ngOnInit() {
    }
};
ProceedComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-proceed',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./proceed.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/proceed/proceed.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./proceed.component.css */ "./src/app/vendoruser/proceed/proceed.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], ProceedComponent);



/***/ }),

/***/ "./src/app/vendoruser/reconciliation-vendoruser/reconciliation-vendoruser.component.css":
/*!**********************************************************************************************!*\
  !*** ./src/app/vendoruser/reconciliation-vendoruser/reconciliation-vendoruser.component.css ***!
  \**********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n.card.card-cascade.narrower.body-section {\r\n    margin-top: 15px;\r\n}\r\nb.heading {\r\n    font-weight: bold;\r\n    font-size: 21px;\r\n    color: red;\r\n}\r\nh4.filter {\r\n    font-weight: bold;\r\n}\r\nh5.head {\r\n    margin-left: 26px;\r\n}\r\n.row.filter1 {\r\n    margin-left: 9px;\r\n    margin-right: 10px;\r\n    margin-top: 10px;\r\n}\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmVuZG9ydXNlci9yZWNvbmNpbGlhdGlvbi12ZW5kb3J1c2VyL3JlY29uY2lsaWF0aW9uLXZlbmRvcnVzZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0E7SUFDSSxnQkFBZ0I7QUFDcEI7QUFDQTtJQUNJLGlCQUFpQjtJQUNqQixlQUFlO0lBQ2YsVUFBVTtBQUNkO0FBRUE7SUFDSSxpQkFBaUI7QUFDckI7QUFHQTtJQUNJLGlCQUFpQjtBQUNyQjtBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGtCQUFrQjtJQUNsQixnQkFBZ0I7QUFDcEI7QUFDQTtJQUNJLG9CQUFvQjtJQUNwQixlQUFlO0lBQ2YsaUJBQWlCO0FBQ3JCIiwiZmlsZSI6InNyYy9hcHAvdmVuZG9ydXNlci9yZWNvbmNpbGlhdGlvbi12ZW5kb3J1c2VyL3JlY29uY2lsaWF0aW9uLXZlbmRvcnVzZXIuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG4uY2FyZC5jYXJkLWNhc2NhZGUubmFycm93ZXIuYm9keS1zZWN0aW9uIHtcclxuICAgIG1hcmdpbi10b3A6IDE1cHg7XHJcbn1cclxuYi5oZWFkaW5nIHtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgZm9udC1zaXplOiAyMXB4O1xyXG4gICAgY29sb3I6IHJlZDtcclxufVxyXG5cclxuaDQuZmlsdGVyIHtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcblxyXG5cclxuaDUuaGVhZCB7XHJcbiAgICBtYXJnaW4tbGVmdDogMjZweDtcclxufVxyXG5cclxuLnJvdy5maWx0ZXIxIHtcclxuICAgIG1hcmdpbi1sZWZ0OiA5cHg7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG59XHJcbi5idG4uYnRuLWxnIHtcclxuICAgIHBhZGRpbmc6IDFyZW0gMi40cmVtO1xyXG4gICAgZm9udC1zaXplOiAxN3B4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn0iXX0= */");

/***/ }),

/***/ "./src/app/vendoruser/reconciliation-vendoruser/reconciliation-vendoruser.component.ts":
/*!*********************************************************************************************!*\
  !*** ./src/app/vendoruser/reconciliation-vendoruser/reconciliation-vendoruser.component.ts ***!
  \*********************************************************************************************/
/*! exports provided: ReconciliationVendoruserComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReconciliationVendoruserComponent", function() { return ReconciliationVendoruserComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_services_end_user_recconcilation_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/end-user-recconcilation.service */ "./src/app/services/end-user-recconcilation.service.ts");
/* harmony import */ var src_app_model_select__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/model/select */ "./src/app/model/select.ts");




let ReconciliationVendoruserComponent = class ReconciliationVendoruserComponent {
    constructor(reconcilationService) {
        this.reconcilationService = reconcilationService;
        this.date = new Date("01/01/2018");
        this.date1 = new Date();
        this.ranges = new Array();
    }
    ngOnInit() {
        this.customDate = false;
        this.populateRange();
        console.log("-----");
        this.onReconciliation();
    }
    populateRange() {
        let range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_3__["Select"];
        range.id = "1";
        range.value = "Custom Range";
        this.ranges[0] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_3__["Select"];
        range.id = "2";
        range.value = "15 Days";
        this.ranges[1] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_3__["Select"];
        range.id = "3";
        range.value = "Current Month";
        this.ranges[2] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_3__["Select"];
        range.id = "4";
        range.value = "3 Months";
        this.ranges[3] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_3__["Select"];
        range.id = "5";
        range.value = "6 Months";
        this.ranges[4] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_3__["Select"];
        range.id = "6";
        range.value = "1 Year";
        this.ranges[5] = range;
    }
    // on change Vendor 
    onSelectVendor() {
        this.reconciliation = this.oldReconciliation;
        if (this.warehouseName != null) {
            this.newReconciliation = new Array();
            this.productList = new Array();
            for (let r of this.reconciliation) {
                if (r.warehouse.warehouseName == this.warehouseName) {
                    this.newReconciliation.push(r);
                    this.productList.push(r.orderedProduct);
                }
            }
            let unique1 = this.productList.filter((item, i, ar) => ar.indexOf(item) === i);
            this.productList = unique1;
            this.reconciliation = this.newReconciliation;
            this.reconcilationListVendorFiltered = new Array();
            this.reconcilationListVendorFiltered = this.newReconciliation;
        }
        if (this.productName != null) {
            this.newReconciliation = new Array();
            for (let r of this.reconciliation) {
                if (r.orderedProduct == this.productName) {
                    this.newReconciliation.push(r);
                }
            }
            this.reconciliation = this.newReconciliation;
            this.reconcilationListVendorFiltered = new Array();
            this.reconcilationListVendorFiltered = this.newReconciliation;
        }
    }
    // on select Date Range
    onSelectRangeForVendor(selected, type) {
        if (this.range != "-1") {
            if (this.range == "1") {
                this.customDate = true;
            }
            else {
                this.customDate = false;
            }
            this.filterListForVendorRecon(this.range, type);
        }
    }
    getList(type) {
        let list = new Array();
        if (type == 'D') {
            if (this.reconcilationListVendorFiltered != null) {
                this.reconciliation = this.reconcilationListVendorFiltered;
            }
            if (this.reconcilationListVendorFiltered == null) {
                this.reconciliation = this.oldReconciliation;
            }
            list = this.reconciliation;
            console.log(list);
        }
        else if (type == 'R') {
            this.accountSummaryFilteredList = this.oldAccountSummaryFilteredList;
            list = this.accountSummaryFilteredList;
        }
        return list;
    }
    filterListForVendorRecon(option, type) {
        let list = this.getList(type);
        this.newReconciliation = new Array();
        let startDate = new Date();
        let endDate = new Date();
        if (option == "1") {
            startDate = this.date;
            endDate = this.date1;
        }
        else if (option == "2") {
            startDate.setDate(endDate.getDate() - 15);
        }
        else if (option == "3") {
            startDate.setDate(endDate.getDate() - 30);
        }
        else if (option == "4") {
            startDate.setDate(endDate.getDate() - 90);
        }
        else if (option == "5") {
            startDate.setDate(endDate.getDate() - 180);
        }
        else if (option == "6") {
            startDate.setDate(endDate.getDate() - 360);
        }
        console.log(startDate);
        for (let r of list) {
            if (type == 'D') {
                let dt = new Date(r.deliveryDate);
                if (dt >= startDate && dt <= endDate) {
                    this.newReconciliation.push(r);
                }
                this.reconciliation = this.newReconciliation;
            }
            else {
                let dt = new Date(r.transactionDate);
                if (dt >= startDate && dt <= endDate) {
                    this.newReconciliation.push(r);
                }
                this.accountSummaryFilteredList = this.newReconciliation;
            }
        }
        console.log(this.newReconciliation);
        console.log(this.reconciliation);
        console.log(type);
    }
    // on change Date
    onDateChangeForVendorRecon(date, type) {
        this.filterListForVendorRecon("1", type);
    }
    deliveryReport() {
        this.reconcilationService.getVendorReconcilationForLoggedInVendorUser()
            .subscribe((data) => {
            console.log(data);
            this.reconciliation = data;
            this.warehouseList = new Array();
            this.productList = new Array();
            for (let r of this.reconciliation) {
                this.warehouseList.push(r.warehouse.warehouseName);
                this.productList.push(r.orderedProduct);
            }
            this.oldReconciliation = Array();
            this.oldReconciliation = this.reconciliation;
            let unique = this.warehouseList.filter((item, i, ar) => ar.indexOf(item) === i);
            this.warehouseList = unique;
            let unique1 = this.productList.filter((item, i, ar) => ar.indexOf(item) === i);
            this.productList = unique1;
            this.range = -1;
            this.iteration = "delivery_report";
        });
    }
    onReconciliation() {
        this.reconcilationService.getVendorAccountDetails()
            .subscribe((data) => {
            console.log(data);
            this.accountSummaryFilteredList = data;
            this.oldAccountSummaryFilteredList = data;
            this.iteration = "accountSummary";
        });
    }
    goBack() {
        this.iteration = "accountSummary";
    }
};
ReconciliationVendoruserComponent.ctorParameters = () => [
    { type: src_app_services_end_user_recconcilation_service__WEBPACK_IMPORTED_MODULE_2__["EndUserRecconcilationService"] }
];
ReconciliationVendoruserComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-reconciliation-vendoruser',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./reconciliation-vendoruser.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/reconciliation-vendoruser/reconciliation-vendoruser.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./reconciliation-vendoruser.component.css */ "./src/app/vendoruser/reconciliation-vendoruser/reconciliation-vendoruser.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_end_user_recconcilation_service__WEBPACK_IMPORTED_MODULE_2__["EndUserRecconcilationService"]])
], ReconciliationVendoruserComponent);



/***/ }),

/***/ "./src/app/vendoruser/redeemreward/redeemreward.component.css":
/*!********************************************************************!*\
  !*** ./src/app/vendoruser/redeemreward/redeemreward.component.css ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n\r\n.justify-content-center {\r\n\r\n    margin-top: 20px;\r\n}\r\n\r\n.form-group.row {\r\n    text-align: center;\r\n}\r\n\r\ninput {\r\n    outline: 0;\r\n    border-width: 0 0 2px;\r\n    \r\n  }\r\n\r\n.btn-primary {\r\n    color: #fff;\r\n    background-color: #007bff;\r\n    border-color: #007bff;\r\n    margin: 3px;\r\n}\r\n\r\n.container.success {\r\n    margin-top: 30px;\r\npadding:43px;\r\n    \r\n}\r\n\r\n/* blincking */\r\n\r\n.blinking{\r\n    -webkit-animation:blinkingText 1.2s infinite;\r\n            animation:blinkingText 1.2s infinite;\r\n}\r\n\r\n@-webkit-keyframes blinkingText{\r\n    0%{     color: green;    }\r\n    49%{    color:green; }\r\n    60%{    color: transparent; }\r\n    99%{    color:transparent;  }\r\n    100%{   color: green;    }\r\n}\r\n\r\n@keyframes blinkingText{\r\n    0%{     color: green;    }\r\n    49%{    color:green; }\r\n    60%{    color: transparent; }\r\n    99%{    color:transparent;  }\r\n    100%{   color: green;    }\r\n}\r\n\r\n.col-form-label {\r\n\r\n    margin-bottom: 0;\r\n    font-size: inherit;\r\n    line-height: 1.5;\r\n    font-size: large;\r\n    font-weight: bold;\r\n\r\n}\r\n\r\n.badge-warning {\r\n  \r\n    width: 50%;\r\n}\r\n\r\n.badge-info {\r\n\r\n    height: 50px;\r\n    width: 50%;\r\n}\r\n\r\nbutton.btn.move {\r\n    float: right;\r\n}\r\n\r\nbutton.btn.move {\r\n    float: right;\r\n}\r\n\r\np {\r\n  \r\n    margin: 7px;\r\n}\r\n\r\n.badge-danger {\r\n  \r\n    line-height: 42.5px;\r\n}\r\n\r\n.badge-primary {\r\n\r\n    line-height: 42.5px; \r\n}\r\n\r\nhr {\r\n\r\n    border: 2px solid black;\r\n \r\n}\r\n\r\nh4{\r\n    text-align: center;\r\n    font-weight: bold;\r\n    line-height: 50px;\r\n    margin-top: 20px;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmVuZG9ydXNlci9yZWRlZW1yZXdhcmQvcmVkZWVtcmV3YXJkLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQTs7SUFFSSxnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxrQkFBa0I7QUFDdEI7O0FBQ0E7SUFDSSxVQUFVO0lBQ1YscUJBQXFCOztFQUV2Qjs7QUFFRjtJQUNJLFdBQVc7SUFDWCx5QkFBeUI7SUFDekIscUJBQXFCO0lBQ3JCLFdBQVc7QUFDZjs7QUFDQTtJQUNJLGdCQUFnQjtBQUNwQixZQUFZOztBQUVaOztBQUNBLGNBQWM7O0FBQ2Q7SUFDSSw0Q0FBb0M7WUFBcEMsb0NBQW9DO0FBQ3hDOztBQUNBO0lBQ0ksUUFBUSxZQUFZLEtBQUs7SUFDekIsUUFBUSxXQUFXLEVBQUU7SUFDckIsUUFBUSxrQkFBa0IsRUFBRTtJQUM1QixRQUFRLGlCQUFpQixHQUFHO0lBQzVCLFFBQVEsWUFBWSxLQUFLO0FBQzdCOztBQU5BO0lBQ0ksUUFBUSxZQUFZLEtBQUs7SUFDekIsUUFBUSxXQUFXLEVBQUU7SUFDckIsUUFBUSxrQkFBa0IsRUFBRTtJQUM1QixRQUFRLGlCQUFpQixHQUFHO0lBQzVCLFFBQVEsWUFBWSxLQUFLO0FBQzdCOztBQUNBOztJQUVJLGdCQUFnQjtJQUNoQixrQkFBa0I7SUFDbEIsZ0JBQWdCO0lBQ2hCLGdCQUFnQjtJQUNoQixpQkFBaUI7O0FBRXJCOztBQUdBOztJQUVJLFVBQVU7QUFDZDs7QUFDQTs7SUFFSSxZQUFZO0lBQ1osVUFBVTtBQUNkOztBQUVBO0lBQ0ksWUFBWTtBQUNoQjs7QUFDQTtJQUNJLFlBQVk7QUFDaEI7O0FBRUE7O0lBRUksV0FBVztBQUNmOztBQUNBOztJQUVJLG1CQUFtQjtBQUN2Qjs7QUFFQTs7SUFFSSxtQkFBbUI7QUFDdkI7O0FBRUE7O0lBRUksdUJBQXVCOztBQUUzQjs7QUFDQTtJQUNJLGtCQUFrQjtJQUNsQixpQkFBaUI7SUFDakIsaUJBQWlCO0lBQ2pCLGdCQUFnQjtBQUNwQiIsImZpbGUiOiJzcmMvYXBwL3ZlbmRvcnVzZXIvcmVkZWVtcmV3YXJkL3JlZGVlbXJld2FyZC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG4uanVzdGlmeS1jb250ZW50LWNlbnRlciB7XHJcblxyXG4gICAgbWFyZ2luLXRvcDogMjBweDtcclxufVxyXG5cclxuLmZvcm0tZ3JvdXAucm93IHtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG5pbnB1dCB7XHJcbiAgICBvdXRsaW5lOiAwO1xyXG4gICAgYm9yZGVyLXdpZHRoOiAwIDAgMnB4O1xyXG4gICAgXHJcbiAgfVxyXG5cclxuLmJ0bi1wcmltYXJ5IHtcclxuICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjtcclxuICAgIGJvcmRlci1jb2xvcjogIzAwN2JmZjtcclxuICAgIG1hcmdpbjogM3B4O1xyXG59XHJcbi5jb250YWluZXIuc3VjY2VzcyB7XHJcbiAgICBtYXJnaW4tdG9wOiAzMHB4O1xyXG5wYWRkaW5nOjQzcHg7XHJcbiAgICBcclxufVxyXG4vKiBibGluY2tpbmcgKi9cclxuLmJsaW5raW5ne1xyXG4gICAgYW5pbWF0aW9uOmJsaW5raW5nVGV4dCAxLjJzIGluZmluaXRlO1xyXG59XHJcbkBrZXlmcmFtZXMgYmxpbmtpbmdUZXh0e1xyXG4gICAgMCV7ICAgICBjb2xvcjogZ3JlZW47ICAgIH1cclxuICAgIDQ5JXsgICAgY29sb3I6Z3JlZW47IH1cclxuICAgIDYwJXsgICAgY29sb3I6IHRyYW5zcGFyZW50OyB9XHJcbiAgICA5OSV7ICAgIGNvbG9yOnRyYW5zcGFyZW50OyAgfVxyXG4gICAgMTAwJXsgICBjb2xvcjogZ3JlZW47ICAgIH1cclxufVxyXG4uY29sLWZvcm0tbGFiZWwge1xyXG5cclxuICAgIG1hcmdpbi1ib3R0b206IDA7XHJcbiAgICBmb250LXNpemU6IGluaGVyaXQ7XHJcbiAgICBsaW5lLWhlaWdodDogMS41O1xyXG4gICAgZm9udC1zaXplOiBsYXJnZTtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG5cclxufVxyXG5cclxuXHJcbi5iYWRnZS13YXJuaW5nIHtcclxuICBcclxuICAgIHdpZHRoOiA1MCU7XHJcbn1cclxuLmJhZGdlLWluZm8ge1xyXG5cclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIHdpZHRoOiA1MCU7XHJcbn1cclxuXHJcbmJ1dHRvbi5idG4ubW92ZSB7XHJcbiAgICBmbG9hdDogcmlnaHQ7XHJcbn1cclxuYnV0dG9uLmJ0bi5tb3ZlIHtcclxuICAgIGZsb2F0OiByaWdodDtcclxufVxyXG5cclxucCB7XHJcbiAgXHJcbiAgICBtYXJnaW46IDdweDtcclxufVxyXG4uYmFkZ2UtZGFuZ2VyIHtcclxuICBcclxuICAgIGxpbmUtaGVpZ2h0OiA0Mi41cHg7XHJcbn1cclxuXHJcbi5iYWRnZS1wcmltYXJ5IHtcclxuXHJcbiAgICBsaW5lLWhlaWdodDogNDIuNXB4OyBcclxufVxyXG5cclxuaHIge1xyXG5cclxuICAgIGJvcmRlcjogMnB4IHNvbGlkIGJsYWNrO1xyXG4gXHJcbn1cclxuaDR7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIGxpbmUtaGVpZ2h0OiA1MHB4O1xyXG4gICAgbWFyZ2luLXRvcDogMjBweDtcclxufSJdfQ== */");

/***/ }),

/***/ "./src/app/vendoruser/redeemreward/redeemreward.component.ts":
/*!*******************************************************************!*\
  !*** ./src/app/vendoruser/redeemreward/redeemreward.component.ts ***!
  \*******************************************************************/
/*! exports provided: RedeemrewardComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RedeemrewardComponent", function() { return RedeemrewardComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");



let RedeemrewardComponent = class RedeemrewardComponent {
    constructor(fb) {
        this.fb = fb;
        this.showDetails = false;
    }
    ngOnInit() {
        this.redeemreward = this.fb.group({
            redeem: ['']
        });
        this.pageIterator = 1;
        console.log("The iterator value is : " + this.pageIterator);
    }
    toggleDetails() {
        this.showDetails = !this.showDetails;
    }
    onRedeem() {
        this.pageIterator++;
        console.log("The iterator value is : " + this.pageIterator);
    }
    onBackClick() {
        this.pageIterator--;
        console.log("The iterator value is : " + this.pageIterator);
    }
};
RedeemrewardComponent.ctorParameters = () => [
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormBuilder"] }
];
RedeemrewardComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-redeemreward',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./redeemreward.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/redeemreward/redeemreward.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./redeemreward.component.css */ "./src/app/vendoruser/redeemreward/redeemreward.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormBuilder"]])
], RedeemrewardComponent);



/***/ }),

/***/ "./src/app/vendoruser/reportgeneration/reportgeneration.component.css":
/*!****************************************************************************!*\
  !*** ./src/app/vendoruser/reportgeneration/reportgeneration.component.css ***!
  \****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (".btn-primary {\r\n    color: black;\r\n    background-color: deepskyblue;\r\n    border-color: deepskyblue;\r\n    width: 100%;\r\n    height: 58px;\r\n    margin: 4px;\r\n}\r\n\r\n/* report */\r\n\r\n.project-tab {\r\n    padding: 10%;\r\n    margin-top: -8%;\r\n}\r\n\r\n.project-tab #tabs{\r\n    background: #007b5e;\r\n    color: #eee;\r\n}\r\n\r\n.project-tab #tabs h6.section-title{\r\n    color: #eee;\r\n}\r\n\r\n.project-tab #tabs .nav-tabs .nav-item.show .nav-link, .nav-tabs .nav-link.active {\r\n    color: #0062cc;\r\n    background-color: transparent;\r\n    border-color: transparent transparent #f3f3f3;\r\n    border-bottom: 3px solid !important;\r\n    font-size: 16px;\r\n    font-weight: bold;\r\n}\r\n\r\n.project-tab .nav-link {\r\n    border: 1px solid transparent;\r\n    border-top-left-radius: .25rem;\r\n    border-top-right-radius: .25rem;\r\n    color: #0062cc;\r\n    font-size: 16px;\r\n    font-weight: 600;\r\n}\r\n\r\n.project-tab .nav-link:hover {\r\n    border: none;\r\n}\r\n\r\n.project-tab thead{\r\n    background: #f3f3f3;\r\n    color: #333;\r\n}\r\n\r\n.project-tab a{\r\n    text-decoration: none;\r\n    color: #333;\r\n    font-weight: 600;\r\n}\r\n\r\n.container {\r\n\r\n    margin-top: 31px;\r\n}\r\n\r\n.bar-image {\r\n    margin-top: 20px;\r\n}\r\n\r\n/* table */\r\n\r\n.table-responsive\r\n{\r\n    margin-top:20px;\r\n}\r\n\r\n.btn-info\r\n{\r\n    margin: 3px;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmVuZG9ydXNlci9yZXBvcnRnZW5lcmF0aW9uL3JlcG9ydGdlbmVyYXRpb24uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFlBQVk7SUFDWiw2QkFBNkI7SUFDN0IseUJBQXlCO0lBQ3pCLFdBQVc7SUFDWCxZQUFZO0lBQ1osV0FBVztBQUNmOztBQUVBLFdBQVc7O0FBQ1g7SUFDSSxZQUFZO0lBQ1osZUFBZTtBQUNuQjs7QUFDQTtJQUNJLG1CQUFtQjtJQUNuQixXQUFXO0FBQ2Y7O0FBQ0E7SUFDSSxXQUFXO0FBQ2Y7O0FBQ0E7SUFDSSxjQUFjO0lBQ2QsNkJBQTZCO0lBQzdCLDZDQUE2QztJQUM3QyxtQ0FBbUM7SUFDbkMsZUFBZTtJQUNmLGlCQUFpQjtBQUNyQjs7QUFDQTtJQUNJLDZCQUE2QjtJQUM3Qiw4QkFBOEI7SUFDOUIsK0JBQStCO0lBQy9CLGNBQWM7SUFDZCxlQUFlO0lBQ2YsZ0JBQWdCO0FBQ3BCOztBQUNBO0lBQ0ksWUFBWTtBQUNoQjs7QUFDQTtJQUNJLG1CQUFtQjtJQUNuQixXQUFXO0FBQ2Y7O0FBQ0E7SUFDSSxxQkFBcUI7SUFDckIsV0FBVztJQUNYLGdCQUFnQjtBQUNwQjs7QUFFQTs7SUFFSSxnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxnQkFBZ0I7QUFDcEI7O0FBQ0EsVUFBVTs7QUFFVjs7SUFFSSxlQUFlO0FBQ25COztBQUNBOztJQUVJLFdBQVc7QUFDZiIsImZpbGUiOiJzcmMvYXBwL3ZlbmRvcnVzZXIvcmVwb3J0Z2VuZXJhdGlvbi9yZXBvcnRnZW5lcmF0aW9uLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuYnRuLXByaW1hcnkge1xyXG4gICAgY29sb3I6IGJsYWNrO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogZGVlcHNreWJsdWU7XHJcbiAgICBib3JkZXItY29sb3I6IGRlZXBza3libHVlO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDU4cHg7XHJcbiAgICBtYXJnaW46IDRweDtcclxufVxyXG5cclxuLyogcmVwb3J0ICovXHJcbi5wcm9qZWN0LXRhYiB7XHJcbiAgICBwYWRkaW5nOiAxMCU7XHJcbiAgICBtYXJnaW4tdG9wOiAtOCU7XHJcbn1cclxuLnByb2plY3QtdGFiICN0YWJze1xyXG4gICAgYmFja2dyb3VuZDogIzAwN2I1ZTtcclxuICAgIGNvbG9yOiAjZWVlO1xyXG59XHJcbi5wcm9qZWN0LXRhYiAjdGFicyBoNi5zZWN0aW9uLXRpdGxle1xyXG4gICAgY29sb3I6ICNlZWU7XHJcbn1cclxuLnByb2plY3QtdGFiICN0YWJzIC5uYXYtdGFicyAubmF2LWl0ZW0uc2hvdyAubmF2LWxpbmssIC5uYXYtdGFicyAubmF2LWxpbmsuYWN0aXZlIHtcclxuICAgIGNvbG9yOiAjMDA2MmNjO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XHJcbiAgICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50ICNmM2YzZjM7XHJcbiAgICBib3JkZXItYm90dG9tOiAzcHggc29saWQgIWltcG9ydGFudDtcclxuICAgIGZvbnQtc2l6ZTogMTZweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcbi5wcm9qZWN0LXRhYiAubmF2LWxpbmsge1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XHJcbiAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAuMjVyZW07XHJcbiAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogLjI1cmVtO1xyXG4gICAgY29sb3I6ICMwMDYyY2M7XHJcbiAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgICBmb250LXdlaWdodDogNjAwO1xyXG59XHJcbi5wcm9qZWN0LXRhYiAubmF2LWxpbms6aG92ZXIge1xyXG4gICAgYm9yZGVyOiBub25lO1xyXG59XHJcbi5wcm9qZWN0LXRhYiB0aGVhZHtcclxuICAgIGJhY2tncm91bmQ6ICNmM2YzZjM7XHJcbiAgICBjb2xvcjogIzMzMztcclxufVxyXG4ucHJvamVjdC10YWIgYXtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgIGNvbG9yOiAjMzMzO1xyXG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcclxufVxyXG5cclxuLmNvbnRhaW5lciB7XHJcblxyXG4gICAgbWFyZ2luLXRvcDogMzFweDtcclxufVxyXG5cclxuLmJhci1pbWFnZSB7XHJcbiAgICBtYXJnaW4tdG9wOiAyMHB4O1xyXG59XHJcbi8qIHRhYmxlICovXHJcblxyXG4udGFibGUtcmVzcG9uc2l2ZVxyXG57XHJcbiAgICBtYXJnaW4tdG9wOjIwcHg7XHJcbn1cclxuLmJ0bi1pbmZvXHJcbntcclxuICAgIG1hcmdpbjogM3B4O1xyXG59Il19 */");

/***/ }),

/***/ "./src/app/vendoruser/reportgeneration/reportgeneration.component.ts":
/*!***************************************************************************!*\
  !*** ./src/app/vendoruser/reportgeneration/reportgeneration.component.ts ***!
  \***************************************************************************/
/*! exports provided: ReportgenerationComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReportgenerationComponent", function() { return ReportgenerationComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let ReportgenerationComponent = class ReportgenerationComponent {
    constructor() {
        this.collection = [];
        for (let i = 0; i <= 100; i++) {
            this.collection.push('WarehoUseUserArray ${i}');
        }
    }
    ngOnInit() {
    }
    toggleDetails() {
        this.showDetails = !this.showDetails;
    }
};
ReportgenerationComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-reportgeneration',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./reportgeneration.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/reportgeneration/reportgeneration.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./reportgeneration.component.css */ "./src/app/vendoruser/reportgeneration/reportgeneration.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], ReportgenerationComponent);



/***/ }),

/***/ "./src/app/vendoruser/reward-managment/reward-managment.component.css":
/*!****************************************************************************!*\
  !*** ./src/app/vendoruser/reward-managment/reward-managment.component.css ***!
  \****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (".form-group.row {\r\n    text-align: center;\r\n}\r\n\r\n.blinking{\r\n    -webkit-animation:blinkingText 1.2s infinite;\r\n            animation:blinkingText 1.2s infinite;\r\n}\r\n\r\n@-webkit-keyframes blinkingText{\r\n    0%{     color:green;    }\r\n    49%{    color:green; }\r\n    60%{    color: transparent; }\r\n    99%{    color:transparent;  }\r\n    100%{   color: green;    }\r\n}\r\n\r\n@keyframes blinkingText{\r\n    0%{     color:green;    }\r\n    49%{    color:green; }\r\n    60%{    color: transparent; }\r\n    99%{    color:transparent;  }\r\n    100%{   color: green;    }\r\n}\r\n\r\n/* badges */\r\n\r\np {\r\n    margin-top: 0;\r\n    margin-bottom: 1rem;\r\n    margin: 12px;\r\n    font-size: large;\r\n    font-weight: bold;\r\n    color: #fff;\r\n}\r\n\r\n.col-form-label {\r\n\r\n    font-size: medium;\r\n    font-weight: bold;\r\n}\r\n\r\n.badge-info {\r\n    \r\n    height: 50px;\r\n    width: 50%;\r\n}\r\n\r\nhr {\r\n\r\n    border: 2px solid black;\r\n \r\n}\r\n\r\n.badge-info {\r\n    color: #fff;\r\n    background-color: #17a2b8;\r\n    height: 50px;\r\n    width: 50%;\r\n}\r\n\r\n.col-form-label {\r\n    font-size: large;\r\n    font-weight: bold;\r\n}\r\n\r\np {\r\n \r\n    margin: 8px;\r\n}\r\n\r\n.btn:not(:disabled):not(.disabled) {\r\n  \r\n    margin: 3px;\r\n}\r\n\r\n.card\r\n{\r\n    margin:4px;\r\n    background-color: white;\r\n    box-shadow: 5px 5px 5px 5px grey;\r\n    height:auto;\r\n}\r\n\r\nh4{\r\n    text-align: center;\r\n    font-weight: bold;\r\n    margin-top: 20px;\r\n}\r\n\r\nh5{\r\n    text-align: center;\r\n    margin-top: 20px;\r\n}\r\n\r\n.filter\r\n{\r\n    background: -webkit-gradient(linear, left top, right bottom, color-stop(50%, #CCE0FB), to(#A5EBF0));\r\n    background: linear-gradient(to bottom right, #CCE0FB 50%, #A5EBF0 100%);\r\n}\r\n\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmVuZG9ydXNlci9yZXdhcmQtbWFuYWdtZW50L3Jld2FyZC1tYW5hZ21lbnQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLDRDQUFvQztZQUFwQyxvQ0FBb0M7QUFDeEM7O0FBQ0E7SUFDSSxRQUFRLFdBQVcsS0FBSztJQUN4QixRQUFRLFdBQVcsRUFBRTtJQUNyQixRQUFRLGtCQUFrQixFQUFFO0lBQzVCLFFBQVEsaUJBQWlCLEdBQUc7SUFDNUIsUUFBUSxZQUFZLEtBQUs7QUFDN0I7O0FBTkE7SUFDSSxRQUFRLFdBQVcsS0FBSztJQUN4QixRQUFRLFdBQVcsRUFBRTtJQUNyQixRQUFRLGtCQUFrQixFQUFFO0lBQzVCLFFBQVEsaUJBQWlCLEdBQUc7SUFDNUIsUUFBUSxZQUFZLEtBQUs7QUFDN0I7O0FBRUEsV0FBVzs7QUFJWDtJQUNJLGFBQWE7SUFDYixtQkFBbUI7SUFDbkIsWUFBWTtJQUNaLGdCQUFnQjtJQUNoQixpQkFBaUI7SUFDakIsV0FBVztBQUNmOztBQUNBOztJQUVJLGlCQUFpQjtJQUNqQixpQkFBaUI7QUFDckI7O0FBQ0E7O0lBRUksWUFBWTtJQUNaLFVBQVU7QUFDZDs7QUFHQTs7SUFFSSx1QkFBdUI7O0FBRTNCOztBQUNBO0lBQ0ksV0FBVztJQUNYLHlCQUF5QjtJQUN6QixZQUFZO0lBQ1osVUFBVTtBQUNkOztBQUNBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGlCQUFpQjtBQUNyQjs7QUFFQTs7SUFFSSxXQUFXO0FBQ2Y7O0FBR0E7O0lBRUksV0FBVztBQUNmOztBQUNBOztJQUVJLFVBQVU7SUFDVix1QkFBdUI7SUFDdkIsZ0NBQWdDO0lBQ2hDLFdBQVc7QUFDZjs7QUFDQTtJQUNJLGtCQUFrQjtJQUNsQixpQkFBaUI7SUFDakIsZ0JBQWdCO0FBQ3BCOztBQUNBO0lBQ0ksa0JBQWtCO0lBQ2xCLGdCQUFnQjtBQUNwQjs7QUFFQTs7SUFFSSxtR0FBdUU7SUFBdkUsdUVBQXVFO0FBQzNFIiwiZmlsZSI6InNyYy9hcHAvdmVuZG9ydXNlci9yZXdhcmQtbWFuYWdtZW50L3Jld2FyZC1tYW5hZ21lbnQuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5mb3JtLWdyb3VwLnJvdyB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxuXHJcbi5ibGlua2luZ3tcclxuICAgIGFuaW1hdGlvbjpibGlua2luZ1RleHQgMS4ycyBpbmZpbml0ZTtcclxufVxyXG5Aa2V5ZnJhbWVzIGJsaW5raW5nVGV4dHtcclxuICAgIDAleyAgICAgY29sb3I6Z3JlZW47ICAgIH1cclxuICAgIDQ5JXsgICAgY29sb3I6Z3JlZW47IH1cclxuICAgIDYwJXsgICAgY29sb3I6IHRyYW5zcGFyZW50OyB9XHJcbiAgICA5OSV7ICAgIGNvbG9yOnRyYW5zcGFyZW50OyAgfVxyXG4gICAgMTAwJXsgICBjb2xvcjogZ3JlZW47ICAgIH1cclxufVxyXG5cclxuLyogYmFkZ2VzICovXHJcblxyXG5cclxuXHJcbnAge1xyXG4gICAgbWFyZ2luLXRvcDogMDtcclxuICAgIG1hcmdpbi1ib3R0b206IDFyZW07XHJcbiAgICBtYXJnaW46IDEycHg7XHJcbiAgICBmb250LXNpemU6IGxhcmdlO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBjb2xvcjogI2ZmZjtcclxufVxyXG4uY29sLWZvcm0tbGFiZWwge1xyXG5cclxuICAgIGZvbnQtc2l6ZTogbWVkaXVtO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuLmJhZGdlLWluZm8ge1xyXG4gICAgXHJcbiAgICBoZWlnaHQ6IDUwcHg7XHJcbiAgICB3aWR0aDogNTAlO1xyXG59XHJcblxyXG5cclxuaHIge1xyXG5cclxuICAgIGJvcmRlcjogMnB4IHNvbGlkIGJsYWNrO1xyXG4gXHJcbn1cclxuLmJhZGdlLWluZm8ge1xyXG4gICAgY29sb3I6ICNmZmY7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTdhMmI4O1xyXG4gICAgaGVpZ2h0OiA1MHB4O1xyXG4gICAgd2lkdGg6IDUwJTtcclxufVxyXG4uY29sLWZvcm0tbGFiZWwge1xyXG4gICAgZm9udC1zaXplOiBsYXJnZTtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcblxyXG5wIHtcclxuIFxyXG4gICAgbWFyZ2luOiA4cHg7XHJcbn1cclxuXHJcblxyXG4uYnRuOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpIHtcclxuICBcclxuICAgIG1hcmdpbjogM3B4O1xyXG59XHJcbi5jYXJkXHJcbntcclxuICAgIG1hcmdpbjo0cHg7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcclxuICAgIGJveC1zaGFkb3c6IDVweCA1cHggNXB4IDVweCBncmV5O1xyXG4gICAgaGVpZ2h0OmF1dG87XHJcbn1cclxuaDR7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIG1hcmdpbi10b3A6IDIwcHg7XHJcbn1cclxuaDV7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBtYXJnaW4tdG9wOiAyMHB4O1xyXG59XHJcblxyXG4uZmlsdGVyXHJcbntcclxuICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byBib3R0b20gcmlnaHQsICNDQ0UwRkIgNTAlLCAjQTVFQkYwIDEwMCUpO1xyXG59XHJcbiJdfQ== */");

/***/ }),

/***/ "./src/app/vendoruser/reward-managment/reward-managment.component.ts":
/*!***************************************************************************!*\
  !*** ./src/app/vendoruser/reward-managment/reward-managment.component.ts ***!
  \***************************************************************************/
/*! exports provided: RewardManagmentComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RewardManagmentComponent", function() { return RewardManagmentComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let RewardManagmentComponent = class RewardManagmentComponent {
    constructor() {
        this.eranedpoints = 250;
    }
    ngOnInit() {
        this.pageIterator = 1;
        console.log("The iterator value is : " + this.pageIterator);
    }
    onReward() {
        this.pageIterator++;
        console.log("The iterator value is : " + this.pageIterator);
    }
    onBackClick() {
        this.pageIterator--;
        console.log("The iterator value is : " + this.pageIterator);
    }
};
RewardManagmentComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-reward-managment',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./reward-managment.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/reward-managment/reward-managment.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./reward-managment.component.css */ "./src/app/vendoruser/reward-managment/reward-managment.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], RewardManagmentComponent);



/***/ }),

/***/ "./src/app/vendoruser/rewardpointhistory/rewardpointhistory.component.css":
/*!********************************************************************************!*\
  !*** ./src/app/vendoruser/rewardpointhistory/rewardpointhistory.component.css ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n.form-group.row {\r\n    text-align: center;\r\n}\r\n\r\n.badge-info {\r\n    color: #fff;\r\n    background-color: #17a2b8;\r\n    height: 50px;\r\n    width: 50%;\r\n}\r\n\r\n.col-form-label {\r\n    font-size: large;\r\n    font-weight: bold;\r\n}\r\n\r\np {\r\n \r\n    margin: 8px;\r\n}\r\n\r\n.btn:not(:disabled):not(.disabled) {\r\n    cursor: pointer;\r\n    margin: 3px;\r\n}\r\n\r\n.card\r\n{\r\n    width: 200px;\r\n    height: 200px;\r\n    padding: 15px;\r\n    background-color: white;\r\n    box-shadow: 5px 5px 5px 5px  grey;\r\n  }\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmVuZG9ydXNlci9yZXdhcmRwb2ludGhpc3RvcnkvcmV3YXJkcG9pbnRoaXN0b3J5LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0lBQ0ksa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksV0FBVztJQUNYLHlCQUF5QjtJQUN6QixZQUFZO0lBQ1osVUFBVTtBQUNkOztBQUNBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGlCQUFpQjtBQUNyQjs7QUFFQTs7SUFFSSxXQUFXO0FBQ2Y7O0FBR0E7SUFDSSxlQUFlO0lBQ2YsV0FBVztBQUNmOztBQUVBOztJQUVJLFlBQVk7SUFDWixhQUFhO0lBQ2IsYUFBYTtJQUNiLHVCQUF1QjtJQUN2QixpQ0FBaUM7RUFDbkMiLCJmaWxlIjoic3JjL2FwcC92ZW5kb3J1c2VyL3Jld2FyZHBvaW50aGlzdG9yeS9yZXdhcmRwb2ludGhpc3RvcnkuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG4uZm9ybS1ncm91cC5yb3cge1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcblxyXG4uYmFkZ2UtaW5mbyB7XHJcbiAgICBjb2xvcjogI2ZmZjtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMxN2EyYjg7XHJcbiAgICBoZWlnaHQ6IDUwcHg7XHJcbiAgICB3aWR0aDogNTAlO1xyXG59XHJcbi5jb2wtZm9ybS1sYWJlbCB7XHJcbiAgICBmb250LXNpemU6IGxhcmdlO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuXHJcbnAge1xyXG4gXHJcbiAgICBtYXJnaW46IDhweDtcclxufVxyXG5cclxuXHJcbi5idG46bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkge1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgbWFyZ2luOiAzcHg7XHJcbn1cclxuXHJcbi5jYXJkXHJcbntcclxuICAgIHdpZHRoOiAyMDBweDtcclxuICAgIGhlaWdodDogMjAwcHg7XHJcbiAgICBwYWRkaW5nOiAxNXB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XHJcbiAgICBib3gtc2hhZG93OiA1cHggNXB4IDVweCA1cHggIGdyZXk7XHJcbiAgfSJdfQ== */");

/***/ }),

/***/ "./src/app/vendoruser/rewardpointhistory/rewardpointhistory.component.ts":
/*!*******************************************************************************!*\
  !*** ./src/app/vendoruser/rewardpointhistory/rewardpointhistory.component.ts ***!
  \*******************************************************************************/
/*! exports provided: RewardpointhistoryComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RewardpointhistoryComponent", function() { return RewardpointhistoryComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let RewardpointhistoryComponent = class RewardpointhistoryComponent {
    constructor() { }
    ngOnInit() {
    }
};
RewardpointhistoryComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-rewardpointhistory',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./rewardpointhistory.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/rewardpointhistory/rewardpointhistory.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./rewardpointhistory.component.css */ "./src/app/vendoruser/rewardpointhistory/rewardpointhistory.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], RewardpointhistoryComponent);



/***/ }),

/***/ "./src/app/vendoruser/vendorpayment/vendorpayment.component.css":
/*!**********************************************************************!*\
  !*** ./src/app/vendoruser/vendorpayment/vendorpayment.component.css ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n\r\n.card.pay {\r\n    margin-top: 102px;\r\n    margin-left: 40px;\r\n    margin-right: 40px;\r\n}\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n}\r\nh4.card-header-title.mb-3 {\r\n    padding: 10px;\r\n    margin-top: 10px;\r\n}\r\n.container.in {\r\n    margin-top: 37px;\r\n}\r\ninput.form-check-input.hide1 {\r\n    margin-top: 4px;\r\n    height: 30px;\r\n    width: 42px;\r\n}\r\nlabel.form-check-label.hidelabel1 {\r\n    margin-left: 28px;\r\n}\r\ndiv#importhead{\r\n    font-weight: bold;\r\n    font-size: 20px;\r\n    padding: 14px 0px 10px 62px;\r\n    text-align: center;\r\n}\r\np#importbal {\r\n    line-height: 3.5rem;\r\n    color: orangered;\r\n}\r\ninput[type=\"checkbox\"] {\r\n    width: 30px;\r\n    height: 30px;\r\n    margin-top: -4px;\r\n}\r\nlabel.form-check-label.hidelabel {\r\n    font-weight: 800;\r\n    margin-left: 18px;\r\n    margin-top: 4px;\r\n    font-size: 20px;\r\n}\r\ninput[type=\"radio\"]{\r\n    -webkit-transform: scale(2.5);\r\n            transform: scale(2.5);\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmVuZG9ydXNlci92ZW5kb3JwYXltZW50L3ZlbmRvcnBheW1lbnQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUNqQixrQkFBa0I7QUFDdEI7QUFDQTtJQUNJLG9CQUFvQjtJQUNwQixlQUFlO0lBQ2YsaUJBQWlCO0FBQ3JCO0FBRUE7SUFDSSxhQUFhO0lBQ2IsZ0JBQWdCO0FBQ3BCO0FBRUE7SUFDSSxnQkFBZ0I7QUFDcEI7QUFHQTtJQUNJLGVBQWU7SUFDZixZQUFZO0lBQ1osV0FBVztBQUNmO0FBQ0E7SUFDSSxpQkFBaUI7QUFDckI7QUFFQTtJQUNJLGlCQUFpQjtJQUNqQixlQUFlO0lBQ2YsMkJBQTJCO0lBQzNCLGtCQUFrQjtBQUN0QjtBQUVBO0lBQ0ksbUJBQW1CO0lBQ25CLGdCQUFnQjtBQUNwQjtBQUVBO0lBQ0ksV0FBVztJQUNYLFlBQVk7SUFDWixnQkFBZ0I7QUFDcEI7QUFFQTtJQUNJLGdCQUFnQjtJQUNoQixpQkFBaUI7SUFDakIsZUFBZTtJQUNmLGVBQWU7QUFDbkI7QUFFQTtJQUNJLDZCQUFxQjtZQUFyQixxQkFBcUI7QUFDekIiLCJmaWxlIjoic3JjL2FwcC92ZW5kb3J1c2VyL3ZlbmRvcnBheW1lbnQvdmVuZG9ycGF5bWVudC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG4uY2FyZC5wYXkge1xyXG4gICAgbWFyZ2luLXRvcDogMTAycHg7XHJcbiAgICBtYXJnaW4tbGVmdDogNDBweDtcclxuICAgIG1hcmdpbi1yaWdodDogNDBweDtcclxufVxyXG4uYnRuLmJ0bi1sZyB7XHJcbiAgICBwYWRkaW5nOiAxcmVtIDIuNHJlbTtcclxuICAgIGZvbnQtc2l6ZTogMTdweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcblxyXG5oNC5jYXJkLWhlYWRlci10aXRsZS5tYi0zIHtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG59XHJcblxyXG4uY29udGFpbmVyLmluIHtcclxuICAgIG1hcmdpbi10b3A6IDM3cHg7XHJcbn1cclxuXHJcblxyXG5pbnB1dC5mb3JtLWNoZWNrLWlucHV0LmhpZGUxIHtcclxuICAgIG1hcmdpbi10b3A6IDRweDtcclxuICAgIGhlaWdodDogMzBweDtcclxuICAgIHdpZHRoOiA0MnB4O1xyXG59XHJcbmxhYmVsLmZvcm0tY2hlY2stbGFiZWwuaGlkZWxhYmVsMSB7XHJcbiAgICBtYXJnaW4tbGVmdDogMjhweDtcclxufVxyXG5cclxuZGl2I2ltcG9ydGhlYWR7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIHBhZGRpbmc6IDE0cHggMHB4IDEwcHggNjJweDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG5cclxucCNpbXBvcnRiYWwge1xyXG4gICAgbGluZS1oZWlnaHQ6IDMuNXJlbTtcclxuICAgIGNvbG9yOiBvcmFuZ2VyZWQ7XHJcbn1cclxuXHJcbmlucHV0W3R5cGU9XCJjaGVja2JveFwiXSB7XHJcbiAgICB3aWR0aDogMzBweDtcclxuICAgIGhlaWdodDogMzBweDtcclxuICAgIG1hcmdpbi10b3A6IC00cHg7XHJcbn1cclxuXHJcbmxhYmVsLmZvcm0tY2hlY2stbGFiZWwuaGlkZWxhYmVsIHtcclxuICAgIGZvbnQtd2VpZ2h0OiA4MDA7XHJcbiAgICBtYXJnaW4tbGVmdDogMThweDtcclxuICAgIG1hcmdpbi10b3A6IDRweDtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxufVxyXG5cclxuaW5wdXRbdHlwZT1cInJhZGlvXCJde1xyXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgyLjUpO1xyXG59Il19 */");

/***/ }),

/***/ "./src/app/vendoruser/vendorpayment/vendorpayment.component.ts":
/*!*********************************************************************!*\
  !*** ./src/app/vendoruser/vendorpayment/vendorpayment.component.ts ***!
  \*********************************************************************/
/*! exports provided: VendorpaymentComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VendorpaymentComponent", function() { return VendorpaymentComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_model_select__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/model/select */ "./src/app/model/select.ts");
/* harmony import */ var src_app_services_payment_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/payment.service */ "./src/app/services/payment.service.ts");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");
/* harmony import */ var src_app_model_admin_payment__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/model/admin-payment */ "./src/app/model/admin-payment.ts");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var src_app_services_upload_file_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/services/upload-file.service */ "./src/app/services/upload-file.service.ts");
/* harmony import */ var src_app_model_bank_statement__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/model/bank-statement */ "./src/app/model/bank-statement.ts");









let VendorpaymentComponent = class VendorpaymentComponent {
    constructor(paymentService, toastr, uploadService) {
        this.paymentService = paymentService;
        this.toastr = toastr;
        this.uploadService = uploadService;
        this.ranges = new Array();
        this.matchingChequePayments = false;
        this.cRange = "-1";
        this.cDate = new Date("01/01/2020");
        this.cDate1 = new Date();
        this.date = new Date("01/01/2020");
        this.date1 = new Date();
        this.bRange = "-1";
        this.bDate = new Date("01/01/2020");
        this.bDate1 = new Date();
        this.progress = 0;
        this.message = '';
        this.errmessage = "";
        this.selectedBankStatements = new Array();
        this.selectedBankTrns = new Array();
        this.selectedCheques = new Array();
    }
    ngOnInit() {
        this.vendorAccountDetails = new Array();
        this.populateRange();
        this.iterationName = 'initial';
    }
    populateRange() {
        let range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_2__["Select"];
        range.id = "1";
        range.value = "Custom Range";
        this.ranges[0] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_2__["Select"];
        range.id = "2";
        range.value = "Today";
        this.ranges[1] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_2__["Select"];
        range.id = "3";
        range.value = "1 Week";
        this.ranges[2] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_2__["Select"];
        range.id = "4";
        range.value = "15 Days";
        this.ranges[3] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_2__["Select"];
        range.id = "5";
        range.value = "Current Month";
        this.ranges[4] = range;
    }
    getStartDate(date, date1, endDate, option) {
        let startDate = new Date();
        if (option == "1") {
            startDate = date;
            endDate = date1;
        }
        else if (option == "2") {
            startDate.setDate(endDate.getDate() - 1);
        }
        else if (option == "3") {
            startDate.setDate(endDate.getDate() - 7);
        }
        else if (option == "4") {
            startDate.setDate(endDate.getDate() - 15);
        }
        else if (option == "5") {
            startDate.setDate(endDate.getDate() - 30);
        }
        return startDate;
    }
    onDateChangeApprCheque() {
        this.chequeNumber = null;
        this.filterListApprChequeDate("1");
    }
    onApprChequeChequeNumber() {
        if (this.chequeNumber != null) {
            this.filterListApprChequeChequeNumber();
        }
    }
    filterListApprChequeChequeNumber() {
        let filteredList = this.oldChequePaymentList;
        if (this.chequeNumber != "") {
            this.chequePaymentList = filteredList.filter(res => {
                return res.chequeNumber.match(this.chequeNumber);
            });
        }
        else if (this.chequeNumber == "") {
            this.chequePaymentList = this.oldChequePaymentList;
        }
    }
    onSelectRangeApprCheque() {
        if (this.cRange != "-1") {
            if (this.cRange == "1") {
                this.cCustomDate = true;
                this.cDate = new Date("01/01/2020");
                this.cDate1 = new Date();
            }
            else {
                this.cCustomDate = false;
            }
            console.log(this.cRange);
            this.filterListApprChequeDate(this.cRange);
        }
        else {
            this.chequePaymentList = this.oldChequePaymentList;
            this.cCustomDate = false;
        }
    }
    filterListApprChequeDate(option) {
        this.newChequePaymentList = new Array();
        let startDate = new Date();
        let endDate = new Date();
        if (this.cCustomDate) {
            endDate = this.cDate1;
        }
        startDate = this.getStartDate(this.cDate, this.cDate1, endDate, option);
        for (let b of this.oldChequePaymentList) {
            let dt = new Date(b.topupDate);
            dt.setHours(0, 0, 0, 0);
            if (dt >= startDate && dt <= endDate) {
                this.newChequePaymentList.push(b);
            }
        }
        this.chequePaymentList = this.newChequePaymentList;
        //  this.totalChequeAmount = this.getTotalChequeAmount(this.chequePaymentList);
    }
    onSelectRangeCheque() {
        if (this.cRange != "-1") {
            if (this.cRange == "1") {
                this.cCustomDate = true;
                this.cDate = new Date("01/01/2020");
                this.cDate1 = new Date();
            }
            else {
                this.cCustomDate = false;
            }
            this.filterListChequeDepositedOn(this.cRange);
        }
        else {
            this.pendingChequePaymentList = this.oldPendingChequePaymentList;
            this.cCustomDate = false;
        }
    }
    filterListChequeDepositedOn(option) {
        this.newChequePaymentList = new Array();
        let startDate = new Date();
        let endDate = new Date();
        if (this.cCustomDate) {
            endDate = this.cDate1;
        }
        startDate = this.getStartDate(this.cDate, this.cDate1, endDate, option);
        for (let b of this.oldPendingChequePaymentList) {
            let dt = new Date(b.topupDate);
            dt.setHours(0, 0, 0, 0);
            if (dt >= startDate && dt <= endDate) {
                this.newChequePaymentList.push(b);
            }
        }
        console.log(this.newChequePaymentList);
        this.pendingChequePaymentList = this.newChequePaymentList;
    }
    onDateChangeCheque() {
        this.chequeNumber = null;
        this.filterListChequeDepositedOn("1");
    }
    onUtrNo() {
        let filteredList = this.oldBankPaymentList;
        console.log(filteredList);
        if (this.utrNo != "") {
            this.bankPaymentList = filteredList.filter(res => {
                return res.utrNo.match(this.utrNo);
            });
        }
        else if (this.utrNo == "") {
            this.bankPaymentList = this.oldBankPaymentList;
        }
    }
    onDateChange() {
        this.utrNo = null;
        this.filterList("1");
    }
    onSelectRange() {
        if (this.range != "-1") {
            if (this.range == "1") {
                this.customDate = true;
                this.date = new Date("01/01/2020");
                this.date1 = new Date();
            }
            else {
                this.customDate = false;
            }
            this.filterList(this.range);
        }
        else {
            this.bankPaymentList = this.oldBankPaymentList;
            this.customDate = false;
        }
    }
    filterList(option) {
        this.newBankPaymentList = new Array();
        let startDate = new Date();
        let endDate = new Date();
        // this.totalPaidAmount = 0 ;
        if (this.customDate) {
            endDate = this.date1;
        }
        startDate = this.getStartDate(this.date, this.date1, endDate, option);
        for (let b of this.oldBankPaymentList) {
            let dt = new Date(b.remittingDate);
            dt.setHours(0, 0, 0, 0);
            if (dt >= startDate && dt <= endDate) {
                this.newBankPaymentList.push(b);
                //    this.totalPaidAmount = this.totalPaidAmount + b.paidAmount;
            }
        }
        this.bankPaymentList = this.newBankPaymentList;
    }
    onSelectRangeBank() {
        if (this.bRange != "-1") {
            if (this.bRange == "1") {
                this.bCustomDate = true;
                this.bDate = new Date("01/01/2020");
                this.bDate1 = new Date();
            }
            else {
                this.bCustomDate = false;
            }
            this.filterListBankStmt(this.bRange);
        }
        else {
            this.vendorBankStatement = this.oldVendorBankStatement;
            this.bCustomDate = false;
        }
    }
    filterListBankStmt(option) {
        let newBankStatementList = new Array();
        let startDate = new Date();
        let endDate = new Date();
        if (this.bCustomDate) {
            endDate = this.bDate1;
        }
        startDate = this.getStartDate(this.bDate, this.bDate1, endDate, option);
        for (let b of this.oldVendorBankStatement) {
            let dt = new Date(b.createdDate);
            dt.setHours(0, 0, 0, 0);
            if (dt >= startDate && dt <= endDate) {
                newBankStatementList.push(b);
            }
        }
        this.vendorBankStatement = newBankStatementList;
    }
    onDateChangeBank() {
        this.particulars = null;
        this.filterListBankStmt("1");
    }
    onParticulars() {
        let filteredList = this.oldVendorBankStatement;
        console.log(filteredList);
        if (this.particulars != "") {
            this.vendorBankStatement = filteredList.filter(res => {
                return res.particulars.match(this.particulars);
            });
        }
        else if (this.particulars == "") {
            this.vendorBankStatement = this.oldVendorBankStatement;
        }
        /*if(this.bRange!=-1){
          this.filterListBankStmt(this.bRange)
          this.newBankStatementList = JSON.parse(JSON.stringify(this.bankStatementList));
        }else{
          this.newBankStatementList = JSON.parse(JSON.stringify(this.oldBankStatementList));
        }
      
        if(this.particulars!=""){
          if(this.particulars.length>this.particulength){
            this.bankStatementList = this.newBankStatementList.filter(res=>{
              return res.particulars.match(this.particulars);})
          }else{
             this.bankStatementList = this.newBankStatementList.filter(res=>{
              return res.particulars.match(this.particulars);})
          }
        }else if(this.particulars==""){
          this.bankStatementList = this.newBankStatementList;
        }
        this.particulength = this.particulars.length;
        */
    }
    /*onPaymentReconciliation() {
      this.iterationName = 'Payment_Reconciliation'
    }*/
    onBackClick() {
        console.log(this.iterationName);
        if (this.iterationName == 'Bank_Transfer') {
            this.iterationName = 'initial';
        }
        else if (this.iterationName == 'Payment_Reconciliation') {
            this.iterationName = 'initial';
        }
        else if (this.iterationName == 'Bank_Payment_Reconciliation') {
            this.iterationName = 'Bank_Transfer';
        } /*else if(this.iterationName == 'Hold_Bank_Payment'){
          this.iterationName = 'Bank_Transfer'
        }*/
        else if (this.iterationName == 'Bank_Payment_Report') {
            this.iterationName = 'Bank_Transfer';
        }
        else if (this.iterationName == 'Cheque_Payment_Reconciliation') {
            this.iterationName = 'Cheque_Transfer';
        } /*else if(this.iterationName == 'Hold_Cheque_Payment'){
          this.iterationName ='Cheque_Transfer'
        }*/
        else if (this.iterationName == 'Cheque_Payment_Report') {
            this.iterationName = 'Cheque_Transfer';
        }
        else if (this.iterationName == 'Cheque_Transfer') {
            this.iterationName = 'initial';
        }
        else if (this.iterationName == 'Bank_Payment_Reconciliation_Auto_Match') {
            this.iterationName = 'Bank_Payment_Reconciliation';
        }
        else if (this.iterationName == 'Payment_By_Cheque') {
            this.iterationName = 'initial';
        }
        else if (this.iterationName == 'STATEMENT_UPLOAD') {
            this.iterationName = 'initial';
        }
        else if (this.iterationName == 'Cheque_Payment_Reconciliation_Auto_Match') {
            this.iterationName = 'Cheque_Payment_Reconciliation';
        }
        else if (this.iterationName == 'Update_passbook') {
            this.iterationName = 'initial';
        }
    }
    /*onPaymentByCheque() {
      
      this.iterationName = 'Payment_By_Cheque';
    }*/
    onBankTransfer() {
        this.iterationName = 'Bank_Transfer';
    }
    onChequeTransfer() {
        this.iterationName = 'Cheque_Transfer';
    }
    onBankPaymentReconciliation() {
        console.log("=========");
        this.selectedBankStatements = new Array();
        this.selectedBankTrns = new Array();
        this.paymentService.getVendorAccountDetails()
            .subscribe((data) => {
            console.log(data);
            this.vendorAccountDetails = data;
        });
        this.paymentService.getPendingVendorBankStatement()
            .subscribe((data) => {
            console.log(data);
            this.vendorBankStatement = data;
            this.oldVendorBankStatement = data;
        });
        this.oldChequePaymentList = new Array();
        this.paymentService.getPendingVendorBankPaymentList()
            .subscribe((data) => {
            console.log(data);
            this.bankPaymentList = data;
            this.oldBankPaymentList = data;
            this.iterationName = 'Bank_Payment_Reconciliation';
        });
    }
    /*onHoldBankPaymentTransaction() {
      this.iterationName = 'Hold_Bank_Payment'
    }*/
    onChequeNumber() {
        if (this.chequeNumber != null) {
            this.filterListChequNoDepoOn();
        }
    }
    filterListChequNoDepoOn() {
        let filteredList = this.oldPendingChequePaymentList;
        if (this.chequeNumber != "") {
            this.pendingChequePaymentList = filteredList.filter(res => {
                return res.chequeNumber.match(this.chequeNumber);
            });
        }
        else if (this.chequeNumber == "") {
            this.pendingChequePaymentList = this.oldPendingChequePaymentList;
        }
    }
    onBankPaymentReport() {
        this.oldChequePaymentList = new Array();
        this.paymentService.getVendorBankPaymentList()
            .subscribe((data) => {
            console.log(data);
            this.bankPaymentList = data;
            this.oldBankPaymentList = data;
            this.iterationName = 'Bank_Payment_Report';
        });
    }
    onChequePaymentReconcilation() {
        this.selectedBankStatements = new Array();
        this.selectedCheques = new Array();
        this.paymentService.getVendorAccountDetails()
            .subscribe((data) => {
            console.log(data);
            this.vendorAccountDetails = data;
        });
        this.paymentService.getPendingVendorBankStatement()
            .subscribe((data) => {
            console.log(data);
            this.vendorBankStatement = data;
            this.oldVendorBankStatement = data;
        });
        this.paymentService.getPendingAdminDeliveredChequeList()
            .subscribe((data) => {
            console.log(data);
            this.pendingChequePaymentList = data;
            this.oldPendingChequePaymentList = data;
            this.iterationName = 'Cheque_Payment_Reconciliation';
        });
    }
    /*onHoldChequePaymentTransaction(){
      this.iterationName ='Hold_Cheque_Payment'
    }*/
    onChequePaymentReport() {
        this.paymentService.getAdminDeliveredChequeList()
            .subscribe((data) => {
            console.log(data);
            this.chequePaymentList = data;
            this.oldChequePaymentList = data;
            this.iterationName = 'Cheque_Payment_Report';
        });
    }
    /*onChequeDeposit() {
    this.iterationName = 'Cheque_Deposit'
    }*/
    uploadBankStatement() {
        this.iterationName = 'STATEMENT_UPLOAD';
    }
    showMatchingChequePayments(type) {
        console.log("---------");
        // this.matchingChequePayments=!this.matchingChequePayments;
        // if(this.matchingChequePayments){
        let chequePaymentListAutoMatch = new Array();
        let pendingrecords = this.oldPendingChequePaymentList;
        if (type == 'CHEQUE') {
            pendingrecords = this.oldPendingChequePaymentList;
        }
        else {
            pendingrecords = this.oldBankPaymentList;
        }
        // let chequePaylist = JSON.parse(JSON.stringify(pendingrecords));
        console.log(pendingrecords);
        for (let c of pendingrecords) {
            for (let stmt of this.vendorBankStatement) {
                console.log(c.chequeNumber + " - " + c.paidAmount);
                console.log(stmt.particulars + " - " + stmt.creditAmount);
                if ((stmt.particulars.includes(c.chequeNumber) || stmt.particulars.includes(c.utrNo)) && c.paidAmount == stmt.creditAmount) {
                    console.log("inside if");
                    let adminPayment = new src_app_model_admin_payment__WEBPACK_IMPORTED_MODULE_5__["AdminPayment"];
                    adminPayment = c;
                    adminPayment.vendorBankStmtId = stmt.vendorBankStmtId;
                    adminPayment.particulars = stmt.particulars;
                    adminPayment.creditAmount = stmt.creditAmount;
                    chequePaymentListAutoMatch.push(adminPayment);
                }
            }
            // }
            this.chequePaymentList = chequePaymentListAutoMatch;
            console.log(this.chequePaymentList);
            if (type == 'CHEQUE') {
                this.iterationName = 'Cheque_Payment_Reconciliation_Auto_Match';
            }
            else {
                this.iterationName = 'Bank_Payment_Reconciliation_Auto_Match';
            }
        }
    }
    onAutoApproveChequePayment() {
        let chequePaymentList = new Array();
        let paymentList = this.chequePaymentList;
        if (paymentList == null)
            paymentList = this.bankPaymentList;
        console.log(paymentList);
        for (let c of paymentList) {
            if (c.selectedChequePay == true) {
                console.log(c);
                let adminPayment = new src_app_model_admin_payment__WEBPACK_IMPORTED_MODULE_5__["AdminPayment"];
                adminPayment.adminVendorPaymentId = c.adminVendorPaymentId;
                adminPayment.vendorBankStmtId = c.vendorBankStmtId;
                chequePaymentList.push(adminPayment);
            }
        }
        if (chequePaymentList.length != 0) {
            console.log("IF CHEQUEPAYMENT");
            this.paymentService.saveMultipleVendorPayment(chequePaymentList)
                .subscribe((data) => {
                this.toastr.success('Transaction Approved!!!', 'Cheque Reconciliation', { timeOut: 10000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
                this.onChequePaymentReconcilation();
            });
        }
        else {
            this.toastr.error('Select Record', 'Bank Statement', { timeOut: 10000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
        }
    }
    onChequePayment(c) {
        if (c.selectedChequePay == true) {
            this.selectedCheque = c;
            this.selectedCheques.push(c);
        }
        if (c.selectedChequePay == false) {
            this.selectedCheque = null;
            const index = this.selectedCheques.indexOf(c);
            if (index !== -1) {
                this.selectedCheques.splice(index, 1);
            }
        }
    }
    onBankPayment(c) {
        if (c.selectedChequePay == true) {
            this.selectedCheque = c;
            this.selectedBankTrns.push(c);
        }
        if (c.selectedChequePay == false) {
            this.selectedCheque = null;
            const index = this.selectedBankTrns.indexOf(c);
            if (index !== -1) {
                this.selectedBankTrns.splice(index, 1);
            }
        }
    }
    onApproveChequePayment() {
        console.log(this.matchingChequePayments);
        if (this.matchingChequePayments == true) {
            this.onAutoApproveChequePayment();
        }
        if (this.matchingChequePayments == false) {
            let paymentList = new Array();
            console.log(this.selectedCheques);
            console.log(this.selectedBankTrns);
            if (this.selectedCheques != null && this.selectedCheques.length > 0) {
                console.log("Pending cheque");
                for (let c of this.selectedCheques) {
                    if (c.selectedChequePay) {
                        for (let b of this.selectedBankStatements) {
                            if (b.particulars.includes(c.chequeNumber) && c.paidAmount == b.creditAmount) {
                                let adminPayment = new src_app_model_admin_payment__WEBPACK_IMPORTED_MODULE_5__["AdminPayment"];
                                adminPayment.adminVendorPaymentId = c.adminVendorPaymentId;
                                adminPayment.vendorBankStmtId = b.vendorBankStmtId;
                                paymentList.push(adminPayment);
                            }
                        }
                    }
                }
            }
            else if (this.selectedBankTrns != null && this.selectedBankTrns.length > 0) {
                console.log(this.selectedBankStatements);
                console.log(this.selectedBankTrns);
                for (let c of this.selectedBankTrns) {
                    if (c.selectedChequePay) {
                        for (let b of this.selectedBankStatements) {
                            if (b.particulars.includes(c.utrNo) && c.paidAmount == b.creditAmount) {
                                let adminPayment = new src_app_model_admin_payment__WEBPACK_IMPORTED_MODULE_5__["AdminPayment"];
                                adminPayment.adminVendorPaymentId = c.adminVendorPaymentId;
                                adminPayment.vendorBankStmtId = b.vendorBankStmtId;
                                paymentList.push(adminPayment);
                            }
                        }
                    }
                }
            }
            console.log(paymentList);
            if (paymentList.length != 0) {
                console.log(this.selectedBankStatements);
                this.toastr.success(paymentList.length + ' Matched record found', 'Payment Reconciliation', { timeOut: 10000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
                this.paymentService.saveMultipleVendorPayment(paymentList)
                    .subscribe((data) => {
                    this.toastr.success('Transaction Approved!!!', 'Payment Reconciliation', { timeOut: 10000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
                    this.onChequePaymentReconcilation();
                });
            }
            else {
                this.toastr.error('No matching record found', 'Cheque Reconciliation', { timeOut: 10000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
            }
        }
    }
    onBankStatement(b) {
        if (b.selectedBankStmt == true) {
            this.selectedBankStatement = b;
            this.selectedBankStatements.push(b);
        }
        if (b.selectedBankStmt == false) {
            this.selectedBankStatement = null;
            const index = this.selectedBankStatements.indexOf(b);
            if (index !== -1) {
                this.selectedBankStatements.splice(index, 1);
            }
        }
    }
    selectFile(event) {
        this.selectedFiles = event.target.files;
        this.message = '';
    }
    upload() {
        this.progress = 0;
        this.message = "";
        this.errmessage = "";
        this.currentFile = this.selectedFiles.item(0);
        this.uploadService.vendorBankStatementUpload(this.currentFile).subscribe(event => {
            console.log(event);
            if (event.type === _angular_common_http__WEBPACK_IMPORTED_MODULE_6__["HttpEventType"].UploadProgress) {
                this.progress = Math.round(100 * event.loaded / event.total);
                console.log(this.progress);
            }
            else if (event instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_6__["HttpResponse"]) {
                if (event.body != null) {
                    console.log(event.body);
                    if (event.body.message != null) {
                        this.currentFile = undefined;
                        this.errmessage = event.body.message;
                    }
                    else {
                        this.message = "File " + event.body.name + " uploaded successfully";
                        /*this.paymentService.getPendingBankStatement()
                          .subscribe((data)=>{
                          this.bankStatementList = data;
                          this.oldBankStatementList = data;
                          this.walletService.getAdminBankDetails()
                          .subscribe((data)=>{
                            this.accountDetails = data;
                            this.customDate = false;
                            this.range = -1;
                            this.bRange = -1;
                            this.bCustomDate = false;
                          })
                        })*/
                        //this.fileDataList = this.getBankStmtFileList();
                    }
                }
                else {
                    this.currentFile = undefined;
                    this.errmessage = "Please upload excel file in proper format";
                }
            }
        }, err => {
            this.progress = 0;
            this.errmessage = 'Could not upload the file!';
            this.currentFile = undefined;
        });
        this.selectedFiles = undefined;
    }
    uploadBankPassbook() {
        this.passbook = new src_app_model_bank_statement__WEBPACK_IMPORTED_MODULE_8__["BankStatement"]();
        this.paymentService.getPassbookBalance()
            .subscribe((data) => {
            this.passbook.balance = data;
            console.log(data);
        });
        this.iterationName = 'Update_passbook';
    }
    onUpdatePassbook() {
        this.passbook.balance = this.passbook.balance * 1 + this.passbook.creditAmount * 1;
        console.log(this.passbook);
        this.paymentService.updateVendorBankPassbook(this.passbook).subscribe((data => {
            this.toastr.success('Bank Passbook Updated successfully!!!', 'Passbook Update', { timeOut: 10000, positionClass: 'toast-top-center', progressBar: true, progressAnimation: 'increasing' });
        }));
        this.iterationName = 'initial';
    }
};
VendorpaymentComponent.ctorParameters = () => [
    { type: src_app_services_payment_service__WEBPACK_IMPORTED_MODULE_3__["PaymentService"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_4__["ToastrService"] },
    { type: src_app_services_upload_file_service__WEBPACK_IMPORTED_MODULE_7__["UploadFileService"] }
];
VendorpaymentComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-vendorpayment',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./vendorpayment.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/vendorpayment/vendorpayment.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./vendorpayment.component.css */ "./src/app/vendoruser/vendorpayment/vendorpayment.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_payment_service__WEBPACK_IMPORTED_MODULE_3__["PaymentService"], ngx_toastr__WEBPACK_IMPORTED_MODULE_4__["ToastrService"], src_app_services_upload_file_service__WEBPACK_IMPORTED_MODULE_7__["UploadFileService"]])
], VendorpaymentComponent);



/***/ }),

/***/ "./src/app/vendoruser/viewallorders/viewallorders.component.css":
/*!**********************************************************************!*\
  !*** ./src/app/vendoruser/viewallorders/viewallorders.component.css ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\nb.heading {\r\n    font-weight: bold;\r\n    font-size: 21px;\r\n    color: red;\r\n}\r\n.card.card-cascade.narrower.body-section {\r\n    margin-top: 0px;\r\n}\r\n/* summary Css */\r\n.badge-secondary  {\r\n    width: 100%;\r\n    height: 50px;\r\n    margin:4px;\r\n}\r\np.summary {\r\n    margin-top: 12px;\r\n    font-size: large;\r\n    font-weight: bold;\r\n    color: #ffffff !important;\r\n}\r\nlabel {\r\n    margin-top: 10px;\r\n    font-size: initial;\r\n    font-weight: bold;\r\n}\r\n.form-group.row {\r\n    margin-left: 7px;\r\n    margin-right: 8px;\r\n    margin-top: 10px;\r\n}\r\nh4.filter {\r\n    font-weight: bold;\r\n}\r\nh5.head {\r\n    margin-left: 26px;\r\n}\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n  }\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmVuZG9ydXNlci92aWV3YWxsb3JkZXJzL3ZpZXdhbGxvcmRlcnMuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0E7SUFDSSxpQkFBaUI7SUFDakIsZUFBZTtJQUNmLFVBQVU7QUFDZDtBQUNBO0lBQ0ksZUFBZTtBQUNuQjtBQUVBLGdCQUFnQjtBQUNoQjtJQUNJLFdBQVc7SUFDWCxZQUFZO0lBQ1osVUFBVTtBQUNkO0FBRUE7SUFDSSxnQkFBZ0I7SUFDaEIsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQix5QkFBeUI7QUFDN0I7QUFDQTtJQUNJLGdCQUFnQjtJQUNoQixrQkFBa0I7SUFDbEIsaUJBQWlCO0FBQ3JCO0FBRUE7SUFDSSxnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLGdCQUFnQjtBQUNwQjtBQUNBO0lBQ0ksaUJBQWlCO0FBQ3JCO0FBRUE7SUFDSSxpQkFBaUI7QUFDckI7QUFDQTtJQUNJLG9CQUFvQjtJQUNwQixlQUFlO0lBQ2YsaUJBQWlCO0VBQ25CIiwiZmlsZSI6InNyYy9hcHAvdmVuZG9ydXNlci92aWV3YWxsb3JkZXJzL3ZpZXdhbGxvcmRlcnMuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5iLmhlYWRpbmcge1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBmb250LXNpemU6IDIxcHg7XHJcbiAgICBjb2xvcjogcmVkO1xyXG59XHJcbi5jYXJkLmNhcmQtY2FzY2FkZS5uYXJyb3dlci5ib2R5LXNlY3Rpb24ge1xyXG4gICAgbWFyZ2luLXRvcDogMHB4O1xyXG59XHJcblxyXG4vKiBzdW1tYXJ5IENzcyAqL1xyXG4uYmFkZ2Utc2Vjb25kYXJ5ICB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIG1hcmdpbjo0cHg7XHJcbn1cclxuXHJcbnAuc3VtbWFyeSB7XHJcbiAgICBtYXJnaW4tdG9wOiAxMnB4O1xyXG4gICAgZm9udC1zaXplOiBsYXJnZTtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgY29sb3I6ICNmZmZmZmYgIWltcG9ydGFudDtcclxufVxyXG5sYWJlbCB7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG4gICAgZm9udC1zaXplOiBpbml0aWFsO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuXHJcbi5mb3JtLWdyb3VwLnJvdyB7XHJcbiAgICBtYXJnaW4tbGVmdDogN3B4O1xyXG4gICAgbWFyZ2luLXJpZ2h0OiA4cHg7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG59XHJcbmg0LmZpbHRlciB7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5cclxuaDUuaGVhZCB7XHJcbiAgICBtYXJnaW4tbGVmdDogMjZweDtcclxufVxyXG4uYnRuLmJ0bi1sZyB7XHJcbiAgICBwYWRkaW5nOiAxcmVtIDIuNHJlbTtcclxuICAgIGZvbnQtc2l6ZTogMTdweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIH0iXX0= */");

/***/ }),

/***/ "./src/app/vendoruser/viewallorders/viewallorders.component.ts":
/*!*********************************************************************!*\
  !*** ./src/app/vendoruser/viewallorders/viewallorders.component.ts ***!
  \*********************************************************************/
/*! exports provided: ViewallordersComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewallordersComponent", function() { return ViewallordersComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_services_order_processing_status_management_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/order-processing-status-management.service */ "./src/app/services/order-processing-status-management.service.ts");
/* harmony import */ var src_app_model_select__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/model/select */ "./src/app/model/select.ts");




let ViewallordersComponent = class ViewallordersComponent {
    constructor(orderProcessingStatusManagementService) {
        this.orderProcessingStatusManagementService = orderProcessingStatusManagementService;
        this.ranges = new Array();
        this.range = "-1";
        this.date = new Date("01/01/2020");
        this.date1 = new Date();
    }
    ngOnInit() {
        this.orderProcessingStatusManagementService.getOrderProcessingStatusManagementForLoggedInVendorUser()
            .subscribe((data) => {
            this.orderProcessingList = data;
            if (this.orderProcessingList != null) {
                this.oldOrderProcessingList = this.orderProcessingList;
                this.selectedWarehouse = new Array();
                this.selectedProduct = new Array();
                this.orderProcessingList = data;
                this.userType = null;
                this.productName = null;
                this.warehouseName = null;
                this.customDate = false;
                this.range = -1;
                this.populateRange();
                this.oldOrderProcessingList = this.orderProcessingList;
                this.corporateList = new Array();
                this.corporateList.push("All Users");
                this.corporateList.push("End Users");
                for (let o of this.orderProcessingList) {
                    this.selectedWarehouse.push(o.validateThrough.warehouse.warehouseName);
                    if (o.orderManagement.user.organisationId != null && o.orderManagement.user.organisationId != 0) {
                        this.corporateList.push(o.orderManagement.user.masterOrganisation.organisationName);
                    }
                }
                let unique1 = this.selectedWarehouse.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.selectedWarehouse = unique1;
                unique1 = this.corporateList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.corporateList = unique1;
            }
            this.iternation = "initial";
        });
    }
    populateRange() {
        let range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_3__["Select"];
        range.id = "1";
        range.value = "Custom Range";
        this.ranges[0] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_3__["Select"];
        range.id = "2";
        range.value = "15 Days";
        this.ranges[1] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_3__["Select"];
        range.id = "3";
        range.value = "Current Month";
        this.ranges[2] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_3__["Select"];
        range.id = "4";
        range.value = "3 Months";
        this.ranges[3] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_3__["Select"];
        range.id = "5";
        range.value = "6 Months";
        this.ranges[4] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_3__["Select"];
        range.id = "6";
        range.value = "1 Year";
        this.ranges[5] = range;
    }
    onUserType() {
        if (this.userType != null) {
            this.page = 1;
            this.orderProcessingList = this.oldOrderProcessingList;
            this.range = -1;
            this.customDate = false;
            this.warehouseName = null;
            this.productName = null;
            this.selectedWarehouse = new Array();
            this.selectedProduct = new Array();
            this.newOrderProcessingList = new Array();
            if (this.userType == "All Users") {
                this.newOrderProcessingList = this.oldOrderProcessingList;
                for (let o of this.orderProcessingList) {
                    this.selectedWarehouse.push(o.validateThrough.warehouse.warehouseName);
                }
            }
            if (this.userType == "End Users") {
                for (let o of this.orderProcessingList) {
                    if (o.orderManagement.user.organisationId == null || o.orderManagement.user.organisationId == 0) {
                        this.newOrderProcessingList.push(o);
                        this.selectedWarehouse.push(o.validateThrough.warehouse.warehouseName);
                    }
                }
            }
            if (this.userType != "All User" && this.userType != "End Users") {
                for (let o of this.orderProcessingList) {
                    if (o.orderManagement.user.organisationId != null && o.orderManagement.user.organisationId != 0) {
                        if (o.orderManagement.user.masterOrganisation.organisationName == this.userType) {
                            this.newOrderProcessingList.push(o);
                            this.selectedWarehouse.push(o.validateThrough.warehouse.warehouseName);
                        }
                    }
                }
            }
            this.orderProcessingList = this.newOrderProcessingList;
            this.orderProcessingListUserFiltered = new Array();
            this.orderProcessingListUserFiltered = this.newOrderProcessingList;
            let unique1 = this.selectedWarehouse.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedWarehouse = unique1;
        }
    }
    onSelect() {
        if (this.range != "-1") {
            if (this.range == "1") {
                this.customDate = true;
            }
            else {
                this.customDate = false;
            }
            this.filterList(this.range);
        }
    }
    onDateChange() {
        this.filterList("1");
    }
    filterList(option) {
        if (this.orderProcessingListUserFiltered != null) {
            this.orderProcessingList = this.orderProcessingListUserFiltered;
        }
        else {
            this.orderProcessingList = this.oldOrderProcessingList;
        }
        this.newOrderProcessingList = new Array();
        let startDate = new Date();
        let endDate = new Date();
        this.productName = null;
        this.warehouseName = null;
        this.selectedProduct = new Array();
        this.selectedWarehouse = new Array();
        if (option == "1") {
            startDate = this.date;
            endDate = this.date1;
        }
        else if (option == "2") {
            startDate.setDate(endDate.getDate() - 15);
        }
        else if (option == "3") {
            startDate.setDate(endDate.getDate() - 30);
        }
        else if (option == "4") {
            startDate.setDate(endDate.getDate() - 90);
        }
        else if (option == "5") {
            startDate.setDate(endDate.getDate() - 180);
        }
        else if (option == "6") {
            startDate.setDate(endDate.getDate() - 360);
        }
        for (let o of this.orderProcessingList) {
            let dt = new Date(o.orderProcessedDate);
            if (dt >= startDate && dt <= endDate) {
                this.newOrderProcessingList.push(o);
                this.selectedWarehouse.push(o.validateThrough.warehouse.warehouseName);
            }
        }
        let unique2 = this.selectedWarehouse.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
        this.selectedWarehouse = unique2;
        this.orderProcessingList = this.newOrderProcessingList;
        this.orderProcessingListDateFiltered = this.newOrderProcessingList;
    }
    onWarehouse() {
        if (this.warehouseName != null) {
            if (this.orderProcessingListDateFiltered != null && this.range != -1) {
                this.orderProcessingList = this.orderProcessingListDateFiltered;
            }
            else if (this.orderProcessingListUserFiltered != null && this.userType != null) {
                this.orderProcessingList = this.orderProcessingListUserFiltered;
            }
            else if (this.orderProcessingListDateFiltered == null && this.orderProcessingListUserFiltered == null) {
                this.orderProcessingList = this.oldOrderProcessingList;
            }
            this.newOrderProcessingList = new Array();
            this.selectedProduct = new Array();
            for (let o of this.orderProcessingList) {
                if (o.validateThrough.warehouse.warehouseName == this.warehouseName) {
                    this.newOrderProcessingList.push(o);
                    this.selectedProduct.push(o.orderManagement.masterProducts.productName);
                }
            }
            let unique2 = this.selectedProduct.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedProduct = unique2;
            this.orderProcessingList = this.newOrderProcessingList;
        }
    }
    onProduct() {
        if (this.productName != null && this.warehouseName != null) {
            if (this.orderProcessingListDateFiltered != null && this.range != -1) {
                this.orderProcessingList = this.orderProcessingListDateFiltered;
            }
            else if (this.orderProcessingListUserFiltered != null && this.userType != null) {
                this.orderProcessingList = this.orderProcessingListUserFiltered;
            }
            else if (this.orderProcessingListDateFiltered == null && this.orderProcessingListUserFiltered == null) {
                this.orderProcessingList = this.oldOrderProcessingList;
            }
            this.newOrderProcessingList = new Array();
            for (let o of this.orderProcessingList) {
                if (o.validateThrough.warehouse.warehouseName == this.warehouseName && this.productName == o.orderManagement.masterProducts.productName) {
                    this.newOrderProcessingList.push(o);
                }
            }
            this.orderProcessingList = this.newOrderProcessingList;
        }
    }
};
ViewallordersComponent.ctorParameters = () => [
    { type: src_app_services_order_processing_status_management_service__WEBPACK_IMPORTED_MODULE_2__["OrderProcessingStatusManagementService"] }
];
ViewallordersComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-viewallorders',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./viewallorders.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/vendoruser/viewallorders/viewallorders.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./viewallorders.component.css */ "./src/app/vendoruser/viewallorders/viewallorders.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_order_processing_status_management_service__WEBPACK_IMPORTED_MODULE_2__["OrderProcessingStatusManagementService"]])
], ViewallordersComponent);



/***/ }),

/***/ "./src/app/warehouse-user/order-details/order-details.component.css":
/*!**************************************************************************!*\
  !*** ./src/app/warehouse-user/order-details/order-details.component.css ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (".container {\r\n  \r\n    margin-top: 20px;\r\n}\r\n\r\nlabel.col-md-7 {\r\n    font-size: 15px;\r\n    font-weight: bold;\r\n}\r\n\r\n.col-md-5 {\r\n    font-size: 15px;\r\n    font-weight: bold;\r\n}\r\n\r\n.card-body \r\n{\r\n    text-align: center;\r\n}\r\n\r\n/*  */\r\n\r\n.list-group-item {\r\n    border-top-left-radius: .25rem;\r\n    border-top-right-radius: .25rem;\r\n    margin: 3px;\r\n}\r\n\r\na:not([href]):not([tabindex]) {\r\n    font-weight: bold;\r\n    padding: 26px;\r\n}\r\n\r\n.btn-primary {\r\n\r\n    float: right;\r\n}\r\n\r\n.btn {\r\n    float: right;\r\n}\r\n\r\np {\r\n    margin-top: 0;\r\n    margin-bottom: 1rem;\r\n    margin: 12px;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvd2FyZWhvdXNlLXVzZXIvb3JkZXItZGV0YWlscy9vcmRlci1kZXRhaWxzLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0lBRUksZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksZUFBZTtJQUNmLGlCQUFpQjtBQUNyQjs7QUFDQTtJQUNJLGVBQWU7SUFDZixpQkFBaUI7QUFDckI7O0FBR0E7O0lBRUksa0JBQWtCO0FBQ3RCOztBQUNBLEtBQUs7O0FBQ0w7SUFDSSw4QkFBOEI7SUFDOUIsK0JBQStCO0lBQy9CLFdBQVc7QUFDZjs7QUFDQTtJQUNJLGlCQUFpQjtJQUNqQixhQUFhO0FBQ2pCOztBQUVBOztJQUVJLFlBQVk7QUFDaEI7O0FBQ0E7SUFDSSxZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixZQUFZO0FBQ2hCIiwiZmlsZSI6InNyYy9hcHAvd2FyZWhvdXNlLXVzZXIvb3JkZXItZGV0YWlscy9vcmRlci1kZXRhaWxzLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY29udGFpbmVyIHtcclxuICBcclxuICAgIG1hcmdpbi10b3A6IDIwcHg7XHJcbn1cclxuXHJcbmxhYmVsLmNvbC1tZC03IHtcclxuICAgIGZvbnQtc2l6ZTogMTVweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcbi5jb2wtbWQtNSB7XHJcbiAgICBmb250LXNpemU6IDE1cHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5cclxuXHJcbi5jYXJkLWJvZHkgXHJcbntcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG4vKiAgKi9cclxuLmxpc3QtZ3JvdXAtaXRlbSB7XHJcbiAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAuMjVyZW07XHJcbiAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogLjI1cmVtO1xyXG4gICAgbWFyZ2luOiAzcHg7XHJcbn1cclxuYTpub3QoW2hyZWZdKTpub3QoW3RhYmluZGV4XSkge1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBwYWRkaW5nOiAyNnB4O1xyXG59XHJcblxyXG4uYnRuLXByaW1hcnkge1xyXG5cclxuICAgIGZsb2F0OiByaWdodDtcclxufVxyXG4uYnRuIHtcclxuICAgIGZsb2F0OiByaWdodDtcclxufVxyXG5cclxucCB7XHJcbiAgICBtYXJnaW4tdG9wOiAwO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMXJlbTtcclxuICAgIG1hcmdpbjogMTJweDtcclxufSJdfQ== */");

/***/ }),

/***/ "./src/app/warehouse-user/order-details/order-details.component.ts":
/*!*************************************************************************!*\
  !*** ./src/app/warehouse-user/order-details/order-details.component.ts ***!
  \*************************************************************************/
/*! exports provided: OrderDetailsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OrderDetailsComponent", function() { return OrderDetailsComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let OrderDetailsComponent = class OrderDetailsComponent {
    constructor() { }
    ngOnInit() {
    }
};
OrderDetailsComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-order-details',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./order-details.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/warehouse-user/order-details/order-details.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./order-details.component.css */ "./src/app/warehouse-user/order-details/order-details.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], OrderDetailsComponent);



/***/ }),

/***/ "./src/app/warehouse-user/orderprocessing/orderprocessing.component.css":
/*!******************************************************************************!*\
  !*** ./src/app/warehouse-user/orderprocessing/orderprocessing.component.css ***!
  \******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n\r\n.note\r\n{\r\n    text-align: center;\r\n    height: 80px;\r\n    background-color:aliceblue;;\r\n    color: black;\r\n    font-weight: bold;\r\n    line-height: 80px;\r\n}\r\n.form-content\r\n{\r\n    padding: 5%;\r\n    border: 1px solid #ced4da;\r\n    margin-bottom: 2%;\r\n}\r\n.form-control{\r\n    border-radius:1.5rem;\r\n}\r\n.btnSubmit\r\n{\r\n    border:none;\r\n    border-radius:1.5rem;\r\n    padding: 1%;\r\n    width: 20%;\r\n    cursor: pointer;\r\n    background: #0062cc;\r\n}\r\n/* list group */\r\n.list-group-item {\r\n    border-top-left-radius: .25rem;\r\n    border-top-right-radius: .25rem;\r\n    margin: 3px;\r\n}\r\nh5.card-title {\r\n    margin-left: 26px;\r\n}\r\nbutton.btn.move {\r\n    float: right;\r\n}\r\n/* summary Css */\r\n.badge-secondary  {\r\n    width: 100%;\r\n    height: 50px;\r\n    margin:4px;\r\n}\r\np.summary {\r\n    margin-top: 12px;\r\n    font-size: large;\r\n    font-weight: bold;\r\n    color: #ffffff !important;\r\n}\r\n/* new */\r\nbutton.btn.btn-danger.new {\r\n    border-radius: 40px;\r\n}\r\nbutton.btn.btn-success.exes {\r\n    border-radius: 40px;\r\n}\r\nlabel.summarylabel {\r\n    font-size: initial;\r\n    font-weight: bold;\r\n}\r\nlabel.color {\r\n    color: chocolate;\r\n    font-size: large;\r\n    font-weight: bold;\r\n}\r\n.card-body.summ {\r\n    margin-left: 10px;\r\n    margin-right: 10px;\r\n}\r\nh4.head {\r\n    margin-top: -34px;\r\n    line-height: 70px;\r\n    color: tomato;\r\n    font-size: large;\r\n    font-weight: bold;\r\n}\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n  }\r\nlabel.col-md-4.col-form-label.text-md-right {\r\n    font-size: initial;\r\n    font-weight: bold;\r\n}\r\n.form-control{\r\n    border-radius:unset ;\r\n}\r\n/* import */\r\nlabel#importlabel {\r\n    font-weight: 400;\r\n  }\r\nlabel#importlabeltype {\r\n    margin-left: 32px;\r\n    font-size: 19px;\r\n    font-weight: bold;\r\n  }\r\ndiv#importpaid1 {\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    text-align: right;\r\n    color: #ff4444;\r\n  }\r\n/*  */\r\ndiv#import {\r\n    padding: 2rem;\r\n    font-size: 19px;\r\n  }\r\ndiv#importname {\r\n    text-align: right;\r\n    font-weight: 700;\r\n  }\r\nh5.importinfo {\r\n    margin-top: -13px;\r\n    font-size: 24px;\r\n    font-weight: 500;\r\n  }\r\n.container.importct {\r\n    max-width: 1673px;\r\n  }\r\n.charge {\r\n    padding: 10px;\r\n  }\r\nh4#importhead {\r\n    font-weight: bold;\r\n  }\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n  }\r\n.card-header.view.view-cascade.gradient-card-header.blue-gradient {\r\n    font-size: 21px;\r\n    font-weight: bold;\r\n    color: #fff!important;\r\n    text-align: center;\r\n  }\r\n.card-header.view.view-cascade.gradient-card-header.blue-gradient.imp {\r\n    margin-top: -33px;\r\n    width: 114%;\r\n    margin-left: -32px;\r\n  }\r\nh4.importtr{\r\n    font-size: 25px;\r\n    text-align: left;\r\n    padding-bottom: 14px;\r\n    margin-left: -2px;\r\n    font-weight: 500;\r\n  }\r\nh4.importor{\r\n    margin-top: 33px;\r\n    font-weight: 600;\r\n  }\r\nh4.importtr1 {\r\n    font-size: 25px;\r\n    text-align: left;\r\n    padding-bottom: 14px;\r\n    margin-left: -2px;\r\n    font-weight: 500;\r\n    margin-top: 22px;\r\n  }\r\ndiv#importequp {\r\n    padding: 10px 0px 0px 30px;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n    margin-top: 10px;\r\n  }\r\ndiv#importac{\r\n    padding: 10px 0px 0px 30px;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n    margin-top: 10px;\r\n  }\r\ndiv#importbll {\r\n    margin-left: 250px;\r\n    padding: 10px;\r\n  }\r\ndiv#importequipment {\r\n    margin-top: 18px;\r\n  }\r\nbutton.btn.btn-block {\r\n    font-size: 19px;\r\n    font-weight: 900;\r\n  }\r\ndiv#importpaid {\r\n    font-size: 18px;\r\n    font-weight: bold;\r\n    text-align: center;\r\n  }\r\ndiv#nopre {\r\n  text-align: center;\r\n  color: red;\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  }\r\ndiv#importname1 {\r\n    font-size: 18px;\r\n    font-weight: 700;\r\n    text-align: right;\r\n  }\r\ndiv#vendorname {\r\n    font-size: 20px;\r\n  }\r\ndiv#totalorder {\r\n    text-align: center;\r\n    font-weight: bold;\r\n    font-size: 22px;\r\n  }\r\n/* Higher than 1440 (desktop devices)\r\n====================================================================== */\r\n@media only screen and (max-width: 1440px){ \r\n\r\n}\r\n/* Higher than 1200 (desktop devices)\r\n====================================================================== */\r\n@media only screen and (max-width: 1024px) {\r\n}\r\n/* Higher than 960 (desktop devices)\r\n====================================================================== */\r\n@media only screen and (min-width: 992px) and (max-width: 1199px){\r\n}\r\n/* Higher than 960 (desktop devices)\r\n====================================================================== */\r\n@media only screen and (min-width: 992px){\r\n}\r\n/* Tablet Portrait (devices and browsers)\r\n====================================================================== */\r\n@media only screen and (min-width: 768px) and (max-width: 991px) {\r\n}\r\n/* All Mobile Sizes (devices and browser)\r\n====================================================================== */\r\n@media only screen and (max-width: 767px) {\r\n\r\n}\r\n/* Mobile Landscape Size to Tablet Portrait (devices and browsers)\r\n====================================================================== */\r\n@media only screen and (max-width: 375px)  {\r\n\r\n\r\n\r\n}\r\n/*=================================*/\r\n@media only screen and (min-width: 320px) {\r\n\r\n\r\n}\r\n/* Mobile Portrait Size to Mobile Landscape Size (devices and browsers)\r\n=================================================================== */\r\n@media only screen and (max-width: 479px) {\r\n\r\n\r\n}\r\n@media only screen and (max-width: 667px) {\r\n\r\n}\r\n/* Higher than 1440 (desktop devices)\r\n====================================================================== */\r\n@media only screen and (max-width: 1440px){ \r\n  \r\n}\r\n/* Higher than 1200 (desktop devices)\r\n====================================================================== */\r\n@media only screen and (max-width: 1024px) {\r\n}\r\n/* Higher than 960 (desktop devices)\r\n====================================================================== */\r\n@media only screen and (min-width: 992px) and (max-width: 1199px){\r\n}\r\n/* Higher than 960 (desktop devices)\r\n====================================================================== */\r\n@media only screen and (min-width: 992px){\r\n}\r\n/* Tablet Portrait (devices and browsers)\r\n====================================================================== */\r\n@media only screen and (min-width: 768px) and (max-width: 991px) {\r\n}\r\n/* All Mobile Sizes (devices and browser)\r\n====================================================================== */\r\n@media only screen and (max-width: 767px) {\r\n\r\n}\r\n/* Mobile Landscape Size to Tablet Portrait (devices and browsers)\r\n====================================================================== */\r\n@media only screen and (max-width: 375px)  {\r\n\r\n\r\n\r\n}\r\n/*=================================*/\r\n@media only screen and (min-width: 320px) {\r\n \r\n\r\n}\r\n/* Mobile Portrait Size to Mobile Landscape Size (devices and browsers)\r\n=================================================================== */\r\n@media only screen and (max-width: 479px) {\r\n  /*  */\r\n  button.btn.btn-danger.new{\r\n    border-radius: 40px;\r\n    width: 100%;\r\n    margin-left: 10px;\r\n}\r\n\r\nbutton.btn.btn-success.exes{\r\n    border-radius: 40px;\r\n    width: 100%;\r\n}\r\n\r\n\r\n}\r\n@media only screen and (max-width: 667px) {\r\n\r\n}\r\n\r\n\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvd2FyZWhvdXNlLXVzZXIvb3JkZXJwcm9jZXNzaW5nL29yZGVycHJvY2Vzc2luZy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUE7O0lBRUksa0JBQWtCO0lBQ2xCLFlBQVk7SUFDWiwwQkFBMEI7SUFDMUIsWUFBWTtJQUNaLGlCQUFpQjtJQUNqQixpQkFBaUI7QUFDckI7QUFDQTs7SUFFSSxXQUFXO0lBQ1gseUJBQXlCO0lBQ3pCLGlCQUFpQjtBQUNyQjtBQUNBO0lBQ0ksb0JBQW9CO0FBQ3hCO0FBQ0E7O0lBRUksV0FBVztJQUNYLG9CQUFvQjtJQUNwQixXQUFXO0lBQ1gsVUFBVTtJQUNWLGVBQWU7SUFDZixtQkFBbUI7QUFDdkI7QUFHQSxlQUFlO0FBQ2Y7SUFDSSw4QkFBOEI7SUFDOUIsK0JBQStCO0lBQy9CLFdBQVc7QUFDZjtBQUVBO0lBQ0ksaUJBQWlCO0FBQ3JCO0FBQ0E7SUFDSSxZQUFZO0FBQ2hCO0FBSUEsZ0JBQWdCO0FBQ2hCO0lBQ0ksV0FBVztJQUNYLFlBQVk7SUFDWixVQUFVO0FBQ2Q7QUFFQTtJQUNJLGdCQUFnQjtJQUNoQixnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLHlCQUF5QjtBQUM3QjtBQUdBLFFBQVE7QUFDUjtJQUNJLG1CQUFtQjtBQUN2QjtBQUNBO0lBQ0ksbUJBQW1CO0FBQ3ZCO0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsaUJBQWlCO0FBQ3JCO0FBQ0E7SUFDSSxnQkFBZ0I7SUFDaEIsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtBQUNyQjtBQUNBO0lBQ0ksaUJBQWlCO0lBQ2pCLGtCQUFrQjtBQUN0QjtBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUNqQixhQUFhO0lBQ2IsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtBQUNyQjtBQUNBO0lBQ0ksb0JBQW9CO0lBQ3BCLGVBQWU7SUFDZixpQkFBaUI7RUFDbkI7QUFFRjtJQUNJLGtCQUFrQjtJQUNsQixpQkFBaUI7QUFDckI7QUFFQTtJQUNJLG9CQUFvQjtBQUN4QjtBQUVBLFdBQVc7QUFDWDtJQUNJLGdCQUFnQjtFQUNsQjtBQUNBO0lBQ0UsaUJBQWlCO0lBQ2pCLGVBQWU7SUFDZixpQkFBaUI7RUFDbkI7QUFDQTtJQUNFLGVBQWU7SUFDZixpQkFBaUI7SUFDakIsaUJBQWlCO0lBQ2pCLGNBQWM7RUFDaEI7QUFFQSxLQUFLO0FBQ0w7SUFDRSxhQUFhO0lBQ2IsZUFBZTtFQUNqQjtBQUNBO0lBQ0UsaUJBQWlCO0lBQ2pCLGdCQUFnQjtFQUNsQjtBQUVBO0lBQ0UsaUJBQWlCO0lBQ2pCLGVBQWU7SUFDZixnQkFBZ0I7RUFDbEI7QUFDQTtJQUNFLGlCQUFpQjtFQUNuQjtBQUNBO0lBQ0UsYUFBYTtFQUNmO0FBQ0E7SUFDRSxpQkFBaUI7RUFDbkI7QUFDQTtJQUNFLG9CQUFvQjtJQUNwQixlQUFlO0lBQ2YsaUJBQWlCO0VBQ25CO0FBRUE7SUFDRSxlQUFlO0lBQ2YsaUJBQWlCO0lBQ2pCLHFCQUFxQjtJQUNyQixrQkFBa0I7RUFDcEI7QUFDQTtJQUNFLGlCQUFpQjtJQUNqQixXQUFXO0lBQ1gsa0JBQWtCO0VBQ3BCO0FBQ0E7SUFDRSxlQUFlO0lBQ2YsZ0JBQWdCO0lBQ2hCLG9CQUFvQjtJQUNwQixpQkFBaUI7SUFDakIsZ0JBQWdCO0VBQ2xCO0FBQ0E7SUFDRSxnQkFBZ0I7SUFDaEIsZ0JBQWdCO0VBQ2xCO0FBQ0E7SUFDRSxlQUFlO0lBQ2YsZ0JBQWdCO0lBQ2hCLG9CQUFvQjtJQUNwQixpQkFBaUI7SUFDakIsZ0JBQWdCO0lBQ2hCLGdCQUFnQjtFQUNsQjtBQUdBO0lBQ0UsMEJBQTBCO0lBQzFCLGVBQWU7SUFDZixpQkFBaUI7SUFDakIsZ0JBQWdCO0VBQ2xCO0FBQ0E7SUFDRSwwQkFBMEI7SUFDMUIsZUFBZTtJQUNmLGlCQUFpQjtJQUNqQixnQkFBZ0I7RUFDbEI7QUFFQTtJQUNFLGtCQUFrQjtJQUNsQixhQUFhO0VBQ2Y7QUFFQTtJQUNFLGdCQUFnQjtFQUNsQjtBQUVBO0lBQ0UsZUFBZTtJQUNmLGdCQUFnQjtFQUNsQjtBQUdBO0lBQ0UsZUFBZTtJQUNmLGlCQUFpQjtJQUNqQixrQkFBa0I7RUFDcEI7QUFDQTtFQUNBLGtCQUFrQjtFQUNsQixVQUFVO0VBQ1YsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQjtBQUNBO0lBQ0UsZUFBZTtJQUNmLGdCQUFnQjtJQUNoQixpQkFBaUI7RUFDbkI7QUFDQTtJQUNFLGVBQWU7RUFDakI7QUFHQTtJQUNFLGtCQUFrQjtJQUNsQixpQkFBaUI7SUFDakIsZUFBZTtFQUNqQjtBQUNGO3dFQUN3RTtBQUN4RTs7QUFFQTtBQUVBO3dFQUN3RTtBQUN4RTtBQUNBO0FBRUE7d0VBQ3dFO0FBQ3hFO0FBQ0E7QUFFQTt3RUFDd0U7QUFDeEU7QUFDQTtBQUVBO3dFQUN3RTtBQUN4RTtBQUNBO0FBRUE7d0VBQ3dFO0FBQ3hFOztBQUVBO0FBRUE7d0VBQ3dFO0FBQ3hFOzs7O0FBSUE7QUFDQSxvQ0FBb0M7QUFDcEM7OztBQUdBO0FBQ0E7cUVBQ3FFO0FBQ3JFOzs7QUFHQTtBQUNBOztBQUVBO0FBRUE7d0VBQ3dFO0FBQ3hFOztBQUVBO0FBRUE7d0VBQ3dFO0FBQ3hFO0FBQ0E7QUFFQTt3RUFDd0U7QUFDeEU7QUFDQTtBQUVBO3dFQUN3RTtBQUN4RTtBQUNBO0FBRUE7d0VBQ3dFO0FBQ3hFO0FBQ0E7QUFFQTt3RUFDd0U7QUFDeEU7O0FBRUE7QUFFQTt3RUFDd0U7QUFDeEU7Ozs7QUFJQTtBQUNBLG9DQUFvQztBQUNuQzs7O0FBR0Q7QUFDQTtxRUFDcUU7QUFDckU7RUFDRSxLQUFLO0VBQ0w7SUFDRSxtQkFBbUI7SUFDbkIsV0FBVztJQUNYLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLG1CQUFtQjtJQUNuQixXQUFXO0FBQ2Y7OztBQUdBO0FBRUE7O0FBRUEiLCJmaWxlIjoic3JjL2FwcC93YXJlaG91c2UtdXNlci9vcmRlcnByb2Nlc3Npbmcvb3JkZXJwcm9jZXNzaW5nLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbi5ub3RlXHJcbntcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIGhlaWdodDogODBweDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6YWxpY2VibHVlOztcclxuICAgIGNvbG9yOiBibGFjaztcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgbGluZS1oZWlnaHQ6IDgwcHg7XHJcbn1cclxuLmZvcm0tY29udGVudFxyXG57XHJcbiAgICBwYWRkaW5nOiA1JTtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNjZWQ0ZGE7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAyJTtcclxufVxyXG4uZm9ybS1jb250cm9se1xyXG4gICAgYm9yZGVyLXJhZGl1czoxLjVyZW07XHJcbn1cclxuLmJ0blN1Ym1pdFxyXG57XHJcbiAgICBib3JkZXI6bm9uZTtcclxuICAgIGJvcmRlci1yYWRpdXM6MS41cmVtO1xyXG4gICAgcGFkZGluZzogMSU7XHJcbiAgICB3aWR0aDogMjAlO1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgYmFja2dyb3VuZDogIzAwNjJjYztcclxufVxyXG5cclxuXHJcbi8qIGxpc3QgZ3JvdXAgKi9cclxuLmxpc3QtZ3JvdXAtaXRlbSB7XHJcbiAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAuMjVyZW07XHJcbiAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogLjI1cmVtO1xyXG4gICAgbWFyZ2luOiAzcHg7XHJcbn1cclxuXHJcbmg1LmNhcmQtdGl0bGUge1xyXG4gICAgbWFyZ2luLWxlZnQ6IDI2cHg7XHJcbn1cclxuYnV0dG9uLmJ0bi5tb3ZlIHtcclxuICAgIGZsb2F0OiByaWdodDtcclxufVxyXG5cclxuXHJcblxyXG4vKiBzdW1tYXJ5IENzcyAqL1xyXG4uYmFkZ2Utc2Vjb25kYXJ5ICB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIG1hcmdpbjo0cHg7XHJcbn1cclxuXHJcbnAuc3VtbWFyeSB7XHJcbiAgICBtYXJnaW4tdG9wOiAxMnB4O1xyXG4gICAgZm9udC1zaXplOiBsYXJnZTtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgY29sb3I6ICNmZmZmZmYgIWltcG9ydGFudDtcclxufVxyXG5cclxuXHJcbi8qIG5ldyAqL1xyXG5idXR0b24uYnRuLmJ0bi1kYW5nZXIubmV3IHtcclxuICAgIGJvcmRlci1yYWRpdXM6IDQwcHg7XHJcbn1cclxuYnV0dG9uLmJ0bi5idG4tc3VjY2Vzcy5leGVzIHtcclxuICAgIGJvcmRlci1yYWRpdXM6IDQwcHg7XHJcbn1cclxuXHJcbmxhYmVsLnN1bW1hcnlsYWJlbCB7XHJcbiAgICBmb250LXNpemU6IGluaXRpYWw7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5sYWJlbC5jb2xvciB7XHJcbiAgICBjb2xvcjogY2hvY29sYXRlO1xyXG4gICAgZm9udC1zaXplOiBsYXJnZTtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcbi5jYXJkLWJvZHkuc3VtbSB7XHJcbiAgICBtYXJnaW4tbGVmdDogMTBweDtcclxuICAgIG1hcmdpbi1yaWdodDogMTBweDtcclxufVxyXG5cclxuaDQuaGVhZCB7XHJcbiAgICBtYXJnaW4tdG9wOiAtMzRweDtcclxuICAgIGxpbmUtaGVpZ2h0OiA3MHB4O1xyXG4gICAgY29sb3I6IHRvbWF0bztcclxuICAgIGZvbnQtc2l6ZTogbGFyZ2U7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG4uYnRuLmJ0bi1sZyB7XHJcbiAgICBwYWRkaW5nOiAxcmVtIDIuNHJlbTtcclxuICAgIGZvbnQtc2l6ZTogMTdweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIH1cclxuXHJcbmxhYmVsLmNvbC1tZC00LmNvbC1mb3JtLWxhYmVsLnRleHQtbWQtcmlnaHQge1xyXG4gICAgZm9udC1zaXplOiBpbml0aWFsO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuXHJcbi5mb3JtLWNvbnRyb2x7XHJcbiAgICBib3JkZXItcmFkaXVzOnVuc2V0IDtcclxufVxyXG5cclxuLyogaW1wb3J0ICovXHJcbmxhYmVsI2ltcG9ydGxhYmVsIHtcclxuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XHJcbiAgfVxyXG4gIGxhYmVsI2ltcG9ydGxhYmVsdHlwZSB7XHJcbiAgICBtYXJnaW4tbGVmdDogMzJweDtcclxuICAgIGZvbnQtc2l6ZTogMTlweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIH1cclxuICBkaXYjaW1wb3J0cGFpZDEge1xyXG4gICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcclxuICAgIGNvbG9yOiAjZmY0NDQ0O1xyXG4gIH1cclxuICBcclxuICAvKiAgKi9cclxuICBkaXYjaW1wb3J0IHtcclxuICAgIHBhZGRpbmc6IDJyZW07XHJcbiAgICBmb250LXNpemU6IDE5cHg7XHJcbiAgfVxyXG4gIGRpdiNpbXBvcnRuYW1lIHtcclxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xyXG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcclxuICB9XHJcbiAgXHJcbiAgaDUuaW1wb3J0aW5mbyB7XHJcbiAgICBtYXJnaW4tdG9wOiAtMTNweDtcclxuICAgIGZvbnQtc2l6ZTogMjRweDtcclxuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XHJcbiAgfVxyXG4gIC5jb250YWluZXIuaW1wb3J0Y3Qge1xyXG4gICAgbWF4LXdpZHRoOiAxNjczcHg7XHJcbiAgfVxyXG4gIC5jaGFyZ2Uge1xyXG4gICAgcGFkZGluZzogMTBweDtcclxuICB9XHJcbiAgaDQjaW1wb3J0aGVhZCB7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICB9XHJcbiAgLmJ0bi5idG4tbGcge1xyXG4gICAgcGFkZGluZzogMXJlbSAyLjRyZW07XHJcbiAgICBmb250LXNpemU6IDE3cHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICB9XHJcbiAgXHJcbiAgLmNhcmQtaGVhZGVyLnZpZXcudmlldy1jYXNjYWRlLmdyYWRpZW50LWNhcmQtaGVhZGVyLmJsdWUtZ3JhZGllbnQge1xyXG4gICAgZm9udC1zaXplOiAyMXB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBjb2xvcjogI2ZmZiFpbXBvcnRhbnQ7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgfVxyXG4gIC5jYXJkLWhlYWRlci52aWV3LnZpZXctY2FzY2FkZS5ncmFkaWVudC1jYXJkLWhlYWRlci5ibHVlLWdyYWRpZW50LmltcCB7XHJcbiAgICBtYXJnaW4tdG9wOiAtMzNweDtcclxuICAgIHdpZHRoOiAxMTQlO1xyXG4gICAgbWFyZ2luLWxlZnQ6IC0zMnB4O1xyXG4gIH1cclxuICBoNC5pbXBvcnR0cntcclxuICAgIGZvbnQtc2l6ZTogMjVweDtcclxuICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogMTRweDtcclxuICAgIG1hcmdpbi1sZWZ0OiAtMnB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcclxuICB9XHJcbiAgaDQuaW1wb3J0b3J7XHJcbiAgICBtYXJnaW4tdG9wOiAzM3B4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcclxuICB9XHJcbiAgaDQuaW1wb3J0dHIxIHtcclxuICAgIGZvbnQtc2l6ZTogMjVweDtcclxuICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogMTRweDtcclxuICAgIG1hcmdpbi1sZWZ0OiAtMnB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcclxuICAgIG1hcmdpbi10b3A6IDIycHg7XHJcbiAgfVxyXG4gIFxyXG4gIFxyXG4gIGRpdiNpbXBvcnRlcXVwIHtcclxuICAgIHBhZGRpbmc6IDEwcHggMHB4IDBweCAzMHB4O1xyXG4gICAgZm9udC1zaXplOiAxN3B4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG4gIH1cclxuICBkaXYjaW1wb3J0YWN7XHJcbiAgICBwYWRkaW5nOiAxMHB4IDBweCAwcHggMzBweDtcclxuICAgIGZvbnQtc2l6ZTogMTdweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxuICB9XHJcbiAgXHJcbiAgZGl2I2ltcG9ydGJsbCB7XHJcbiAgICBtYXJnaW4tbGVmdDogMjUwcHg7XHJcbiAgICBwYWRkaW5nOiAxMHB4O1xyXG4gIH1cclxuICBcclxuICBkaXYjaW1wb3J0ZXF1aXBtZW50IHtcclxuICAgIG1hcmdpbi10b3A6IDE4cHg7XHJcbiAgfVxyXG4gIFxyXG4gIGJ1dHRvbi5idG4uYnRuLWJsb2NrIHtcclxuICAgIGZvbnQtc2l6ZTogMTlweDtcclxuICAgIGZvbnQtd2VpZ2h0OiA5MDA7XHJcbiAgfVxyXG4gIFxyXG4gIFxyXG4gIGRpdiNpbXBvcnRwYWlkIHtcclxuICAgIGZvbnQtc2l6ZTogMThweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIH1cclxuICBkaXYjbm9wcmUge1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBjb2xvcjogcmVkO1xyXG4gIGZvbnQtc2l6ZTogMThweDtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxuICB9XHJcbiAgZGl2I2ltcG9ydG5hbWUxIHtcclxuICAgIGZvbnQtc2l6ZTogMThweDtcclxuICAgIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcclxuICB9XHJcbiAgZGl2I3ZlbmRvcm5hbWUge1xyXG4gICAgZm9udC1zaXplOiAyMHB4O1xyXG4gIH1cclxuICBcclxuICBcclxuICBkaXYjdG90YWxvcmRlciB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIGZvbnQtc2l6ZTogMjJweDtcclxuICB9XHJcbi8qIEhpZ2hlciB0aGFuIDE0NDAgKGRlc2t0b3AgZGV2aWNlcylcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDE0NDBweCl7IFxyXG5cclxufVxyXG5cclxuLyogSGlnaGVyIHRoYW4gMTIwMCAoZGVza3RvcCBkZXZpY2VzKVxyXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTAyNHB4KSB7XHJcbn1cclxuXHJcbi8qIEhpZ2hlciB0aGFuIDk2MCAoZGVza3RvcCBkZXZpY2VzKVxyXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogOTkycHgpIGFuZCAobWF4LXdpZHRoOiAxMTk5cHgpe1xyXG59XHJcblxyXG4vKiBIaWdoZXIgdGhhbiA5NjAgKGRlc2t0b3AgZGV2aWNlcylcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDk5MnB4KXtcclxufVxyXG5cclxuLyogVGFibGV0IFBvcnRyYWl0IChkZXZpY2VzIGFuZCBicm93c2VycylcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OHB4KSBhbmQgKG1heC13aWR0aDogOTkxcHgpIHtcclxufVxyXG5cclxuLyogQWxsIE1vYmlsZSBTaXplcyAoZGV2aWNlcyBhbmQgYnJvd3NlcilcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2N3B4KSB7XHJcblxyXG59XHJcblxyXG4vKiBNb2JpbGUgTGFuZHNjYXBlIFNpemUgdG8gVGFibGV0IFBvcnRyYWl0IChkZXZpY2VzIGFuZCBicm93c2VycylcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDM3NXB4KSAge1xyXG5cclxuXHJcblxyXG59XHJcbi8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMjBweCkge1xyXG5cclxuXHJcbn0gXHJcbi8qIE1vYmlsZSBQb3J0cmFpdCBTaXplIHRvIE1vYmlsZSBMYW5kc2NhcGUgU2l6ZSAoZGV2aWNlcyBhbmQgYnJvd3NlcnMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0NzlweCkge1xyXG5cclxuXHJcbn1cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA2NjdweCkge1xyXG5cclxufVxyXG5cclxuLyogSGlnaGVyIHRoYW4gMTQ0MCAoZGVza3RvcCBkZXZpY2VzKVxyXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTQ0MHB4KXsgXHJcbiAgXHJcbn1cclxuXHJcbi8qIEhpZ2hlciB0aGFuIDEyMDAgKGRlc2t0b3AgZGV2aWNlcylcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjRweCkge1xyXG59XHJcblxyXG4vKiBIaWdoZXIgdGhhbiA5NjAgKGRlc2t0b3AgZGV2aWNlcylcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDk5MnB4KSBhbmQgKG1heC13aWR0aDogMTE5OXB4KXtcclxufVxyXG5cclxuLyogSGlnaGVyIHRoYW4gOTYwIChkZXNrdG9wIGRldmljZXMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA5OTJweCl7XHJcbn1cclxuXHJcbi8qIFRhYmxldCBQb3J0cmFpdCAoZGV2aWNlcyBhbmQgYnJvd3NlcnMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjhweCkgYW5kIChtYXgtd2lkdGg6IDk5MXB4KSB7XHJcbn1cclxuXHJcbi8qIEFsbCBNb2JpbGUgU2l6ZXMgKGRldmljZXMgYW5kIGJyb3dzZXIpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjdweCkge1xyXG5cclxufVxyXG5cclxuLyogTW9iaWxlIExhbmRzY2FwZSBTaXplIHRvIFRhYmxldCBQb3J0cmFpdCAoZGV2aWNlcyBhbmQgYnJvd3NlcnMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAzNzVweCkgIHtcclxuXHJcblxyXG5cclxufVxyXG4vKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXHJcbiBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMyMHB4KSB7XHJcbiBcclxuXHJcbn0gXHJcbi8qIE1vYmlsZSBQb3J0cmFpdCBTaXplIHRvIE1vYmlsZSBMYW5kc2NhcGUgU2l6ZSAoZGV2aWNlcyBhbmQgYnJvd3NlcnMpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0NzlweCkge1xyXG4gIC8qICAqL1xyXG4gIGJ1dHRvbi5idG4uYnRuLWRhbmdlci5uZXd7XHJcbiAgICBib3JkZXItcmFkaXVzOiA0MHB4O1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBtYXJnaW4tbGVmdDogMTBweDtcclxufVxyXG5cclxuYnV0dG9uLmJ0bi5idG4tc3VjY2Vzcy5leGVze1xyXG4gICAgYm9yZGVyLXJhZGl1czogNDBweDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG59XHJcblxyXG5cclxufVxyXG5cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA2NjdweCkge1xyXG5cclxufVxyXG5cclxuIl19 */");

/***/ }),

/***/ "./src/app/warehouse-user/orderprocessing/orderprocessing.component.ts":
/*!*****************************************************************************!*\
  !*** ./src/app/warehouse-user/orderprocessing/orderprocessing.component.ts ***!
  \*****************************************************************************/
/*! exports provided: OrderprocessingComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OrderprocessingComponent", function() { return OrderprocessingComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_services_order_processing_status_management_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/order-processing-status-management.service */ "./src/app/services/order-processing-status-management.service.ts");
/* harmony import */ var src_app_model_order_processing_status_management__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/model/order-processing-status-management */ "./src/app/model/order-processing-status-management.ts");
/* harmony import */ var src_app_model_order_management__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/model/order-management */ "./src/app/model/order-management.ts");
/* harmony import */ var src_app_services_order_management_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/services/order-management.service */ "./src/app/services/order-management.service.ts");
/* harmony import */ var src_app_model_master_products__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/model/master-products */ "./src/app/model/master-products.ts");
/* harmony import */ var src_app_model_equipment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/model/equipment */ "./src/app/model/equipment.ts");
/* harmony import */ var src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/services/auth.service */ "./src/app/services/auth.service.ts");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");
/* harmony import */ var src_app_services_equipment_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! src/app/services/equipment.service */ "./src/app/services/equipment.service.ts");
/* harmony import */ var src_app_services_warehouse_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! src/app/services/warehouse.service */ "./src/app/services/warehouse.service.ts");
/* harmony import */ var src_app_services_pre_order_management_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! src/app/services/pre-order-management.service */ "./src/app/services/pre-order-management.service.ts");
/* harmony import */ var src_app_model_order_dto__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! src/app/model/order-dto */ "./src/app/model/order-dto.ts");
/* harmony import */ var src_app_services_payment_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! src/app/services/payment.service */ "./src/app/services/payment.service.ts");
/* harmony import */ var src_app_services_master_paramters_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! src/app/services/master-paramters.service */ "./src/app/services/master-paramters.service.ts");
















let OrderprocessingComponent = class OrderprocessingComponent {
    constructor(authService, orderProcessingStatusManagementService, orderManagementService, toastr, equipmentService, warehouseService, preOrderService, paymentService, masterService) {
        this.authService = authService;
        this.orderProcessingStatusManagementService = orderProcessingStatusManagementService;
        this.orderManagementService = orderManagementService;
        this.toastr = toastr;
        this.equipmentService = equipmentService;
        this.warehouseService = warehouseService;
        this.preOrderService = preOrderService;
        this.paymentService = paymentService;
        this.masterService = masterService;
        this.orderProcess = new src_app_model_order_processing_status_management__WEBPACK_IMPORTED_MODULE_3__["OrderProcessingStatusManagement"]();
    }
    ngOnInit() {
        this.orderProcessingStatusManagementService.getLoggedInUserForOrderProcessing()
            .subscribe((data) => {
            this.warehouseUser = data;
            this.warehouseList = data;
            this.orderManagement = new src_app_model_order_management__WEBPACK_IMPORTED_MODULE_4__["OrderManagement"]();
            this.orderManagement.warehouse = this.warehouseUser.warehouse;
            this.orderManagement.masterProducts = new src_app_model_master_products__WEBPACK_IMPORTED_MODULE_6__["MasterProducts"]();
            this.orderManagement.equipment = new src_app_model_equipment__WEBPACK_IMPORTED_MODULE_7__["Equipment"]();
            this.createOrderYN = null;
            this.pageIterator = 1;
        });
    }
    onCustomerId() {
        this.equipmentService.getEquipmentProductMappingByCustomerId(this.orderManagement.customerId)
            .subscribe((data) => {
            this.equipmentProductList = data;
            this.customerId = this.orderManagement.customerId;
            this.selectedEquipments = new Array();
            for (let e of this.equipmentProductList) {
                this.selectedEquipments.push(e.equipment.equipmentName);
            }
            let unique2 = this.selectedEquipments.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedEquipments = unique2;
        });
    }
    onEquipment() {
    }
    onChangeProduct() {
    }
    onExistingOrder() {
        this.createOrderYN = false;
    }
    onNewOrder() {
        this.masterProductsList = new Array();
        this.createOrderYN = true;
        this.customerId = this.orderManagement.customerId;
        if (this.createOrderYN == true) {
            for (let e of this.equipmentProductList) {
                if (this.orderManagement.equipment.equipmentName == e.equipment.equipmentName) {
                    this.orderManagement.equipment = e.equipment;
                    this.orderManagement.masterProducts = e.masterProducts;
                    this.orderManagement.warehouse = this.warehouseUser.warehouse;
                }
            }
            this.warehouse = this.orderManagement.warehouse;
            this.equipment = this.orderManagement.equipment;
            this.masterProducts = this.orderManagement.masterProducts;
            let orderDto = new src_app_model_order_dto__WEBPACK_IMPORTED_MODULE_13__["OrderDto"]();
            orderDto.productId = this.orderManagement.masterProducts.productId;
            orderDto.warehouseId = this.orderManagement.warehouse.warehouseId;
            orderDto.equipmentId = this.orderManagement.equipment.equipmentId;
            this.orderManagementService.getOrderManagement(orderDto)
                .subscribe((data) => {
                this.orderManagement = JSON.parse(JSON.stringify(data));
                this.orderManagement.customerId = this.customerId;
                console.log(data);
                this.orderManagement.warehouse = this.warehouse;
                this.orderManagement.equipment = this.equipment;
                this.orderManagement.masterProducts = this.masterProducts;
                this.orderProcess.orderManagement = this.orderManagement;
                console.log(this.orderManagement);
                this.orderProcess = new src_app_model_order_processing_status_management__WEBPACK_IMPORTED_MODULE_3__["OrderProcessingStatusManagement"]();
                this.orderProcessingStatusManagementService.getSimilarProducts(orderDto.productId, orderDto.warehouseId)
                    .subscribe((data) => {
                    this.masterProductsList = data;
                });
            });
        }
    }
    onOrderRefNumber() {
        if (this.orderManagement.orderRefNumber) {
            if (!this.orderManagement.customerId) {
                this.toastr.error('Please enter customer Id', 'Order Processing', {
                    timeOut: 3000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                    progressAnimation: 'increasing'
                });
            }
            else {
                console.log("else..");
                this.orderManagementService.getOrderManagementByOrderRefNumberAndWarehouse(this.orderManagement.orderRefNumber, this.orderManagement.warehouse.warehouseId, this.orderManagement.customerId)
                    .subscribe((data) => {
                    console.log(data);
                    if (data != null) {
                        this.orderManagement = new src_app_model_order_management__WEBPACK_IMPORTED_MODULE_4__["OrderManagement"]();
                        this.orderManagement = JSON.parse(JSON.stringify(data));
                        this.orderQuantity = this.orderManagement.totalQuantity;
                        this.remainingQuantity = this.orderManagement.totalQuantity - this.orderManagement.deliveredQuantity;
                        if (this.orderManagement.deliveredQuantity != this.orderManagement.totalQuantity && this.remainingQuantity > 0) {
                            this.orderManagement.totalQuantity = this.remainingQuantity;
                            this.orderManagement.warehouse = this.warehouseUser.warehouse;
                            this.masterProductsList = new Array();
                            this.orderProcess.orderManagement = this.orderManagement;
                            this.orderProcessingStatusManagementService.getSimilarProducts(this.orderManagement.masterProducts.productId, this.orderManagement.warehouse.warehouseId)
                                .subscribe((data) => {
                                this.masterProductsList = data;
                            });
                        }
                        else {
                            this.toastr.error('Quantity not available, please check with another order', 'Order Processing', {
                                timeOut: 10000,
                                positionClass: 'toast-top-center',
                                progressBar: true,
                                progressAnimation: 'increasing'
                            });
                        }
                    }
                    else {
                        console.log("data null");
                        this.orderManagement.masterProducts = new src_app_model_master_products__WEBPACK_IMPORTED_MODULE_6__["MasterProducts"]();
                        this.orderManagement.equipment = new src_app_model_equipment__WEBPACK_IMPORTED_MODULE_7__["Equipment"]();
                        this.orderManagement.totalQuantity = 0;
                        this.toastr.error('Order ID or Customer Id is Not Valid or No Quantity, Please Enter Valid information', 'Order Processing', {
                            timeOut: 10000,
                            positionClass: 'toast-top-center',
                            progressBar: true,
                            progressAnimation: 'increasing'
                        });
                    }
                });
            }
        }
    }
    onValidateOrder() {
        this.orderProcess.orderManagement = this.orderManagement;
        if (this.product != null) {
            this.orderProcess.deliveredProduct = this.product;
        }
        this.masterService.userRewardPointsById(this.orderManagement.user.userId)
            .subscribe((data) => {
            let userRewarpoint = JSON.parse(JSON.stringify(data));
            ;
            console.log(data);
            this.isPreAuthorized = userRewarpoint.preAuthorized;
            if (this.isPreAuthorized) {
                this.orderProcess.markedForDeliveryYn = true;
                this.orderProcess.deliveredProduct = this.product;
                this.orderProcess.deliveredQuantity = this.orderManagement.totalQuantity;
                this.orderProcess.validatedYn = true;
                this.orderProcessingStatusManagementService.saveOrderProcessingStatusManagement(this.orderProcess)
                    .subscribe((data) => {
                    if (data == null) {
                        this.toastr.error('This Order Is Already Processed', 'Order Processing', {
                            timeOut: 10000,
                            positionClass: 'toast-top-center',
                            progressBar: true,
                            progressAnimation: 'increasing'
                        });
                        this.ngOnInit();
                    }
                    if (data != null) {
                        this.orderProcess = JSON.parse(JSON.stringify(data));
                        this.orderProcess.orderManagement = this.orderManagement;
                        this.orderProcessingStatusManagementService.updateOrderProcessingStatusManagement(this.orderProcess)
                            .subscribe((data) => {
                            this.pageIterator = 3;
                        });
                    }
                });
            }
            else {
                console.log("else");
                this.orderProcess.deliveredQuantity = this.orderManagement.totalQuantity;
                console.log(this.orderProcess.deliveredQuantity);
                this.paymentService.getAdminWallet(this.warehouseUser.organisationId).subscribe((data) => {
                    this.vendorWallet = data;
                    this.paymentService.getVendorProductPrice(this.warehouseUser.organisationId, this.warehouseUser.warehouse.warehouseId, this.product.productId)
                        .subscribe((data) => {
                        let vendorPrice = JSON.parse(JSON.stringify(data));
                        let value = vendorPrice.priceValue * this.orderProcess.deliveredQuantity;
                        if (this.vendorWallet.walletBalance >= value) {
                            console.log(this.orderProcess.deliveredQuantity);
                            this.orderProcessingStatusManagementService.saveOrderProcessingStatusManagement(this.orderProcess)
                                .subscribe((data) => {
                                if (data == null) {
                                    this.toastr.error('This Order Is Already Processed', 'Order Processing', {
                                        timeOut: 10000,
                                        positionClass: 'toast-top-center',
                                        progressBar: true,
                                        progressAnimation: 'increasing'
                                    });
                                    this.ngOnInit();
                                }
                                if (data != null) {
                                    this.authService.generateRegistrationOtp(this.orderProcess.orderManagement.user.userName);
                                    this.orderProcess = JSON.parse(JSON.stringify(data));
                                    this.orderProcess.validatedYn = true;
                                    this.orderProcessingStatusManagementService.updateOrderProcessingStatusManagement(this.orderProcess)
                                        .subscribe((data) => {
                                        this.pageIterator = 2;
                                    });
                                }
                            });
                        }
                        else {
                            this.toastr.error('Vendor validation unsuccessful! Insufficient balance', 'Order Processing', {
                                timeOut: 10000,
                                positionClass: 'toast-top-center',
                                progressBar: true,
                                progressAnimation: 'increasing'
                            });
                        }
                    });
                });
            }
        });
    }
    onCreateOrderValidate() {
        if (this.orderManagement)
            this.paymentService.getAdminWallet(this.warehouseUser.organisationId).subscribe((data) => {
                this.vendorWallet = data;
                this.paymentService.getVendorProductPrice(this.warehouseUser.organisationId, this.warehouseUser.warehouse.warehouseId, this.product.productId)
                    .subscribe((data) => {
                    let vendorPrice = JSON.parse(JSON.stringify(data));
                    console.log(vendorPrice);
                    console.log(this.orderManagement);
                    let value = vendorPrice.priceValue * this.orderManagement.totalQuantity;
                    console.log(this.vendorWallet.walletBalance);
                    if (this.vendorWallet.walletBalance >= value) {
                        this.orderProcessingStatusManagementService.saveVirtualOrder(this.orderManagement)
                            .subscribe((data) => {
                            if (data == null) {
                                this.toastr.error('No Credit Or Balance in ur App', 'Order Processing', {
                                    timeOut: 10000,
                                    positionClass: 'toast-top-center',
                                    progressBar: true,
                                    progressAnimation: 'increasing'
                                });
                                this.ngOnInit();
                            }
                            else {
                                this.orderManagement = JSON.parse(JSON.stringify(data));
                                this.orderManagementService.saveOrder(this.orderManagement)
                                    .subscribe((data) => {
                                    this.orderManagement = JSON.parse(JSON.stringify(data));
                                    if (this.orderManagement.orderId != 0) {
                                        this.onValidateOrder();
                                    }
                                });
                            }
                        });
                    }
                    else {
                        this.toastr.error('Vendor validation unsuccessful! Insufficient balance', 'Order Processing', {
                            timeOut: 10000,
                            positionClass: 'toast-top-center',
                            progressBar: true,
                            progressAnimation: 'increasing'
                        });
                    }
                });
            });
    }
    onSubmit() {
        this.authService.validateRegistrationOtp(this.otp, this.orderManagement.user.email).subscribe(data => {
            if (data == "valid") {
                this.authService.generateRegistrationOtp(this.orderManagement.user.userName);
                this.orderProcess.orderManagement = this.orderManagement;
                this.orderProcess.markedForDeliveryYn = true;
                this.orderProcess.deliveredProduct = this.product;
                this.orderProcess.deliveredQuantity = this.orderManagement.totalQuantity;
                this.orderProcessingStatusManagementService.updateOrderProcessingStatusManagement(this.orderProcess)
                    .subscribe((data) => {
                    this.orderProcess = data;
                    this.pageIterator++;
                });
            }
        });
    }
    onQuanity() {
        if (this.orderManagement.totalQuantity > this.remainingQuantity) {
            this.orderManagement.totalQuantity = this.remainingQuantity;
            this.toastr.error('You Can not Enter More Quantity', 'Order Processing', {
                timeOut: 10000,
                positionClass: 'toast-top-center',
                progressBar: true,
                progressAnimation: 'increasing'
            });
        }
    }
    onBackClick() {
        this.pageIterator--;
    }
    onClickBack() {
        this.pageIterator--;
    }
    onPocessed() {
        this.pageIterator++;
    }
    ondetailsBack() {
        this.pageIterator--;
    }
    onclickorder() {
        this.pageIterator--;
    }
};
OrderprocessingComponent.ctorParameters = () => [
    { type: src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_8__["AuthService"] },
    { type: src_app_services_order_processing_status_management_service__WEBPACK_IMPORTED_MODULE_2__["OrderProcessingStatusManagementService"] },
    { type: src_app_services_order_management_service__WEBPACK_IMPORTED_MODULE_5__["OrderManagementService"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_9__["ToastrService"] },
    { type: src_app_services_equipment_service__WEBPACK_IMPORTED_MODULE_10__["EquipmentService"] },
    { type: src_app_services_warehouse_service__WEBPACK_IMPORTED_MODULE_11__["WarehouseService"] },
    { type: src_app_services_pre_order_management_service__WEBPACK_IMPORTED_MODULE_12__["PreOrderManagementService"] },
    { type: src_app_services_payment_service__WEBPACK_IMPORTED_MODULE_14__["PaymentService"] },
    { type: src_app_services_master_paramters_service__WEBPACK_IMPORTED_MODULE_15__["MasterParamtersService"] }
];
OrderprocessingComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-orderprocessing',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./orderprocessing.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/warehouse-user/orderprocessing/orderprocessing.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./orderprocessing.component.css */ "./src/app/warehouse-user/orderprocessing/orderprocessing.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_8__["AuthService"],
        src_app_services_order_processing_status_management_service__WEBPACK_IMPORTED_MODULE_2__["OrderProcessingStatusManagementService"],
        src_app_services_order_management_service__WEBPACK_IMPORTED_MODULE_5__["OrderManagementService"],
        ngx_toastr__WEBPACK_IMPORTED_MODULE_9__["ToastrService"],
        src_app_services_equipment_service__WEBPACK_IMPORTED_MODULE_10__["EquipmentService"],
        src_app_services_warehouse_service__WEBPACK_IMPORTED_MODULE_11__["WarehouseService"],
        src_app_services_pre_order_management_service__WEBPACK_IMPORTED_MODULE_12__["PreOrderManagementService"],
        src_app_services_payment_service__WEBPACK_IMPORTED_MODULE_14__["PaymentService"],
        src_app_services_master_paramters_service__WEBPACK_IMPORTED_MODULE_15__["MasterParamtersService"]])
], OrderprocessingComponent);



/***/ }),

/***/ "./src/app/warehouse-user/process-order/process-order.component.css":
/*!**************************************************************************!*\
  !*** ./src/app/warehouse-user/process-order/process-order.component.css ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\nb.head {\r\n    color: red;\r\n    font-size: initial;\r\n}\r\n.card.card-cascade.narrower.body-section {\r\n    margin-top: 13px;\r\n}\r\n/* summary Css */\r\n.badge-secondary  {\r\n    width: 100%;\r\n    height: 50px;\r\n    margin:4px;\r\n}\r\np.summary {\r\n    margin-top: 12px;\r\n    font-size: large;\r\n    font-weight: bold;\r\n    color: #ffffff !important;\r\n}\r\nlabel {\r\n    margin-top: 10px;\r\n    font-size: initial;\r\n    font-weight: bold;\r\n}\r\nh4.filter {\r\n    font-weight: bold;\r\n    margin-top: 10px;\r\n}\r\n.form-row.t2 {\r\n    margin-left: 22px;\r\n}\r\n.row.t3 {\r\n    margin-left: 10px;\r\n    margin-right: 10px;\r\n}\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n}\r\n/*  */\r\n.input-vendor {\r\n    height: 50px;\r\n    background: #ebf4f9;\r\n}\r\n.card-body.vendor{\r\n    padding-right: 3rem;\r\n    padding-left: 3rem;\r\n}\r\ndiv#vendorrow {\r\n    padding-top: 0.5rem;\r\n}\r\nselect.form-control:not([size]):not([multiple]) {\r\n    height: 50px;\r\n    background-color:#ebf4f9; ;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvd2FyZWhvdXNlLXVzZXIvcHJvY2Vzcy1vcmRlci9wcm9jZXNzLW9yZGVyLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0lBQ0ksVUFBVTtJQUNWLGtCQUFrQjtBQUN0QjtBQUNBO0lBQ0ksZ0JBQWdCO0FBQ3BCO0FBQ0EsZ0JBQWdCO0FBQ2hCO0lBQ0ksV0FBVztJQUNYLFlBQVk7SUFDWixVQUFVO0FBQ2Q7QUFFQTtJQUNJLGdCQUFnQjtJQUNoQixnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLHlCQUF5QjtBQUM3QjtBQUNBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGtCQUFrQjtJQUNsQixpQkFBaUI7QUFDckI7QUFDQTtJQUNJLGlCQUFpQjtJQUNqQixnQkFBZ0I7QUFDcEI7QUFDQTtJQUNJLGlCQUFpQjtBQUNyQjtBQUNBO0lBQ0ksaUJBQWlCO0lBQ2pCLGtCQUFrQjtBQUN0QjtBQUVBO0lBQ0ksb0JBQW9CO0lBQ3BCLGVBQWU7SUFDZixpQkFBaUI7QUFDckI7QUFDRSxLQUFLO0FBRUw7SUFDRSxZQUFZO0lBQ1osbUJBQW1CO0FBQ3ZCO0FBQ0E7SUFDSSxtQkFBbUI7SUFDbkIsa0JBQWtCO0FBQ3RCO0FBRUE7SUFDSSxtQkFBbUI7QUFDdkI7QUFFQTtJQUNJLFlBQVk7SUFDWix3QkFBd0I7QUFDNUIiLCJmaWxlIjoic3JjL2FwcC93YXJlaG91c2UtdXNlci9wcm9jZXNzLW9yZGVyL3Byb2Nlc3Mtb3JkZXIuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5iLmhlYWQge1xyXG4gICAgY29sb3I6IHJlZDtcclxuICAgIGZvbnQtc2l6ZTogaW5pdGlhbDtcclxufVxyXG4uY2FyZC5jYXJkLWNhc2NhZGUubmFycm93ZXIuYm9keS1zZWN0aW9uIHtcclxuICAgIG1hcmdpbi10b3A6IDEzcHg7XHJcbn1cclxuLyogc3VtbWFyeSBDc3MgKi9cclxuLmJhZGdlLXNlY29uZGFyeSAge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDUwcHg7XHJcbiAgICBtYXJnaW46NHB4O1xyXG59XHJcblxyXG5wLnN1bW1hcnkge1xyXG4gICAgbWFyZ2luLXRvcDogMTJweDtcclxuICAgIGZvbnQtc2l6ZTogbGFyZ2U7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIGNvbG9yOiAjZmZmZmZmICFpbXBvcnRhbnQ7XHJcbn1cclxubGFiZWwge1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxuICAgIGZvbnQtc2l6ZTogaW5pdGlhbDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcbmg0LmZpbHRlciB7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIG1hcmdpbi10b3A6IDEwcHg7XHJcbn1cclxuLmZvcm0tcm93LnQyIHtcclxuICAgIG1hcmdpbi1sZWZ0OiAyMnB4O1xyXG59XHJcbi5yb3cudDMge1xyXG4gICAgbWFyZ2luLWxlZnQ6IDEwcHg7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XHJcbn1cclxuXHJcbi5idG4uYnRuLWxnIHtcclxuICAgIHBhZGRpbmc6IDFyZW0gMi40cmVtO1xyXG4gICAgZm9udC1zaXplOiAxN3B4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuICAvKiAgKi9cclxuICBcclxuICAuaW5wdXQtdmVuZG9yIHtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIGJhY2tncm91bmQ6ICNlYmY0Zjk7XHJcbn1cclxuLmNhcmQtYm9keS52ZW5kb3J7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAzcmVtO1xyXG4gICAgcGFkZGluZy1sZWZ0OiAzcmVtO1xyXG59XHJcblxyXG5kaXYjdmVuZG9ycm93IHtcclxuICAgIHBhZGRpbmctdG9wOiAwLjVyZW07XHJcbn1cclxuXHJcbnNlbGVjdC5mb3JtLWNvbnRyb2w6bm90KFtzaXplXSk6bm90KFttdWx0aXBsZV0pIHtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6I2ViZjRmOTsgO1xyXG59Il19 */");

/***/ }),

/***/ "./src/app/warehouse-user/process-order/process-order.component.ts":
/*!*************************************************************************!*\
  !*** ./src/app/warehouse-user/process-order/process-order.component.ts ***!
  \*************************************************************************/
/*! exports provided: ProcessOrderComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProcessOrderComponent", function() { return ProcessOrderComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_services_order_processing_status_management_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/order-processing-status-management.service */ "./src/app/services/order-processing-status-management.service.ts");
/* harmony import */ var src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/auth.service */ "./src/app/services/auth.service.ts");
/* harmony import */ var src_app_model_select__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/model/select */ "./src/app/model/select.ts");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");






let ProcessOrderComponent = class ProcessOrderComponent {
    constructor(authService, orderProcessingStatusManagementService, toastr) {
        this.authService = authService;
        this.orderProcessingStatusManagementService = orderProcessingStatusManagementService;
        this.toastr = toastr;
        this.ranges = new Array();
        this.range = "-1";
        this.date = new Date("01/01/2018");
        this.date1 = new Date();
    }
    ngOnInit() {
        this.orderProcessingStatusManagementService.getOrderProcessingStatusManagementForLoggedInWarehouseUser()
            .subscribe((data) => {
            if (data != null) {
                this.orderProcessingList = data;
                this.userType = null;
                this.productName = null;
                this.oldOrderProcessingList = this.orderProcessingList;
                this.corporateList = new Array();
                this.corporateList.push("All Users");
                this.corporateList.push("End Users");
                this.selectedProduct = new Array();
                for (let o of this.orderProcessingList) {
                    this.selectedProduct.push(o.orderManagement.masterProducts.productName);
                    if (o.orderManagement.user.organisationId != null && o.orderManagement.user.organisationId != 0) {
                        this.corporateList.push(o.orderManagement.user.masterOrganisation.organisationName);
                    }
                }
                let unique1 = this.corporateList.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.corporateList = unique1;
                unique1 = this.selectedProduct.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
                this.selectedProduct = unique1;
                this.customDate = false;
                this.range = -1;
                this.populateRange();
            }
            this.iteration = "viewAllProcessedOrders";
        });
    }
    onUserType() {
        if (this.userType != null) {
            this.page = 1;
            this.orderProcessingList = this.oldOrderProcessingList;
            this.range = -1;
            this.customDate = false;
            this.productName = null;
            this.selectedProduct = new Array();
            this.newOrderProcessingList = new Array();
            if (this.userType == "All Users") {
                this.newOrderProcessingList = this.oldOrderProcessingList;
                for (let o of this.orderProcessingList) {
                    this.selectedProduct.push(o.orderManagement.masterProducts.productName);
                }
            }
            if (this.userType == "End Users") {
                for (let o of this.orderProcessingList) {
                    if (o.orderManagement.user.organisationId == null || o.orderManagement.user.organisationId == 0) {
                        this.newOrderProcessingList.push(o);
                        this.selectedProduct.push(o.orderManagement.masterProducts.productName);
                    }
                }
            }
            if (this.userType != "All User" && this.userType != "End Users") {
                for (let o of this.orderProcessingList) {
                    if (o.orderManagement.user.organisationId != null && o.orderManagement.user.organisationId != 0) {
                        if (o.orderManagement.user.masterOrganisation.organisationName == this.userType) {
                            this.newOrderProcessingList.push(o);
                            this.selectedProduct.push(o.orderManagement.masterProducts.productName);
                        }
                    }
                }
            }
            this.orderProcessingList = this.newOrderProcessingList;
            this.orderProcessingListUserFiltered = new Array();
            this.orderProcessingListUserFiltered = this.newOrderProcessingList;
            let unique1 = this.selectedProduct.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
            this.selectedProduct = unique1;
        }
    }
    onProduct() {
        if (this.orderProcessingListDateFiltered != null && this.range != -1) {
            this.orderProcessingList = this.orderProcessingListDateFiltered;
        }
        else if (this.orderProcessingListUserFiltered != null && this.userType != null) {
            this.orderProcessingList = this.orderProcessingListUserFiltered;
        }
        else if (this.orderProcessingListDateFiltered == null && this.orderProcessingListUserFiltered == null) {
            this.orderProcessingList = this.oldOrderProcessingList;
        }
        if (this.productName != null) {
            this.newOrderProcessingList = new Array();
            for (let o of this.orderProcessingList) {
                if (o.orderManagement.masterProducts.productName == this.productName) {
                    this.newOrderProcessingList.push(o);
                }
            }
            this.orderProcessingList = this.newOrderProcessingList;
        }
    }
    onClick(o) {
        this.orderProcess = o;
        this.iteration = 'otp';
    }
    onClickBack() {
        this.ngOnInit();
    }
    onSubmit() {
        this.authService.validateRegistrationOtp(this.otp, this.orderProcess.orderManagement.user.email).subscribe(data => {
            if (data == "valid") {
                console.log(this.orderProcess.orderManagement.user.userName);
                this.authService.generateRegistrationOtp(this.orderProcess.orderManagement.user.userName);
                this.orderProcess.markedForDeliveryYn = true;
                this.orderProcessingStatusManagementService.updateOrderProcessingStatusManagement(this.orderProcess)
                    .subscribe((data) => {
                    console.log(data);
                    this.orderProcess = JSON.parse(JSON.stringify(data));
                    this.iteration = "summaryPage";
                });
            }
        });
    }
    populateRange() {
        let range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_4__["Select"];
        range.id = "1";
        range.value = "Custom Range";
        this.ranges[0] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_4__["Select"];
        range.id = "2";
        range.value = "15 Days";
        this.ranges[1] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_4__["Select"];
        range.id = "3";
        range.value = "Current Month";
        this.ranges[2] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_4__["Select"];
        range.id = "4";
        range.value = "3 Months";
        this.ranges[3] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_4__["Select"];
        range.id = "5";
        range.value = "6 Months";
        this.ranges[4] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_4__["Select"];
        range.id = "6";
        range.value = "1 Year";
        this.ranges[5] = range;
    }
    onSelect() {
        if (this.range != "-1") {
            if (this.range == "1") {
                this.customDate = true;
            }
            else {
                this.customDate = false;
            }
            this.filterList(this.range);
        }
    }
    onDateChange() {
        if (this.date != undefined && this.date1 != undefined) {
            if (this.date < this.date1 || this.date == this.date1) {
                this.filterList("1");
            }
            else {
                this.toastr.error('Please Select Valid Date Range', '', {
                    timeOut: 10000,
                    positionClass: 'toast-top-center',
                    progressBar: true,
                });
            }
        }
    }
    filterList(option) {
        if (this.orderProcessingListUserFiltered != null) {
            this.orderProcessingList = this.orderProcessingListUserFiltered;
        }
        else {
            this.orderProcessingList = this.oldOrderProcessingList;
        }
        this.newOrderProcessingList = new Array();
        this.productName = null;
        this.selectedProduct = new Array();
        let startDate = new Date();
        let endDate = new Date();
        if (option == "1") {
            startDate = this.date;
            endDate = this.date1;
        }
        else if (option == "2") {
            startDate.setDate(endDate.getDate() - 15);
        }
        else if (option == "3") {
            startDate.setDate(endDate.getDate() - 30);
        }
        else if (option == "4") {
            startDate.setDate(endDate.getDate() - 90);
        }
        else if (option == "5") {
            startDate.setDate(endDate.getDate() - 180);
        }
        else if (option == "6") {
            startDate.setDate(endDate.getDate() - 360);
        }
        console.log(startDate);
        for (let o of this.orderProcessingList) {
            let dt = new Date(o.orderProcessedDate);
            if (dt >= startDate && dt <= endDate) {
                this.newOrderProcessingList.push(o);
                this.selectedProduct.push(o.orderManagement.masterProducts.productName);
            }
        }
        let unique1 = this.selectedProduct.filter((item2, i2, ar2) => ar2.indexOf(item2) === i2);
        this.selectedProduct = unique1;
        this.orderProcessingList = this.newOrderProcessingList;
        this.orderProcessingListDateFiltered = this.newOrderProcessingList;
    }
};
ProcessOrderComponent.ctorParameters = () => [
    { type: src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_3__["AuthService"] },
    { type: src_app_services_order_processing_status_management_service__WEBPACK_IMPORTED_MODULE_2__["OrderProcessingStatusManagementService"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_5__["ToastrService"] }
];
ProcessOrderComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-process-order',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./process-order.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/warehouse-user/process-order/process-order.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./process-order.component.css */ "./src/app/warehouse-user/process-order/process-order.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_auth_service__WEBPACK_IMPORTED_MODULE_3__["AuthService"], src_app_services_order_processing_status_management_service__WEBPACK_IMPORTED_MODULE_2__["OrderProcessingStatusManagementService"],
        ngx_toastr__WEBPACK_IMPORTED_MODULE_5__["ToastrService"]])
], ProcessOrderComponent);



/***/ }),

/***/ "./src/app/warehouse-user/reconcilation-warehouse/reconcilation-warehouse.component.css":
/*!**********************************************************************************************!*\
  !*** ./src/app/warehouse-user/reconcilation-warehouse/reconcilation-warehouse.component.css ***!
  \**********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\nb.head {\r\n    color: red;\r\n    font-size: initial;\r\n}\r\n.card.card-cascade.narrower.body-section {\r\n    margin-top: 15px;\r\n}\r\nlabel {\r\n    margin-top: 10px;\r\n    font-size: initial;\r\n    font-weight: bold;\r\n}\r\nh4.filter {\r\n    font-weight: bold;\r\n    margin-top: 10px;\r\n}\r\n.row.t3 {\r\n    margin-left: 11px;\r\n}\r\n.form-group.row.filter {\r\n    margin-left: 10px;\r\n    margin-right: 10px;\r\n}\r\n.btn.btn-lg {\r\n    padding: 1rem 2.4rem;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n}\r\n/*  */\r\n.input-vendor {\r\n    height: 50px;\r\n    background: #ebf4f9;\r\n}\r\n.card-body.vendor{\r\n    padding-right: 3rem;\r\n    padding-left: 3rem;\r\n}\r\ndiv#vendorrow {\r\n    padding-top: 0.5rem;\r\n}\r\nselect.form-control:not([size]):not([multiple]) {\r\n    height: 50px;\r\n    background-color:#ebf4f9; ;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvd2FyZWhvdXNlLXVzZXIvcmVjb25jaWxhdGlvbi13YXJlaG91c2UvcmVjb25jaWxhdGlvbi13YXJlaG91c2UuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0E7SUFDSSxVQUFVO0lBQ1Ysa0JBQWtCO0FBQ3RCO0FBQ0E7SUFDSSxnQkFBZ0I7QUFDcEI7QUFDQTtJQUNJLGdCQUFnQjtJQUNoQixrQkFBa0I7SUFDbEIsaUJBQWlCO0FBQ3JCO0FBQ0E7SUFDSSxpQkFBaUI7SUFDakIsZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxpQkFBaUI7QUFDckI7QUFDQTtJQUNJLGlCQUFpQjtJQUNqQixrQkFBa0I7QUFDdEI7QUFDQTtJQUNJLG9CQUFvQjtJQUNwQixlQUFlO0lBQ2YsaUJBQWlCO0FBQ3JCO0FBQ0UsS0FBSztBQUVMO0lBQ0UsWUFBWTtJQUNaLG1CQUFtQjtBQUN2QjtBQUNBO0lBQ0ksbUJBQW1CO0lBQ25CLGtCQUFrQjtBQUN0QjtBQUVBO0lBQ0ksbUJBQW1CO0FBQ3ZCO0FBRUE7SUFDSSxZQUFZO0lBQ1osd0JBQXdCO0FBQzVCIiwiZmlsZSI6InNyYy9hcHAvd2FyZWhvdXNlLXVzZXIvcmVjb25jaWxhdGlvbi13YXJlaG91c2UvcmVjb25jaWxhdGlvbi13YXJlaG91c2UuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5iLmhlYWQge1xyXG4gICAgY29sb3I6IHJlZDtcclxuICAgIGZvbnQtc2l6ZTogaW5pdGlhbDtcclxufVxyXG4uY2FyZC5jYXJkLWNhc2NhZGUubmFycm93ZXIuYm9keS1zZWN0aW9uIHtcclxuICAgIG1hcmdpbi10b3A6IDE1cHg7XHJcbn1cclxubGFiZWwge1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxuICAgIGZvbnQtc2l6ZTogaW5pdGlhbDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcbmg0LmZpbHRlciB7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIG1hcmdpbi10b3A6IDEwcHg7XHJcbn1cclxuLnJvdy50MyB7XHJcbiAgICBtYXJnaW4tbGVmdDogMTFweDtcclxufVxyXG4uZm9ybS1ncm91cC5yb3cuZmlsdGVyIHtcclxuICAgIG1hcmdpbi1sZWZ0OiAxMHB4O1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xyXG59XHJcbi5idG4uYnRuLWxnIHtcclxuICAgIHBhZGRpbmc6IDFyZW0gMi40cmVtO1xyXG4gICAgZm9udC1zaXplOiAxN3B4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuICAvKiAgKi9cclxuICBcclxuICAuaW5wdXQtdmVuZG9yIHtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIGJhY2tncm91bmQ6ICNlYmY0Zjk7XHJcbn1cclxuLmNhcmQtYm9keS52ZW5kb3J7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAzcmVtO1xyXG4gICAgcGFkZGluZy1sZWZ0OiAzcmVtO1xyXG59XHJcblxyXG5kaXYjdmVuZG9ycm93IHtcclxuICAgIHBhZGRpbmctdG9wOiAwLjVyZW07XHJcbn1cclxuXHJcbnNlbGVjdC5mb3JtLWNvbnRyb2w6bm90KFtzaXplXSk6bm90KFttdWx0aXBsZV0pIHtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6I2ViZjRmOTsgO1xyXG59Il19 */");

/***/ }),

/***/ "./src/app/warehouse-user/reconcilation-warehouse/reconcilation-warehouse.component.ts":
/*!*********************************************************************************************!*\
  !*** ./src/app/warehouse-user/reconcilation-warehouse/reconcilation-warehouse.component.ts ***!
  \*********************************************************************************************/
/*! exports provided: ReconcilationWarehouseComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReconcilationWarehouseComponent", function() { return ReconcilationWarehouseComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_model_select__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/model/select */ "./src/app/model/select.ts");
/* harmony import */ var src_app_services_end_user_recconcilation_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/end-user-recconcilation.service */ "./src/app/services/end-user-recconcilation.service.ts");




let ReconcilationWarehouseComponent = class ReconcilationWarehouseComponent {
    constructor(reconcilationService) {
        this.reconcilationService = reconcilationService;
        this.date = new Date("01/01/2018");
        this.date1 = new Date();
        this.ranges = new Array();
    }
    ngOnInit() {
        this.customDate = false;
        this.populateRange();
        this.reconcilationService.getVendorReconcilationForLoggedInWarehouseUser()
            .subscribe((data) => {
            this.reconciliation = data;
            this.warehouseList = new Array();
            this.productList = new Array();
            for (let r of this.reconciliation) {
                this.warehouseList.push(r.warehouse.warehouseName);
                this.productList.push(r.orderedProduct);
            }
            this.oldReconciliation = Array();
            this.oldReconciliation = this.reconciliation;
            let unique = this.warehouseList.filter((item, i, ar) => ar.indexOf(item) === i);
            this.warehouseList = unique;
            let unique1 = this.productList.filter((item, i, ar) => ar.indexOf(item) === i);
            this.productList = unique1;
            this.range = -1;
            this.interation = 'initial';
        });
    }
    populateRange() {
        let range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_2__["Select"];
        range.id = "1";
        range.value = "Custom Range";
        this.ranges[0] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_2__["Select"];
        range.id = "2";
        range.value = "15 Days";
        this.ranges[1] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_2__["Select"];
        range.id = "3";
        range.value = "Current Month";
        this.ranges[2] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_2__["Select"];
        range.id = "4";
        range.value = "3 Months";
        this.ranges[3] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_2__["Select"];
        range.id = "5";
        range.value = "6 Months";
        this.ranges[4] = range;
        range = new src_app_model_select__WEBPACK_IMPORTED_MODULE_2__["Select"];
        range.id = "6";
        range.value = "1 Year";
        this.ranges[5] = range;
    }
    // on change Vendor 
    onSelectVendor() {
        this.reconciliation = this.oldReconciliation;
        if (this.warehouseName != null) {
            this.page = 1;
            this.newReconciliation = new Array();
            this.productList = new Array();
            for (let r of this.reconciliation) {
                if (r.warehouse.warehouseName == this.warehouseName) {
                    this.newReconciliation.push(r);
                    this.productList.push(r.orderedProduct);
                }
            }
            let unique1 = this.productList.filter((item, i, ar) => ar.indexOf(item) === i);
            this.productList = unique1;
            this.reconciliation = this.newReconciliation;
            this.reconcilationListVendorFiltered = new Array();
            this.reconcilationListVendorFiltered = this.newReconciliation;
        }
        if (this.productName != null) {
            this.newReconciliation = new Array();
            for (let r of this.reconciliation) {
                if (r.orderedProduct == this.productName) {
                    this.newReconciliation.push(r);
                }
            }
            this.reconciliation = this.newReconciliation;
            this.reconcilationListVendorFiltered = new Array();
            this.reconcilationListVendorFiltered = this.newReconciliation;
        }
    }
    // on select Date Range
    onSelectRangeForVendor() {
        if (this.range != "-1") {
            if (this.range == "1") {
                this.customDate = true;
            }
            else {
                this.customDate = false;
            }
            this.filterListForVendorRecon(this.range);
        }
    }
    filterListForVendorRecon(option) {
        if (this.reconcilationListVendorFiltered != null) {
            this.reconciliation = this.reconcilationListVendorFiltered;
        }
        if (this.reconcilationListVendorFiltered == null) {
            this.reconciliation = this.oldReconciliation;
        }
        this.newReconciliation = new Array();
        let startDate = new Date();
        let endDate = new Date();
        if (option == "1") {
            startDate = this.date;
            endDate = this.date1;
        }
        else if (option == "2") {
            startDate.setDate(endDate.getDate() - 15);
        }
        else if (option == "3") {
            startDate.setDate(endDate.getDate() - 30);
        }
        else if (option == "4") {
            startDate.setDate(endDate.getDate() - 90);
        }
        else if (option == "5") {
            startDate.setDate(endDate.getDate() - 180);
        }
        else if (option == "6") {
            startDate.setDate(endDate.getDate() - 360);
        }
        console.log(startDate);
        for (let r of this.reconciliation) {
            let dt = new Date(r.reconciliationDate);
            if (dt >= startDate && dt <= endDate) {
                this.newReconciliation.push(r);
            }
        }
        this.reconciliation = this.newReconciliation;
    }
    // on change Date
    onDateChangeForVendorRecon() {
        this.filterListForVendorRecon("1");
    }
};
ReconcilationWarehouseComponent.ctorParameters = () => [
    { type: src_app_services_end_user_recconcilation_service__WEBPACK_IMPORTED_MODULE_3__["EndUserRecconcilationService"] }
];
ReconcilationWarehouseComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-reconcilation-warehouse',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./reconcilation-warehouse.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/warehouse-user/reconcilation-warehouse/reconcilation-warehouse.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./reconcilation-warehouse.component.css */ "./src/app/warehouse-user/reconcilation-warehouse/reconcilation-warehouse.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_services_end_user_recconcilation_service__WEBPACK_IMPORTED_MODULE_3__["EndUserRecconcilationService"]])
], ReconcilationWarehouseComponent);



/***/ }),

/***/ "./src/app/warehouse-user/reports/reports.component.css":
/*!**************************************************************!*\
  !*** ./src/app/warehouse-user/reports/reports.component.css ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (".btn-primary {\r\n    color: black;\r\n    background-color: deepskyblue;\r\n    border-color: deepskyblue;\r\n    width: 100%;\r\n    height: 58px;\r\n    margin: 4px;\r\n}\r\n\r\n/* report */\r\n\r\n.project-tab {\r\n    padding: 10%;\r\n    margin-top: -8%;\r\n}\r\n\r\n.project-tab #tabs{\r\n    background: #007b5e;\r\n    color: #eee;\r\n}\r\n\r\n.project-tab #tabs h6.section-title{\r\n    color: #eee;\r\n}\r\n\r\n.project-tab #tabs .nav-tabs .nav-item.show .nav-link, .nav-tabs .nav-link.active {\r\n    color: #0062cc;\r\n    background-color: transparent;\r\n    border-color: transparent transparent #f3f3f3;\r\n    border-bottom: 3px solid !important;\r\n    font-size: 16px;\r\n    font-weight: bold;\r\n}\r\n\r\n.project-tab .nav-link {\r\n    border: 1px solid transparent;\r\n    border-top-left-radius: .25rem;\r\n    border-top-right-radius: .25rem;\r\n    color: #0062cc;\r\n    font-size: 16px;\r\n    font-weight: 600;\r\n}\r\n\r\n.project-tab .nav-link:hover {\r\n    border: none;\r\n}\r\n\r\n.project-tab thead{\r\n    background: #f3f3f3;\r\n    color: #333;\r\n}\r\n\r\n.project-tab a{\r\n    text-decoration: none;\r\n    color: #333;\r\n    font-weight: 600;\r\n}\r\n\r\n.container {\r\n\r\n    margin-top: 31px;\r\n}\r\n\r\n.bar-image {\r\n    margin-top: 20px;\r\n}\r\n\r\n/* table */\r\n\r\n.table-responsive\r\n{\r\n    margin-top:20px;\r\n}\r\n\r\n.btn-info\r\n{\r\n    margin: 3px;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvd2FyZWhvdXNlLXVzZXIvcmVwb3J0cy9yZXBvcnRzLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxZQUFZO0lBQ1osNkJBQTZCO0lBQzdCLHlCQUF5QjtJQUN6QixXQUFXO0lBQ1gsWUFBWTtJQUNaLFdBQVc7QUFDZjs7QUFFQSxXQUFXOztBQUNYO0lBQ0ksWUFBWTtJQUNaLGVBQWU7QUFDbkI7O0FBQ0E7SUFDSSxtQkFBbUI7SUFDbkIsV0FBVztBQUNmOztBQUNBO0lBQ0ksV0FBVztBQUNmOztBQUNBO0lBQ0ksY0FBYztJQUNkLDZCQUE2QjtJQUM3Qiw2Q0FBNkM7SUFDN0MsbUNBQW1DO0lBQ25DLGVBQWU7SUFDZixpQkFBaUI7QUFDckI7O0FBQ0E7SUFDSSw2QkFBNkI7SUFDN0IsOEJBQThCO0lBQzlCLCtCQUErQjtJQUMvQixjQUFjO0lBQ2QsZUFBZTtJQUNmLGdCQUFnQjtBQUNwQjs7QUFDQTtJQUNJLFlBQVk7QUFDaEI7O0FBQ0E7SUFDSSxtQkFBbUI7SUFDbkIsV0FBVztBQUNmOztBQUNBO0lBQ0kscUJBQXFCO0lBQ3JCLFdBQVc7SUFDWCxnQkFBZ0I7QUFDcEI7O0FBRUE7O0lBRUksZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksZ0JBQWdCO0FBQ3BCOztBQUNBLFVBQVU7O0FBRVY7O0lBRUksZUFBZTtBQUNuQjs7QUFDQTs7SUFFSSxXQUFXO0FBQ2YiLCJmaWxlIjoic3JjL2FwcC93YXJlaG91c2UtdXNlci9yZXBvcnRzL3JlcG9ydHMuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5idG4tcHJpbWFyeSB7XHJcbiAgICBjb2xvcjogYmxhY2s7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBkZWVwc2t5Ymx1ZTtcclxuICAgIGJvcmRlci1jb2xvcjogZGVlcHNreWJsdWU7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGhlaWdodDogNThweDtcclxuICAgIG1hcmdpbjogNHB4O1xyXG59XHJcblxyXG4vKiByZXBvcnQgKi9cclxuLnByb2plY3QtdGFiIHtcclxuICAgIHBhZGRpbmc6IDEwJTtcclxuICAgIG1hcmdpbi10b3A6IC04JTtcclxufVxyXG4ucHJvamVjdC10YWIgI3RhYnN7XHJcbiAgICBiYWNrZ3JvdW5kOiAjMDA3YjVlO1xyXG4gICAgY29sb3I6ICNlZWU7XHJcbn1cclxuLnByb2plY3QtdGFiICN0YWJzIGg2LnNlY3Rpb24tdGl0bGV7XHJcbiAgICBjb2xvcjogI2VlZTtcclxufVxyXG4ucHJvamVjdC10YWIgI3RhYnMgLm5hdi10YWJzIC5uYXYtaXRlbS5zaG93IC5uYXYtbGluaywgLm5hdi10YWJzIC5uYXYtbGluay5hY3RpdmUge1xyXG4gICAgY29sb3I6ICMwMDYyY2M7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcclxuICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgI2YzZjNmMztcclxuICAgIGJvcmRlci1ib3R0b206IDNweCBzb2xpZCAhaW1wb3J0YW50O1xyXG4gICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuLnByb2plY3QtdGFiIC5uYXYtbGluayB7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcclxuICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IC4yNXJlbTtcclxuICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAuMjVyZW07XHJcbiAgICBjb2xvcjogIzAwNjJjYztcclxuICAgIGZvbnQtc2l6ZTogMTZweDtcclxuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbn1cclxuLnByb2plY3QtdGFiIC5uYXYtbGluazpob3ZlciB7XHJcbiAgICBib3JkZXI6IG5vbmU7XHJcbn1cclxuLnByb2plY3QtdGFiIHRoZWFke1xyXG4gICAgYmFja2dyb3VuZDogI2YzZjNmMztcclxuICAgIGNvbG9yOiAjMzMzO1xyXG59XHJcbi5wcm9qZWN0LXRhYiBhe1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gICAgY29sb3I6ICMzMzM7XHJcbiAgICBmb250LXdlaWdodDogNjAwO1xyXG59XHJcblxyXG4uY29udGFpbmVyIHtcclxuXHJcbiAgICBtYXJnaW4tdG9wOiAzMXB4O1xyXG59XHJcblxyXG4uYmFyLWltYWdlIHtcclxuICAgIG1hcmdpbi10b3A6IDIwcHg7XHJcbn1cclxuLyogdGFibGUgKi9cclxuXHJcbi50YWJsZS1yZXNwb25zaXZlXHJcbntcclxuICAgIG1hcmdpbi10b3A6MjBweDtcclxufVxyXG4uYnRuLWluZm9cclxue1xyXG4gICAgbWFyZ2luOiAzcHg7XHJcbn0iXX0= */");

/***/ }),

/***/ "./src/app/warehouse-user/reports/reports.component.ts":
/*!*************************************************************!*\
  !*** ./src/app/warehouse-user/reports/reports.component.ts ***!
  \*************************************************************/
/*! exports provided: ReportsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReportsComponent", function() { return ReportsComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let ReportsComponent = class ReportsComponent {
    constructor() { }
    ngOnInit() {
    }
    toggleDetails() {
        this.showDetails = !this.showDetails;
    }
};
ReportsComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-reports',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./reports.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/warehouse-user/reports/reports.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./reports.component.css */ "./src/app/warehouse-user/reports/reports.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], ReportsComponent);



/***/ }),

/***/ "./src/environments/environment.ts":
/*!*****************************************!*\
  !*** ./src/environments/environment.ts ***!
  \*****************************************/
/*! exports provided: environment */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "environment", function() { return environment; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
// This file can be replaced during build by using the `fileReplacements` array.
// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.
// The list of file replacements can be found in `angular.json`.

const environment = {
    production: false
};
/*
 * For easier debugging in development mode, you can import the following file
 * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
 *
 * This import should be commented out in production mode because it will have a negative impact
 * on performance if an error is thrown.
 */
// import 'zone.js/dist/zone-error';  // Included with Angular CLI.


/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var hammerjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! hammerjs */ "./node_modules/hammerjs/hammer.js");
/* harmony import */ var hammerjs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(hammerjs__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/platform-browser-dynamic */ "./node_modules/@angular/platform-browser-dynamic/fesm2015/platform-browser-dynamic.js");
/* harmony import */ var _app_app_module__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./app/app.module */ "./src/app/app.module.ts");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./environments/environment */ "./src/environments/environment.ts");






if (_environments_environment__WEBPACK_IMPORTED_MODULE_5__["environment"].production) {
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["enableProdMode"])();
}
Object(_angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_3__["platformBrowserDynamic"])().bootstrapModule(_app_app_module__WEBPACK_IMPORTED_MODULE_4__["AppModule"])
    .catch(err => console.error(err));


/***/ }),

/***/ 0:
/*!**********************************************************************************************************!*\
  !*** multi (webpack)-dev-server/client?http://0.0.0.0:0/sockjs-node&sockPath=/sockjs-node ./src/main.ts ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! C:\onlinestore\node_modules\webpack-dev-server\client\index.js?http://0.0.0.0:0/sockjs-node&sockPath=/sockjs-node */"./node_modules/webpack-dev-server/client/index.js?http://0.0.0.0:0/sockjs-node&sockPath=/sockjs-node");
module.exports = __webpack_require__(/*! C:\onlinestore\src\main.ts */"./src/main.ts");


/***/ })

},[[0,"runtime","vendor"]]]);
//# sourceMappingURL=main.js.map</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
      <TcpPackets>
        <PacketInfo time="620488187" offset="0" length="257" />
        <PacketInfo time="620488203" offset="257" length="2766282" />
      </TcpPackets>
    </HTTPResponse>
  </HTTPTask>
</HTTPSnapshot>